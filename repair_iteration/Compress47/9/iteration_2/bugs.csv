bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.get  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.get  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.get	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.getValue()))    {    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
2	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.get  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.get  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.get	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.getValue()))    {    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
3	[BUG]  [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.get  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.get  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.get	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.getValue()))    {    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
4	[BUG]  [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.getValue()))    {    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
5	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.getValue()))    {    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
6	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.getValue()))    {    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
7	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.get  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.get  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.get	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.getValue())    {    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
8	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.get  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.get  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.get	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.getValue())    {    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
9	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.get  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.get  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.get	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.getValue())    {    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
10	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.getValue())    {    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
11	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.getValue())    {    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
12	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.getVal  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.getVal  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.getVal	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.getValue())    {    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
13	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
14	[BUG]  [BUGGY]  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
15	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  false;  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  false;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
16	[BUG]  [BUGGY]  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  false;  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  false;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
17	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  closed  =  true;  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  closed  =  true;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
18	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  out.length();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  out.length();  ++i)  {  closed  =  true;  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  out.length();  ++i)  {  closed  =  true;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
19	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
20	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
21	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
22	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
23	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
24	[BUG]  [BUGGY]  if(entry!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.get  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.get  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.get	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
25	[BUG]  [BUGGY]  if(entry!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValu	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
26	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.getVal  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.getVal  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.getVal	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
27	[BUG]  [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
28	[BUG]  [BUGGY]  while(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  while(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
29	[BUG]  [BUGGY]  while(current!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  while(current!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
30	[BUG]  [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  current.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  current.length();  i++)  {  current.close();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(current!=  null)  {  for(int  i  =  0;  i  <  current.length();  i++)  {  current.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
31	[BUG]  [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  curr.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  curr.close();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  curr.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
32	[BUG]  [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  continue;  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  continue;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
33	[BUG]  [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  close();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
34	[BUG]  [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
35	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
36	[BUG]  [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
37	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  outputStream.close();  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  outputStream.close();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  outputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
38	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  this.inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  this.inputStream.close();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  this.inputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
39	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  entryEncoding.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  entryEncoding.close();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  entryEncoding.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
40	[BUG]  [BUGGY]  inf.flush();  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  inf.flush();  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	inf.flush();	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
41	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf!=  null)  {  inf.close();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  inf.close();  }	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
42	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalStateException( " ");  }	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
43	[BUG]  [BUGGY]  if(inf.length()  >  0)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf.length()  >  0)  {  inf.close();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf.length()  >  0)  {  inf.close();  }	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
44	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
45	[BUG]  [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
46	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
47	[BUG]  [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
48	[BUG]  [BUGGY]  if(closed)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(closed)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(in!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
49	[BUG]  [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  e)  {  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  e)  {  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  e)  {  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
50	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  attempt  {  bis.close();  }  catch(IOException  ioe)  {  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
51	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.get  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.get  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.get	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
52	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.get  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.get  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.get	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
53	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.get  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.get  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.get	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
54	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
55	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.get  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.get  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.get	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
56	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
57	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
58	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
59	[BUG]  [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
60	[BUG]  [BUGGY]  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
61	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closeInputStream(inf.next());  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closeInputStream(inf.next());  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closeInputStream(inf.next());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
62	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  close(inf.next());  }  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  close(inf.next());  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  close(inf.next());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
63	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getValue());  }  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getValue());  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getValue());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
64	[BUG]  [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
65	[BUG]  [BUGGY]  while(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  while(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
66	[BUG]  [BUGGY]  while(current!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  while(current!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(current!=  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
67	[BUG]  [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  continue;  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  continue;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
68	[BUG]  [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  curr.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  curr.close();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  curr.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
69	[BUG]  [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  this.current.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  this.current.close();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  this.current.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
70	[BUG]  [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(current!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
71	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue()  ==  entry.get  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue()  ==  entry.get  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue()  ==  entry.get	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.getValue())    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
72	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
73	[BUG]  [BUGGY]  Entry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  Entry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	Entry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
74	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
75	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
76	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entriesRead.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entriesRead.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  entriesRead.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
77	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
78	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entriesRead;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entriesRead;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  entriesRead;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
79	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  entryEncoding.append('n');  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  entryEncoding.append('n');  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  entryEncoding.append('n');  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
80	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.get  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.get  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.get	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
81	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
82	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
83	[BUG]  [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
84	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  inputStream.close();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  inputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
85	[BUG]  [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  inputStream.close();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  inputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
86	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length);  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	InputStream  bis  =  new  ZipInputStream(inf.length);	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
87	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outputStream.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outputStream.close();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
88	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.flush();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.flush();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.flush();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
89	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
90	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
91	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
92	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
93	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
94	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
95	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  entry.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  entry.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  entry.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
96	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
97	[BUG]  [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  current.close();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(current!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  current.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
98	[BUG]  [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  current.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  current.length();  ++i)  {  current.close();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(current!=  null)  {  for(int  i  =  0;  i  <  current.length();  ++i)  {  current.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
99	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
100	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.flush();  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.flush();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.flush();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
101	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
102	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entries.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entries.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  entries.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
103	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZIPArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZIPArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZIPArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
104	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipArchiveEntry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipArchiveEntry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipArchiveEntry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
105	[BUG]  [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getVal  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getVal  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getVal	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
106	[BUG]  [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
107	[BUG]  [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
108	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry.getValue())  {  return;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry.getValue())  {  return;  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry.getValue())  {  return;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
109	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getKey()  ==  entry.getValue())  {  return;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getKey()  ==  entry.getValue())  {  return;  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getKey()  ==  entry.getValue())  {  return;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
110	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry.getValue())  {  }  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry.getValue())  {  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.next();  if(entry.getValue()  ==  entry.getValue())  {  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
111	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
112	[BUG]  [BUGGY]  if(!closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(!closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(!closed)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
113	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(Exception  ioe)  {  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(Exception  ioe)  {  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(Exception  ioe)  {  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
114	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
115	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.get  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.get  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.get	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
116	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.getVal  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.getVal  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry.getVal	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
117	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
118	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  this.inputStream.close();  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  this.inputStream.close();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  this.inputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
119	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  entryEncoding.close();  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  entryEncoding.close();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  entryEncoding.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
120	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
121	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
122	[BUG]  [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
123	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.get  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.get  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.get	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.getValue())    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
124	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.getVal  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.getVal  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.getVal	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.getValue())    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
125	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.getValu  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.getValu  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry.getValu	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.getValue())    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
126	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.next());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
127	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getNext());  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getNext());  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  close(inf.getNext());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
128	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
129	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(closed)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue().equals(entry	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
130	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  }	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
131	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "+inf.getName());  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "+inf.getName());  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "+inf.getName());  }	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
132	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
133	[BUG]  [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  i++)  {  current.close();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(current!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  i++)  {  current.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
134	[BUG]  [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  out.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(current!=  null)  {  for(int  i  =  0;  i  <  out.length();  i++)  {  current.close();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(current!=  null)  {  for(int  i  =  0;  i  <  out.length();  i++)  {  current.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
135	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  inputStream.close();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  inputStream.close();  }	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
136	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  buffer.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  buffer.close();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  buffer.close();  }	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
137	[BUG]  [BUGGY]  if(inf.length  >  0)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf.length  >  0)  {  inf.close();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf.length  >  0)  {  inf.close();  }	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
138	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "Failed  to  close  entry. ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "Failed  to  close  entry. ");  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "Failed  to  close  entry. ");  }	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
139	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed ");  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed ");  }	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
140	[BUG]  [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
141	[BUG]  [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
142	[BUG]  [BUGGY]  while(inf!=  null  &&  current.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  while(inf!=  null  &&  current.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null  &&  current.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  i++)  {  current.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    i++)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
143	[BUG]  [BUGGY]  Entry  entry  =  new  Entry(inf.getValue());  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  Entry  entry  =  new  Entry(inf.getValue());  entry.closeEntry();  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	Entry  entry  =  new  Entry(inf.getValue());  entry.closeEntry();	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
144	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  close(inf.next());  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  close(inf.next());  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  close(inf.next());  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    close(inf.next());    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
145	[BUG]  [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
146	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  closed  =  true;  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  closed  =  true;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
147	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)entry.clone();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
148	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry.get  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry.get  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry.get	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.getValue()))    {    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
149	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue().equals(entry.get  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue().equals(entry.get  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue().equals(entry.get	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.getValue()))    {    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
150	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entries.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entries.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  entries.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
151	[BUG]  [BUGGY]  if(entry.getValue()  ==  entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clon  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry.getValue()  ==  entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clon  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.getValue()  ==  entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clon	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
152	[BUG]  [BUGGY]  if(entry.getValue()  ==  entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clo  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry.getValue()  ==  entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clo  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.getValue()  ==  entry.getValue())  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clo	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
153	[BUG]  [BUGGY]  if(entry.getValue()  ==  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clon  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry.getValue()  ==  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clon  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry.getValue()  ==  null)  {  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clon	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
154	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  return;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  return;  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  return;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.getValue())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
155	[BUG]  [BUGGY]  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
156	[BUG]  [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  try  {  bis.close();  }  catch(IOException  ioe)  {  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    try    {    bis.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
157	[BUG]  [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
158	[BUG]  [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null  &&  inf.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
159	[BUG]  [BUGGY]  while(inf!=  null  &&  current.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  while(inf!=  null  &&  current.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	while(inf!=  null  &&  current.length  >  0)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  current.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
160	[BUG]  [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
161	[BUG]  [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
162	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
163	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.getValue();  if(entry.getMethod().equals(entry.getMethod())  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.getValue();  if(entry.getMethod().equals(entry.getMethod())  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.getValue();  if(entry.getMethod().equals(entry.getMethod())	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
164	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.getValue())    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
165	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  (ZipArchiveEntry)inf.clone();  if(entry.getValue()  ==  entry	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.getValue())    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
166	[BUG]  [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
167	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.getValue())    {    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
168	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  }  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry();  if(entry.getValue()  ==  entry.getValue())  {  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue()    ==    entry.getValue())    {    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
169	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry.get  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  in.close();  }  finally  {  inf.end();    [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry.get  [BUGGY]    }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	555	555	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  if(entry.getValue().equals(entry.get	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =    (ZipArchiveEntry)inf.clone();    if(entry.getValue().equals(entry.getValue()))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
