bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  useUnicodeExtraFields)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  useUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    in)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
2	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  shortBuf)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  shortBuf)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  shortBuf)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    in)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
3	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  long  in)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  long  in)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  long  in)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    in)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
4	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  in,  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  in,  zipEncoding)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  in,  zipEncoding)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    in)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
5	[BUG]  [BUGGY]  this.useUnicodeExtraFields  =  encoding;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  this.useUnicodeExtraFields  =  encoding;  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields  =  encoding;	  this.useUnicodeExtraFields    =    useUnicodeExtraFields;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
6	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields;  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  useUnicodeExtraFields;	  this.useUnicodeExtraFields    =    useUnicodeExtraFields;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
7	[BUG]  [BUGGY]  this.useUnicodeExtraFields;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  this.useUnicodeExtraFields;  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields;	  this.useUnicodeExtraFields    =    useUnicodeExtraFields;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
8	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  encoding);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  this.useUnicodeExtraFields,  encoding);  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  encoding);	  this.useUnicodeExtraFields    =    useUnicodeExtraFields;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
9	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  encoding,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  this.useUnicodeExtraFields,  encoding,  useUnicodeExtraFields);  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  encoding,  useUnicodeExtraFields);	  this.useUnicodeExtraFields    =    useUnicodeExtraFields;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
10	[BUG]  [BUGGY]  final  boolean  hasDataDescriptor,  boolean  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  final  boolean  hasDataDescriptor,  boolean  useUnicodeExtraFields)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  hasDataDescriptor,  boolean  useUnicodeExtraFields)  {	  final    boolean    hasDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
11	[BUG]  [BUGGY]  final  boolean  hasDataDescriptor,  int  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  final  boolean  hasDataDescriptor,  int  zipEncoding)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  hasDataDescriptor,  int  zipEncoding)  {	  final    boolean    hasDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
12	[BUG]  [BUGGY]  final  boolean  hasDataDescriptor,  boolean  hitCentralDirectory)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  final  boolean  hasDataDescriptor,  boolean  hitCentralDirectory)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  hasDataDescriptor,  boolean  hitCentralDirectory)  {	  final    boolean    hasDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
13	[BUG]  [BUGGY]  final  boolean  hasDataDescriptor,  boolean  usesZip64)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  final  boolean  hasDataDescriptor,  boolean  usesZip64)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  hasDataDescriptor,  boolean  usesZip64)  {	  final    boolean    hasDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
14	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  this.useUnicodeExtraFields,  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
15	[BUG]  [BUGGY]  encoding,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  encoding,  useUnicodeExtraFields);  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	encoding,  useUnicodeExtraFields);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
16	[BUG]  [BUGGY]  encoding,  null,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  encoding,  null,  useUnicodeExtraFields);  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	encoding,  null,  useUnicodeExtraFields);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
17	[BUG]  [BUGGY]  ||  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  ||  useUnicodeExtraFields);  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	||  useUnicodeExtraFields);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
18	[BUG]  [BUGGY]  this.useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  this.useUnicodeExtraFields);  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
19	[BUG]  [BUGGY]  ||  useUnicodeExtraFields;  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  ||  useUnicodeExtraFields;  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	||  useUnicodeExtraFields;	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
20	[BUG]  [BUGGY]  ||  useUnicodeExtraFields)  [CE]  illegal  start  of  type  [FE]                                AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  ||  useUnicodeExtraFields)  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	||  useUnicodeExtraFields)	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
21	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  int  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  int  zipEncoding)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithZip64,  int  zipEncoding)  {	  final    boolean    allowStoredEntriesWithZip64)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
22	[BUG]  [BUGGY]  final  int  allowStoredEntriesWithZip64)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  final  int  allowStoredEntriesWithZip64)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  int  allowStoredEntriesWithZip64)  {	  final    boolean    allowStoredEntriesWithZip64)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
23	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  int  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  final  boolean  allowStoredEntriesWithFields,  int  zipEncoding)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  int  zipEncoding)  {	  final    boolean    allowStoredEntriesWithFields)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
24	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  shortBuf)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  final  boolean  allowStoredEntriesWithFields,  shortBuf)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  shortBuf)  {	  final    boolean    allowStoredEntriesWithFields)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
25	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  final  int  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  final  boolean  allowStoredEntriesWithFields,  final  int  zipEncoding)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  final  int  zipEncoding)  {	  final    boolean    allowStoredEntriesWithFields)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
26	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  true)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  this.useUnicodeExtraFields,  true)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  true)  {	  this.useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
27	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  encoding)  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  this.useUnicodeExtraFields,  encoding)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  encoding)  {	  this.useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
28	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  this.useUnicodeExtraFields,  zipEncoding)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  zipEncoding)  {	  this.useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
29	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  useUnicodeExtraFields)  {	  this.useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
30	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  false)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  this.useUnicodeExtraFields,  false)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  false)  {	  this.useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
31	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  null)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  this.useUnicodeExtraFields,  null)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  null)  {	  this.useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
32	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  int  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  int  useUnicodeExtraFields)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  int  useUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
33	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  final  boolean  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  final  boolean  useUnicodeExtraFields)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  final  boolean  useUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
34	[BUG]  [BUGGY]  final  boolean  enableStoredEntriesWithDataDescriptor,  boolean  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  final  boolean  enableStoredEntriesWithDataDescriptor,  boolean  useUnicodeExtraFields)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  enableStoredEntriesWithDataDescriptor,  boolean  useUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
35	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  boolean  usesZip64)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  boolean  usesZip64)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  boolean  usesZip64)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
36	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  boolean  enableUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  boolean  enableUnicodeExtraFields)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  boolean  enableUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
37	[BUG]  [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  true);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  true);  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  useUnicodeExtraFields,  true);	  super(inputStream,    encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
38	[BUG]  [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  false);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  false);  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  useUnicodeExtraFields,  false);	  super(inputStream,    encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
39	[BUG]  [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  allowStoredEntriesWithDataDescriptor);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  allowStoredEntriesWithDataDescriptor);  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  useUnicodeExtraFields,  allowStoredEntriesWithDataDescriptor);	  super(inputStream,    encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
40	[BUG]  [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  this.useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  this.useUnicodeExtraFields);  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  useUnicodeExtraFields,  this.useUnicodeExtraFields);	  super(inputStream,    encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
41	[BUG]  [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  zipEncoding);  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  useUnicodeExtraFields,  zipEncoding);	  super(inputStream,    encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
42	[BUG]  [BUGGY]  super(in,  encoding,  useUnicodeExtraFields,  true);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  super(in,  encoding,  useUnicodeExtraFields,  true);  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(in,  encoding,  useUnicodeExtraFields,  true);	  super(inputStream,    encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
43	[BUG]  [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  null);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  null);  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  useUnicodeExtraFields,  null);	  super(inputStream,    encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
44	[BUG]  [BUGGY]  final  boolean  useUnicodeExtraFields,  int  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  final  boolean  useUnicodeExtraFields,  int  zipEncoding)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  useUnicodeExtraFields,  int  zipEncoding)  {	  final    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
45	[BUG]  [BUGGY]  final  boolean  useUnicodeExtraFields,  final  int  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  final  boolean  useUnicodeExtraFields,  final  int  zipEncoding)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  useUnicodeExtraFields,  final  int  zipEncoding)  {	  final    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
46	[BUG]  [BUGGY]  final  boolean  useUnicodeExtraFields,  final  boolean  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  final  boolean  useUnicodeExtraFields,  final  boolean  zipEncoding)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  useUnicodeExtraFields,  final  boolean  zipEncoding)  {	  final    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
47	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  usedUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  usedUnicodeExtraFields)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  usedUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    hasDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
48	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  usesZip64)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  usesZip64)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  usesZip64)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    hasDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
49	[BUG]  [BUGGY]  final  int  allowStoredEntriesWithDataDescriptor,  hasDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  final  int  allowStoredEntriesWithDataDescriptor,  hasDataDescriptor)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  int  allowStoredEntriesWithDataDescriptor,  hasDataDescriptor)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    hasDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
50	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  encoding);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  encoding);  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  useUnicodeExtraFields,  encoding);	  this.useUnicodeExtraFields,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
51	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  hasDataDescriptor);  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  useUnicodeExtraFields,  hasDataDescriptor);	  this.useUnicodeExtraFields,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
52	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  true);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  true);  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  useUnicodeExtraFields,  true);	  this.useUnicodeExtraFields,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
53	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  null);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  null);  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  useUnicodeExtraFields,  null);	  this.useUnicodeExtraFields,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
54	[BUG]  [BUGGY]  this.encoding  =  ZipEncodingHelper.getZipEncoding(encoding);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  this.encoding  =  ZipEncodingHelper.getZipEncoding(encoding);  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  ZipEncodingHelper.getZipEncoding(encoding);	  this.encoding    =    encoding;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
55	[BUG]  [BUGGY]  this.encoding  =  zipEncoding;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  this.encoding  =  zipEncoding;  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  zipEncoding;	  this.encoding    =    encoding;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
56	[BUG]  [BUGGY]  this.encoding  =  ZIPEncodingHelper.getZipEncoding(encoding);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  this.encoding  =  ZIPEncodingHelper.getZipEncoding(encoding);  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  ZIPEncodingHelper.getZipEncoding(encoding);	  this.encoding    =    encoding;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
57	[BUG]  [BUGGY]  this.encoding  =  encoding  +  ZipEncodingHelper.getZipEncoding(encoding);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  this.encoding  =  encoding  +  ZipEncodingHelper.getZipEncoding(encoding);  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  encoding  +  ZipEncodingHelper.getZipEncoding(encoding);	  this.encoding    =    encoding;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
58	[BUG]  [BUGGY]  this.encoding  =  ZipEncodingHelper.getZipEncoding(encoding,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  this.encoding  =  ZipEncodingHelper.getZipEncoding(encoding,  useUnicodeExtraFields);  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  ZipEncodingHelper.getZipEncoding(encoding,  useUnicodeExtraFields);	  this.encoding    =    encoding;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
59	[BUG]  [BUGGY]  this.encoding  =  encoding,  useUnicodeExtraFields;  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  this.encoding  =  encoding,  useUnicodeExtraFields;  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  encoding,  useUnicodeExtraFields;	  this.encoding    =    encoding;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
60	[BUG]  [BUGGY]  final  int  allowStoredEntriesWithUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  final  int  allowStoredEntriesWithUnicodeExtraFields)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  int  allowStoredEntriesWithUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
61	[BUG]  [BUGGY]  final  boolean  enableStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  final  boolean  enableStoredEntriesWithDataDescriptor)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  enableStoredEntriesWithDataDescriptor)  {	  final    boolean    allowStoredEntriesWithUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
62	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithUnicodeExtraFields,  int  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  final  boolean  allowStoredEntriesWithUnicodeExtraFields,  int  zipEncoding)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithUnicodeExtraFields,  int  zipEncoding)  {	  final    boolean    allowStoredEntriesWithUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
63	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithUnicodeExtraFields,  shortBuf)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  final  boolean  allowStoredEntriesWithUnicodeExtraFields,  shortBuf)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithUnicodeExtraFields,  shortBuf)  {	  final    boolean    allowStoredEntriesWithUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
64	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithUnicodeExtraFields,  in)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  final  boolean  allowStoredEntriesWithUnicodeExtraFields,  in)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithUnicodeExtraFields,  in)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    in)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
65	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  in)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  in)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithZip64,  in)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    in)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
66	[BUG]  [BUGGY]  this.encoding  =  useUnicodeExtraFields;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  this.encoding  =  useUnicodeExtraFields;  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  useUnicodeExtraFields;	  this.encoding    =    encoding;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
67	[BUG]  [BUGGY]  this.encoding  =  StringEncodingHelper.getZipEncoding(encoding);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  this.encoding  =  StringEncodingHelper.getZipEncoding(encoding);  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  StringEncodingHelper.getZipEncoding(encoding);	  this.encoding    =    encoding;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
68	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  0,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  this.useUnicodeExtraFields,  0,  useUnicodeExtraFields);  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  0,  useUnicodeExtraFields);	  this.useUnicodeExtraFields,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
69	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  0);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  0);  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  useUnicodeExtraFields,  0);	  this.useUnicodeExtraFields,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
70	[BUG]  [BUGGY]  final  boolean  hasDataDescriptor,  String  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  final  boolean  hasDataDescriptor,  String  zipEncoding)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  hasDataDescriptor,  String  zipEncoding)  {	  final    boolean    hasDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
71	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  boolean  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  boolean  useUnicodeExtraFields)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithZip64,  boolean  useUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
72	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  boolean  hasDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  boolean  hasDataDescriptor)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  boolean  hasDataDescriptor)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
73	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  boolean  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  final  boolean  allowStoredEntriesWithFields,  boolean  useUnicodeExtraFields)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  boolean  useUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithFields)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
74	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  Integer  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  final  boolean  allowStoredEntriesWithFields,  Integer  zipEncoding)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  Integer  zipEncoding)  {	  final    boolean    allowStoredEntriesWithFields)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
75	[BUG]  [BUGGY]  super(inputStream,  encoding,  allowStoredEntriesWithDataDescriptor);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  super(inputStream,  encoding,  allowStoredEntriesWithDataDescriptor);  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  allowStoredEntriesWithDataDescriptor);	  super(inputStream,    encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
76	[BUG]  [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  hasDataDescriptor);  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  useUnicodeExtraFields,  hasDataDescriptor);	  super(inputStream,    encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
77	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  useUnicodeExtraFields)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithZip64,  useUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithZip64)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
78	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  hasDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  hasDataDescriptor)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithZip64,  hasDataDescriptor)  {	  final    boolean    allowStoredEntriesWithZip64)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
79	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  isEnabled)  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  isEnabled)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithZip64,  isEnabled)  {	  final    boolean    allowStoredEntriesWithZip64)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
80	[BUG]  [BUGGY]  this.useUnicodeExtraFields  &=  useUnicodeExtraFields;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  this.useUnicodeExtraFields  &=  useUnicodeExtraFields;  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields  &=  useUnicodeExtraFields;	  this.useUnicodeExtraFields    =    useUnicodeExtraFields;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
81	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  encoding;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  this.useUnicodeExtraFields,  encoding;  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  encoding;	  this.useUnicodeExtraFields    =    useUnicodeExtraFields;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
82	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithUnicodeExtraFields,  hasDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  final  boolean  allowStoredEntriesWithUnicodeExtraFields,  hasDataDescriptor)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithUnicodeExtraFields,  hasDataDescriptor)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    hasDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
83	[BUG]  [BUGGY]  final  boolean  useUnicodeExtraFields,  String  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  final  boolean  useUnicodeExtraFields,  String  zipEncoding)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  useUnicodeExtraFields,  String  zipEncoding)  {	  final    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
84	[BUG]  [BUGGY]  final  boolean  useUnicodeExtraFields,  Integer  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  final  boolean  useUnicodeExtraFields,  Integer  zipEncoding)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  useUnicodeExtraFields,  Integer  zipEncoding)  {	  final    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
85	[BUG]  [BUGGY]  Integer.parseInt(encoding));  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  Integer.parseInt(encoding));  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer.parseInt(encoding));	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
86	[BUG]  [BUGGY]  Integer.toString(useUnicodeExtraFields));  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  Integer.toString(useUnicodeExtraFields));  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer.toString(useUnicodeExtraFields));	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
87	[BUG]  [BUGGY]  Integer.parseInt(encoding),  0,  0);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  Integer.parseInt(encoding),  0,  0);  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer.parseInt(encoding),  0,  0);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
88	[BUG]  [BUGGY]  Integer.toString(useUnicodeExtraFields),  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  Integer.toString(useUnicodeExtraFields),  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer.toString(useUnicodeExtraFields),	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
89	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  in.read())  {  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  in.read())  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  in.read())  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    in)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
90	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  in.readLine())  {  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  in.readLine())  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  in.readLine())  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    in)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
91	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  encoding,  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  this.useUnicodeExtraFields,  encoding,  useUnicodeExtraFields)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  encoding,  useUnicodeExtraFields)  {	  final    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
92	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  usingUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  usingUnicodeExtraFields)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  usingUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    hasDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
93	[BUG]  [BUGGY]  final  boolean  useUnicodeExtraFields,  hasDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  final  boolean  useUnicodeExtraFields,  hasDataDescriptor)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  useUnicodeExtraFields,  hasDataDescriptor)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    hasDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
94	[BUG]  [BUGGY]  Integer  buf  =  inputStream.readLine();  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  Integer  buf  =  inputStream.readLine();  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer  buf  =  inputStream.readLine();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
95	[BUG]  [BUGGY]  Integer  buf  =  inputStream.readFully();  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  Integer  buf  =  inputStream.readFully();  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer  buf  =  inputStream.readFully();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
96	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  true);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  this.useUnicodeExtraFields,  true);  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  true);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
97	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  false);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  this.useUnicodeExtraFields,  false);  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  false);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
98	[BUG]  [BUGGY]  Integer  buf  =  inputStream.readFully(encoding);  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  Integer  buf  =  inputStream.readFully(encoding);  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer  buf  =  inputStream.readFully(encoding);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
99	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  final  boolean  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  final  boolean  allowStoredEntriesWithFields,  final  boolean  useUnicodeExtraFields)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  final  boolean  useUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithFields)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
100	[BUG]  [BUGGY]  final  boolean  useUnicodeExtraFields,  final  boolean  allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  final  boolean  useUnicodeExtraFields,  final  boolean  allowStoredEntriesWithDataDescriptor)  {  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  useUnicodeExtraFields,  final  boolean  allowStoredEntriesWithDataDescriptor)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
101	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding(encoding);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding(encoding);  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding(encoding);	  this.useUnicodeExtraFields,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
102	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding(encoding));  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding(encoding));  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding(encoding));	  this.useUnicodeExtraFields,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
103	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding());  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding());  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding());	  this.useUnicodeExtraFields,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
104	[BUG]  [BUGGY]  this.in  =  new  ZipInputStream(inputStream,  encoding,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  this.in  =  new  ZipInputStream(inputStream,  encoding,  useUnicodeExtraFields);  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.in  =  new  ZipInputStream(inputStream,  encoding,  useUnicodeExtraFields);	  final    boolean    allowStoredEntriesWithZip64)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
105	[BUG]  [BUGGY]  this.encoding  =  ZipArchiveHelper.getZipEncoding(encoding);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  this.encoding  =  ZipArchiveHelper.getZipEncoding(encoding);  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  ZipArchiveHelper.getZipEncoding(encoding);	  this.encoding    =    encoding;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
106	[BUG]  [BUGGY]  this.encoding  =  ZipArchiveEntryHelper.getZipEncoding(encoding);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  this.encoding  =  ZipArchiveEntryHelper.getZipEncoding(encoding);  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  ZipArchiveEntryHelper.getZipEncoding(encoding);	  this.encoding    =    encoding;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
107	[BUG]  [BUGGY]  this.encoding  =  ZipEncodingHelper.getZipEncoding(ENCODING);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  this.encoding  =  ZipEncodingHelper.getZipEncoding(ENCODING);  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  ZipEncodingHelper.getZipEncoding(ENCODING);	  this.encoding    =    encoding;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
108	[BUG]  [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  usesZip64);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,    [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  usesZip64);  [BUGGY]    this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  useUnicodeExtraFields,  usesZip64);	  super(inputStream,    encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
