bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this.encoding  =  ZipArchiveEntryHelper.getZipEncoding(encoding,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  ZipArchiveEntryHelper.getZipEncoding(encoding,  useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  ZipArchiveEntryHelper.getZipEncoding(encoding,  useUnicodeExtraFields);	  this.encoding    =    ZipArchiveEntryHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
2	[BUG]  [BUGGY]  this.encoding  =  ZipArchiveEntryHelper.getZipEncoding(encoding,  0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  ZipArchiveEntryHelper.getZipEncoding(encoding,  0);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  ZipArchiveEntryHelper.getZipEncoding(encoding,  0);	  this.encoding    =    ZipArchiveEntryHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
3	[BUG]  [BUGGY]  this.encoding  =  ZipArchiveEntryHelper.getEncoding(encoding);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  ZipArchiveEntryHelper.getEncoding(encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  ZipArchiveEntryHelper.getEncoding(encoding);	  this.encoding    =    ZipArchiveEntryHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
4	[BUG]  [BUGGY]  this.encoding  =  ZipArchiveEntryHelper.getZipEncoding(encoding,  userUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  ZipArchiveEntryHelper.getZipEncoding(encoding,  userUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  ZipArchiveEntryHelper.getZipEncoding(encoding,  userUnicodeExtraFields);	  this.encoding    =    ZipArchiveEntryHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
5	[BUG]  [BUGGY]  this.encoding  =  ZipArchiveEntryHelper.getZipEncoding(encoding,  true);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  ZipArchiveEntryHelper.getZipEncoding(encoding,  true);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  ZipArchiveEntryHelper.getZipEncoding(encoding,  true);	  this.encoding    =    ZipArchiveEntryHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
6	[BUG]  [BUGGY]  this.encoding  =  ZipArchiveEntryHelper.getCrcEncoding(encoding);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  ZipArchiveEntryHelper.getCrcEncoding(encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  ZipArchiveEntryHelper.getCrcEncoding(encoding);	  this.encoding    =    ZipArchiveEntryHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
7	[BUG]  [BUGGY]  final  boolean  enableStoredEntriesWithDataDescriptor,  int  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  enableStoredEntriesWithDataDescriptor,  int  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  enableStoredEntriesWithDataDescriptor,  int  useUnicodeExtraFields)  {	  final    boolean    enableStoredEntriesWithDataDescriptor,    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
8	[BUG]  [BUGGY]  final  boolean  enableStoredEntriesWithDataDescriptor,  boolean  allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  enableStoredEntriesWithDataDescriptor,  boolean  allowStoredEntriesWithDataDescriptor)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  enableStoredEntriesWithDataDescriptor,  boolean  allowStoredEntriesWithDataDescriptor)  {	  final    boolean    enableStoredEntriesWithDataDescriptor,    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
9	[BUG]  [BUGGY]  final  boolean  enableStoredEntriesWithDataDescriptor,  final  boolean  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  enableStoredEntriesWithDataDescriptor,  final  boolean  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  enableStoredEntriesWithDataDescriptor,  final  boolean  useUnicodeExtraFields)  {	  final    boolean    enableStoredEntriesWithDataDescriptor,    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
10	[BUG]  [BUGGY]  final  boolean  enableStoredEntriesWithDataDescriptor,  boolean  allowStoredEntriesWithZip64)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  enableStoredEntriesWithDataDescriptor,  boolean  allowStoredEntriesWithZip64)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  enableStoredEntriesWithDataDescriptor,  boolean  allowStoredEntriesWithZip64)  {	  final    boolean    enableStoredEntriesWithDataDescriptor,    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
11	[BUG]  [BUGGY]  final  boolean  enableStoredEntriesWithDataDescriptor,  boolean  usesZip64)  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  enableStoredEntriesWithDataDescriptor,  boolean  usesZip64)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  enableStoredEntriesWithDataDescriptor,  boolean  usesZip64)  {	  final    boolean    enableStoredEntriesWithDataDescriptor,    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
12	[BUG]  [BUGGY]  final  int  allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  int  allowStoredEntriesWithDataDescriptor)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  int  allowStoredEntriesWithDataDescriptor)  {	  final    int    allowStoredEntriesWithUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
13	[BUG]  [BUGGY]  final  byte  allowStoredEntriesWithUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  byte  allowStoredEntriesWithUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  byte  allowStoredEntriesWithUnicodeExtraFields)  {	  final    int    allowStoredEntriesWithUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
14	[BUG]  [BUGGY]  final  char  allowStoredEntriesWithUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  char  allowStoredEntriesWithUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  char  allowStoredEntriesWithUnicodeExtraFields)  {	  final    int    allowStoredEntriesWithUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
15	[BUG]  [BUGGY]  final  long  allowStoredEntriesWithUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  long  allowStoredEntriesWithUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  long  allowStoredEntriesWithUnicodeExtraFields)  {	  final    int    allowStoredEntriesWithUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
16	[BUG]  [BUGGY]  final  String  allowStoredEntriesWithUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  String  allowStoredEntriesWithUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  String  allowStoredEntriesWithUnicodeExtraFields)  {	  final    int    allowStoredEntriesWithUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
17	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  null);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  null);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  null);	  this.useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
18	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  inputStream);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  inputStream);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  inputStream);	  this.useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
19	[BUG]  [BUGGY]  this.in  =  new  ZipInputStream(inputStream,  encoding,  useUnicodeExtraFields,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.in  =  new  ZipInputStream(inputStream,  encoding,  useUnicodeExtraFields,  zipEncoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.in  =  new  ZipInputStream(inputStream,  encoding,  useUnicodeExtraFields,  zipEncoding);	  this.in    =    new    ZipInputStream(inputStream,    encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
20	[BUG]  [BUGGY]  this.in  =  new  ZipInputStream(inputStream,  encoding,  useUnicodeExtraFields,  true);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.in  =  new  ZipInputStream(inputStream,  encoding,  useUnicodeExtraFields,  true);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.in  =  new  ZipInputStream(inputStream,  encoding,  useUnicodeExtraFields,  true);	  this.in    =    new    ZipInputStream(inputStream,    encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
21	[BUG]  [BUGGY]  this.in  =  new  ZipInputStream(inputStream,  encoding,  useUnicodeExtraFields,  false);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.in  =  new  ZipInputStream(inputStream,  encoding,  useUnicodeExtraFields,  false);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.in  =  new  ZipInputStream(inputStream,  encoding,  useUnicodeExtraFields,  false);	  this.in    =    new    ZipInputStream(inputStream,    encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
22	[BUG]  [BUGGY]  this.in  =  new  ZipInputStream(inputStream,  encoding,  useUnicodeExtraFields,  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.in  =  new  ZipInputStream(inputStream,  encoding,  useUnicodeExtraFields,  hasDataDescriptor);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.in  =  new  ZipInputStream(inputStream,  encoding,  useUnicodeExtraFields,  hasDataDescriptor);	  this.in    =    new    ZipInputStream(inputStream,    encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
23	[BUG]  [BUGGY]  this.in  =  new  ZipInputStream(inputStream,  encoding,  useUnicodeExtraFields,  isEnabled);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.in  =  new  ZipInputStream(inputStream,  encoding,  useUnicodeExtraFields,  isEnabled);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.in  =  new  ZipInputStream(inputStream,  encoding,  useUnicodeExtraFields,  isEnabled);	  this.in    =    new    ZipInputStream(inputStream,    encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
24	[BUG]  [BUGGY]  this.in  =  new  ZipInputStream(inputStream,  encoding,  0,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.in  =  new  ZipInputStream(inputStream,  encoding,  0,  useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.in  =  new  ZipInputStream(inputStream,  encoding,  0,  useUnicodeExtraFields);	  this.in    =    new    ZipInputStream(inputStream,    encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
25	[BUG]  [BUGGY]  final  byte  allowStoredEntriesWithZip64)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  byte  allowStoredEntriesWithZip64)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  byte  allowStoredEntriesWithZip64)  {	  final    int    allowStoredEntriesWithZip64)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
26	[BUG]  [BUGGY]  final  int  allowStoredEntriesWithZip64,  boolean  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  int  allowStoredEntriesWithZip64,  boolean  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  int  allowStoredEntriesWithZip64,  boolean  useUnicodeExtraFields)  {	  final    int    allowStoredEntriesWithZip64)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
27	[BUG]  [BUGGY]  final  char  allowStoredEntriesWithZip64)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  char  allowStoredEntriesWithZip64)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  char  allowStoredEntriesWithZip64)  {	  final    int    allowStoredEntriesWithZip64)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
28	[BUG]  [BUGGY]  final  long  allowStoredEntriesWithZip64)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  long  allowStoredEntriesWithZip64)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  long  allowStoredEntriesWithZip64)  {	  final    int    allowStoredEntriesWithZip64)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
29	[BUG]  [BUGGY]  final  int  allowStoredEntriesWithFields)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  int  allowStoredEntriesWithFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  int  allowStoredEntriesWithFields)  {	  final    int    allowStoredEntriesWithZip64)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
30	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  shortBuf)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  shortBuf)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithZip64,  shortBuf)  {	  final    boolean    allowStoredEntriesWithZip64,    in)    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
31	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  in,  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  in,  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithZip64,  in,  zipEncoding)  {	  final    boolean    allowStoredEntriesWithZip64,    in)    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
32	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  in)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  in)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  in)  {	  final    boolean    allowStoredEntriesWithZip64,    in)    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
33	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  current)  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  current)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithZip64,  current)  {	  final    boolean    allowStoredEntriesWithZip64,    in)    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
34	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  int  hasDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  int  hasDataDescriptor)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  int  hasDataDescriptor)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    boolean    hasDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
35	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  long  hasDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  long  hasDataDescriptor)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  long  hasDataDescriptor)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    boolean    hasDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
36	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  final  boolean  hasDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  final  boolean  hasDataDescriptor)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  final  boolean  hasDataDescriptor)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    boolean    hasDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
37	[BUG]  [BUGGY]  final  int  allowStoredEntriesWithDataDescriptor,  boolean  hasDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  int  allowStoredEntriesWithDataDescriptor,  boolean  hasDataDescriptor)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  int  allowStoredEntriesWithDataDescriptor,  boolean  hasDataDescriptor)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    boolean    hasDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
38	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  false,  encoding);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  false,  encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  false,  encoding);	  this.useUnicodeExtraFields,    false);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
39	[BUG]  [BUGGY]  This.useUnicodeExtraFields,  true);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  This.useUnicodeExtraFields,  true);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	This.useUnicodeExtraFields,  true);	  this.useUnicodeExtraFields,    false);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
40	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  boolean  allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  boolean  allowStoredEntriesWithDataDescriptor)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  boolean  allowStoredEntriesWithDataDescriptor)  {	  final    boolean    allowStoredEntriesWithFields,    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
41	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  boolean  allowStoredEntriesWithDataDescriptor,  boolean  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  boolean  allowStoredEntriesWithDataDescriptor,  boolean  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  boolean  allowStoredEntriesWithDataDescriptor,  boolean  useUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithFields,    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
42	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  boolean  allowStoredEntriesWithDataDescriptor,  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  boolean  allowStoredEntriesWithDataDescriptor,  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  boolean  allowStoredEntriesWithDataDescriptor,  useUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithFields,    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
43	[BUG]  [BUGGY]  final  int  allowStoredEntriesWithFields,  int  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  int  allowStoredEntriesWithFields,  int  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  int  allowStoredEntriesWithFields,  int  useUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithFields,    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
44	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  int  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  int  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  int  useUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithFields,    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
45	[BUG]  [BUGGY]  EncodingHelper.getZipEncoding(encoding),  null,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  EncodingHelper.getZipEncoding(encoding),  null,  useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	EncodingHelper.getZipEncoding(encoding),  null,  useUnicodeExtraFields);	  encoding,    null,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
46	[BUG]  [BUGGY]  encoding,  null,  useUnicodeExtraFields,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  encoding,  null,  useUnicodeExtraFields,  zipEncoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	encoding,  null,  useUnicodeExtraFields,  zipEncoding);	  encoding,    null,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
47	[BUG]  [BUGGY]  encoding,  null,  useUnicodeExtraFields,  this);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  encoding,  null,  useUnicodeExtraFields,  this);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	encoding,  null,  useUnicodeExtraFields,  this);	  encoding,    null,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
48	[BUG]  [BUGGY]  encoding,  null,  useUnicodeExtraFields,  inputStream);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  encoding,  null,  useUnicodeExtraFields,  inputStream);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	encoding,  null,  useUnicodeExtraFields,  inputStream);	  encoding,    null,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
49	[BUG]  [BUGGY]  encoding,  null,  allowStoredEntriesWithDataDescriptor);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  encoding,  null,  allowStoredEntriesWithDataDescriptor);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	encoding,  null,  allowStoredEntriesWithDataDescriptor);	  encoding,    null,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
50	[BUG]  [BUGGY]  encoding,  null,  useUnicodeExtraFields,  true);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  encoding,  null,  useUnicodeExtraFields,  true);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	encoding,  null,  useUnicodeExtraFields,  true);	  encoding,    null,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
51	[BUG]  [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  this);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  this);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  useUnicodeExtraFields,  this);	  super(inputStream,    encoding,    useUnicodeExtraFields,    null);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
52	[BUG]  [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  zipEncoding,  null);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  zipEncoding,  null);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  useUnicodeExtraFields,  zipEncoding,  null);	  super(inputStream,    encoding,    useUnicodeExtraFields,    null);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
53	[BUG]  [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding(encoding),  null);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding(encoding),  null);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding(encoding),  null);	  super(inputStream,    encoding,    useUnicodeExtraFields,    null);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
54	[BUG]  [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  0,  null);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  0,  null);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  useUnicodeExtraFields,  0,  null);	  super(inputStream,    encoding,    useUnicodeExtraFields,    null);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
55	[BUG]  [BUGGY]  super(in,  encoding,  useUnicodeExtraFields,  this);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(in,  encoding,  useUnicodeExtraFields,  this);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(in,  encoding,  useUnicodeExtraFields,  this);	  super(inputStream,    encoding,    useUnicodeExtraFields,    null);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
56	[BUG]  [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  null,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  null,  zipEncoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  useUnicodeExtraFields,  null,  zipEncoding);	  super(inputStream,    encoding,    useUnicodeExtraFields,    null);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
57	[BUG]  [BUGGY]  final  boolean  hasDataDescriptor,  final  String  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  hasDataDescriptor,  final  String  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  hasDataDescriptor,  final  String  zipEncoding)  {	  final    boolean    hasDataDescriptor,    String    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
58	[BUG]  [BUGGY]  final  boolean  hasDataDescriptor,  final  ZipEncoding  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  hasDataDescriptor,  final  ZipEncoding  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  hasDataDescriptor,  final  ZipEncoding  zipEncoding)  {	  final    boolean    hasDataDescriptor,    String    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
59	[BUG]  [BUGGY]  final  boolean  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  zipEncoding)  {	  final    boolean    hasDataDescriptor,    String    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
60	[BUG]  [BUGGY]  final  boolean  zipEncoding,  String  hasDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  zipEncoding,  String  hasDataDescriptor)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  zipEncoding,  String  hasDataDescriptor)  {	  final    boolean    hasDataDescriptor,    String    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
61	[BUG]  [BUGGY]  final  boolean  hasDataDescriptor,  final  int  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  hasDataDescriptor,  final  int  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  hasDataDescriptor,  final  int  zipEncoding)  {	  final    boolean    hasDataDescriptor,    String    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
62	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  false);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  false);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  useUnicodeExtraFields,  false);	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    true);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
63	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  encoding,  true);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  encoding,  true);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  encoding,  true);	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    true);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
64	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  encoding,  useUnicodeExtraFields,  true);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  encoding,  useUnicodeExtraFields,  true);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  encoding,  useUnicodeExtraFields,  true);	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    true);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
65	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  encoding,  false);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  encoding,  false);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  encoding,  false);	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    true);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
66	[BUG]  [BUGGY]  This.useUnicodeExtraFields,  useUnicodeExtraFields,  false);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  This.useUnicodeExtraFields,  useUnicodeExtraFields,  false);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	This.useUnicodeExtraFields,  useUnicodeExtraFields,  false);	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    true);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
67	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  usedUnicodeExtraFields,  true);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  usedUnicodeExtraFields,  true);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  usedUnicodeExtraFields,  true);	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    true);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
68	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  this.useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  this.useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  this.useUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    usedUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
69	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  this.usedUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  this.usedUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  this.usedUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    usedUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
70	[BUG]  [BUGGY]  super(in,  encoding,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(in,  encoding,  useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(in,  encoding,  useUnicodeExtraFields);	  super(inputStream,    encoding,    allowStoredEntriesWithDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
71	[BUG]  [BUGGY]  super(encoding,  inputStream,  allowStoredEntriesWithDataDescriptor);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(encoding,  inputStream,  allowStoredEntriesWithDataDescriptor);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(encoding,  inputStream,  allowStoredEntriesWithDataDescriptor);	  super(inputStream,    encoding,    allowStoredEntriesWithDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
72	[BUG]  [BUGGY]  this.in  =  new  ZipArchiveInputStream(inputStream,  encoding,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.in  =  new  ZipArchiveInputStream(inputStream,  encoding,  useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.in  =  new  ZipArchiveInputStream(inputStream,  encoding,  useUnicodeExtraFields);	  super(inputStream,    encoding,    allowStoredEntriesWithDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
73	[BUG]  [BUGGY]  super(in,  encoding,  useUnicodeExtraFields,  allowStoredEntriesWithDataDescriptor);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(in,  encoding,  useUnicodeExtraFields,  allowStoredEntriesWithDataDescriptor);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(in,  encoding,  useUnicodeExtraFields,  allowStoredEntriesWithDataDescriptor);	  super(inputStream,    encoding,    allowStoredEntriesWithDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
74	[BUG]  [BUGGY]  super(in,  encoding,  allowStoredEntriesWithDataDescriptor,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(in,  encoding,  allowStoredEntriesWithDataDescriptor,  useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(in,  encoding,  allowStoredEntriesWithDataDescriptor,  useUnicodeExtraFields);	  super(inputStream,    encoding,    allowStoredEntriesWithDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
75	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  zipEncoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  useUnicodeExtraFields,  zipEncoding);	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    encoding);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
76	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  encoding,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  encoding,  zipEncoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  useUnicodeExtraFields,  encoding,  zipEncoding);	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    encoding);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
77	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  zipEncoding,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  zipEncoding,  useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  zipEncoding,  useUnicodeExtraFields);	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    encoding);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
78	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithUnicodeExtraFields,  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithUnicodeExtraFields,  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithUnicodeExtraFields,  useUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithUnicodeExtraFields,    shortBuf)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
79	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithUnicodeExtraFields,  shortBuf,  max)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithUnicodeExtraFields,  shortBuf,  max)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithUnicodeExtraFields,  shortBuf,  max)  {	  final    boolean    allowStoredEntriesWithUnicodeExtraFields,    shortBuf)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
80	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithUnicodeExtraFields,  shortBuf,  bytesReadFromStream)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithUnicodeExtraFields,  shortBuf,  bytesReadFromStream)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithUnicodeExtraFields,  shortBuf,  bytesReadFromStream)  {	  final    boolean    allowStoredEntriesWithUnicodeExtraFields,    shortBuf)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
81	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithUnicodeExtraFields,  bytesReadFromStream)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithUnicodeExtraFields,  bytesReadFromStream)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithUnicodeExtraFields,  bytesReadFromStream)  {	  final    boolean    allowStoredEntriesWithUnicodeExtraFields,    shortBuf)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
82	[BUG]  [BUGGY]  this.encoding  =  encoding,  0,  useUnicodeExtraFields;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  encoding,  0,  useUnicodeExtraFields;  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  encoding,  0,  useUnicodeExtraFields;	  this.encoding    =    encoding,    useUnicodeExtraFields;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
83	[BUG]  [BUGGY]  this.encoding  =  encoding,  useUnicodeExtraFields,  zipEncoding;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  encoding,  useUnicodeExtraFields,  zipEncoding;  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  encoding,  useUnicodeExtraFields,  zipEncoding;	  this.encoding    =    encoding,    useUnicodeExtraFields;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
84	[BUG]  [BUGGY]  this.encoding  =  encoding,  useUnicodeExtraFields,  true;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  encoding,  useUnicodeExtraFields,  true;  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  encoding,  useUnicodeExtraFields,  true;	  this.encoding    =    encoding,    useUnicodeExtraFields;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
85	[BUG]  [BUGGY]  this.encoding  =  encoding,  useUnicodeExtraFields,  hasDataDescriptor;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  encoding,  useUnicodeExtraFields,  hasDataDescriptor;  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  encoding,  useUnicodeExtraFields,  hasDataDescriptor;	  this.encoding    =    encoding,    useUnicodeExtraFields;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
86	[BUG]  [BUGGY]  this.encoding  =  encoding,  useUnicodeExtraFields,  null);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  encoding,  useUnicodeExtraFields,  null);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  encoding,  useUnicodeExtraFields,  null);	  this.encoding    =    encoding,    useUnicodeExtraFields;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
87	[BUG]  [BUGGY]  Integer  buf  =  inputStream.readInt();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer  buf  =  inputStream.readInt();  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer  buf  =  inputStream.readInt();	  Integer    buf    =    inputStream.readFully();    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
88	[BUG]  [BUGGY]  Integer  buf  =  inputStream.readUTF();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer  buf  =  inputStream.readUTF();  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer  buf  =  inputStream.readUTF();	  Integer    buf    =    inputStream.readFully();    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
89	[BUG]  [BUGGY]  Integer  buf  =  inputStream.readUnicode();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer  buf  =  inputStream.readUnicode();  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer  buf  =  inputStream.readUnicode();	  Integer    buf    =    inputStream.readFully();    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
90	[BUG]  [BUGGY]  Integer  buf  =  inputStream.readFully(0);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer  buf  =  inputStream.readFully(0);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer  buf  =  inputStream.readFully(0);	  Integer    buf    =    inputStream.readFully();    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
91	[BUG]  [BUGGY]  Integer  buf  =  inputStream.read();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer  buf  =  inputStream.read();  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer  buf  =  inputStream.read();	  Integer    buf    =    inputStream.readFully();    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
92	[BUG]  [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  allowStoredEntriesWithDataDescriptor,  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  allowStoredEntriesWithDataDescriptor,  hasDataDescriptor);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  useUnicodeExtraFields,  allowStoredEntriesWithDataDescriptor,  hasDataDescriptor);	  super(inputStream,    encoding,    useUnicodeExtraFields,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
93	[BUG]  [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  zipEncoding,  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  zipEncoding,  hasDataDescriptor);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  useUnicodeExtraFields,  zipEncoding,  hasDataDescriptor);	  super(inputStream,    encoding,    useUnicodeExtraFields,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
94	[BUG]  [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  0,  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  0,  hasDataDescriptor);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  useUnicodeExtraFields,  0,  hasDataDescriptor);	  super(inputStream,    encoding,    useUnicodeExtraFields,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
95	[BUG]  [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  this.hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  this.hasDataDescriptor);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  useUnicodeExtraFields,  this.hasDataDescriptor);	  super(inputStream,    encoding,    useUnicodeExtraFields,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
96	[BUG]  [BUGGY]  final  boolean  hasDataDescriptor,  final  boolean  hitCentralDirectory)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  hasDataDescriptor,  final  boolean  hitCentralDirectory)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  hasDataDescriptor,  final  boolean  hitCentralDirectory)  {	  final    boolean    hasDataDescriptor,    boolean    hitCentralDirectory)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
97	[BUG]  [BUGGY]  final  boolean  hasDataDescriptor,  int  hitCentralDirectory)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  hasDataDescriptor,  int  hitCentralDirectory)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  hasDataDescriptor,  int  hitCentralDirectory)  {	  final    boolean    hasDataDescriptor,    boolean    hitCentralDirectory)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
98	[BUG]  [BUGGY]  final  int  hasDataDescriptor,  boolean  hitCentralDirectory)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  int  hasDataDescriptor,  boolean  hitCentralDirectory)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  int  hasDataDescriptor,  boolean  hitCentralDirectory)  {	  final    boolean    hasDataDescriptor,    boolean    hitCentralDirectory)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
99	[BUG]  [BUGGY]  this.useUnicodeExtraFields)  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields)  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields)	  this.useUnicodeExtraFields,    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
100	[BUG]  [BUGGY]  This.useUnicodeExtraFields,  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  This.useUnicodeExtraFields,  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	This.useUnicodeExtraFields,	  this.useUnicodeExtraFields,    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
101	[BUG]  [BUGGY]  this.usedUnicodeExtraFields,  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.usedUnicodeExtraFields,  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.usedUnicodeExtraFields,	  this.useUnicodeExtraFields,    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
102	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  this.usingUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  this.usingUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  this.usingUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    usingUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
103	[BUG]  [BUGGY]  final  boolean  enableStoredEntriesWithDataDescriptor,  usingUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  enableStoredEntriesWithDataDescriptor,  usingUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  enableStoredEntriesWithDataDescriptor,  usingUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    usingUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
104	[BUG]  [BUGGY]  final  boolean  hasDataDescriptor,  final  boolean  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  hasDataDescriptor,  final  boolean  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  hasDataDescriptor,  final  boolean  useUnicodeExtraFields)  {	  final    boolean    hasDataDescriptor,    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
105	[BUG]  [BUGGY]  final  boolean  hasDataDescriptor,  boolean  allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  hasDataDescriptor,  boolean  allowStoredEntriesWithDataDescriptor)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  hasDataDescriptor,  boolean  allowStoredEntriesWithDataDescriptor)  {	  final    boolean    hasDataDescriptor,    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
106	[BUG]  [BUGGY]  final  boolean  hasDataDescriptor,  int  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  hasDataDescriptor,  int  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  hasDataDescriptor,  int  useUnicodeExtraFields)  {	  final    boolean    hasDataDescriptor,    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
107	[BUG]  [BUGGY]  final  int  hasDataDescriptor,  int  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  int  hasDataDescriptor,  int  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  int  hasDataDescriptor,  int  useUnicodeExtraFields)  {	  final    boolean    hasDataDescriptor,    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
108	[BUG]  [BUGGY]  ||  useUnicodeExtraFields,  encoding);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  ||  useUnicodeExtraFields,  encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	||  useUnicodeExtraFields,  encoding);	  ||    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
109	[BUG]  [BUGGY]  ||  useUnicodeExtraFields,  inputStream);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  ||  useUnicodeExtraFields,  inputStream);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	||  useUnicodeExtraFields,  inputStream);	  ||    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
110	[BUG]  [BUGGY]  ||  encoding);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  ||  encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	||  encoding);	  ||    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
111	[BUG]  [BUGGY]  ||  useUnicodeExtraFields,  in);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  ||  useUnicodeExtraFields,  in);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	||  useUnicodeExtraFields,  in);	  ||    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
112	[BUG]  [BUGGY]  ||!useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  ||!useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	||!useUnicodeExtraFields);	  ||    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
113	[BUG]  [BUGGY]  ||  useUnicodeExtraFields,  null);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  ||  useUnicodeExtraFields,  null);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	||  useUnicodeExtraFields,  null);	  ||    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
114	[BUG]  [BUGGY]  Integer.parseInt(encoding,  0,  0);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer.parseInt(encoding,  0,  0);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer.parseInt(encoding,  0,  0);	  Integer.parseInt(encoding),    0,    0);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
115	[BUG]  [BUGGY]  Integer.parseInt(encoding),  0,  1);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer.parseInt(encoding),  0,  1);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer.parseInt(encoding),  0,  1);	  Integer.parseInt(encoding),    0,    0);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
116	[BUG]  [BUGGY]  Integer.parseInt(encoding)+  1,  0,  0);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer.parseInt(encoding)+  1,  0,  0);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer.parseInt(encoding)+  1,  0,  0);	  Integer.parseInt(encoding),    0,    0);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
117	[BUG]  [BUGGY]  Integer.parseInt(encoding,  0,  1);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer.parseInt(encoding,  0,  1);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer.parseInt(encoding,  0,  1);	  Integer.parseInt(encoding),    0,    0);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
118	[BUG]  [BUGGY]  Integer.parseInt(encoding),  0,  4);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer.parseInt(encoding),  0,  4);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer.parseInt(encoding),  0,  4);	  Integer.parseInt(encoding),    0,    0);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
119	[BUG]  [BUGGY]  Integer.parseInt(encoding),  0,  2);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer.parseInt(encoding),  0,  2);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer.parseInt(encoding),  0,  2);	  Integer.parseInt(encoding),    0,    0);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
120	[BUG]  [BUGGY]  encoding,  useUnicodeExtraFields,  true);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  encoding,  useUnicodeExtraFields,  true);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	encoding,  useUnicodeExtraFields,  true);	  encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
121	[BUG]  [BUGGY]  encoding,  useUnicodeExtraFields,  null);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  encoding,  useUnicodeExtraFields,  null);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	encoding,  useUnicodeExtraFields,  null);	  encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
122	[BUG]  [BUGGY]  encoding,  useUnicodeExtraFields,  this.useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  encoding,  useUnicodeExtraFields,  this.useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	encoding,  useUnicodeExtraFields,  this.useUnicodeExtraFields);	  encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
123	[BUG]  [BUGGY]  encoding,  useUnicodeExtraFields,  false);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  encoding,  useUnicodeExtraFields,  false);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	encoding,  useUnicodeExtraFields,  false);	  encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
124	[BUG]  [BUGGY]  encoding,  useUnicodeExtraFields,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  encoding,  useUnicodeExtraFields,  zipEncoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	encoding,  useUnicodeExtraFields,  zipEncoding);	  encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
125	[BUG]  [BUGGY]  encoding,  useUnicodeExtraFields,  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  encoding,  useUnicodeExtraFields,  hasDataDescriptor);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	encoding,  useUnicodeExtraFields,  hasDataDescriptor);	  encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
126	[BUG]  [BUGGY]  final  boolean  zipEncoding,  int  hasDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  zipEncoding,  int  hasDataDescriptor)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  zipEncoding,  int  hasDataDescriptor)  {	  final    boolean    hasDataDescriptor,    int    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
127	[BUG]  [BUGGY]  final  boolean  hasDataDescriptor,  long  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  hasDataDescriptor,  long  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  hasDataDescriptor,  long  zipEncoding)  {	  final    boolean    hasDataDescriptor,    int    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
128	[BUG]  [BUGGY]  final  boolean  hasDataDescriptor,  short  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  hasDataDescriptor,  short  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  hasDataDescriptor,  short  zipEncoding)  {	  final    boolean    hasDataDescriptor,    int    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
129	[BUG]  [BUGGY]  this.encoding  =  ZipEncodingHelper.getZipEncoding(useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  ZipEncodingHelper.getZipEncoding(useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  ZipEncodingHelper.getZipEncoding(useUnicodeExtraFields);	  this.encoding    =    ZipEncodingHelper.getZipEncoding(ENCODING);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
130	[BUG]  [BUGGY]  this.encoding  =  ZipEncodingHelper.getZipEncoding(ENCODING,  encoding);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  ZipEncodingHelper.getZipEncoding(ENCODING,  encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  ZipEncodingHelper.getZipEncoding(ENCODING,  encoding);	  this.encoding    =    ZipEncodingHelper.getZipEncoding(ENCODING);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
131	[BUG]  [BUGGY]  this.encoding  =  ZipEncodingHelper.getZipEncoding(ENCODING,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  ZipEncodingHelper.getZipEncoding(ENCODING,  useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  ZipEncodingHelper.getZipEncoding(ENCODING,  useUnicodeExtraFields);	  this.encoding    =    ZipEncodingHelper.getZipEncoding(ENCODING);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
132	[BUG]  [BUGGY]  this.encoding  =  ZipEncodingHelper.getZipEncoding(encoding,  0);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  ZipEncodingHelper.getZipEncoding(encoding,  0);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  ZipEncodingHelper.getZipEncoding(encoding,  0);	  this.encoding    =    ZipEncodingHelper.getZipEncoding(ENCODING);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
133	[BUG]  [BUGGY]  final  boolean  useUnicodeExtraFields,  final  int  allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  useUnicodeExtraFields,  final  int  allowStoredEntriesWithDataDescriptor)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  useUnicodeExtraFields,  final  int  allowStoredEntriesWithDataDescriptor)  {	  final    boolean    useUnicodeExtraFields,    final    boolean    allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
134	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  encoding,  allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  encoding,  allowStoredEntriesWithDataDescriptor)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  encoding,  allowStoredEntriesWithDataDescriptor)  {	  final    boolean    useUnicodeExtraFields,    final    boolean    allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
135	[BUG]  [BUGGY]  final  int  useUnicodeExtraFields,  final  int  allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  int  useUnicodeExtraFields,  final  int  allowStoredEntriesWithDataDescriptor)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  int  useUnicodeExtraFields,  final  int  allowStoredEntriesWithDataDescriptor)  {	  final    boolean    useUnicodeExtraFields,    final    boolean    allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
136	[BUG]  [BUGGY]  final  boolean  useUnicodeExtraFields,  final  boolean  enableStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  useUnicodeExtraFields,  final  boolean  enableStoredEntriesWithDataDescriptor)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  useUnicodeExtraFields,  final  boolean  enableStoredEntriesWithDataDescriptor)  {	  final    boolean    useUnicodeExtraFields,    final    boolean    allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
137	[BUG]  [BUGGY]  final  boolean  useUnicodeExtraFields,  final  String  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  useUnicodeExtraFields,  final  String  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  useUnicodeExtraFields,  final  String  zipEncoding)  {	  final    boolean    useUnicodeExtraFields,    String    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
138	[BUG]  [BUGGY]  final  boolean  useUnicodeExtraFields,  ZipEncodingHelper  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  useUnicodeExtraFields,  ZipEncodingHelper  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  useUnicodeExtraFields,  ZipEncodingHelper  zipEncoding)  {	  final    boolean    useUnicodeExtraFields,    String    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
139	[BUG]  [BUGGY]  final  boolean  useUnicodeExtraFields,  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  useUnicodeExtraFields,  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  useUnicodeExtraFields,  zipEncoding)  {	  final    boolean    useUnicodeExtraFields,    String    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
140	[BUG]  [BUGGY]  super(in,  encoding,  useUnicodeExtraFields,  false);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(in,  encoding,  useUnicodeExtraFields,  false);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(in,  encoding,  useUnicodeExtraFields,  false);	  super(inputStream,    encoding,    useUnicodeExtraFields,    true);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
141	[BUG]  [BUGGY]  super(encoding,  encoding,  useUnicodeExtraFields,  false);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(encoding,  encoding,  useUnicodeExtraFields,  false);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(encoding,  encoding,  useUnicodeExtraFields,  false);	  super(inputStream,    encoding,    useUnicodeExtraFields,    true);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
142	[BUG]  [BUGGY]  super(inputStream,  encoding,  false);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  false);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  false);	  super(inputStream,    encoding,    useUnicodeExtraFields,    true);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
143	[BUG]  [BUGGY]  super(inputStream,  encoding,  usedUnicodeExtraFields,  false);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  usedUnicodeExtraFields,  false);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  usedUnicodeExtraFields,  false);	  super(inputStream,    encoding,    useUnicodeExtraFields,    true);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
144	[BUG]  [BUGGY]  super(encoding,  encoding,  useUnicodeExtraFields,  true);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(encoding,  encoding,  useUnicodeExtraFields,  true);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(encoding,  encoding,  useUnicodeExtraFields,  true);	  super(inputStream,    encoding,    useUnicodeExtraFields,    true);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
145	[BUG]  [BUGGY]  super(inputStream,  encoding,  true);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  true);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  true);	  super(inputStream,    encoding,    useUnicodeExtraFields,    true);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
146	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  encoding,  useUnicodeExtraFields,  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  encoding,  useUnicodeExtraFields,  hasDataDescriptor);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  encoding,  useUnicodeExtraFields,  hasDataDescriptor);	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
147	[BUG]  [BUGGY]  this.usedUnicodeExtraFields,  encoding,  useUnicodeExtraFields,  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.usedUnicodeExtraFields,  encoding,  useUnicodeExtraFields,  hasDataDescriptor);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.usedUnicodeExtraFields,  encoding,  useUnicodeExtraFields,  hasDataDescriptor);	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
148	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  encoding,  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  encoding,  hasDataDescriptor);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  useUnicodeExtraFields,  encoding,  hasDataDescriptor);	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
149	[BUG]  [BUGGY]  This.useUnicodeExtraFields,  encoding,  useUnicodeExtraFields,  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  This.useUnicodeExtraFields,  encoding,  useUnicodeExtraFields,  hasDataDescriptor);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	This.useUnicodeExtraFields,  encoding,  useUnicodeExtraFields,  hasDataDescriptor);	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
150	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  hasDataDescriptor,  encoding);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  hasDataDescriptor,  encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  useUnicodeExtraFields,  hasDataDescriptor,  encoding);	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
151	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  zipEncoding,  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  zipEncoding,  hasDataDescriptor);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  useUnicodeExtraFields,  zipEncoding,  hasDataDescriptor);	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
152	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  useUnicodeExtraFields.readLine())  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  useUnicodeExtraFields.readLine())  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  useUnicodeExtraFields.readLine())  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    in.readLine())    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
153	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  useUnicodeExtraFields,  in.readLine())  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  useUnicodeExtraFields,  in.readLine())  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  useUnicodeExtraFields,  in.readLine())  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    in.readLine())    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
154	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  in.readLine()  ||  in.readLine())  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  in.readLine()  ||  in.readLine())  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  in.readLine()  ||  in.readLine())  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    in.readLine())    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
155	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  in.available())  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  in.available())  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  in.available())  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    in.readLine())    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
156	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  zipEncoding,  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  zipEncoding,  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  zipEncoding,  useUnicodeExtraFields)  {	  this.useUnicodeExtraFields,    encoding,    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
157	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  encoding,  true)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  encoding,  true)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  encoding,  true)  {	  this.useUnicodeExtraFields,    encoding,    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
158	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  encoding,  false)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  encoding,  false)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  encoding,  false)  {	  this.useUnicodeExtraFields,    encoding,    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
159	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  encoding,  useUnicodeExtraFields,  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  encoding,  useUnicodeExtraFields,  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  encoding,  useUnicodeExtraFields,  zipEncoding)  {	  this.useUnicodeExtraFields,    encoding,    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
160	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  useUnicodeExtraFields,  zipEncoding)  {	  this.useUnicodeExtraFields,    encoding,    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
161	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  0,  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  0,  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  0,  useUnicodeExtraFields)  {	  this.useUnicodeExtraFields,    encoding,    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
162	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding(encoding))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding(encoding))  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding(encoding))  {	  this.useUnicodeExtraFields,    encoding)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
163	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  encoding,  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  encoding,  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  encoding,  zipEncoding)  {	  this.useUnicodeExtraFields,    encoding)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
164	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  encoding,  ZipEncodingHelper.getZipEncoding(encoding))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  encoding,  ZipEncodingHelper.getZipEncoding(encoding))  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  encoding,  ZipEncodingHelper.getZipEncoding(encoding))  {	  this.useUnicodeExtraFields,    encoding)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
165	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  encoding,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  encoding,  zipEncoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  encoding,  zipEncoding);	  this.useUnicodeExtraFields,    encoding);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
166	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  zipEncoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  zipEncoding);	  this.useUnicodeExtraFields,    encoding);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
167	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  encoding,  ZipEncodingHelper.getZipEncoding(encoding));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  encoding,  ZipEncodingHelper.getZipEncoding(encoding));  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  encoding,  ZipEncodingHelper.getZipEncoding(encoding));	  this.useUnicodeExtraFields,    encoding);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
168	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  encoding,  null);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  encoding,  null);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  encoding,  null);	  this.useUnicodeExtraFields,    encoding);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
169	[BUG]  [BUGGY]  final  boolean  useUnicodeExtraFields,  long  hasDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  useUnicodeExtraFields,  long  hasDataDescriptor)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  useUnicodeExtraFields,  long  hasDataDescriptor)  {	  final    boolean    useUnicodeExtraFields,    hasDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
170	[BUG]  [BUGGY]  final  boolean  useUnicodeExtraFields,  int  hasDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  useUnicodeExtraFields,  int  hasDataDescriptor)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  useUnicodeExtraFields,  int  hasDataDescriptor)  {	  final    boolean    useUnicodeExtraFields,    hasDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
171	[BUG]  [BUGGY]  final  boolean  useUnicodeExtraFields,  in)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  useUnicodeExtraFields,  in)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  useUnicodeExtraFields,  in)  {	  final    boolean    useUnicodeExtraFields,    hasDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
172	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  Integer[]  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  Integer[]  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  Integer[]  zipEncoding)  {	  final    boolean    allowStoredEntriesWithFields,    Integer    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
173	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  final  Integer  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  final  Integer  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  final  Integer  zipEncoding)  {	  final    boolean    allowStoredEntriesWithFields,    Integer    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
174	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  long  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  long  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  long  zipEncoding)  {	  final    boolean    allowStoredEntriesWithFields,    Integer    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
175	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  Integer  encoding)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  Integer  encoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  Integer  encoding)  {	  final    boolean    allowStoredEntriesWithFields,    Integer    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
176	[BUG]  [BUGGY]  final  int  allowStoredEntriesWithFields,  Integer  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  int  allowStoredEntriesWithFields,  Integer  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  int  allowStoredEntriesWithFields,  Integer  zipEncoding)  {	  final    boolean    allowStoredEntriesWithFields,    Integer    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
177	[BUG]  [BUGGY]  ||!useUnicodeExtraFields)  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  ||!useUnicodeExtraFields)  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	||!useUnicodeExtraFields)	  ||    useUnicodeExtraFields)    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
178	[BUG]  [BUGGY]  ||  encoding)  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  ||  encoding)  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	||  encoding)	  ||    useUnicodeExtraFields)    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
179	[BUG]  [BUGGY]  ||  this.useUnicodeExtraFields)  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  ||  this.useUnicodeExtraFields)  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	||  this.useUnicodeExtraFields)	  ||    useUnicodeExtraFields)    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
180	[BUG]  [BUGGY]  ||  useUnicodeExtraFields  &&  zipEncoding.equals(encoding))  {  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  ||  useUnicodeExtraFields  &&  zipEncoding.equals(encoding))  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	||  useUnicodeExtraFields  &&  zipEncoding.equals(encoding))  {	  ||    useUnicodeExtraFields)    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
181	[BUG]  [BUGGY]  ||  useUnicodeExtraFields,  encoding)  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  ||  useUnicodeExtraFields,  encoding)  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	||  useUnicodeExtraFields,  encoding)	  ||    useUnicodeExtraFields)    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
182	[BUG]  [BUGGY]  ||  useUnicodeExtraFields,  zipEncoding)  [CE]  illegal  start  of  type  [FE]                                              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  ||  useUnicodeExtraFields,  zipEncoding)  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	||  useUnicodeExtraFields,  zipEncoding)	  ||    useUnicodeExtraFields)    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
183	[BUG]  [BUGGY]  this.useUnicodeExtraFields  &=  encoding;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields  &=  encoding;  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields  &=  encoding;	  this.useUnicodeExtraFields    &=    useUnicodeExtraFields;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
184	[BUG]  [BUGGY]  this.useUnicodeExtraFields  |=  useUnicodeExtraFields;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields  |=  useUnicodeExtraFields;  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields  |=  useUnicodeExtraFields;	  this.useUnicodeExtraFields    &=    useUnicodeExtraFields;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
185	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  encoding,  useUnicodeExtraFields;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  encoding,  useUnicodeExtraFields;  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  encoding,  useUnicodeExtraFields;	  this.useUnicodeExtraFields    &=    useUnicodeExtraFields;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
186	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding(encoding),  null)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding(encoding),  null)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding(encoding),  null)  {	  this.useUnicodeExtraFields,    null)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
187	[BUG]  [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  zipEncoding,  usesZip64);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  zipEncoding,  usesZip64);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  useUnicodeExtraFields,  zipEncoding,  usesZip64);	  super(inputStream,    encoding,    useUnicodeExtraFields,    usesZip64);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
188	[BUG]  [BUGGY]  this.encoding  =!useUnicodeExtraFields;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =!useUnicodeExtraFields;  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =!useUnicodeExtraFields;	  this.encoding    =    useUnicodeExtraFields;    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
189	[BUG]  [BUGGY]  This.useUnicodeExtraFields,  true)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  This.useUnicodeExtraFields,  true)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	This.useUnicodeExtraFields,  true)  {	  this.useUnicodeExtraFields,    false)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
190	[BUG]  [BUGGY]  This.useUnicodeExtraFields,  false)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  This.useUnicodeExtraFields,  false)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	This.useUnicodeExtraFields,  false)  {	  this.useUnicodeExtraFields,    false)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
191	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  shortBuf,  bytesReadFromStream)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  shortBuf,  bytesReadFromStream)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  shortBuf,  bytesReadFromStream)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    shortBuf)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
192	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  shortBuf,  max)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  shortBuf,  max)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  shortBuf,  max)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    shortBuf)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
193	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  encoding,  ZipEncodingHelper.getZipEncoding());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  encoding,  ZipEncodingHelper.getZipEncoding());  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  encoding,  ZipEncodingHelper.getZipEncoding());	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    ZipEncodingHelper.getZipEncoding());    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
194	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  zipEncoding,  ZipEncodingHelper.getZipEncoding());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  zipEncoding,  ZipEncodingHelper.getZipEncoding());  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  useUnicodeExtraFields,  zipEncoding,  ZipEncodingHelper.getZipEncoding());	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    ZipEncodingHelper.getZipEncoding());    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
195	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  encoding,  useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  encoding,  useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding());  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  encoding,  useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding());	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    ZipEncodingHelper.getZipEncoding());    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
196	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  zipEncoding,  ZipEncodingHelper.getZipEncoding());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  zipEncoding,  ZipEncodingHelper.getZipEncoding());  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  zipEncoding,  ZipEncodingHelper.getZipEncoding());	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    ZipEncodingHelper.getZipEncoding());    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
197	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  zipEncoding,  useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  zipEncoding,  useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding());  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  zipEncoding,  useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding());	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    ZipEncodingHelper.getZipEncoding());    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
198	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  useUnicodeExtraFields.read())  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  useUnicodeExtraFields.read())  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  useUnicodeExtraFields.read())  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    in.read())    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
199	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  in.read(encoding))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  in.read(encoding))  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  in.read(encoding))  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    in.read())    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
200	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  useUnicodeExtraFields,  in.read())  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  useUnicodeExtraFields,  in.read())  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  useUnicodeExtraFields,  in.read())  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    in.read())    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
201	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  in.read()  ||  in.read())  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  in.read()  ||  in.read())  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  in.read()  ||  in.read())  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    in.read())    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
202	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  useUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithFields,    shortBuf)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
203	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  shortBuf,  bytesReadFromStream)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  shortBuf,  bytesReadFromStream)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  shortBuf,  bytesReadFromStream)  {	  final    boolean    allowStoredEntriesWithFields,    shortBuf)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
204	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  shortBuf,  max)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  shortBuf,  max)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  shortBuf,  max)  {	  final    boolean    allowStoredEntriesWithFields,    shortBuf)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
205	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  bytesReadFromStream)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  bytesReadFromStream)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  bytesReadFromStream)  {	  final    boolean    allowStoredEntriesWithFields,    shortBuf)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
206	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  shortBuf,  int  max)  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  shortBuf,  int  max)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  shortBuf,  int  max)  {	  final    boolean    allowStoredEntriesWithFields,    shortBuf)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
207	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  intBuf)  {  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  intBuf)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  intBuf)  {	  final    boolean    allowStoredEntriesWithFields,    shortBuf)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
208	[BUG]  [BUGGY]  Integer.parseInt(encoding,  useUnicodeExtraFields));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer.parseInt(encoding,  useUnicodeExtraFields));  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer.parseInt(encoding,  useUnicodeExtraFields));	  Integer.parseInt(encoding));    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
209	[BUG]  [BUGGY]  Integer.parseInt(encoding,  0));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer.parseInt(encoding,  0));  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer.parseInt(encoding,  0));	  Integer.parseInt(encoding));    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
210	[BUG]  [BUGGY]  Integer.parseInt(encoding),  0);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer.parseInt(encoding),  0);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer.parseInt(encoding),  0);	  Integer.parseInt(encoding));    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
211	[BUG]  [BUGGY]  Integer.parseInt(encoding);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer.parseInt(encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer.parseInt(encoding);	  Integer.parseInt(encoding));    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
212	[BUG]  [BUGGY]  Integer.parseInt(encoding,  1);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer.parseInt(encoding,  1);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer.parseInt(encoding,  1);	  Integer.parseInt(encoding));    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
213	[BUG]  [BUGGY]  Integer.parseInt(encoding,  0,  0));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer.parseInt(encoding,  0,  0));  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer.parseInt(encoding,  0,  0));	  Integer.parseInt(encoding));    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
214	[BUG]  [BUGGY]  final  boolean  useUnicodeExtraFields,  final  Integer  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  useUnicodeExtraFields,  final  Integer  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  useUnicodeExtraFields,  final  Integer  zipEncoding)  {	  final    boolean    useUnicodeExtraFields,    Integer    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
215	[BUG]  [BUGGY]  final  boolean  useUnicodeExtraFields,  long  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  useUnicodeExtraFields,  long  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  useUnicodeExtraFields,  long  zipEncoding)  {	  final    boolean    useUnicodeExtraFields,    Integer    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
216	[BUG]  [BUGGY]  final  boolean  useUnicodeExtraFields,  Integer[]  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  useUnicodeExtraFields,  Integer[]  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  useUnicodeExtraFields,  Integer[]  zipEncoding)  {	  final    boolean    useUnicodeExtraFields,    Integer    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
217	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  short  in)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  short  in)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  short  in)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    long    in)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
218	[BUG]  [BUGGY]  final  int  allowStoredEntriesWithDataDescriptor,  long  in)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  int  allowStoredEntriesWithDataDescriptor,  long  in)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  int  allowStoredEntriesWithDataDescriptor,  long  in)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    long    in)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
219	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  Integer  in)  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  Integer  in)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  Integer  in)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    long    in)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
220	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  String  in)  {  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  String  in)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  String  in)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    long    in)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
221	[BUG]  [BUGGY]  ||  encoding;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  ||  encoding;  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	||  encoding;	  ||    useUnicodeExtraFields;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
222	[BUG]  [BUGGY]  ||!useUnicodeExtraFields;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  ||!useUnicodeExtraFields;  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	||!useUnicodeExtraFields;	  ||    useUnicodeExtraFields;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
223	[BUG]  [BUGGY]  ||  useUnicodeExtraFields  ||  encoding;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  ||  useUnicodeExtraFields  ||  encoding;  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	||  useUnicodeExtraFields  ||  encoding;	  ||    useUnicodeExtraFields;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
224	[BUG]  [BUGGY]  ||  useUnicodeExtraFields  ||  zipEncoding;  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  ||  useUnicodeExtraFields  ||  zipEncoding;  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	||  useUnicodeExtraFields  ||  zipEncoding;	  ||    useUnicodeExtraFields;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
225	[BUG]  [BUGGY]  ||  useUnicodeExtraFields,  encoding;  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  ||  useUnicodeExtraFields,  encoding;  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	||  useUnicodeExtraFields,  encoding;	  ||    useUnicodeExtraFields;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
226	[BUG]  [BUGGY]  ||  this.useUnicodeExtraFields;  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  ||  this.useUnicodeExtraFields;  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	||  this.useUnicodeExtraFields;	  ||    useUnicodeExtraFields;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
227	[BUG]  [BUGGY]  this.encoding  =  StringEncodingHelper.getZipEncoding(encoding,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  StringEncodingHelper.getZipEncoding(encoding,  useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  StringEncodingHelper.getZipEncoding(encoding,  useUnicodeExtraFields);	  this.encoding    =    zipEncoding;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
228	[BUG]  [BUGGY]  this.encoding  =  StringEncoderHelper.getZipEncoding(encoding);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  StringEncoderHelper.getZipEncoding(encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  StringEncoderHelper.getZipEncoding(encoding);	  this.encoding    =    zipEncoding;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
229	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  encoding,  useUnicodeExtraFields,  null);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  encoding,  useUnicodeExtraFields,  null);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  encoding,  useUnicodeExtraFields,  null);	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    null);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
230	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  zipEncoding,  null);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  zipEncoding,  null);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  useUnicodeExtraFields,  zipEncoding,  null);	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    null);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
231	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  encoding,  null);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  encoding,  null);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  useUnicodeExtraFields,  encoding,  null);	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    null);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
232	[BUG]  [BUGGY]  This.useUnicodeExtraFields,  encoding,  useUnicodeExtraFields,  null);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  This.useUnicodeExtraFields,  encoding,  useUnicodeExtraFields,  null);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	This.useUnicodeExtraFields,  encoding,  useUnicodeExtraFields,  null);	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    null);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
233	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  null,  encoding);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  null,  encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  useUnicodeExtraFields,  null,  encoding);	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    null);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
234	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  int  usesZip64)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  int  usesZip64)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  int  usesZip64)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    boolean    usesZip64)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
235	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  final  boolean  usesZip64)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  final  boolean  usesZip64)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  final  boolean  usesZip64)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    boolean    usesZip64)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
236	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  boolean  isUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  boolean  isUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  boolean  isUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    boolean    usesZip64)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
237	[BUG]  [BUGGY]  final  int  allowStoredEntriesWithDataDescriptor,  boolean  usesZip64)  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  int  allowStoredEntriesWithDataDescriptor,  boolean  usesZip64)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  int  allowStoredEntriesWithDataDescriptor,  boolean  usesZip64)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    boolean    usesZip64)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
238	[BUG]  [BUGGY]  final  boolean  enableStoredEntriesWithDataDescriptor,  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  enableStoredEntriesWithDataDescriptor,  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  enableStoredEntriesWithDataDescriptor,  useUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
239	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  final  int  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  final  int  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  final  int  useUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    final    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
240	[BUG]  [BUGGY]  final  int  allowStoredEntriesWithDataDescriptor,  final  int  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  int  allowStoredEntriesWithDataDescriptor,  final  int  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  int  allowStoredEntriesWithDataDescriptor,  final  int  useUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    final    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
241	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  final  boolean  enableUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  final  boolean  enableUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  final  boolean  enableUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    final    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
242	[BUG]  [BUGGY]  final  int  allowStoredEntriesWithFields,  final  int  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  int  allowStoredEntriesWithFields,  final  int  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  int  allowStoredEntriesWithFields,  final  int  zipEncoding)  {	  final    boolean    allowStoredEntriesWithFields,    final    int    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
243	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  final  String  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  final  String  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  final  String  zipEncoding)  {	  final    boolean    allowStoredEntriesWithFields,    final    int    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
244	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  final  long  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  final  long  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  final  long  zipEncoding)  {	  final    boolean    allowStoredEntriesWithFields,    final    int    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
245	[BUG]  [BUGGY]  final  boolean  enableStoredEntriesWithFields,  final  int  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  enableStoredEntriesWithFields,  final  int  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  enableStoredEntriesWithFields,  final  int  zipEncoding)  {	  final    boolean    allowStoredEntriesWithFields,    final    int    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
246	[BUG]  [BUGGY]  super(in,  encoding,  allowStoredEntriesWithDataDescriptor,  true);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(in,  encoding,  allowStoredEntriesWithDataDescriptor,  true);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(in,  encoding,  allowStoredEntriesWithDataDescriptor,  true);	  super(in,    encoding,    useUnicodeExtraFields,    true);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
247	[BUG]  [BUGGY]  super(in,  encoding,  false);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(in,  encoding,  false);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(in,  encoding,  false);	  super(in,    encoding,    useUnicodeExtraFields,    true);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
248	[BUG]  [BUGGY]  super(in,  encoding,  useUnicodeExtraFields,  true,  false);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(in,  encoding,  useUnicodeExtraFields,  true,  false);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(in,  encoding,  useUnicodeExtraFields,  true,  false);	  super(in,    encoding,    useUnicodeExtraFields,    true);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
249	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  hasDataDescriptor;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  hasDataDescriptor;  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  useUnicodeExtraFields,  hasDataDescriptor;	  this.useUnicodeExtraFields,    useUnicodeExtraFields;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
250	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  encoding;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  encoding;  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  useUnicodeExtraFields,  encoding;	  this.useUnicodeExtraFields,    useUnicodeExtraFields;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
251	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  true;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  true;  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  useUnicodeExtraFields,  true;	  this.useUnicodeExtraFields,    useUnicodeExtraFields;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
252	[BUG]  [BUGGY]  Integer.toString(encoding),  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer.toString(encoding),  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer.toString(encoding),	  Integer.toString(useUnicodeExtraFields),    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
253	[BUG]  [BUGGY]  Integer.toString(encoding,  useUnicodeExtraFields)  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer.toString(encoding,  useUnicodeExtraFields)  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer.toString(encoding,  useUnicodeExtraFields)	  Integer.toString(useUnicodeExtraFields),    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
254	[BUG]  [BUGGY]  Integer.toString(encoding,  useUnicodeExtraFields),  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer.toString(encoding,  useUnicodeExtraFields),  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer.toString(encoding,  useUnicodeExtraFields),	  Integer.toString(useUnicodeExtraFields),    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
255	[BUG]  [BUGGY]  Integer.toString(encoding,  useUnicodeExtraFields));  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer.toString(encoding,  useUnicodeExtraFields));  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer.toString(encoding,  useUnicodeExtraFields));	  Integer.toString(useUnicodeExtraFields),    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
256	[BUG]  [BUGGY]  Integer.toString(encoding));  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer.toString(encoding));  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer.toString(encoding));	  Integer.toString(useUnicodeExtraFields),    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
257	[BUG]  [BUGGY]  Integer.toString(encoding)&&  useUnicodeExtraFields,  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer.toString(encoding)&&  useUnicodeExtraFields,  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer.toString(encoding)&&  useUnicodeExtraFields,	  Integer.toString(useUnicodeExtraFields),    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
258	[BUG]  [BUGGY]  Integer  buf  =  inputStream.readFully(encoding,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer  buf  =  inputStream.readFully(encoding,  useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer  buf  =  inputStream.readFully(encoding,  useUnicodeExtraFields);	  Integer    buf    =    inputStream.readFully(encoding);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
259	[BUG]  [BUGGY]  Integer  buf  =  inputStream.readFully(encoding,  0);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer  buf  =  inputStream.readFully(encoding,  0);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer  buf  =  inputStream.readFully(encoding,  0);	  Integer    buf    =    inputStream.readFully(encoding);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
260	[BUG]  [BUGGY]  Integer  buf  =  inputStream.readUTF8(encoding);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer  buf  =  inputStream.readUTF8(encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer  buf  =  inputStream.readUTF8(encoding);	  Integer    buf    =    inputStream.readFully(encoding);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
261	[BUG]  [BUGGY]  Integer  buf  =  inputStream.readFully(encoding,  true);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer  buf  =  inputStream.readFully(encoding,  true);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer  buf  =  inputStream.readFully(encoding,  true);	  Integer    buf    =    inputStream.readFully(encoding);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
262	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  zipEncoding,  encoding)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  zipEncoding,  encoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  zipEncoding,  encoding)  {	  this.useUnicodeExtraFields,    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
263	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  zipEncoding,  true)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  zipEncoding,  true)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  zipEncoding,  true)  {	  this.useUnicodeExtraFields,    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
264	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  in,  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  in,  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  in,  useUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    in,    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
265	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  zipEncoding)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    in,    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
266	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  ZipEncodingHelper.getZipEncoding(encoding))  {  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  ZipEncodingHelper.getZipEncoding(encoding))  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  ZipEncodingHelper.getZipEncoding(encoding))  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    in,    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
267	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  in,  this.zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  in,  this.zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  in,  this.zipEncoding)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    in,    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
268	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  in,  0,  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  in,  0,  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  in,  0,  zipEncoding)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    in,    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
269	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  in,  zipEncoding,  encoding)  {  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  in,  zipEncoding,  encoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  in,  zipEncoding,  encoding)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    in,    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
270	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  final  int  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  final  int  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  final  int  zipEncoding)  {	  final    boolean    useUnicodeExtraFields,    final    int    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
271	[BUG]  [BUGGY]  final  int  useUnicodeExtraFields,  final  int  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  int  useUnicodeExtraFields,  final  int  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  int  useUnicodeExtraFields,  final  int  zipEncoding)  {	  final    boolean    useUnicodeExtraFields,    final    int    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
272	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  usesUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  usesUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  usesUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    usesZip64)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
273	[BUG]  [BUGGY]  final  boolean  useUnicodeExtraFields,  short  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  useUnicodeExtraFields,  short  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  useUnicodeExtraFields,  short  zipEncoding)  {	  final    boolean    useUnicodeExtraFields,    int    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
274	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  hasDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  hasDataDescriptor)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  hasDataDescriptor)  {	  final    boolean    allowStoredEntriesWithZip64,    hasDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
275	[BUG]  [BUGGY]  this.useUnicodeExtraFields  =  UseUnicodeExtraFields;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields  =  UseUnicodeExtraFields;  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields  =  UseUnicodeExtraFields;	  this.useUnicodeExtraFields    =    encoding;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
276	[BUG]  [BUGGY]  super(in,  encoding,  useUnicodeExtraFields,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(in,  encoding,  useUnicodeExtraFields,  zipEncoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(in,  encoding,  useUnicodeExtraFields,  zipEncoding);	  super(inputStream,    encoding,    useUnicodeExtraFields,    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
277	[BUG]  [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding(encoding));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding(encoding));  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding(encoding));	  super(inputStream,    encoding,    useUnicodeExtraFields,    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
278	[BUG]  [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  zipEncoding,  this.useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  zipEncoding,  this.useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  useUnicodeExtraFields,  zipEncoding,  this.useUnicodeExtraFields);	  super(inputStream,    encoding,    useUnicodeExtraFields,    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
279	[BUG]  [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  this.zipEncoding);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  this.zipEncoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  useUnicodeExtraFields,  this.zipEncoding);	  super(inputStream,    encoding,    useUnicodeExtraFields,    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
280	[BUG]  [BUGGY]  this.encoding  =  ZipEncodingHelper.getZipEncoding(encoding,  useUnicodeExtraFields,  true);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  ZipEncodingHelper.getZipEncoding(encoding,  useUnicodeExtraFields,  true);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  ZipEncodingHelper.getZipEncoding(encoding,  useUnicodeExtraFields,  true);	  this.encoding    =    ZipEncodingHelper.getZipEncoding(encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
281	[BUG]  [BUGGY]  this.encoding  =  ZipEncodingHelper.getZipEncoding(encoding,  useUnicodeExtraFields,  0);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  ZipEncodingHelper.getZipEncoding(encoding,  useUnicodeExtraFields,  0);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  ZipEncodingHelper.getZipEncoding(encoding,  useUnicodeExtraFields,  0);	  this.encoding    =    ZipEncodingHelper.getZipEncoding(encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
282	[BUG]  [BUGGY]  this.encoding  =  ZipEncodingHelper.getZipEncoding(encoding,  useUnicodeExtraFields,  false);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  ZipEncodingHelper.getZipEncoding(encoding,  useUnicodeExtraFields,  false);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  ZipEncodingHelper.getZipEncoding(encoding,  useUnicodeExtraFields,  false);	  this.encoding    =    ZipEncodingHelper.getZipEncoding(encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
283	[BUG]  [BUGGY]  this.encoding  =  ZipEncodingHelper.getZipEncoding(encoding,  encoding);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  ZipEncodingHelper.getZipEncoding(encoding,  encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  ZipEncodingHelper.getZipEncoding(encoding,  encoding);	  this.encoding    =    ZipEncodingHelper.getZipEncoding(encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
284	[BUG]  [BUGGY]  super(inputStream,  encoding,  false,  useUnicodeExtraFields,  allowStoredEntriesWithDataDescriptor);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  false,  useUnicodeExtraFields,  allowStoredEntriesWithDataDescriptor);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  false,  useUnicodeExtraFields,  allowStoredEntriesWithDataDescriptor);	  super(inputStream,    encoding,    useUnicodeExtraFields,    allowStoredEntriesWithDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
285	[BUG]  [BUGGY]  super(inputStream,  encoding,  allowStoredEntriesWithDataDescriptor,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  allowStoredEntriesWithDataDescriptor,  useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  allowStoredEntriesWithDataDescriptor,  useUnicodeExtraFields);	  super(inputStream,    encoding,    useUnicodeExtraFields,    allowStoredEntriesWithDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
286	[BUG]  [BUGGY]  super(in,  encoding,  useUnicodeExtraFields,  allowStoredEntriesWithDataDescriptor,  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(in,  encoding,  useUnicodeExtraFields,  allowStoredEntriesWithDataDescriptor,  hasDataDescriptor);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(in,  encoding,  useUnicodeExtraFields,  allowStoredEntriesWithDataDescriptor,  hasDataDescriptor);	  super(inputStream,    encoding,    useUnicodeExtraFields,    allowStoredEntriesWithDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
287	[BUG]  [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  allowStoredEntriesWithDataDescriptor,  true);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  allowStoredEntriesWithDataDescriptor,  true);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  useUnicodeExtraFields,  allowStoredEntriesWithDataDescriptor,  true);	  super(inputStream,    encoding,    useUnicodeExtraFields,    allowStoredEntriesWithDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
288	[BUG]  [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  true,  allowStoredEntriesWithDataDescriptor);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  true,  allowStoredEntriesWithDataDescriptor);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  useUnicodeExtraFields,  true,  allowStoredEntriesWithDataDescriptor);	  super(inputStream,    encoding,    useUnicodeExtraFields,    allowStoredEntriesWithDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
289	[BUG]  [BUGGY]  super(in,  encoding,  useUnicodeExtraFields,  allowStoredEntriesWithDataDescriptor,  true);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(in,  encoding,  useUnicodeExtraFields,  allowStoredEntriesWithDataDescriptor,  true);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(in,  encoding,  useUnicodeExtraFields,  allowStoredEntriesWithDataDescriptor,  true);	  super(inputStream,    encoding,    useUnicodeExtraFields,    allowStoredEntriesWithDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
290	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  int  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  int  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  int  zipEncoding)  {	  final    boolean    allowStoredEntriesWithZip64,    int    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
291	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  long  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  long  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithZip64,  long  zipEncoding)  {	  final    boolean    allowStoredEntriesWithZip64,    int    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
292	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  String  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  String  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithZip64,  String  zipEncoding)  {	  final    boolean    allowStoredEntriesWithZip64,    int    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
293	[BUG]  [BUGGY]  final  int  allowStoredEntriesWithZip64,  int  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  int  allowStoredEntriesWithZip64,  int  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  int  allowStoredEntriesWithZip64,  int  zipEncoding)  {	  final    boolean    allowStoredEntriesWithZip64,    int    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
294	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  short  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  short  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithZip64,  short  zipEncoding)  {	  final    boolean    allowStoredEntriesWithZip64,    int    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
295	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  Integer  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  Integer  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithZip64,  Integer  zipEncoding)  {	  final    boolean    allowStoredEntriesWithZip64,    int    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
296	[BUG]  [BUGGY]  final  boolean  zipEncoding,  final  boolean  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  zipEncoding,  final  boolean  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  zipEncoding,  final  boolean  useUnicodeExtraFields)  {	  final    boolean    useUnicodeExtraFields,    final    boolean    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
297	[BUG]  [BUGGY]  final  boolean  useUnicodeExtraFields,  final  byte[]  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  useUnicodeExtraFields,  final  byte[]  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  useUnicodeExtraFields,  final  byte[]  zipEncoding)  {	  final    boolean    useUnicodeExtraFields,    final    boolean    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
298	[BUG]  [BUGGY]  encoding,  final  boolean  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  encoding,  final  boolean  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	encoding,  final  boolean  useUnicodeExtraFields)  {	  final    boolean    useUnicodeExtraFields,    final    boolean    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
299	[BUG]  [BUGGY]  final  int  allowStoredEntriesWithDataDescriptor,  int  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  int  allowStoredEntriesWithDataDescriptor,  int  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  int  allowStoredEntriesWithDataDescriptor,  int  useUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    int    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
300	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  long  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  long  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  long  useUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    int    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
301	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  short  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  short  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  short  useUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    int    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
302	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  int  zipEncoding,  int  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  int  zipEncoding,  int  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  int  zipEncoding,  int  useUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    int    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
303	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  boolean  disableUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  boolean  disableUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  boolean  disableUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    boolean    enableUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
304	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  boolean  allowUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  boolean  allowUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  boolean  allowUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    boolean    enableUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
305	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  boolean  enabledUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  boolean  enabledUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  boolean  enabledUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    boolean    enableUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
306	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  final  boolean  allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  final  boolean  allowStoredEntriesWithDataDescriptor)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  final  boolean  allowStoredEntriesWithDataDescriptor)  {	  final    boolean    allowStoredEntriesWithFields,    final    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
307	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  final  int  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  final  int  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  final  int  useUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithFields,    final    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
308	[BUG]  [BUGGY]  final  int  allowStoredEntriesWithFields,  final  int  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  int  allowStoredEntriesWithFields,  final  int  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  int  allowStoredEntriesWithFields,  final  int  useUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithFields,    final    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
309	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  final  boolean  enableStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  final  boolean  enableStoredEntriesWithDataDescriptor)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  final  boolean  enableStoredEntriesWithDataDescriptor)  {	  final    boolean    allowStoredEntriesWithFields,    final    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
310	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  final  boolean  enableUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  final  boolean  enableUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  final  boolean  enableUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithFields,    final    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
311	[BUG]  [BUGGY]  super(inputStream,  encoding,  allowStoredEntriesWithDataDescriptor,  false);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  allowStoredEntriesWithDataDescriptor,  false);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  allowStoredEntriesWithDataDescriptor,  false);	  super(inputStream,    encoding,    useUnicodeExtraFields,    false);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
312	[BUG]  [BUGGY]  this.encoding  =  ZipEncodingHelper.getZipEncoding(encoding,  true);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  ZipEncodingHelper.getZipEncoding(encoding,  true);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  ZipEncodingHelper.getZipEncoding(encoding,  true);	  this.encoding    =    ZipEncodingHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
313	[BUG]  [BUGGY]  this.encoding  =  ZipEncodingHelper.getCrcEncoding(encoding);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  ZipEncodingHelper.getCrcEncoding(encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  ZipEncodingHelper.getCrcEncoding(encoding);	  this.encoding    =    ZipEncodingHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
314	[BUG]  [BUGGY]  this.encoding  =  ZipEncodingHelper.getUseUnicodeExtraFields(encoding);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  ZipEncodingHelper.getUseUnicodeExtraFields(encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  ZipEncodingHelper.getUseUnicodeExtraFields(encoding);	  this.encoding    =    ZipEncodingHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
315	[BUG]  [BUGGY]  this.encoding  =  ZipEncodingHelper.getZipEncoding(encoding,  _useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  ZipEncodingHelper.getZipEncoding(encoding,  _useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  ZipEncodingHelper.getZipEncoding(encoding,  _useUnicodeExtraFields);	  this.encoding    =    ZipEncodingHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
316	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  this.useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  this.useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithZip64,  this.useUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithZip64,    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
317	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  usingUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  usingUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithZip64,  usingUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithZip64,    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
318	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  useUnicodeExtraFields,  in)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  useUnicodeExtraFields,  in)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithZip64,  useUnicodeExtraFields,  in)  {	  final    boolean    allowStoredEntriesWithZip64,    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
319	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  isEnabled)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  isEnabled)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  isEnabled)  {	  final    boolean    allowStoredEntriesWithZip64,    isEnabled)    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
320	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  this.isEnabled)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  this.isEnabled)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithZip64,  this.isEnabled)  {	  final    boolean    allowStoredEntriesWithZip64,    isEnabled)    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
321	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  isEnabled)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  isEnabled)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  isEnabled)  {	  final    boolean    allowStoredEntriesWithZip64,    isEnabled)    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
322	[BUG]  [BUGGY]  super(inputStream,  encoding,  this.useUnicodeExtraFields,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  this.useUnicodeExtraFields,  useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  this.useUnicodeExtraFields,  useUnicodeExtraFields);	  super(inputStream,    encoding,    useUnicodeExtraFields,    this.useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
323	[BUG]  [BUGGY]  super(encoding,  encoding,  useUnicodeExtraFields,  this.useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(encoding,  encoding,  useUnicodeExtraFields,  this.useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(encoding,  encoding,  useUnicodeExtraFields,  this.useUnicodeExtraFields);	  super(inputStream,    encoding,    useUnicodeExtraFields,    this.useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
324	[BUG]  [BUGGY]  super(in,  encoding,  this.useUnicodeExtraFields,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(in,  encoding,  this.useUnicodeExtraFields,  useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(in,  encoding,  this.useUnicodeExtraFields,  useUnicodeExtraFields);	  super(inputStream,    encoding,    useUnicodeExtraFields,    this.useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
325	[BUG]  [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  this.useUnicodeExtraFields,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  this.useUnicodeExtraFields,  zipEncoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  useUnicodeExtraFields,  this.useUnicodeExtraFields,  zipEncoding);	  super(inputStream,    encoding,    useUnicodeExtraFields,    this.useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
326	[BUG]  [BUGGY]  super(in,  encoding,  useUnicodeExtraFields,  this.useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(in,  encoding,  useUnicodeExtraFields,  this.useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(in,  encoding,  useUnicodeExtraFields,  this.useUnicodeExtraFields);	  super(inputStream,    encoding,    useUnicodeExtraFields,    this.useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
327	[BUG]  [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  this.useUnicodeExtraFields,  true);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  this.useUnicodeExtraFields,  true);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  useUnicodeExtraFields,  this.useUnicodeExtraFields,  true);	  super(inputStream,    encoding,    useUnicodeExtraFields,    this.useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
328	[BUG]  [BUGGY]  final  int  allowStoredEntriesWithDataDescriptor,  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  int  allowStoredEntriesWithDataDescriptor,  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  int  allowStoredEntriesWithDataDescriptor,  useUnicodeExtraFields)  {	  final    int    allowStoredEntriesWithDataDescriptor,    hasDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
329	[BUG]  [BUGGY]  final  byte  allowStoredEntriesWithDataDescriptor,  hasDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  byte  allowStoredEntriesWithDataDescriptor,  hasDataDescriptor)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  byte  allowStoredEntriesWithDataDescriptor,  hasDataDescriptor)  {	  final    int    allowStoredEntriesWithDataDescriptor,    hasDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
330	[BUG]  [BUGGY]  final  int  allowStoredEntriesWithDataDescriptor,  encoding)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  int  allowStoredEntriesWithDataDescriptor,  encoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  int  allowStoredEntriesWithDataDescriptor,  encoding)  {	  final    int    allowStoredEntriesWithDataDescriptor,    hasDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
331	[BUG]  [BUGGY]  final  char  allowStoredEntriesWithDataDescriptor,  hasDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  char  allowStoredEntriesWithDataDescriptor,  hasDataDescriptor)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  char  allowStoredEntriesWithDataDescriptor,  hasDataDescriptor)  {	  final    int    allowStoredEntriesWithDataDescriptor,    hasDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
332	[BUG]  [BUGGY]  final  long  allowStoredEntriesWithDataDescriptor,  hasDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  long  allowStoredEntriesWithDataDescriptor,  hasDataDescriptor)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  long  allowStoredEntriesWithDataDescriptor,  hasDataDescriptor)  {	  final    int    allowStoredEntriesWithDataDescriptor,    hasDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
333	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  zipEncoding,  ZipEncodingHelper.getZipEncoding(encoding);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  zipEncoding,  ZipEncodingHelper.getZipEncoding(encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  zipEncoding,  ZipEncodingHelper.getZipEncoding(encoding);	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    ZipEncodingHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
334	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  encoding,  ZipEncodingHelper.getZipEncoding(encoding);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  encoding,  ZipEncodingHelper.getZipEncoding(encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  encoding,  ZipEncodingHelper.getZipEncoding(encoding);	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    ZipEncodingHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
335	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding(encoding);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding(encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding(encoding);	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    ZipEncodingHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
336	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  zipEncoding,  ZipEncodingHelper.getZipEncoding(encoding);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  zipEncoding,  ZipEncodingHelper.getZipEncoding(encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  useUnicodeExtraFields,  zipEncoding,  ZipEncodingHelper.getZipEncoding(encoding);	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    ZipEncodingHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
337	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  encoding,  ZipEncodingHelper.getZipEncoding(useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  encoding,  ZipEncodingHelper.getZipEncoding(useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  encoding,  ZipEncodingHelper.getZipEncoding(useUnicodeExtraFields);	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    ZipEncodingHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
338	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  true,  ZipEncodingHelper.getZipEncoding(encoding);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  true,  ZipEncodingHelper.getZipEncoding(encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  true,  ZipEncodingHelper.getZipEncoding(encoding);	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    ZipEncodingHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
339	[BUG]  [BUGGY]  this.encoding  =  zipEncodingHelper.getZipEncoding(encoding);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  zipEncodingHelper.getZipEncoding(encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  zipEncodingHelper.getZipEncoding(encoding);	  this.encoding    =    StringEncodingHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
340	[BUG]  [BUGGY]  this.encoding  =  zipEncoding  +  StringEncodingHelper.getZipEncoding(encoding);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  zipEncoding  +  StringEncodingHelper.getZipEncoding(encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  zipEncoding  +  StringEncodingHelper.getZipEncoding(encoding);	  this.encoding    =    StringEncodingHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
341	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  0,  encoding);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  0,  encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  0,  encoding);	  this.useUnicodeExtraFields,    0,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
342	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  encoding,  0,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  encoding,  0,  useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  encoding,  0,  useUnicodeExtraFields);	  this.useUnicodeExtraFields,    0,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
343	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  0,  useUnicodeExtraFields,  encoding);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  0,  useUnicodeExtraFields,  encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  0,  useUnicodeExtraFields,  encoding);	  this.useUnicodeExtraFields,    0,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
344	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  0,  encoding,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  0,  encoding,  useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  0,  encoding,  useUnicodeExtraFields);	  this.useUnicodeExtraFields,    0,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
345	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  0,  useUnicodeExtraFields,  true);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  0,  useUnicodeExtraFields,  true);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  0,  useUnicodeExtraFields,  true);	  this.useUnicodeExtraFields,    0,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
346	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  0,  useUnicodeExtraFields,  false);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  0,  useUnicodeExtraFields,  false);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  0,  useUnicodeExtraFields,  false);	  this.useUnicodeExtraFields,    0,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
347	[BUG]  [BUGGY]  final  int  allowStoredEntriesWithFields,  int  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  int  allowStoredEntriesWithFields,  int  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  int  allowStoredEntriesWithFields,  int  zipEncoding)  {	  final    boolean    allowStoredEntriesWithFields,    int    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
348	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  String  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  String  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  String  zipEncoding)  {	  final    boolean    allowStoredEntriesWithFields,    int    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
349	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  short  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  short  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  short  zipEncoding)  {	  final    boolean    allowStoredEntriesWithFields,    int    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
350	[BUG]  [BUGGY]  this.encoding  =  ZIPEncodingHelper.getZipEncoding(encoding,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  ZIPEncodingHelper.getZipEncoding(encoding,  useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  ZIPEncodingHelper.getZipEncoding(encoding,  useUnicodeExtraFields);	  this.encoding    =    ZIPEncodingHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
351	[BUG]  [BUGGY]  Integer.toString(this.useUnicodeExtraFields));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer.toString(this.useUnicodeExtraFields));  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer.toString(this.useUnicodeExtraFields));	  Integer.toString(useUnicodeExtraFields));    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
352	[BUG]  [BUGGY]  Integer.toString(encoding),  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer.toString(encoding),  useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer.toString(encoding),  useUnicodeExtraFields);	  Integer.toString(useUnicodeExtraFields));    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
353	[BUG]  [BUGGY]  Integer.toString(useUnicodeExtraFields),  encoding);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer.toString(useUnicodeExtraFields),  encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer.toString(useUnicodeExtraFields),  encoding);	  Integer.toString(useUnicodeExtraFields));    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
354	[BUG]  [BUGGY]  Integer.toString(useUnicodeExtraFields,  encoding));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer.toString(useUnicodeExtraFields,  encoding));  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer.toString(useUnicodeExtraFields,  encoding));	  Integer.toString(useUnicodeExtraFields));    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
355	[BUG]  [BUGGY]  this.encoding  =  zipEncoding  +  ZipEncodingHelper.getZipEncoding(encoding);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  zipEncoding  +  ZipEncodingHelper.getZipEncoding(encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  zipEncoding  +  ZipEncodingHelper.getZipEncoding(encoding);	  this.encoding    =    encoding    +    ZipEncodingHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
356	[BUG]  [BUGGY]  this.encoding  =  encoding  +  ZipEncodingHelper.getZipEncoding(encoding,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  encoding  +  ZipEncodingHelper.getZipEncoding(encoding,  useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  encoding  +  ZipEncodingHelper.getZipEncoding(encoding,  useUnicodeExtraFields);	  this.encoding    =    encoding    +    ZipEncodingHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
357	[BUG]  [BUGGY]  this.encoding  =  encoding  +  ZipEncodingHelper.getZipEncoding(useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  encoding  +  ZipEncodingHelper.getZipEncoding(useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  encoding  +  ZipEncodingHelper.getZipEncoding(useUnicodeExtraFields);	  this.encoding    =    encoding    +    ZipEncodingHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
358	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  zipEncoding,  ZipEncodingHelper.getZipEncoding(encoding));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  zipEncoding,  ZipEncodingHelper.getZipEncoding(encoding));  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  zipEncoding,  ZipEncodingHelper.getZipEncoding(encoding));	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    ZipEncodingHelper.getZipEncoding(encoding));    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
359	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding(encoding));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding(encoding));  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding(encoding));	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    ZipEncodingHelper.getZipEncoding(encoding));    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
360	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  zipEncoding,  ZipEncodingHelper.getZipEncoding(encoding));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  zipEncoding,  ZipEncodingHelper.getZipEncoding(encoding));  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  useUnicodeExtraFields,  zipEncoding,  ZipEncodingHelper.getZipEncoding(encoding));	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    ZipEncodingHelper.getZipEncoding(encoding));    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
361	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding(encoding),  0);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding(encoding),  0);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding(encoding),  0);	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    ZipEncodingHelper.getZipEncoding(encoding));    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
362	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithUnicodeExtraFields,  in,  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithUnicodeExtraFields,  in,  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithUnicodeExtraFields,  in,  zipEncoding)  {	  final    boolean    allowStoredEntriesWithUnicodeExtraFields,    in)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
363	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  zipEncoding;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  zipEncoding;  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  zipEncoding;	  this.useUnicodeExtraFields,    encoding;    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
364	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  encoding,  zipEncoding;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  encoding,  zipEncoding;  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  encoding,  zipEncoding;	  this.useUnicodeExtraFields,    encoding;    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
365	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  encoding,  true;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  encoding,  true;  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  encoding,  true;	  this.useUnicodeExtraFields,    encoding;    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
366	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  encoding,  null;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  encoding,  null;  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  encoding,  null;	  this.useUnicodeExtraFields,    encoding;    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
367	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  encoding,  useUnicodeExtraFields,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  encoding,  useUnicodeExtraFields,  zipEncoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  encoding,  useUnicodeExtraFields,  zipEncoding);	  this.useUnicodeExtraFields,    encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
368	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  encoding,  useUnicodeExtraFields,  inputStream);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  encoding,  useUnicodeExtraFields,  inputStream);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  encoding,  useUnicodeExtraFields,  inputStream);	  this.useUnicodeExtraFields,    encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
369	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  encoding,  allowStoredEntriesWithDataDescriptor);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  encoding,  allowStoredEntriesWithDataDescriptor);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  encoding,  allowStoredEntriesWithDataDescriptor);	  this.useUnicodeExtraFields,    encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
370	[BUG]  [BUGGY]  this.encoding  =  ZipArchiveHelper.getZipEncoding(encoding,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  ZipArchiveHelper.getZipEncoding(encoding,  useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  ZipArchiveHelper.getZipEncoding(encoding,  useUnicodeExtraFields);	  this.encoding    =    ZipArchiveHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
371	[BUG]  [BUGGY]  this.encoding  =  ZipArchiveHelper.getZipEncoding(encoding,  0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  ZipArchiveHelper.getZipEncoding(encoding,  0);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  ZipArchiveHelper.getZipEncoding(encoding,  0);	  this.encoding    =    ZipArchiveHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
372	[BUG]  [BUGGY]  this.encoding  =  ZipArchiveHelper.getEncoding(encoding);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  ZipArchiveHelper.getEncoding(encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  ZipArchiveHelper.getEncoding(encoding);	  this.encoding    =    ZipArchiveHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
373	[BUG]  [BUGGY]  this.encoding  =  ZipArchiveHelper.getZipEncoding(encoding,  true);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  ZipArchiveHelper.getZipEncoding(encoding,  true);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  ZipArchiveHelper.getZipEncoding(encoding,  true);	  this.encoding    =    ZipArchiveHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
374	[BUG]  [BUGGY]  this.encoding  =  ZipArchiveHelper.getCrcEncoding(encoding);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  ZipArchiveHelper.getCrcEncoding(encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  ZipArchiveHelper.getCrcEncoding(encoding);	  this.encoding    =    ZipArchiveHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
375	[BUG]  [BUGGY]  this.encoding  =  ZipArchiveHelper.getUseUnicodeExtraFields(encoding);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  ZipArchiveHelper.getUseUnicodeExtraFields(encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  ZipArchiveHelper.getUseUnicodeExtraFields(encoding);	  this.encoding    =    ZipArchiveHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
376	[BUG]  [BUGGY]  final  boolean  enableStoredEntriesWithDataDescriptor,  int  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  enableStoredEntriesWithDataDescriptor,  int  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  enableStoredEntriesWithDataDescriptor,  int  zipEncoding)  {	  final    boolean    enableStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
377	[BUG]  [BUGGY]  final  boolean  enableStoredEntriesWithUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  enableStoredEntriesWithUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  enableStoredEntriesWithUnicodeExtraFields)  {	  final    boolean    enableStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
378	[BUG]  [BUGGY]  final  boolean  enableStoredEntriesWithDataDescriptor,  in)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  enableStoredEntriesWithDataDescriptor,  in)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  enableStoredEntriesWithDataDescriptor,  in)  {	  final    boolean    enableStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
379	[BUG]  [BUGGY]  final  int  allowStoredEntriesWithUnicodeExtraFields,  int  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  int  allowStoredEntriesWithUnicodeExtraFields,  int  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  int  allowStoredEntriesWithUnicodeExtraFields,  int  zipEncoding)  {	  final    boolean    allowStoredEntriesWithUnicodeExtraFields,    int    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
380	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithUnicodeExtraFields,  long  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithUnicodeExtraFields,  long  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithUnicodeExtraFields,  long  zipEncoding)  {	  final    boolean    allowStoredEntriesWithUnicodeExtraFields,    int    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
381	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithUnicodeExtraFields,  String  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithUnicodeExtraFields,  String  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithUnicodeExtraFields,  String  zipEncoding)  {	  final    boolean    allowStoredEntriesWithUnicodeExtraFields,    int    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
382	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithZip64Fields,  int  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithZip64Fields,  int  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithZip64Fields,  int  zipEncoding)  {	  final    boolean    allowStoredEntriesWithUnicodeExtraFields,    int    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
383	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithUnicodeExtraFields,  short  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithUnicodeExtraFields,  short  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithUnicodeExtraFields,  short  zipEncoding)  {	  final    boolean    allowStoredEntriesWithUnicodeExtraFields,    int    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
384	[BUG]  [BUGGY]  final  boolean  hasDataDescriptor,  final  boolean  usesZip64)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  hasDataDescriptor,  final  boolean  usesZip64)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  hasDataDescriptor,  final  boolean  usesZip64)  {	  final    boolean    hasDataDescriptor,    boolean    usesZip64)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
385	[BUG]  [BUGGY]  final  boolean  hasDataDescriptor,  int  usesZip64)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  hasDataDescriptor,  int  usesZip64)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  hasDataDescriptor,  int  usesZip64)  {	  final    boolean    hasDataDescriptor,    boolean    usesZip64)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
386	[BUG]  [BUGGY]  final  boolean  hasDataDescriptor,  boolean  isZip64)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  hasDataDescriptor,  boolean  isZip64)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  hasDataDescriptor,  boolean  isZip64)  {	  final    boolean    hasDataDescriptor,    boolean    usesZip64)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
387	[BUG]  [BUGGY]  final  int  hasDataDescriptor,  boolean  usesZip64)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  int  hasDataDescriptor,  boolean  usesZip64)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  int  hasDataDescriptor,  boolean  usesZip64)  {	  final    boolean    hasDataDescriptor,    boolean    usesZip64)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
388	[BUG]  [BUGGY]  Integer  buf  =  inputStream.readLine(),  encoding;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer  buf  =  inputStream.readLine(),  encoding;  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer  buf  =  inputStream.readLine(),  encoding;	  Integer    buf    =    inputStream.readLine();    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
389	[BUG]  [BUGGY]  Integer  buf  =  this.inputStream.readLine();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer  buf  =  this.inputStream.readLine();  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer  buf  =  this.inputStream.readLine();	  Integer    buf    =    inputStream.readLine();    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
390	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  encoding,  0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  encoding,  0);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  encoding,  0);	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    0);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
391	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  0,  encoding);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  0,  encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  useUnicodeExtraFields,  0,  encoding);	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    0);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
392	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  encoding,  useUnicodeExtraFields,  0);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  encoding,  useUnicodeExtraFields,  0);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  encoding,  useUnicodeExtraFields,  0);	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    0);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
393	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  1);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  useUnicodeExtraFields,  1);	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    0);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
394	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  encoding,  0,  0);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  encoding,  0,  0);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  encoding,  0,  0);	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    0);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
395	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  boolean  allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  boolean  allowStoredEntriesWithDataDescriptor)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithZip64,  boolean  allowStoredEntriesWithDataDescriptor)  {	  final    boolean    allowStoredEntriesWithZip64,    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
396	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  final  boolean  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  final  boolean  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithZip64,  final  boolean  useUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithZip64,    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
397	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  boolean  enableUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  boolean  enableUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithZip64,  boolean  enableUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithZip64,    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
398	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  int  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  int  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithZip64,  int  useUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithZip64,    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
399	[BUG]  [BUGGY]  This.useUnicodeExtraFields,  false);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  This.useUnicodeExtraFields,  false);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	This.useUnicodeExtraFields,  false);	  this.useUnicodeExtraFields,    true);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
400	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  true,  encoding);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  true,  encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  true,  encoding);	  this.useUnicodeExtraFields,    true);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
401	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  hasDataDescriptor);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  hasDataDescriptor);	  this.useUnicodeExtraFields;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
402	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  zipEncoding,  useUnicodeExtraFields,  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  zipEncoding,  useUnicodeExtraFields,  hasDataDescriptor);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  zipEncoding,  useUnicodeExtraFields,  hasDataDescriptor);	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
403	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  this.hitCentralDirectory);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  this.hitCentralDirectory);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  useUnicodeExtraFields,  this.hitCentralDirectory);	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
404	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  0,  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  0,  hasDataDescriptor);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  useUnicodeExtraFields,  0,  hasDataDescriptor);	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
405	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  hasDataDescriptor,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  hasDataDescriptor,  useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  hasDataDescriptor,  useUnicodeExtraFields);	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
406	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  zipEncoding,  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  zipEncoding,  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  zipEncoding,  useUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    in,    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
407	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  useUnicodeExtraFields,  in,  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  useUnicodeExtraFields,  in,  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  useUnicodeExtraFields,  in,  zipEncoding)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    in,    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
408	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  in,  this.useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  in,  this.useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  in,  this.useUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    in,    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
409	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  zipEncoding,  in)  {  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  zipEncoding,  in)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  zipEncoding,  in)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    in,    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
410	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  longBuf)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  longBuf)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  longBuf)  {	  final    boolean    allowStoredEntriesWithFields,    shortBuf)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
411	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  shortBuf,  int)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  shortBuf,  int)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  shortBuf,  int)  {	  final    boolean    allowStoredEntriesWithFields,    shortBuf)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
412	[BUG]  [BUGGY]  final  int  zipEncoding,  hasDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  int  zipEncoding,  hasDataDescriptor)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  int  zipEncoding,  hasDataDescriptor)  {	  final    int    allowStoredEntriesWithDataDescriptor,    hasDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
413	[BUG]  [BUGGY]  final  int  hasDataDescriptor,  allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  int  hasDataDescriptor,  allowStoredEntriesWithDataDescriptor)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  int  hasDataDescriptor,  allowStoredEntriesWithDataDescriptor)  {	  final    int    allowStoredEntriesWithDataDescriptor,    hasDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
414	[BUG]  [BUGGY]  final  int  useUnicodeExtraFields,  hasDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  int  useUnicodeExtraFields,  hasDataDescriptor)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  int  useUnicodeExtraFields,  hasDataDescriptor)  {	  final    int    allowStoredEntriesWithDataDescriptor,    hasDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
415	[BUG]  [BUGGY]  final  boolean  hasDataDescriptor,  final  int  allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  hasDataDescriptor,  final  int  allowStoredEntriesWithDataDescriptor)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  hasDataDescriptor,  final  int  allowStoredEntriesWithDataDescriptor)  {	  final    int    allowStoredEntriesWithDataDescriptor,    hasDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
416	[BUG]  [BUGGY]  final  int  allowStoredEntriesWithUnicodeExtraFields,  encoding)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  int  allowStoredEntriesWithUnicodeExtraFields,  encoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  int  allowStoredEntriesWithUnicodeExtraFields,  encoding)  {	  final    int    allowStoredEntriesWithUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
417	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding(encoding),  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding(encoding),  useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding(encoding),  useUnicodeExtraFields);	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    encoding);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
418	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  final  byte[]  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  final  byte[]  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  final  byte[]  zipEncoding)  {	  final    boolean    allowStoredEntriesWithFields,    final    int    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
419	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  0,  ZipEncodingHelper.getZipEncoding(encoding);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  0,  ZipEncodingHelper.getZipEncoding(encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  0,  ZipEncodingHelper.getZipEncoding(encoding);	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    ZipEncodingHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
420	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithUnicodeExtraFields,  this.useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithUnicodeExtraFields,  this.useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithUnicodeExtraFields,  this.useUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithUnicodeExtraFields,    shortBuf)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
421	[BUG]  [BUGGY]  this.encoding  =  ZipEncodingHelper.getZipEncoding(userUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  ZipEncodingHelper.getZipEncoding(userUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  ZipEncodingHelper.getZipEncoding(userUnicodeExtraFields);	  this.encoding    =    ZipEncodingHelper.getZipEncoding(ENCODING);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
422	[BUG]  [BUGGY]  this.encoding  =  ZipEncodingHelper.getZipEncoding(USEUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  ZipEncodingHelper.getZipEncoding(USEUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  ZipEncodingHelper.getZipEncoding(USEUnicodeExtraFields);	  this.encoding    =    ZipEncodingHelper.getZipEncoding(ENCODING);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
423	[BUG]  [BUGGY]  this.zipEncoding  =  ZipEncodingHelper.getZipEncoding(useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.zipEncoding  =  ZipEncodingHelper.getZipEncoding(useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.zipEncoding  =  ZipEncodingHelper.getZipEncoding(useUnicodeExtraFields);	  this.encoding    =    ZipEncodingHelper.getZipEncoding(ENCODING);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
424	[BUG]  [BUGGY]  this.encoding  =  ZipEncodingHelper.getZipEncoding(encoding,  this.useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  ZipEncodingHelper.getZipEncoding(encoding,  this.useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  ZipEncodingHelper.getZipEncoding(encoding,  this.useUnicodeExtraFields);	  this.encoding    =    ZipEncodingHelper.getZipEncoding(encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
425	[BUG]  [BUGGY]  this.in  =  ZipEncodingHelper.getZipEncoding(encoding,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.in  =  ZipEncodingHelper.getZipEncoding(encoding,  useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.in  =  ZipEncodingHelper.getZipEncoding(encoding,  useUnicodeExtraFields);	  this.encoding    =    ZipEncodingHelper.getZipEncoding(encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
426	[BUG]  [BUGGY]  this.useUnicodeExtraFields  =  ZipEncodingHelper.getZipEncoding(encoding);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields  =  ZipEncodingHelper.getZipEncoding(encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields  =  ZipEncodingHelper.getZipEncoding(encoding);	  this.encoding    =    ZipEncodingHelper.getZipEncoding(encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
427	[BUG]  [BUGGY]  this.zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);	  this.encoding    =    StringEncodingHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
428	[BUG]  [BUGGY]  this.encoding  =  StringEncodingHelper.getZipEncoding(useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  StringEncodingHelper.getZipEncoding(useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  StringEncodingHelper.getZipEncoding(useUnicodeExtraFields);	  this.encoding    =    StringEncodingHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
429	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  boolean  usesUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  boolean  usesUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithZip64,  boolean  usesUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithZip64,    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
430	[BUG]  [BUGGY]  Integer  buf  =  inputStream.readFully(true);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer  buf  =  inputStream.readFully(true);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer  buf  =  inputStream.readFully(true);	  Integer    buf    =    inputStream.readLine();    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
431	[BUG]  [BUGGY]  Integer  buf  =  inputStream.readLine()  +  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer  buf  =  inputStream.readLine()  +  1;  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer  buf  =  inputStream.readLine()  +  1;	  Integer    buf    =    inputStream.readLine();    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
432	[BUG]  [BUGGY]  this.useUnicodeExtraFields  &&  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields  &&  useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields  &&  useUnicodeExtraFields);	  this.useUnicodeExtraFields,    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
433	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  encoding,  ZipEncodingHelper.getZipEncoding(useUnicodeExtraFields));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  encoding,  ZipEncodingHelper.getZipEncoding(useUnicodeExtraFields));  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  encoding,  ZipEncodingHelper.getZipEncoding(useUnicodeExtraFields));	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    ZipEncodingHelper.getZipEncoding(encoding));    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
434	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  0,  0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  0,  0);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  useUnicodeExtraFields,  0,  0);	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    0);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
435	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  shortBuf,  Integer  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  shortBuf,  Integer  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  shortBuf,  Integer  zipEncoding)  {	  final    boolean    allowStoredEntriesWithFields,    Integer    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
436	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  Integer  max)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  Integer  max)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  Integer  max)  {	  final    boolean    allowStoredEntriesWithFields,    Integer    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
437	[BUG]  [BUGGY]  final  boolean  useUnicodeExtraFields,  encoding)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  useUnicodeExtraFields,  encoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  useUnicodeExtraFields,  encoding)  {	  final    boolean    useUnicodeExtraFields,    hasDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
438	[BUG]  [BUGGY]  final  boolean  useUnicodeExtraFields,  shortBuf)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  useUnicodeExtraFields,  shortBuf)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  useUnicodeExtraFields,  shortBuf)  {	  final    boolean    useUnicodeExtraFields,    hasDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
439	[BUG]  [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  this.useZip64);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  this.useZip64);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  useUnicodeExtraFields,  this.useZip64);	  super(inputStream,    encoding,    useUnicodeExtraFields,    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
440	[BUG]  [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  this.allowStoredEntriesWithDataDescriptor);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  this.allowStoredEntriesWithDataDescriptor);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  useUnicodeExtraFields,  this.allowStoredEntriesWithDataDescriptor);	  super(inputStream,    encoding,    useUnicodeExtraFields,    usesZip64);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
441	[BUG]  [BUGGY]  super(inputStream,  encoding,  allowStoredEntriesWithDataDescriptor,  usesZip64);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  allowStoredEntriesWithDataDescriptor,  usesZip64);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  allowStoredEntriesWithDataDescriptor,  usesZip64);	  super(inputStream,    encoding,    useUnicodeExtraFields,    usesZip64);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
442	[BUG]  [BUGGY]  Super(inputStream,  encoding,  useUnicodeExtraFields,  true);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Super(inputStream,  encoding,  useUnicodeExtraFields,  true);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Super(inputStream,  encoding,  useUnicodeExtraFields,  true);	  super(inputStream,    encoding,    useUnicodeExtraFields,    false);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
443	[BUG]  [BUGGY]  super(inputStream,  encoding,  applyUnicodeExtraFields,  false);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  applyUnicodeExtraFields,  false);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  applyUnicodeExtraFields,  false);	  super(inputStream,    encoding,    useUnicodeExtraFields,    false);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
444	[BUG]  [BUGGY]  this.encoding  =  ZipArchiveEntryHelper.getZipEncoding(useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  ZipArchiveEntryHelper.getZipEncoding(useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  ZipArchiveEntryHelper.getZipEncoding(useUnicodeExtraFields);	  this.encoding    =    ZipArchiveEntryHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
445	[BUG]  [BUGGY]  this.zipEncoding  =  ZipArchiveEntryHelper.getZipEncoding(encoding);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.zipEncoding  =  ZipArchiveEntryHelper.getZipEncoding(encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.zipEncoding  =  ZipArchiveEntryHelper.getZipEncoding(encoding);	  this.encoding    =    ZipArchiveEntryHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
446	[BUG]  [BUGGY]  this.zipEncoding  =  ZipArchiveEntryHelper.getZipEncoding(encoding,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.zipEncoding  =  ZipArchiveEntryHelper.getZipEncoding(encoding,  useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.zipEncoding  =  ZipArchiveEntryHelper.getZipEncoding(encoding,  useUnicodeExtraFields);	  this.encoding    =    ZipArchiveEntryHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
447	[BUG]  [BUGGY]  this.encoding  =  ZipArchiveEntryHelper.getZipEncoding(userUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  ZipArchiveEntryHelper.getZipEncoding(userUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  ZipArchiveEntryHelper.getZipEncoding(userUnicodeExtraFields);	  this.encoding    =    ZipArchiveEntryHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
448	[BUG]  [BUGGY]  this.useUnicodeExtraFields  =  ZipArchiveEntryHelper.getZipEncoding(useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields  =  ZipArchiveEntryHelper.getZipEncoding(useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields  =  ZipArchiveEntryHelper.getZipEncoding(useUnicodeExtraFields);	  this.encoding    =    ZipArchiveEntryHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
449	[BUG]  [BUGGY]  Integer.toString(useUnicodeExtraFields),  inputStream);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer.toString(useUnicodeExtraFields),  inputStream);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer.toString(useUnicodeExtraFields),  inputStream);	  Integer.toString(useUnicodeExtraFields));    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
450	[BUG]  [BUGGY]  Integer.toString(useUnicodeExtraFields),  0);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer.toString(useUnicodeExtraFields),  0);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer.toString(useUnicodeExtraFields),  0);	  Integer.toString(useUnicodeExtraFields));    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
451	[BUG]  [BUGGY]  Integer.toString(useUnicodeExtraFields,  0));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer.toString(useUnicodeExtraFields,  0));  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer.toString(useUnicodeExtraFields,  0));	  Integer.toString(useUnicodeExtraFields));    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
452	[BUG]  [BUGGY]  this.useUnicodeExtraFields  =  ZipEncodingHelper.getZipEncoding(useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields  =  ZipEncodingHelper.getZipEncoding(useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields  =  ZipEncodingHelper.getZipEncoding(useUnicodeExtraFields);	  this.encoding    =    ZipEncodingHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
453	[BUG]  [BUGGY]  this.zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding,  useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding,  useUnicodeExtraFields);	  this.encoding    =    ZipEncodingHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
454	[BUG]  [BUGGY]  final  boolean  enableStoredEntriesWithZip64)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  enableStoredEntriesWithZip64)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  enableStoredEntriesWithZip64)  {	  final    boolean    enableStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
455	[BUG]  [BUGGY]  super(in,  encoding,  applyUnicodeExtraFields,  false);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(in,  encoding,  applyUnicodeExtraFields,  false);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(in,  encoding,  applyUnicodeExtraFields,  false);	  super(in,    encoding,    useUnicodeExtraFields,    true);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
456	[BUG]  [BUGGY]  super(in,  encoding,  applyUnicodeExtraFields,  true);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(in,  encoding,  applyUnicodeExtraFields,  true);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(in,  encoding,  applyUnicodeExtraFields,  true);	  super(in,    encoding,    useUnicodeExtraFields,    true);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
457	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  final  boolean  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  final  boolean  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  final  boolean  zipEncoding)  {	  final    boolean    useUnicodeExtraFields,    final    boolean    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
458	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  boolean  usesZip64)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  boolean  usesZip64)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithZip64,  boolean  usesZip64)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    boolean    usesZip64)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
459	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  boolean  hasUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  boolean  hasUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  boolean  hasUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    boolean    usesZip64)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
460	[BUG]  [BUGGY]  final  boolean  hasDataDescriptor,  boolean  usedUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  hasDataDescriptor,  boolean  usedUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  hasDataDescriptor,  boolean  usedUnicodeExtraFields)  {	  final    boolean    hasDataDescriptor,    boolean    usesZip64)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
461	[BUG]  [BUGGY]  Integer.parseInt(encoding),  0,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer.parseInt(encoding),  0,  useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer.parseInt(encoding),  0,  useUnicodeExtraFields);	  Integer.parseInt(encoding),    0,    0);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
462	[BUG]  [BUGGY]  Integer.parseInt(encoding)-  0,  0);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer.parseInt(encoding)-  0,  0);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer.parseInt(encoding)-  0,  0);	  Integer.parseInt(encoding),    0,    0);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
463	[BUG]  [BUGGY]  Integer.parseInt(encoding)+  1);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer.parseInt(encoding)+  1);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer.parseInt(encoding)+  1);	  Integer.parseInt(encoding),    0,    0);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
464	[BUG]  [BUGGY]  Super(inputStream,  encoding,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Super(inputStream,  encoding,  useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Super(inputStream,  encoding,  useUnicodeExtraFields);	  super(inputStream,    encoding,    allowStoredEntriesWithDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
465	[BUG]  [BUGGY]  super(in,  inputStream,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(in,  inputStream,  useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(in,  inputStream,  useUnicodeExtraFields);	  super(inputStream,    encoding,    allowStoredEntriesWithDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
466	[BUG]  [BUGGY]  this(inputStream,  encoding,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this(inputStream,  encoding,  useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this(inputStream,  encoding,  useUnicodeExtraFields);	  super(inputStream,    encoding,    allowStoredEntriesWithDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
467	[BUG]  [BUGGY]  ||  useUnicodeExtraFields  &&  zipEncoding.equals(useUnicodeExtraFields))  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  ||  useUnicodeExtraFields  &&  zipEncoding.equals(useUnicodeExtraFields))  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	||  useUnicodeExtraFields  &&  zipEncoding.equals(useUnicodeExtraFields))	  ||    useUnicodeExtraFields)    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
468	[BUG]  [BUGGY]  ||  useUnicodeExtraFields  &&  inputStream.isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  ||  useUnicodeExtraFields  &&  inputStream.isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	||  useUnicodeExtraFields  &&  inputStream.isEnabled(Feature.QUOTE_FIELD_NAME))  {	  ||    useUnicodeExtraFields)    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
469	[BUG]  [BUGGY]  ||  useUnicodeExtraFields  &&  inputStream.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  ||  useUnicodeExtraFields  &&  inputStream.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	||  useUnicodeExtraFields  &&  inputStream.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  ||    useUnicodeExtraFields)    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
470	[BUG]  [BUGGY]  ||  useUnicodeExtraFields  &&  inputStream.isEnabled(Feature.QUOTE_FIELD_NAMES))  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  ||  useUnicodeExtraFields  &&  inputStream.isEnabled(Feature.QUOTE_FIELD_NAMES))  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	||  useUnicodeExtraFields  &&  inputStream.isEnabled(Feature.QUOTE_FIELD_NAMES))	  ||    useUnicodeExtraFields)    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
471	[BUG]  [BUGGY]  final  boolean  useUnicodeExtraFields,  shortBuf,  int  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  useUnicodeExtraFields,  shortBuf,  int  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  useUnicodeExtraFields,  shortBuf,  int  zipEncoding)  {	  final    boolean    useUnicodeExtraFields,    int    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
472	[BUG]  [BUGGY]  final  boolean  useUnicodeExtraFields,  String.valueOf(zipEncoding))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  useUnicodeExtraFields,  String.valueOf(zipEncoding))  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  useUnicodeExtraFields,  String.valueOf(zipEncoding))  {	  final    boolean    useUnicodeExtraFields,    int    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
473	[BUG]  [BUGGY]  final  boolean  useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding(zipEncoding))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding(zipEncoding))  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding(zipEncoding))  {	  final    boolean    useUnicodeExtraFields,    String    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
474	[BUG]  [BUGGY]  final  boolean  useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding(encoding))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding(encoding))  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding(encoding))  {	  final    boolean    useUnicodeExtraFields,    String    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
475	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  boolean  hitCentralDirectory)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  boolean  hitCentralDirectory)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  boolean  hitCentralDirectory)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    boolean    hasDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
476	[BUG]  [BUGGY]  final  int  allowStoredEntriesWithZip64,  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  int  allowStoredEntriesWithZip64,  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  int  allowStoredEntriesWithZip64,  useUnicodeExtraFields)  {	  final    int    allowStoredEntriesWithZip64)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
477	[BUG]  [BUGGY]  final  int  allowStoredEntriesWithZip64,  encoding)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  int  allowStoredEntriesWithZip64,  encoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  int  allowStoredEntriesWithZip64,  encoding)  {	  final    int    allowStoredEntriesWithZip64)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
478	[BUG]  [BUGGY]  final  int  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  int  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  int  useUnicodeExtraFields)  {	  final    int    allowStoredEntriesWithZip64)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
479	[BUG]  [BUGGY]  super(inputStream,  encoding,  allowStoredEntriesWithDataDescriptor,  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  allowStoredEntriesWithDataDescriptor,  hasDataDescriptor);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  allowStoredEntriesWithDataDescriptor,  hasDataDescriptor);	  super(inputStream,    encoding,    useUnicodeExtraFields,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
480	[BUG]  [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  this.hitCentralDirectory);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  this.hitCentralDirectory);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  useUnicodeExtraFields,  this.hitCentralDirectory);	  super(inputStream,    encoding,    useUnicodeExtraFields,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
481	[BUG]  [BUGGY]  final  boolean  hasDataDescriptor,  ZipEncodingHelper  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  hasDataDescriptor,  ZipEncodingHelper  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  hasDataDescriptor,  ZipEncodingHelper  zipEncoding)  {	  final    boolean    hasDataDescriptor,    String    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
482	[BUG]  [BUGGY]  final  boolean  hasDataDescriptor,  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  hasDataDescriptor,  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  hasDataDescriptor,  zipEncoding)  {	  final    boolean    hasDataDescriptor,    String    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
483	[BUG]  [BUGGY]  final  boolean  hasDataDescriptor,  ZipEncodingHelper.getZipEncoding(zipEncoding))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  hasDataDescriptor,  ZipEncodingHelper.getZipEncoding(zipEncoding))  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  hasDataDescriptor,  ZipEncodingHelper.getZipEncoding(zipEncoding))  {	  final    boolean    hasDataDescriptor,    String    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
484	[BUG]  [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  this.lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  this.lastStoredEntry);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  useUnicodeExtraFields,  this.lastStoredEntry);	  super(inputStream,    encoding,    useUnicodeExtraFields,    this.useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
485	[BUG]  [BUGGY]  super(inputStream,  encoding,  false,  this.useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  false,  this.useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  false,  this.useUnicodeExtraFields);	  super(inputStream,    encoding,    useUnicodeExtraFields,    this.useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
486	[BUG]  [BUGGY]  super(inputStream,  encoding,  0,  this.useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  0,  this.useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  0,  this.useUnicodeExtraFields);	  super(inputStream,    encoding,    useUnicodeExtraFields,    this.useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
487	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  0,  useUnicodeExtraFields;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  0,  useUnicodeExtraFields;  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  0,  useUnicodeExtraFields;	  this.useUnicodeExtraFields,    useUnicodeExtraFields;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
488	[BUG]  [BUGGY]  final  boolean  hasDataDescriptor,  boolean  canStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  hasDataDescriptor,  boolean  canStoredEntriesWithDataDescriptor)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  hasDataDescriptor,  boolean  canStoredEntriesWithDataDescriptor)  {	  final    boolean    hasDataDescriptor,    boolean    hitCentralDirectory)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
489	[BUG]  [BUGGY]  this.encoding  =  useUnicodeExtraFields  +  ZipEncodingHelper.getZipEncoding(encoding);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  useUnicodeExtraFields  +  ZipEncodingHelper.getZipEncoding(encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  useUnicodeExtraFields  +  ZipEncodingHelper.getZipEncoding(encoding);	  this.encoding    =    encoding    +    ZipEncodingHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
490	[BUG]  [BUGGY]  this.encoding  =  encoding  +  useUnicodeExtraFields;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  encoding  +  useUnicodeExtraFields;  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  encoding  +  useUnicodeExtraFields;	  this.encoding    =    encoding,    useUnicodeExtraFields;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
491	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  null,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  null,  useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  null,  useUnicodeExtraFields);	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    null);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
492	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  this);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  this);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  useUnicodeExtraFields,  this);	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    null);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
493	[BUG]  [BUGGY]  Integer  buf  =  inputStream.readFully(useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer  buf  =  inputStream.readFully(useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer  buf  =  inputStream.readFully(useUnicodeExtraFields);	  Integer    buf    =    inputStream.readFully();    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
494	[BUG]  [BUGGY]  Integer  buf  =  inputStream.getBytes(encoding);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer  buf  =  inputStream.getBytes(encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer  buf  =  inputStream.getBytes(encoding);	  Integer    buf    =    inputStream.readFully();    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
495	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  boolean  hasDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  boolean  hasDataDescriptor)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  boolean  hasDataDescriptor)  {	  final    boolean    allowStoredEntriesWithFields,    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
496	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  boolean  usesZip64)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  boolean  usesZip64)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  boolean  usesZip64)  {	  final    boolean    allowStoredEntriesWithFields,    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
497	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  boolean  enableUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  boolean  enableUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  boolean  enableUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithFields,    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
498	[BUG]  [BUGGY]  boolean  allowStoredEntriesWithFields,  boolean  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  boolean  allowStoredEntriesWithFields,  boolean  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	boolean  allowStoredEntriesWithFields,  boolean  useUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithFields,    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
499	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  in.read(this.useUnicodeExtraFields))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  in.read(this.useUnicodeExtraFields))  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  in.read(this.useUnicodeExtraFields))  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    in.read())    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
500	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  in.read(buf))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  in.read(buf))  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  in.read(buf))  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    in.read())    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
501	[BUG]  [BUGGY]  ||  useUnicodeExtraFields,  hasDataDescriptor;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  ||  useUnicodeExtraFields,  hasDataDescriptor;  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	||  useUnicodeExtraFields,  hasDataDescriptor;	  ||    useUnicodeExtraFields;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
502	[BUG]  [BUGGY]  this.useUnicodeExtraFields  &=  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields  &=  useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields  &=  useUnicodeExtraFields);	  this.useUnicodeExtraFields    &=    useUnicodeExtraFields;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
503	[BUG]  [BUGGY]  final  boolean  enableStoredEntriesWithZip64,  boolean  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  enableStoredEntriesWithZip64,  boolean  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  enableStoredEntriesWithZip64,  boolean  useUnicodeExtraFields)  {	  final    boolean    enableStoredEntriesWithDataDescriptor,    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
504	[BUG]  [BUGGY]  final  boolean  enableStoredEntriesWithDataDescriptor,  boolean  hasDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  enableStoredEntriesWithDataDescriptor,  boolean  hasDataDescriptor)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  enableStoredEntriesWithDataDescriptor,  boolean  hasDataDescriptor)  {	  final    boolean    enableStoredEntriesWithDataDescriptor,    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
505	[BUG]  [BUGGY]  final  boolean  enableStoredEntriesWithDataDescriptor,  boolean  allowUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  enableStoredEntriesWithDataDescriptor,  boolean  allowUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  enableStoredEntriesWithDataDescriptor,  boolean  allowUnicodeExtraFields)  {	  final    boolean    enableStoredEntriesWithDataDescriptor,    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
506	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  shortBuf,  int  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  shortBuf,  int  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  shortBuf,  int  zipEncoding)  {	  final    boolean    allowStoredEntriesWithFields,    int    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
507	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  String.valueOf(zipEncoding))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  String.valueOf(zipEncoding))  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  String.valueOf(zipEncoding))  {	  final    boolean    allowStoredEntriesWithFields,    int    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
508	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  StringUtils.isEmpty(zipEncoding))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  StringUtils.isEmpty(zipEncoding))  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  StringUtils.isEmpty(zipEncoding))  {	  final    boolean    allowStoredEntriesWithFields,    int    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
509	[BUG]  [BUGGY]  final  boolean  zipEncoding,  int  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  zipEncoding,  int  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  zipEncoding,  int  zipEncoding)  {	  final    boolean    hasDataDescriptor,    int    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
510	[BUG]  [BUGGY]  final  boolean  useUnicodeExtraFields,  shortBuf,  Integer  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  useUnicodeExtraFields,  shortBuf,  Integer  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  useUnicodeExtraFields,  shortBuf,  Integer  zipEncoding)  {	  final    boolean    useUnicodeExtraFields,    Integer    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
511	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  shortBuf,  int  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  shortBuf,  int  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithZip64,  shortBuf,  int  zipEncoding)  {	  final    boolean    allowStoredEntriesWithZip64,    int    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
512	[BUG]  [BUGGY]  Integer.parseInt(useUnicodeExtraFields));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer.parseInt(useUnicodeExtraFields));  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer.parseInt(useUnicodeExtraFields));	  Integer.parseInt(encoding));    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
513	[BUG]  [BUGGY]  Integer.parseInt(encoding),  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer.parseInt(encoding),  useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer.parseInt(encoding),  useUnicodeExtraFields);	  Integer.parseInt(encoding));    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
514	[BUG]  [BUGGY]  this.encoding  =  StringEncodingHelper.getZipEncoding(zipEncoding);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  StringEncodingHelper.getZipEncoding(zipEncoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  StringEncodingHelper.getZipEncoding(zipEncoding);	  this.encoding    =    zipEncoding;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
515	[BUG]  [BUGGY]  this.encoding  =  ZipEncodingHelper.getZipEncoding(zipEncoding);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  ZipEncodingHelper.getZipEncoding(zipEncoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  ZipEncodingHelper.getZipEncoding(zipEncoding);	  this.encoding    =    zipEncoding;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
516	[BUG]  [BUGGY]  final  boolean  isZip64,  boolean  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  isZip64,  boolean  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  isZip64,  boolean  useUnicodeExtraFields)  {	  final    boolean    hasDataDescriptor,    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
517	[BUG]  [BUGGY]  final  boolean  hasDataDescriptor,  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  hasDataDescriptor,  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  hasDataDescriptor,  useUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
518	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  useUnicodeExtraFields,  hasDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  useUnicodeExtraFields,  hasDataDescriptor)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithZip64,  useUnicodeExtraFields,  hasDataDescriptor)  {	  final    boolean    allowStoredEntriesWithZip64,    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
519	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  useUnicodeExtraFields,  isEnabled)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  useUnicodeExtraFields,  isEnabled)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithZip64,  useUnicodeExtraFields,  isEnabled)  {	  final    boolean    allowStoredEntriesWithZip64,    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
520	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  useUnicodeExtraFields,  inputStream)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  useUnicodeExtraFields,  inputStream)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithZip64,  useUnicodeExtraFields,  inputStream)  {	  final    boolean    allowStoredEntriesWithZip64,    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
521	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  0,  useUnicodeExtraFields,  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  0,  useUnicodeExtraFields,  hasDataDescriptor);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  0,  useUnicodeExtraFields,  hasDataDescriptor);	  this.useUnicodeExtraFields,    0,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
522	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  0);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  0);	  this.useUnicodeExtraFields,    0,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
523	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  0,  useUnicodeExtraFields,  0);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  0,  useUnicodeExtraFields,  0);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  0,  useUnicodeExtraFields,  0);	  this.useUnicodeExtraFields,    0,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
524	[BUG]  [BUGGY]  encoding,  null,  useUnicodeExtraFields,  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  encoding,  null,  useUnicodeExtraFields,  hasDataDescriptor);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	encoding,  null,  useUnicodeExtraFields,  hasDataDescriptor);	  encoding,    null,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
525	[BUG]  [BUGGY]  null,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  null,  useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	null,  useUnicodeExtraFields);	  encoding,    null,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
526	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding());  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding());	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    ZipEncodingHelper.getZipEncoding());    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
527	[BUG]  [BUGGY]  ||  useUnicodeExtraFields,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  ||  useUnicodeExtraFields,  zipEncoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	||  useUnicodeExtraFields,  zipEncoding);	  ||    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
528	[BUG]  [BUGGY]  ||  useUnicodeExtraFields,  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  ||  useUnicodeExtraFields,  hasDataDescriptor);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	||  useUnicodeExtraFields,  hasDataDescriptor);	  ||    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
529	[BUG]  [BUGGY]  Integer  buf  =  inputStream.readFully(this.useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer  buf  =  inputStream.readFully(this.useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer  buf  =  inputStream.readFully(this.useUnicodeExtraFields);	  Integer    buf    =    inputStream.readFully(encoding);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
530	[BUG]  [BUGGY]  Integer  buf  =  inputStream.readFully(encoding,  this.useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer  buf  =  inputStream.readFully(encoding,  this.useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer  buf  =  inputStream.readFully(encoding,  this.useUnicodeExtraFields);	  Integer    buf    =    inputStream.readFully(encoding);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
531	[BUG]  [BUGGY]  Integer  buf  =  inputStream.readFully(useUnicodeExtraFields,  encoding);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer  buf  =  inputStream.readFully(useUnicodeExtraFields,  encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer  buf  =  inputStream.readFully(useUnicodeExtraFields,  encoding);	  Integer    buf    =    inputStream.readFully(encoding);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
532	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithUnicodeExtraFields,  shortBuf,  int  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithUnicodeExtraFields,  shortBuf,  int  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithUnicodeExtraFields,  shortBuf,  int  zipEncoding)  {	  final    boolean    allowStoredEntriesWithUnicodeExtraFields,    int    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
533	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithUnicodeExtraFields,  String.valueOf(zipEncoding))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithUnicodeExtraFields,  String.valueOf(zipEncoding))  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithUnicodeExtraFields,  String.valueOf(zipEncoding))  {	  final    boolean    allowStoredEntriesWithUnicodeExtraFields,    int    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
534	[BUG]  [BUGGY]  final  boolean  useUnicodeExtraFields,  final  byte  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  useUnicodeExtraFields,  final  byte  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  useUnicodeExtraFields,  final  byte  zipEncoding)  {	  final    boolean    useUnicodeExtraFields,    final    int    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
535	[BUG]  [BUGGY]  Integer.toString(this.useUnicodeExtraFields),  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer.toString(this.useUnicodeExtraFields),  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer.toString(this.useUnicodeExtraFields),	  Integer.toString(useUnicodeExtraFields),    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
536	[BUG]  [BUGGY]  this.encoding  =  ZipArchiveHelper.getZipEncoding(useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  ZipArchiveHelper.getZipEncoding(useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  ZipArchiveHelper.getZipEncoding(useUnicodeExtraFields);	  this.encoding    =    ZipArchiveHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
537	[BUG]  [BUGGY]  this.zipEncoding  =  ZipArchiveHelper.getZipEncoding(encoding);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.zipEncoding  =  ZipArchiveHelper.getZipEncoding(encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.zipEncoding  =  ZipArchiveHelper.getZipEncoding(encoding);	  this.encoding    =    ZipArchiveHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
538	[BUG]  [BUGGY]  this.zipEncoding  =  ZipArchiveHelper.getZipEncoding(encoding,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.zipEncoding  =  ZipArchiveHelper.getZipEncoding(encoding,  useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.zipEncoding  =  ZipArchiveHelper.getZipEncoding(encoding,  useUnicodeExtraFields);	  this.encoding    =    ZipArchiveHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
539	[BUG]  [BUGGY]  this.useUnicodeExtraFields  =  ZipArchiveHelper.getZipEncoding(useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields  =  ZipArchiveHelper.getZipEncoding(useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields  =  ZipArchiveHelper.getZipEncoding(useUnicodeExtraFields);	  this.encoding    =    ZipArchiveHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
540	[BUG]  [BUGGY]  this.zipEncoding  =  ZipArchiveHelper.getZipEncoding(useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.zipEncoding  =  ZipArchiveHelper.getZipEncoding(useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.zipEncoding  =  ZipArchiveHelper.getZipEncoding(useUnicodeExtraFields);	  this.encoding    =    ZipArchiveHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
541	[BUG]  [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding());  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding());	  super(inputStream,    encoding,    useUnicodeExtraFields,    null);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
542	[BUG]  [BUGGY]  final  boolean  hasDataDescriptor,  final  boolean  allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  hasDataDescriptor,  final  boolean  allowStoredEntriesWithDataDescriptor)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  hasDataDescriptor,  final  boolean  allowStoredEntriesWithDataDescriptor)  {	  final    boolean    useUnicodeExtraFields,    final    boolean    allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
543	[BUG]  [BUGGY]  final  boolean  useUnicodeExtraFields,  final  boolean  hasDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  useUnicodeExtraFields,  final  boolean  hasDataDescriptor)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  useUnicodeExtraFields,  final  boolean  hasDataDescriptor)  {	  final    boolean    useUnicodeExtraFields,    final    boolean    allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
544	[BUG]  [BUGGY]  super(inputStream,  encoding,  allowStoredEntriesWithDataDescriptor,  true);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  allowStoredEntriesWithDataDescriptor,  true);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  allowStoredEntriesWithDataDescriptor,  true);	  super(inputStream,    encoding,    useUnicodeExtraFields,    true);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
545	[BUG]  [BUGGY]  super(inputStream,  encoding,  applyUnicodeExtraFields,  true);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  applyUnicodeExtraFields,  true);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  applyUnicodeExtraFields,  true);	  super(inputStream,    encoding,    useUnicodeExtraFields,    true);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
546	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  encoding,  0,  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  encoding,  0,  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  encoding,  0,  useUnicodeExtraFields)  {	  this.useUnicodeExtraFields,    encoding,    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
547	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  encoding,  null)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  encoding,  null)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  encoding,  null)  {	  this.useUnicodeExtraFields,    encoding,    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
548	[BUG]  [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  useZip64);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  useZip64);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  useUnicodeExtraFields,  useZip64);	  super(inputStream,    encoding,    useUnicodeExtraFields,    allowStoredEntriesWithDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
549	[BUG]  [BUGGY]  encoding,  this.useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  encoding,  this.useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	encoding,  this.useUnicodeExtraFields);	  encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
550	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  true,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  true,  useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  true,  useUnicodeExtraFields);	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    true);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
551	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  usingUnicodeExtraFields,  false);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  usingUnicodeExtraFields,  false);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  usingUnicodeExtraFields,  false);	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    true);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
552	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  0,  null)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  0,  null)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  0,  null)  {	  this.useUnicodeExtraFields,    null)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
553	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  final  boolean  hasDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  final  boolean  hasDataDescriptor)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  final  boolean  hasDataDescriptor)  {	  final    boolean    allowStoredEntriesWithFields,    final    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
554	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  final  boolean  usesZip64)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  final  boolean  usesZip64)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  final  boolean  usesZip64)  {	  final    boolean    allowStoredEntriesWithFields,    final    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
555	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  0,  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  0,  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  0,  zipEncoding)  {	  this.useUnicodeExtraFields,    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
556	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding(zipEncoding))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding(zipEncoding))  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding(zipEncoding))  {	  this.useUnicodeExtraFields,    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
557	[BUG]  [BUGGY]  Integer.toString(encoding)  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer.toString(encoding)  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer.toString(encoding)	  Integer.toString(useUnicodeExtraFields),    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
558	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  encoding,  zipEncoding,  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  encoding,  zipEncoding,  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  encoding,  zipEncoding,  useUnicodeExtraFields)  {	  this.useUnicodeExtraFields,    encoding,    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
559	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  Integer  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  Integer  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  Integer  useUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    int    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
560	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  false,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  false,  useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  false,  useUnicodeExtraFields);	  this.useUnicodeExtraFields,    false);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
561	[BUG]  [BUGGY]  final  boolean  useUnicodeExtraFields,  boolean  usesZip64)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  useUnicodeExtraFields,  boolean  usesZip64)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  useUnicodeExtraFields,  boolean  usesZip64)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    boolean    usesZip64)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
562	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  boolean  usesUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  boolean  usesUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  boolean  usesUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    boolean    usesZip64)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
563	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithUnicodeExtraFields,  in,  ZipEncodingHelper.getZipEncoding())  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithUnicodeExtraFields,  in,  ZipEncodingHelper.getZipEncoding())  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithUnicodeExtraFields,  in,  ZipEncodingHelper.getZipEncoding())  {	  final    boolean    allowStoredEntriesWithUnicodeExtraFields,    in)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
564	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithUnicodeExtraFields,  in,  this.useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithUnicodeExtraFields,  in,  this.useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithUnicodeExtraFields,  in,  this.useUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithUnicodeExtraFields,    in)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
565	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithUnicodeExtraFields,  in,  ZipEncodingHelper.getZipEncoding(encoding))  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithUnicodeExtraFields,  in,  ZipEncodingHelper.getZipEncoding(encoding))  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithUnicodeExtraFields,  in,  ZipEncodingHelper.getZipEncoding(encoding))  {	  final    boolean    allowStoredEntriesWithUnicodeExtraFields,    in)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
566	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  shortBuf,  boolean  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  shortBuf,  boolean  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  shortBuf,  boolean  useUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithFields,    shortBuf)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
567	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  long  shortBuf)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  long  shortBuf)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  long  shortBuf)  {	  final    boolean    allowStoredEntriesWithFields,    shortBuf)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
568	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  shortBuf,  bytesRead)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  shortBuf,  bytesRead)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  shortBuf,  bytesRead)  {	  final    boolean    allowStoredEntriesWithFields,    shortBuf)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
569	[BUG]  [BUGGY]  this.useUnicodeExtraFields?  ZipEncodingHelper.getZipEncoding(encoding):  null;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields?  ZipEncodingHelper.getZipEncoding(encoding):  null;  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields?  ZipEncodingHelper.getZipEncoding(encoding):  null;	  this.useUnicodeExtraFields,    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
570	[BUG]  [BUGGY]  this.useUnicodeExtraFields?  ZipEncodingHelper.getZipEncoding(encoding,  useUnicodeExtraFields):  null;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields?  ZipEncodingHelper.getZipEncoding(encoding,  useUnicodeExtraFields):  null;  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields?  ZipEncodingHelper.getZipEncoding(encoding,  useUnicodeExtraFields):  null;	  this.useUnicodeExtraFields,    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
571	[BUG]  [BUGGY]  this.useUnicodeExtraFields?  ZipEncodingHelper.getZipEncoding(encoding):  useUnicodeExtraFields;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields?  ZipEncodingHelper.getZipEncoding(encoding):  useUnicodeExtraFields;  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields?  ZipEncodingHelper.getZipEncoding(encoding):  useUnicodeExtraFields;	  this.useUnicodeExtraFields,    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
572	[BUG]  [BUGGY]  this.useUnicodeExtraFields?  ZipEncodingHelper.getZipEncoding(encoding):  null,  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields?  ZipEncodingHelper.getZipEncoding(encoding):  null,  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields?  ZipEncodingHelper.getZipEncoding(encoding):  null,	  this.useUnicodeExtraFields,    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
573	[BUG]  [BUGGY]  this.useUnicodeExtraFields?  ZipEncodingHelper.getZipEncoding(encoding):  useUnicodeExtraFields,  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields?  ZipEncodingHelper.getZipEncoding(encoding):  useUnicodeExtraFields,  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields?  ZipEncodingHelper.getZipEncoding(encoding):  useUnicodeExtraFields,	  this.useUnicodeExtraFields,    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
574	[BUG]  [BUGGY]  final  boolean  hasDataDescriptor,  boolean  used)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  hasDataDescriptor,  boolean  used)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  hasDataDescriptor,  boolean  used)  {	  final    boolean    hasDataDescriptor,    boolean    hitCentralDirectory)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
575	[BUG]  [BUGGY]  final  boolean  useUnicodeExtraFields,  Integer  encoding)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  useUnicodeExtraFields,  Integer  encoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  useUnicodeExtraFields,  Integer  encoding)  {	  final    boolean    useUnicodeExtraFields,    Integer    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
576	[BUG]  [BUGGY]  final  boolean  useUnicodeExtraFields,  Integer  this.useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  useUnicodeExtraFields,  Integer  this.useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  useUnicodeExtraFields,  Integer  this.useUnicodeExtraFields)  {	  final    boolean    useUnicodeExtraFields,    Integer    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
577	[BUG]  [BUGGY]  final  boolean  useUnicodeExtraFields,  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  useUnicodeExtraFields,  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  useUnicodeExtraFields,	  final    boolean    useUnicodeExtraFields,    Integer    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
578	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  encoding,  ZipEncodingHelper.getZipEncoding());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  encoding,  ZipEncodingHelper.getZipEncoding());  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  useUnicodeExtraFields,  encoding,  ZipEncodingHelper.getZipEncoding());	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    encoding);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
579	[BUG]  [BUGGY]  This.encoding  =  encoding;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  This.encoding  =  encoding;  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	This.encoding  =  encoding;	  this.encoding    =    useUnicodeExtraFields;    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
580	[BUG]  [BUGGY]  this.encoding,  encoding);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding,  encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding,  encoding);	  this.encoding    =    useUnicodeExtraFields;    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
581	[BUG]  [BUGGY]  this.encoding,  encoding;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding,  encoding;  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding,  encoding;	  this.encoding    =    useUnicodeExtraFields;    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
582	[BUG]  [BUGGY]  super(inputStream,  encoding,  ZipEncodingHelper.getZipEncoding(encoding),  this.useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  ZipEncodingHelper.getZipEncoding(encoding),  this.useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  ZipEncodingHelper.getZipEncoding(encoding),  this.useUnicodeExtraFields);	  super(inputStream,    encoding,    useUnicodeExtraFields,    this.useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
583	[BUG]  [BUGGY]  super(inputStream,  encoding,  zipEncoding,  this.useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  zipEncoding,  this.useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  zipEncoding,  this.useUnicodeExtraFields);	  super(inputStream,    encoding,    useUnicodeExtraFields,    this.useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
584	[BUG]  [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  this.useUnicodeExtraFields,  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  this.useUnicodeExtraFields,  hasDataDescriptor);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  useUnicodeExtraFields,  this.useUnicodeExtraFields,  hasDataDescriptor);	  super(inputStream,    encoding,    useUnicodeExtraFields,    this.useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
585	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  Integer  this.zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  Integer  this.zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  Integer  this.zipEncoding)  {	  final    boolean    allowStoredEntriesWithFields,    Integer    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
586	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  Integer  current)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  Integer  current)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  Integer  current)  {	  final    boolean    allowStoredEntriesWithFields,    Integer    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
587	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  Integer  entryCount)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  Integer  entryCount)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  Integer  entryCount)  {	  final    boolean    allowStoredEntriesWithFields,    Integer    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
588	[BUG]  [BUGGY]  super(inputStream,  encoding,  zipEncoding,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  zipEncoding,  useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  zipEncoding,  useUnicodeExtraFields);	  super(inputStream,    encoding,    useUnicodeExtraFields,    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
589	[BUG]  [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding(encoding);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding(encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding(encoding);	  super(inputStream,    encoding,    useUnicodeExtraFields,    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
590	[BUG]  [BUGGY]  final  boolean  useUnicodeExtraFields,  final  boolean  allowStoredEntriesWithZip64)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  useUnicodeExtraFields,  final  boolean  allowStoredEntriesWithZip64)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  useUnicodeExtraFields,  final  boolean  allowStoredEntriesWithZip64)  {	  final    boolean    allowStoredEntriesWithZip64,    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
591	[BUG]  [BUGGY]  final  boolean  usesZip64,  boolean  hasDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  usesZip64,  boolean  hasDataDescriptor)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  usesZip64,  boolean  hasDataDescriptor)  {	  final    boolean    hasDataDescriptor,    boolean    usesZip64)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
592	[BUG]  [BUGGY]  final  boolean  hasDataDescriptor,  boolean  usesUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  hasDataDescriptor,  boolean  usesUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  hasDataDescriptor,  boolean  usesUnicodeExtraFields)  {	  final    boolean    hasDataDescriptor,    boolean    usesZip64)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
593	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  hasDataDescriptor,  usesZip64)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  hasDataDescriptor,  usesZip64)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  hasDataDescriptor,  usesZip64)  {	  final    boolean    hasDataDescriptor,    boolean    usesZip64)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
594	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  usesUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  usesUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithZip64,  usesUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithZip64,    hasDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
595	[BUG]  [BUGGY]  this.in  =  new  ZipArchiveEntry(inputStream,  encoding,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.in  =  new  ZipArchiveEntry(inputStream,  encoding,  useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.in  =  new  ZipArchiveEntry(inputStream,  encoding,  useUnicodeExtraFields);	  super(inputStream,    encoding,    allowStoredEntriesWithDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
596	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  encoding,  usedUnicodeExtraFields,  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  encoding,  usedUnicodeExtraFields,  hasDataDescriptor);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  encoding,  usedUnicodeExtraFields,  hasDataDescriptor);	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
597	[BUG]  [BUGGY]  encoding,  null,  useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  encoding,  null,  useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding());  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	encoding,  null,  useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding());	  encoding,    null,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
598	[BUG]  [BUGGY]  encoding,  null,  useUnicodeExtraFields,  this.useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  encoding,  null,  useUnicodeExtraFields,  this.useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	encoding,  null,  useUnicodeExtraFields,  this.useUnicodeExtraFields);	  encoding,    null,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
599	[BUG]  [BUGGY]  super(in,  encoding,  this.useUnicodeExtraFields,  true);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(in,  encoding,  this.useUnicodeExtraFields,  true);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(in,  encoding,  this.useUnicodeExtraFields,  true);	  super(in,    encoding,    useUnicodeExtraFields,    true);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
600	[BUG]  [BUGGY]  super(in,  encoding,  useUnicodeExtraFields,  true,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(in,  encoding,  useUnicodeExtraFields,  true,  zipEncoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(in,  encoding,  useUnicodeExtraFields,  true,  zipEncoding);	  super(in,    encoding,    useUnicodeExtraFields,    true);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
601	[BUG]  [BUGGY]  final  boolean  enableStoredEntriesWithZip64,  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  enableStoredEntriesWithZip64,  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  enableStoredEntriesWithZip64,  useUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithZip64,    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
602	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  encoding,  UseUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  encoding,  UseUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding());  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  encoding,  UseUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding());	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    ZipEncodingHelper.getZipEncoding());    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
603	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  usesZip64,  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  usesZip64,  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  usesZip64,  useUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    usesZip64)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
604	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  zipEncoding;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  useUnicodeExtraFields,  zipEncoding;  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  useUnicodeExtraFields,  zipEncoding;	  this.useUnicodeExtraFields,    useUnicodeExtraFields;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
605	[BUG]  [BUGGY]  Integer  buf  =  inputStream.readFully(encoding,  encoding);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer  buf  =  inputStream.readFully(encoding,  encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer  buf  =  inputStream.readFully(encoding,  encoding);	  Integer    buf    =    inputStream.readFully(encoding);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
606	[BUG]  [BUGGY]  Integer  buf  =  inputStream.readFully(encoding,  _useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer  buf  =  inputStream.readFully(encoding,  _useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer  buf  =  inputStream.readFully(encoding,  _useUnicodeExtraFields);	  Integer    buf    =    inputStream.readFully(encoding);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
607	[BUG]  [BUGGY]  this.encoding  =  encoding  +  ZipEncodingHelper.getZipEncoding(userUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  encoding  +  ZipEncodingHelper.getZipEncoding(userUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  encoding  +  ZipEncodingHelper.getZipEncoding(userUnicodeExtraFields);	  this.encoding    =    encoding    +    ZipEncodingHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
608	[BUG]  [BUGGY]  this.encoding  =  encoding  +  ZipEncodingHelper.getZipEncoding(zipEncoding);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  encoding  +  ZipEncodingHelper.getZipEncoding(zipEncoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  encoding  +  ZipEncodingHelper.getZipEncoding(zipEncoding);	  this.encoding    =    encoding    +    ZipEncodingHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
609	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  in,  zipEncoding,  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  in,  zipEncoding,  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  in,  zipEncoding,  useUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    in,    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
610	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  ZipEncodingHelper.getZipEncoding(zipEncoding))  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  ZipEncodingHelper.getZipEncoding(zipEncoding))  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  ZipEncodingHelper.getZipEncoding(zipEncoding))  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    in,    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
611	[BUG]  [BUGGY]  final  int  zipEncoding,  allowStoredEntriesWithDataDescriptor,  hasDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  int  zipEncoding,  allowStoredEntriesWithDataDescriptor,  hasDataDescriptor)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  int  zipEncoding,  allowStoredEntriesWithDataDescriptor,  hasDataDescriptor)  {	  final    int    allowStoredEntriesWithDataDescriptor,    hasDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
612	[BUG]  [BUGGY]  final  boolean  enableStoredEntriesWithFields,  boolean  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  enableStoredEntriesWithFields,  boolean  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  enableStoredEntriesWithFields,  boolean  useUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithFields,    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
613	[BUG]  [BUGGY]  this.encoding  =  ZipEncodingHelper.getZipEncoding(encoding,  useUnicodeExtraFields,  this.useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  ZipEncodingHelper.getZipEncoding(encoding,  useUnicodeExtraFields,  this.useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  ZipEncodingHelper.getZipEncoding(encoding,  useUnicodeExtraFields,  this.useUnicodeExtraFields);	  this.encoding    =    ZipEncodingHelper.getZipEncoding(encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
614	[BUG]  [BUGGY]  this.encoding  =  ZipEncodingHelper.getZipEncoding(encoding,  this);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  ZipEncodingHelper.getZipEncoding(encoding,  this);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  ZipEncodingHelper.getZipEncoding(encoding,  this);	  this.encoding    =    ZipEncodingHelper.getZipEncoding(encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
615	[BUG]  [BUGGY]  final  boolean  useUnicodeExtraFields,  final  char  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  useUnicodeExtraFields,  final  char  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  useUnicodeExtraFields,  final  char  zipEncoding)  {	  final    boolean    useUnicodeExtraFields,    final    int    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
616	[BUG]  [BUGGY]  final  char[]  encoding,  final  int  allowStoredEntriesWithUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  char[]  encoding,  final  int  allowStoredEntriesWithUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  char[]  encoding,  final  int  allowStoredEntriesWithUnicodeExtraFields)  {	  final    int    allowStoredEntriesWithUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
617	[BUG]  [BUGGY]  final  int  allowStoredEntriesWithDataDescriptor,  boolean  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  int  allowStoredEntriesWithDataDescriptor,  boolean  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  int  allowStoredEntriesWithDataDescriptor,  boolean  useUnicodeExtraFields)  {	  final    int    allowStoredEntriesWithUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
618	[BUG]  [BUGGY]  Integer  buf  =  inputStream.readLine()  &  0xFFFF;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer  buf  =  inputStream.readLine()  &  0xFFFF;  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer  buf  =  inputStream.readLine()  &  0xFFFF;	  Integer    buf    =    inputStream.readLine();    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
619	[BUG]  [BUGGY]  Integer  buf  =  inputStream.readLine(),  encoding);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer  buf  =  inputStream.readLine(),  encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer  buf  =  inputStream.readLine(),  encoding);	  Integer    buf    =    inputStream.readLine();    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
620	[BUG]  [BUGGY]  this.encoding  =  ZipArchiveEntryHelper.getZipEncoding(encoding,  _useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  ZipArchiveEntryHelper.getZipEncoding(encoding,  _useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  ZipArchiveEntryHelper.getZipEncoding(encoding,  _useUnicodeExtraFields);	  this.encoding    =    ZipArchiveEntryHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
621	[BUG]  [BUGGY]  boolean  enableStoredEntriesWithDataDescriptor,  boolean  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  boolean  enableStoredEntriesWithDataDescriptor,  boolean  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	boolean  enableStoredEntriesWithDataDescriptor,  boolean  useUnicodeExtraFields)  {	  final    boolean    enableStoredEntriesWithDataDescriptor,    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
622	[BUG]  [BUGGY]  this.encoding  =  ZipArchiveEntry.getZipEncoding(encoding);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  ZipArchiveEntry.getZipEncoding(encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  ZipArchiveEntry.getZipEncoding(encoding);	  this.encoding    =    StringEncodingHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
623	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  in.read())  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  in.read())  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithZip64,  in.read())  {	  final    boolean    allowStoredEntriesWithZip64,    in)    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
624	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  in,  this.useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  in,  this.useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithZip64,  in,  this.useUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithZip64,    in)    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
625	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  final  byte  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  final  byte  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  final  byte  useUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    final    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
626	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  usingUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  usingUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  usingUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    usingUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
627	[BUG]  [BUGGY]  this.useUnicodeExtraFields  =  ZipArchiveHelper.getZipEncoding(encoding);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields  =  ZipArchiveHelper.getZipEncoding(encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields  =  ZipArchiveHelper.getZipEncoding(encoding);	  this.encoding    =    ZipArchiveHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
628	[BUG]  [BUGGY]  Integer  buf  =  inputStream.readBytes(encoding);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer  buf  =  inputStream.readBytes(encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer  buf  =  inputStream.readBytes(encoding);	  Integer    buf    =    inputStream.readFully();    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
629	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  encoding,  useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding(encoding);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  encoding,  useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding(encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  encoding,  useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding(encoding);	  this.useUnicodeExtraFields,    encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
630	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  int  zipEncoding,  boolean  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithZip64,  int  zipEncoding,  boolean  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithZip64,  int  zipEncoding,  boolean  useUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithZip64,    int    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
631	[BUG]  [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  allowStoredEntriesWithDataDescriptor,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  allowStoredEntriesWithDataDescriptor,  zipEncoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  useUnicodeExtraFields,  allowStoredEntriesWithDataDescriptor,  zipEncoding);	  super(inputStream,    encoding,    useUnicodeExtraFields,    allowStoredEntriesWithDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
632	[BUG]  [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  allowStoredEntriesWithDataDescriptor,  usesZip64);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  allowStoredEntriesWithDataDescriptor,  usesZip64);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  useUnicodeExtraFields,  allowStoredEntriesWithDataDescriptor,  usesZip64);	  super(inputStream,    encoding,    useUnicodeExtraFields,    allowStoredEntriesWithDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
633	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  String  encoding,  int  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  String  encoding,  int  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  String  encoding,  int  zipEncoding)  {	  final    boolean    allowStoredEntriesWithFields,    int    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
634	[BUG]  [BUGGY]  this(inputStream,  encoding,  useUnicodeExtraFields,  null,  allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this(inputStream,  encoding,  useUnicodeExtraFields,  null,  allowStoredEntriesWithDataDescriptor)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this(inputStream,  encoding,  useUnicodeExtraFields,  null,  allowStoredEntriesWithDataDescriptor)  {	  final    boolean    useUnicodeExtraFields,    final    boolean    allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
635	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithUnicodeExtraFields,  boolean  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithUnicodeExtraFields,  boolean  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithUnicodeExtraFields,  boolean  useUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithUnicodeExtraFields,    int    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
636	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithUnicodeExtraFields,  byte[]  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithUnicodeExtraFields,  byte[]  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithUnicodeExtraFields,  byte[]  zipEncoding)  {	  final    boolean    allowStoredEntriesWithUnicodeExtraFields,    int    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
637	[BUG]  [BUGGY]  this.encoding  =  encoding,  ZipEncodingHelper.getZipEncoding(encoding);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  encoding,  ZipEncodingHelper.getZipEncoding(encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  encoding,  ZipEncodingHelper.getZipEncoding(encoding);	  this.encoding    =    encoding,    useUnicodeExtraFields;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
638	[BUG]  [BUGGY]  this.encoding  =  encoding,  ZipEncodingHelper.getZipEncoding(useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  encoding,  ZipEncodingHelper.getZipEncoding(useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  encoding,  ZipEncodingHelper.getZipEncoding(useUnicodeExtraFields);	  this.encoding    =    encoding,    useUnicodeExtraFields;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
639	[BUG]  [BUGGY]  this.encoding  =  encoding,  zipEncoding;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  encoding,  zipEncoding;  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  encoding,  zipEncoding;	  this.encoding    =    encoding,    useUnicodeExtraFields;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
640	[BUG]  [BUGGY]  this.encoding  =  encoding,  ZipArchiveHelper.getZipEncoding(useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  encoding,  ZipArchiveHelper.getZipEncoding(useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  encoding,  ZipArchiveHelper.getZipEncoding(useUnicodeExtraFields);	  this.encoding    =    encoding,    useUnicodeExtraFields;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
641	[BUG]  [BUGGY]  this.encoding  =  null,  useUnicodeExtraFields;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  null,  useUnicodeExtraFields;  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  null,  useUnicodeExtraFields;	  this.encoding    =    encoding,    useUnicodeExtraFields;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
642	[BUG]  [BUGGY]  this.encoding  =  encoding,  ZipArchiveHelper.getZipEncoding(encoding);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.encoding  =  encoding,  ZipArchiveHelper.getZipEncoding(encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.encoding  =  encoding,  ZipArchiveHelper.getZipEncoding(encoding);	  this.encoding    =    encoding,    useUnicodeExtraFields;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
643	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithUnicodeExtraFields,  intBuf)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithUnicodeExtraFields,  intBuf)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithUnicodeExtraFields,  intBuf)  {	  final    boolean    allowStoredEntriesWithUnicodeExtraFields,    shortBuf)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
644	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithUnicodeExtraFields,  bytesRead)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithUnicodeExtraFields,  bytesRead)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithUnicodeExtraFields,  bytesRead)  {	  final    boolean    allowStoredEntriesWithUnicodeExtraFields,    shortBuf)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
645	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  zipEncoding,  usedUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  zipEncoding,  usedUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  zipEncoding,  usedUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    usedUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
646	[BUG]  [BUGGY]  final  boolean  hasDataDescriptor,  int  zipEncoding,  boolean  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  hasDataDescriptor,  int  zipEncoding,  boolean  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  hasDataDescriptor,  int  zipEncoding,  boolean  useUnicodeExtraFields)  {	  final    boolean    hasDataDescriptor,    int    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
647	[BUG]  [BUGGY]  final  boolean  hasDataDescriptor,  Integer  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  hasDataDescriptor,  Integer  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  hasDataDescriptor,  Integer  zipEncoding)  {	  final    boolean    hasDataDescriptor,    int    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
648	[BUG]  [BUGGY]  final  char[]  encoding,  final  int  allowStoredEntriesWithZip64)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  char[]  encoding,  final  int  allowStoredEntriesWithZip64)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  char[]  encoding,  final  int  allowStoredEntriesWithZip64)  {	  final    int    allowStoredEntriesWithZip64)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
649	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  encoding,  hasDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  encoding,  hasDataDescriptor)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  encoding,  hasDataDescriptor)  {	  final    boolean    useUnicodeExtraFields,    hasDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
650	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  allowStoredEntriesWithDataDescriptor,  enableUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  allowStoredEntriesWithDataDescriptor,  enableUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  allowStoredEntriesWithDataDescriptor,  enableUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    boolean    enableUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
651	[BUG]  [BUGGY]  this.in  =  new  ZipInputStream(inputStream,  encoding,  useUnicodeExtraFields,  usesZip64);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.in  =  new  ZipInputStream(inputStream,  encoding,  useUnicodeExtraFields,  usesZip64);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.in  =  new  ZipInputStream(inputStream,  encoding,  useUnicodeExtraFields,  usesZip64);	  this.in    =    new    ZipInputStream(inputStream,    encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
652	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  in,  ZipEncodingHelper.getZipEncoding(encoding);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  in,  ZipEncodingHelper.getZipEncoding(encoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  in,  ZipEncodingHelper.getZipEncoding(encoding);	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    ZipEncodingHelper.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
653	[BUG]  [BUGGY]  this.useUnicodeExtraFields,!this.useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,!this.useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,!this.useUnicodeExtraFields);	  this.useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
654	[BUG]  [BUGGY]  Integer.toString(useUnicodeExtraFields),  true);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  Integer.toString(useUnicodeExtraFields),  true);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	Integer.toString(useUnicodeExtraFields),  true);	  Integer.toString(useUnicodeExtraFields));    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
655	[BUG]  [BUGGY]  ||  useUnicodeExtraFields,  true);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  ||  useUnicodeExtraFields,  true);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	||  useUnicodeExtraFields,  true);	  ||    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
656	[BUG]  [BUGGY]  ||  this.useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  ||  this.useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	||  this.useUnicodeExtraFields);	  ||    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
657	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  final  boolean  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  final  boolean  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  final  boolean  zipEncoding)  {	  final    boolean    allowStoredEntriesWithFields,    final    int    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
658	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  final  byte  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  final  byte  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  final  byte  zipEncoding)  {	  final    boolean    allowStoredEntriesWithFields,    final    int    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
659	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  final  ByteArrayInputStream  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  final  ByteArrayInputStream  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  final  ByteArrayInputStream  zipEncoding)  {	  final    boolean    allowStoredEntriesWithFields,    final    int    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
660	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  0,!useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  0,!useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  0,!useUnicodeExtraFields);	  this.useUnicodeExtraFields,    0,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
661	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding(encoding),  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding(encoding),  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  ZipEncodingHelper.getZipEncoding(encoding),  useUnicodeExtraFields)  {	  this.useUnicodeExtraFields,    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
662	[BUG]  [BUGGY]  ||  zipEncoding)  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  ||  zipEncoding)  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	||  zipEncoding)	  ||    useUnicodeExtraFields)    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
663	[BUG]  [BUGGY]  ||  ZipEncodingHelper.getZipEncoding(encoding))  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  ||  ZipEncodingHelper.getZipEncoding(encoding))  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	||  ZipEncodingHelper.getZipEncoding(encoding))	  ||    useUnicodeExtraFields)    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
664	[BUG]  [BUGGY]  ||  ZipEncodingHelper.isZipEncoding(encoding))  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  ||  ZipEncodingHelper.isZipEncoding(encoding))  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	||  ZipEncodingHelper.isZipEncoding(encoding))	  ||    useUnicodeExtraFields)    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
665	[BUG]  [BUGGY]  super(inputStream,  encoding,  this.useUnicodeExtraFields,  false);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  this.useUnicodeExtraFields,  false);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  this.useUnicodeExtraFields,  false);	  super(inputStream,    encoding,    useUnicodeExtraFields,    false);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
666	[BUG]  [BUGGY]  this(inputStream,  encoding,  useUnicodeExtraFields,  true);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this(inputStream,  encoding,  useUnicodeExtraFields,  true);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this(inputStream,  encoding,  useUnicodeExtraFields,  true);	  super(inputStream,    encoding,    useUnicodeExtraFields,    false);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
667	[BUG]  [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  false,  true);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  false,  true);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  useUnicodeExtraFields,  false,  true);	  super(inputStream,    encoding,    useUnicodeExtraFields,    false);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
668	[BUG]  [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  false,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  false,  zipEncoding);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  useUnicodeExtraFields,  false,  zipEncoding);	  super(inputStream,    encoding,    useUnicodeExtraFields,    false);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
669	[BUG]  [BUGGY]  final  boolean  hasDataDescriptor,  ZipEncodingHelper.getZipEncoding(encoding))  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  hasDataDescriptor,  ZipEncodingHelper.getZipEncoding(encoding))  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  hasDataDescriptor,  ZipEncodingHelper.getZipEncoding(encoding))  {	  final    boolean    hasDataDescriptor,    String    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
670	[BUG]  [BUGGY]  final  boolean  hasDataDescriptor,  ZipEncodingHelper.isZipEncoding(zipEncoding))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  hasDataDescriptor,  ZipEncodingHelper.isZipEncoding(zipEncoding))  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  hasDataDescriptor,  ZipEncodingHelper.isZipEncoding(zipEncoding))  {	  final    boolean    hasDataDescriptor,    String    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
671	[BUG]  [BUGGY]  final  boolean  hasDataDescriptor,  Validate.notNull(zipEncoding))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  hasDataDescriptor,  Validate.notNull(zipEncoding))  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  hasDataDescriptor,  Validate.notNull(zipEncoding))  {	  final    boolean    hasDataDescriptor,    String    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
672	[BUG]  [BUGGY]  super(inputStream,  encoding,  this.useUnicodeExtraFields,  true);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  this.useUnicodeExtraFields,  true);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  this.useUnicodeExtraFields,  true);	  super(inputStream,    encoding,    useUnicodeExtraFields,    true);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
673	[BUG]  [BUGGY]  encoding,  zipEncoding,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  encoding,  zipEncoding,  useUnicodeExtraFields);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	encoding,  zipEncoding,  useUnicodeExtraFields);	  encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
674	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  int  in)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  int  in)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  int  in)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    long    in)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
675	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  long  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  long  zipEncoding)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  long  zipEncoding)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    long    in)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
676	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithFields,  final  byte  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithFields,  final  byte  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithFields,  final  byte  useUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithFields,    final    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
677	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  usedUnicodeExtraFields,  false);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  usedUnicodeExtraFields,  false);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  usedUnicodeExtraFields,  false);	  this.useUnicodeExtraFields,    useUnicodeExtraFields,    true);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
678	[BUG]  [BUGGY]  super(inputStream,  encoding,  zipEncoding,  useUnicodeExtraFields,  usesZip64);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  zipEncoding,  useUnicodeExtraFields,  usesZip64);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  zipEncoding,  useUnicodeExtraFields,  usesZip64);	  super(inputStream,    encoding,    useUnicodeExtraFields,    usesZip64);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
679	[BUG]  [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  0,  usesZip64);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  super(inputStream,  encoding,  useUnicodeExtraFields,  0,  usesZip64);  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	super(inputStream,  encoding,  useUnicodeExtraFields,  0,  usesZip64);	  super(inputStream,    encoding,    useUnicodeExtraFields,    usesZip64);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
680	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithUnicodeExtraFields,  usesZip64)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithUnicodeExtraFields,  usesZip64)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithUnicodeExtraFields,  usesZip64)  {	  final    boolean    allowStoredEntriesWithUnicodeExtraFields,    hasDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
681	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithUnicodeExtraFields,  isEnabled)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithUnicodeExtraFields,  isEnabled)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithUnicodeExtraFields,  isEnabled)  {	  final    boolean    allowStoredEntriesWithUnicodeExtraFields,    hasDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
682	[BUG]  [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  in.readLine()),  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  allowStoredEntriesWithDataDescriptor,  in.readLine()),  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  allowStoredEntriesWithDataDescriptor,  in.readLine()),  useUnicodeExtraFields)  {	  final    boolean    allowStoredEntriesWithDataDescriptor,    in.readLine())    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
683	[BUG]  [BUGGY]  ||  zipEncoding;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  ||  zipEncoding;  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	||  zipEncoding;	  ||    useUnicodeExtraFields;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
684	[BUG]  [BUGGY]  this.zipEncoding,  encoding,  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.zipEncoding,  encoding,  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.zipEncoding,  encoding,  useUnicodeExtraFields)  {	  final    boolean    useUnicodeExtraFields,    final    boolean    zipEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
685	[BUG]  [BUGGY]  this.useUnicodeExtraFields,  hasDataDescriptor,  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  this.useUnicodeExtraFields,  hasDataDescriptor,  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	this.useUnicodeExtraFields,  hasDataDescriptor,  useUnicodeExtraFields)  {	  final    boolean    hasDataDescriptor,    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
686	[BUG]  [BUGGY]  final  boolean  zipEncoding,  boolean  useUnicodeExtraFields)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields,      [BUGGY]  final  boolean  zipEncoding,  boolean  useUnicodeExtraFields)  {  [BUGGY]      this.encoding  =  encoding;  zipEncoding  =  ZipEncodingHelper.getZipEncoding(encoding);  this.useUnicodeExtraFields  =  useUnicodeExtraFields;  in  =  new  PushbackInputStream(inputStream,  buf.capacity());  this.allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor;  buf.limit(0);  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  final  boolean  allowStoredEntriesWithDataDescriptor  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	209	209	1	replace	final  boolean  zipEncoding,  boolean  useUnicodeExtraFields)  {	  final    boolean    hasDataDescriptor,    boolean    useUnicodeExtraFields)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
