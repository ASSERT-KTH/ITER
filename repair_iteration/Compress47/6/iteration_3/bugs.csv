bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  shutdown  =  false;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  shutdown  =  false;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	shutdown  =  false;	  shut    =    true;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
2	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
3	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
4	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
5	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
6	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
7	[BUG]  [BUGGY]  closed  =  new  java.util.ArrayList  <  ZipEntry>(1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  =  new  java.util.ArrayList  <  ZipEntry>(1);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  =  new  java.util.ArrayList  <  ZipEntry>(1);	  closed    =    new    java.util.ArrayList    <    ZipEntry>();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
8	[BUG]  [BUGGY]  close  =  new  java.util.ArrayList  <  ZipEntry>();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  close  =  new  java.util.ArrayList  <  ZipEntry>();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	close  =  new  java.util.ArrayList  <  ZipEntry>();	  closed    =    new    java.util.ArrayList    <    ZipEntry>();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
9	[BUG]  [BUGGY]  closed  =  new  java.util.ArrayList  <  ZipEntry>(inf);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  =  new  java.util.ArrayList  <  ZipEntry>(inf);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  =  new  java.util.ArrayList  <  ZipEntry>(inf);	  closed    =    new    java.util.ArrayList    <    ZipEntry>();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
10	[BUG]  [BUGGY]  this.closed  =  new  java.util.ArrayList  <  ZipEntry>();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  this.closed  =  new  java.util.ArrayList  <  ZipEntry>();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	this.closed  =  new  java.util.ArrayList  <  ZipEntry>();	  closed    =    new    java.util.ArrayList    <    ZipEntry>();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
11	[BUG]  [BUGGY]  closed  =  new  java.util.ArrayList  <  ZipEntry>(in);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  =  new  java.util.ArrayList  <  ZipEntry>(in);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  =  new  java.util.ArrayList  <  ZipEntry>(in);	  closed    =    new    java.util.ArrayList    <    ZipEntry>();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
12	[BUG]  [BUGGY]  shutdown  =  null;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  shutdown  =  null;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	shutdown  =  null;	  shutdown    =    true;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
13	[BUG]  [BUGGY]  shutting  =  false;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  shutting  =  false;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	shutting  =  false;	  shutdown    =    true;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
14	[BUG]  [BUGGY]  shutting  =  true;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  shutting  =  true;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	shutting  =  true;	  shutdown    =    true;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
15	[BUG]  [BUGGY]  closed  =  new  java.util.ArrayList  <  ZipArchiveEntry>(1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  =  new  java.util.ArrayList  <  ZipArchiveEntry>(1);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  =  new  java.util.ArrayList  <  ZipArchiveEntry>(1);	  closed    =    new    java.util.ArrayList    <    ZipArchiveEntry>();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
16	[BUG]  [BUGGY]  closed  =  new  java.util.ArrayList  <  ZipArchiveEntry>(inf);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  =  new  java.util.ArrayList  <  ZipArchiveEntry>(inf);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  =  new  java.util.ArrayList  <  ZipArchiveEntry>(inf);	  closed    =    new    java.util.ArrayList    <    ZipArchiveEntry>();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
17	[BUG]  [BUGGY]  close  =  new  java.util.ArrayList  <  ZipArchiveEntry>();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  close  =  new  java.util.ArrayList  <  ZipArchiveEntry>();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	close  =  new  java.util.ArrayList  <  ZipArchiveEntry>();	  closed    =    new    java.util.ArrayList    <    ZipArchiveEntry>();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
18	[BUG]  [BUGGY]  this.closed  =  new  java.util.ArrayList  <  ZipArchiveEntry>();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  this.closed  =  new  java.util.ArrayList  <  ZipArchiveEntry>();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	this.closed  =  new  java.util.ArrayList  <  ZipArchiveEntry>();	  closed    =    new    java.util.ArrayList    <    ZipArchiveEntry>();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
19	[BUG]  [BUGGY]  closed  =  new  java.util.ArrayList  <  ZipArchiveEntry>(in);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  =  new  java.util.ArrayList  <  ZipArchiveEntry>(in);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  =  new  java.util.ArrayList  <  ZipArchiveEntry>(in);	  closed    =    new    java.util.ArrayList    <    ZipArchiveEntry>();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
20	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-8 ", "UTF-8 ").encodeAsString();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-8 ", "UTF-8 ").encodeAsString();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-8 ", "UTF-8 ").encodeAsString();	  closure    |=    JsonStringEncoder.getInstance().encodeAsString(   "UTF-8   ").encodeAsString();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
21	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-8_ ").encodeAsString();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-8_ ").encodeAsString();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-8_ ").encodeAsString();	  closure    |=    JsonStringEncoder.getInstance().encodeAsString(   "UTF-8   ").encodeAsString();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
22	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-8 ",  encoding).encodeAsString();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-8 ",  encoding).encodeAsString();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-8 ",  encoding).encodeAsString();	  closure    |=    JsonStringEncoder.getInstance().encodeAsString(   "UTF-8   ").encodeAsString();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
23	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-8 ").encodeAsString(0);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-8 ").encodeAsString(0);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-8 ").encodeAsString(0);	  closure    |=    JsonStringEncoder.getInstance().encodeAsString(   "UTF-8   ").encodeAsString();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
24	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-8 ").encodeAsString(inf);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-8 ").encodeAsString(inf);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-8 ").encodeAsString(inf);	  closure    |=    JsonStringEncoder.getInstance().encodeAsString(   "UTF-8   ").encodeAsString();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
25	[BUG]  [BUGGY]  close  =  this;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  close  =  this;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	close  =  this;	  close    =    null;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
26	[BUG]  [BUGGY]  close  =  new  java.util.ArrayList  <  ZipEncoding>();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  close  =  new  java.util.ArrayList  <  ZipEncoding>();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	close  =  new  java.util.ArrayList  <  ZipEncoding>();	  close    =    null;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
27	[BUG]  [BUGGY]  close  =  new  byte[inf.length()  ];  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  close  =  new  byte[inf.length()  ];  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	close  =  new  byte[inf.length()  ];	  close    =    null;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
28	[BUG]  [BUGGY]  close  =  new  byte[in.length()  ];  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  close  =  new  byte[in.length()  ];  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	close  =  new  byte[in.length()  ];	  close    =    null;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
29	[BUG]  [BUGGY]  Closed  =  true;  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  ioe.getMessage());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  true;  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  ioe.getMessage());  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  true;  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  ioe.getMessage());	  Closed    =    false;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    ioe.getMessage());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
30	[BUG]  [BUGGY]  if(!closed)  {  Closed  =  false;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  ioe.getMessage());  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(!closed)  {  Closed  =  false;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  ioe.getMessage());  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(!closed)  {  Closed  =  false;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  ioe.getMessage());  }	  Closed    =    false;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    ioe.getMessage());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
31	[BUG]  [BUGGY]  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields  without  closed  entry: "  +  ioe.getMessage());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields  without  closed  entry: "  +  ioe.getMessage());  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields  without  closed  entry: "  +  ioe.getMessage());	  Closed    =    false;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    ioe.getMessage());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
32	[BUG]  [BUGGY]  closed  =  new  ArrayList  <  String,Integer>();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  =  new  ArrayList  <  String,Integer>();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  =  new  ArrayList  <  String,Integer>();	  closed    =    new    LinkedHashMap    <    String,Integer>();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
33	[BUG]  [BUGGY]  closed  =  new  LinkedHashMap  <  String,Integer>(inf.length);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  =  new  LinkedHashMap  <  String,Integer>(inf.length);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  =  new  LinkedHashMap  <  String,Integer>(inf.length);	  closed    =    new    LinkedHashMap    <    String,Integer>();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
34	[BUG]  [BUGGY]  closed  =  new  LinkedHashMap  <  String,Integer>(inf);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  =  new  LinkedHashMap  <  String,Integer>(inf);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  =  new  LinkedHashMap  <  String,Integer>(inf);	  closed    =    new    LinkedHashMap    <    String,Integer>();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
35	[BUG]  [BUGGY]  closed  =  new  LinkedHashMap  <  String,Integer>(in.length);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  =  new  LinkedHashMap  <  String,Integer>(in.length);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  =  new  LinkedHashMap  <  String,Integer>(in.length);	  closed    =    new    LinkedHashMap    <    String,Integer>();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
36	[BUG]  [BUGGY]  closed  =  new  java.util.ArrayList  <  String,Integer>();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  =  new  java.util.ArrayList  <  String,Integer>();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  =  new  java.util.ArrayList  <  String,Integer>();	  closed    =    new    LinkedHashMap    <    String,Integer>();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
37	[BUG]  [BUGGY]  Inflater  {  Closed  =  true;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closed  input  stream ");  close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  {  Closed  =  true;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closed  input  stream ");  close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  {  Closed  =  true;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closed  input  stream ");  close();  }	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    input    stream   ");    close();    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
38	[BUG]  [BUGGY]  Inflater  {  Closed  =  false;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closed  input  stream ");  close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  {  Closed  =  false;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closed  input  stream ");  close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  {  Closed  =  false;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closed  input  stream ");  close();  }	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    input    stream   ");    close();    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
39	[BUG]  [BUGGY]  if(in  <  null)  {  Closed  =  true;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closed  input  stream ");  close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(in  <  null)  {  Closed  =  true;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closed  input  stream ");  close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(in  <  null)  {  Closed  =  true;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closed  input  stream ");  close();  }	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    input    stream   ");    close();    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
40	[BUG]  [BUGGY]  Closed  =  false;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closed  input  stream ");  close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  false;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closed  input  stream ");  close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  false;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closed  input  stream ");  close();  }	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    input    stream   ");    close();    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
41	[BUG]  [BUGGY]  if(!closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  input  stream ");  close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(!closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  input  stream ");  close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(!closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  input  stream ");  close();  }	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    input    stream   ");    close();    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
42	[BUG]  [BUGGY]  Inflater  {  Closed  =  true;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closed  input  stream. ");  close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  {  Closed  =  true;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closed  input  stream. ");  close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  {  Closed  =  true;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closed  input  stream. ");  close();  }	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    input    stream   ");    close();    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
43	[BUG]  [BUGGY]  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields:  closed "  +  ioe);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields:  closed "  +  ioe);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields:  closed "  +  ioe);	  Closed    =    false;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields:    closed   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
44	[BUG]  [BUGGY]  Closed  =  true;  System.err.println( "UnicodeExtraFields:  closed "  +  ioe);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  true;  System.err.println( "UnicodeExtraFields:  closed "  +  ioe);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  true;  System.err.println( "UnicodeExtraFields:  closed "  +  ioe);	  Closed    =    false;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields:    closed   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
45	[BUG]  [BUGGY]  Closed  =  true;  }  catch(Exception  ioe)  {  System.err.println( "UnicodeExtraFields:  closed "  +  ioe);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  true;  }  catch(Exception  ioe)  {  System.err.println( "UnicodeExtraFields:  closed "  +  ioe);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  true;  }  catch(Exception  ioe)  {  System.err.println( "UnicodeExtraFields:  closed "  +  ioe);	  Closed    =    false;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields:    closed   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
46	[BUG]  [BUGGY]  if(closed)  {  Closed  =  false;  }  else  {  System.err.println( "UnicodeExtraFields:  closed "  +  ioe);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(closed)  {  Closed  =  false;  }  else  {  System.err.println( "UnicodeExtraFields:  closed "  +  ioe);  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(closed)  {  Closed  =  false;  }  else  {  System.err.println( "UnicodeExtraFields:  closed "  +  ioe);  }	  Closed    =    false;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields:    closed   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
47	[BUG]  [BUGGY]  Inflater  inf  =  getOutputStream();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  inf  =  getOutputStream();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  inf  =  getOutputStream();	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
48	[BUG]  [BUGGY]  Inflater  inf  =  closeInputStream();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  inf  =  closeInputStream();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  inf  =  closeInputStream();	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
49	[BUG]  [BUGGY]  Inflater  inf  =  this.getInputStream();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  inf  =  this.getInputStream();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  inf  =  this.getInputStream();	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
50	[BUG]  [BUGGY]  Inflater  inf  =  this.inputStream;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  inf  =  this.inputStream;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  inf  =  this.inputStream;	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
51	[BUG]  [BUGGY]  Inflater  inf  =  close();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  inf  =  close();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  inf  =  close();	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
52	[BUG]  [BUGGY]  Inflater  inf  =  entry.getInputStream();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  inf  =  entry.getInputStream();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  inf  =  entry.getInputStream();	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    in.getClass().getName());    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
53	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.open();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  inf  =  entryEncoding.open();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  inf  =  entryEncoding.open();	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    in.getClass().getName());    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
54	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.openInputStream();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  inf  =  entryEncoding.openInputStream();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  inf  =  entryEncoding.openInputStream();	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    in.getClass().getName());    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
55	[BUG]  [BUGGY]  Context.checkState(!closed);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Context.checkState(!closed);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Context.checkState(!closed);	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    in.getClass().getName());    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
56	[BUG]  [BUGGY]  Close  =  false;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Close  =  false;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Close  =  false;	  Close    =    true;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
57	[BUG]  [BUGGY]  Close  =  null;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Close  =  null;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Close  =  null;	  Close    =    true;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
58	[BUG]  [BUGGY]  Close  :  null;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Close  :  null;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Close  :  null;	  Close    =    true;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
59	[BUG]  [BUGGY]  Close  :  false;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Close  :  false;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Close  :  false;	  Close    =    true;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
60	[BUG]  [BUGGY]  if(in.isEnabled())  {  close();  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(in.isEnabled())  {  close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(in.isEnabled())  {  close();  }	  close();    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
61	[BUG]  [BUGGY]  if(in  <  null)  {  close();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(in  <  null)  {  close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(in  <  null)  {  close();  }	  close();    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
62	[BUG]  [BUGGY]  if(in!=  null)  {  close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(in!=  null)  {  close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(in!=  null)  {  close();  }	  close();    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
63	[BUG]  [BUGGY]  if(in  <  null)  {  close();  }  else  {  in.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(in  <  null)  {  close();  }  else  {  in.close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(in  <  null)  {  close();  }  else  {  in.close();  }	  close();    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
64	[BUG]  [BUGGY]  if(in!=  null)  {  close();  }  else  {  in.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(in!=  null)  {  close();  }  else  {  in.close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(in!=  null)  {  close();  }  else  {  in.close();  }	  close();    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
65	[BUG]  [BUGGY]  if(in.read()  >  0)  {  close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(in.read()  >  0)  {  close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(in.read()  >  0)  {  close();  }	  close();    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
66	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(inf!=  null)  {  inf.close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(inf!=  null)  {  inf.close();  }	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
67	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalStateException( " ");  }	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
68	[BUG]  [BUGGY]  if(inf.length()  >  0)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(inf.length()  >  0)  {  inf.close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(inf.length()  >  0)  {  inf.close();  }	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
69	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
70	[BUG]  [BUGGY]  if(inf  ==  null)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(inf  ==  null)  {  inf.close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(inf  ==  null)  {  inf.close();  }	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
71	[BUG]  [BUGGY]  closure  =  new  ZipArchiveEntry();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  =  new  ZipArchiveEntry();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  =  new  ZipArchiveEntry();	  closure    =    null;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
72	[BUG]  [BUGGY]  closure  =  new  java.util.ArrayList  <  ZipArchiveEntry>();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  =  new  java.util.ArrayList  <  ZipArchiveEntry>();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  =  new  java.util.ArrayList  <  ZipArchiveEntry>();	  closure    =    null;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
73	[BUG]  [BUGGY]  closure  =  new  java.util.ArrayList  <  ZipEncoding>();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  =  new  java.util.ArrayList  <  ZipEncoding>();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  =  new  java.util.ArrayList  <  ZipEncoding>();	  closure    =    null;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
74	[BUG]  [BUGGY]  closure  =  new  byte[inf.length()  ];  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  =  new  byte[inf.length()  ];  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  =  new  byte[inf.length()  ];	  closure    =    null;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
75	[BUG]  [BUGGY]  closure  =  Inflater.getInstance();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  =  Inflater.getInstance();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  =  Inflater.getInstance();	  closure    =    null;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
76	[BUG]  [BUGGY]  closure  =  new  ZipArchiveEntry(inf);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  =  new  ZipArchiveEntry(inf);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  =  new  ZipArchiveEntry(inf);	  closure    =    null;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
77	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-8 ",   "UTF-8 ");  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-8 ",   "UTF-8 ");  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-8 ",   "UTF-8 ");	  closure    |=    JsonStringEncoder.getInstance().encodeAsString(   "UTF-8   ",   "ISO-8859-1   ");    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
78	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-8 ",  encoding, "ISO-8859-1 ");  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-8 ",  encoding, "ISO-8859-1 ");  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-8 ",  encoding, "ISO-8859-1 ");	  closure    |=    JsonStringEncoder.getInstance().encodeAsString(   "UTF-8   ",   "ISO-8859-1   ");    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
79	[BUG]  [BUGGY]  shut  =  new  ZipArchiveEntry();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  shut  =  new  ZipArchiveEntry();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	shut  =  new  ZipArchiveEntry();	  shut    =    null;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
80	[BUG]  [BUGGY]  shut  =  new  java.util.ArrayList  <  ZipArchiveEntry>();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  shut  =  new  java.util.ArrayList  <  ZipArchiveEntry>();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	shut  =  new  java.util.ArrayList  <  ZipArchiveEntry>();	  shut    =    null;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
81	[BUG]  [BUGGY]  shut  =  new  java.util.ArrayList  <  ZipEncoding>();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  shut  =  new  java.util.ArrayList  <  ZipEncoding>();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	shut  =  new  java.util.ArrayList  <  ZipEncoding>();	  shut    =    null;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
82	[BUG]  [BUGGY]  shut  =  new  byte[inf.length()  ];  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  shut  =  new  byte[inf.length()  ];  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	shut  =  new  byte[inf.length()  ];	  shut    =    null;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
83	[BUG]  [BUGGY]  shut  =  new  ZipInputStream();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  shut  =  new  ZipInputStream();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	shut  =  new  ZipInputStream();	  shut    =    null;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
84	[BUG]  [BUGGY]  shut  =  new  ZipArchiveEntry(inf);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  shut  =  new  ZipArchiveEntry(inf);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	shut  =  new  ZipArchiveEntry(inf);	  shut    =    null;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
85	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(inf),  false);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(inf),  false);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(inf),  false);	  closure    |=    JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(inf));    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
86	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(inf),  true);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(inf),  true);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(inf),  true);	  closure    |=    JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(inf));    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
87	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(inf,  0));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(inf,  0));  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(inf,  0));	  closure    |=    JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(inf));    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
88	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(inf),  0);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(inf),  0);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(inf),  0);	  closure    |=    JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(inf));    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
89	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(inf,  true));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(inf,  true));  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(inf,  true));	  closure    |=    JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(inf));    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
90	[BUG]  [BUGGY]  closure  =  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(inf));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  =  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(inf));  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  =  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(inf));	  closure    |=    JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(inf));    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
91	[BUG]  [BUGGY]  Closed  :  false;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  :  false;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  :  false;	  Closed    :    true;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
92	[BUG]  [BUGGY]  Closed  :  null;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  :  null;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  :  null;	  Closed    :    true;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
93	[BUG]  [BUGGY]  closed  :  false;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  :  false;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  :  false;	  Closed    :    true;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
94	[BUG]  [BUGGY]  Closed  :  FALSE;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  :  FALSE;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  :  FALSE;	  Closed    :    true;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
95	[BUG]  [BUGGY]  Closed  =  false;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  in.getValue());  return;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  false;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  in.getValue());  return;  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  false;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  in.getValue());  return;  }	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    in.getValue());    return;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
96	[BUG]  [BUGGY]  Closed  =  false;  }  else  if(closed)  {  System.err.println( "ZipArchiveEntry  with  closed  entry: "  +  in.getValue());  return;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  false;  }  else  if(closed)  {  System.err.println( "ZipArchiveEntry  with  closed  entry: "  +  in.getValue());  return;  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  false;  }  else  if(closed)  {  System.err.println( "ZipArchiveEntry  with  closed  entry: "  +  in.getValue());  return;  }	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    in.getValue());    return;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
97	[BUG]  [BUGGY]  Closed  =  false;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  in.getKey());  return;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  false;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  in.getKey());  return;  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  false;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  in.getKey());  return;  }	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    in.getValue());    return;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
98	[BUG]  [BUGGY]  Closed  =  false;  }  else  if(closed)  {  System.err.println( "JavaExtraFields  with  closed  entry: "  +  in.getValue());  return;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  false;  }  else  if(closed)  {  System.err.println( "JavaExtraFields  with  closed  entry: "  +  in.getValue());  return;  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  false;  }  else  if(closed)  {  System.err.println( "JavaExtraFields  with  closed  entry: "  +  in.getValue());  return;  }	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    in.getValue());    return;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
99	[BUG]  [BUGGY]  Closed  =  false;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  without  closed  entry: "  +  in.getValue());  return;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  false;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  without  closed  entry: "  +  in.getValue());  return;  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  false;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  without  closed  entry: "  +  in.getValue());  return;  }	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    in.getValue());    return;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
100	[BUG]  [BUGGY]  if(!closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  ioe.getMessage());  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(!closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  ioe.getMessage());  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(!closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  ioe.getMessage());  }	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    ioe.getMessage());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
101	[BUG]  [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  ioe.getMessage());  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  ioe.getMessage());  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  ioe.getMessage());  }	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    ioe.getMessage());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
102	[BUG]  [BUGGY]  if(!closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  without  closed  entry: "  +  ioe.getMessage());  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(!closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  without  closed  entry: "  +  ioe.getMessage());  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(!closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  without  closed  entry: "  +  ioe.getMessage());  }	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    ioe.getMessage());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
103	[BUG]  [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  without  closed  entry: "  +  ioe.getMessage());  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  without  closed  entry: "  +  ioe.getMessage());  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  without  closed  entry: "  +  ioe.getMessage());  }	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    ioe.getMessage());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
104	[BUG]  [BUGGY]  Closed  =  false;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  in.getValue());  close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  false;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  in.getValue());  close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  false;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  in.getValue());  close();  }	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    in.getValue());    close();    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
105	[BUG]  [BUGGY]  Inflater  {  Closed  =  false;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  in.getValue());  close();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  {  Closed  =  false;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  in.getValue());  close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  {  Closed  =  false;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  in.getValue());  close();  }	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    in.getValue());    close();    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
106	[BUG]  [BUGGY]  if(!closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  in.getValue());  close();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(!closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  in.getValue());  close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(!closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  in.getValue());  close();  }	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    in.getValue());    close();    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
107	[BUG]  [BUGGY]  Inflater  {  Closed  =  false;  }  else  if(closed)  {  System.err.println( "JavaExtraFields  with  closed  entry: "  +  in.getValue());  close();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  {  Closed  =  false;  }  else  if(closed)  {  System.err.println( "JavaExtraFields  with  closed  entry: "  +  in.getValue());  close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  {  Closed  =  false;  }  else  if(closed)  {  System.err.println( "JavaExtraFields  with  closed  entry: "  +  in.getValue());  close();  }	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    in.getValue());    close();    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
108	[BUG]  [BUGGY]  Closed  =  false;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  in.getKey());  close();  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  false;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  in.getKey());  close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  false;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  in.getKey());  close();  }	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    in.getValue());    close();    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
109	[BUG]  [BUGGY]  Closed  =  false;  }  else  if(closed)  {  System.err.println( "ZipArchiveEntry  with  closed  entry: "  +  in.getValue());  close();  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  false;  }  else  if(closed)  {  System.err.println( "ZipArchiveEntry  with  closed  entry: "  +  in.getValue());  close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  false;  }  else  if(closed)  {  System.err.println( "ZipArchiveEntry  with  closed  entry: "  +  in.getValue());  close();  }	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    in.getValue());    close();    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
110	[BUG]  [BUGGY]  Closed  =  true;  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  ioe);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  true;  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  ioe);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  true;  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  ioe);	  Closed    =    false;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
111	[BUG]  [BUGGY]  Closed  =  true;  }  catch(Exception  ioe)  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  ioe);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  true;  }  catch(Exception  ioe)  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  ioe);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  true;  }  catch(Exception  ioe)  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  ioe);	  Closed    =    false;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
112	[BUG]  [BUGGY]  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields  without  closed  entry: "  +  ioe);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields  without  closed  entry: "  +  ioe);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields  without  closed  entry: "  +  ioe);	  Closed    =    false;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
113	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsZip64(inf);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsZip64(inf);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsZip64(inf);	  closure    |=    JsonStringEncoder.getInstance().encodeAsZip64(entriesZip64);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
114	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsZip64(in);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsZip64(in);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsZip64(in);	  closure    |=    JsonStringEncoder.getInstance().encodeAsZip64(entriesZip64);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
115	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsZip64(inf,  entriesZip64);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsZip64(inf,  entriesZip64);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsZip64(inf,  entriesZip64);	  closure    |=    JsonStringEncoder.getInstance().encodeAsZip64(entriesZip64);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
116	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsZip64(current);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsZip64(current);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsZip64(current);	  closure    |=    JsonStringEncoder.getInstance().encodeAsZip64(entriesZip64);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
117	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsZip64(entriesZip64,  entryEncoding);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsZip64(entriesZip64,  entryEncoding);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsZip64(entriesZip64,  entryEncoding);	  closure    |=    JsonStringEncoder.getInstance().encodeAsZip64(entriesZip64);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
118	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsZip64(zipEncoding);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsZip64(zipEncoding);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsZip64(zipEncoding);	  closure    |=    JsonStringEncoder.getInstance().encodeAsZip64(entriesZip64);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
119	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsZip64(outputStream);  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsZip64(outputStream);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsZip64(outputStream);	  closure    |=    JsonStringEncoder.getInstance().encodeAsZip64(entriesZip64);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
120	[BUG]  [BUGGY]  Closed  |=  false;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  |=  false;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  |=  false;	  Closed    |=    true;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
121	[BUG]  [BUGGY]  Closed  &=  true;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  &=  true;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  &=  true;	  Closed    |=    true;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
122	[BUG]  [BUGGY]  Closed  |=  FALSE;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  |=  FALSE;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  |=  FALSE;	  Closed    |=    true;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
123	[BUG]  [BUGGY]  Closed  |=!closed;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  |=!closed;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  |=!closed;	  Closed    |=    true;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
124	[BUG]  [BUGGY]  closed  |=  false;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  |=  false;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  |=  false;	  Closed    |=    true;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
125	[BUG]  [BUGGY]  Closed  =  new  java.util.ArrayList  <  ZipArchiveEntry>();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  new  java.util.ArrayList  <  ZipArchiveEntry>();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  new  java.util.ArrayList  <  ZipArchiveEntry>();	  Closed    =   "   ";    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
126	[BUG]  [BUGGY]  Closed  =  new  java.util.ArrayList  <  ZipEncoding>();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  new  java.util.ArrayList  <  ZipEncoding>();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  new  java.util.ArrayList  <  ZipEncoding>();	  Closed    =   "   ";    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
127	[BUG]  [BUGGY]  Closed  =  new  java.util.ArrayList  <  ZipArchiveEntry>(inf.length);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  new  java.util.ArrayList  <  ZipArchiveEntry>(inf.length);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  new  java.util.ArrayList  <  ZipArchiveEntry>(inf.length);	  Closed    =   "   ";    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
128	[BUG]  [BUGGY]  Closed  =  new  LinkedHashMap  <  String,Object>();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  new  LinkedHashMap  <  String,Object>();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  new  LinkedHashMap  <  String,Object>();	  Closed    =   "   ";    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
129	[BUG]  [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf,  closed);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf,  closed);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf,  closed);	  CloseEntry    <    K,    V>    inf    =    new    CloseEntry    <    K,    V>(inf);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
130	[BUG]  [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf,  entryEncoding);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf,  entryEncoding);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf,  entryEncoding);	  CloseEntry    <    K,    V>    inf    =    new    CloseEntry    <    K,    V>(inf);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
131	[BUG]  [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf,  ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf,  ze);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf,  ze);	  CloseEntry    <    K,    V>    inf    =    new    CloseEntry    <    K,    V>(inf);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
132	[BUG]  [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.getValue());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.getValue());  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.getValue());	  CloseEntry    <    K,    V>    inf    =    new    CloseEntry    <    K,    V>(inf);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
133	[BUG]  [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf,  close);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf,  close);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf,  close);	  CloseEntry    <    K,    V>    inf    =    new    CloseEntry    <    K,    V>(inf);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
134	[BUG]  [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.getBytes());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.getBytes());  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.getBytes());	  CloseEntry    <    K,    V>    inf    =    new    CloseEntry    <    K,    V>(inf);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
135	[BUG]  [BUGGY]  closed  =  new  byte[in.length()  +  1];  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  =  new  byte[in.length()  +  1];  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  =  new  byte[in.length()  +  1];	  closed    =    new    byte[in.length()    ];    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
136	[BUG]  [BUGGY]  closed  =  new  byte[in.length()  -  1];  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  =  new  byte[in.length()  -  1];  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  =  new  byte[in.length()  -  1];	  closed    =    new    byte[in.length()    ];    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
137	[BUG]  [BUGGY]  closed  =  new  byte[in.length()  *  2];  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  =  new  byte[in.length()  *  2];  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  =  new  byte[in.length()  *  2];	  closed    =    new    byte[in.length()    ];    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
138	[BUG]  [BUGGY]  closed  =  new  byte[in.length()  +  2];  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  =  new  byte[in.length()  +  2];  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  =  new  byte[in.length()  +  2];	  closed    =    new    byte[in.length()    ];    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
139	[BUG]  [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.length  -  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.length  -  1);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.length  -  1);	  CloseEntry    <    K,    V>    inf    =    new    CloseEntry    <    K,    V>(inf.length);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
140	[BUG]  [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.length  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.length  +  1);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.length  +  1);	  CloseEntry    <    K,    V>    inf    =    new    CloseEntry    <    K,    V>(inf.length);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
141	[BUG]  [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.length  -  1,  inf.length);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.length  -  1,  inf.length);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.length  -  1,  inf.length);	  CloseEntry    <    K,    V>    inf    =    new    CloseEntry    <    K,    V>(inf.length);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
142	[BUG]  [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.length  *  2);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.length  *  2);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.length  *  2);	  CloseEntry    <    K,    V>    inf    =    new    CloseEntry    <    K,    V>(inf.length);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
143	[BUG]  [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.length  -  2);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.length  -  2);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.length  -  2);	  CloseEntry    <    K,    V>    inf    =    new    CloseEntry    <    K,    V>(inf.length);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
144	[BUG]  [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.length  +  2);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.length  +  2);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.length  +  2);	  CloseEntry    <    K,    V>    inf    =    new    CloseEntry    <    K,    V>(inf.length);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
145	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-8 ",  encoding, "null ");  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-8 ",  encoding, "null ");  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-8 ",  encoding, "null ");	  closure    |=    JsonStringEncoder.getInstance().encodeAsString(   "UTF-8   ",   "null   ");    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
146	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-8 ",  null);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-8 ",  null);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-8 ",  null);	  closure    |=    JsonStringEncoder.getInstance().encodeAsString(   "UTF-8   ",   "null   ");    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
147	[BUG]  [BUGGY]  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "Unclosed  entry: "  +  ioe);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "Unclosed  entry: "  +  ioe);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "Unclosed  entry: "  +  ioe);	  Closed    =    false;    }    catch(IOException    ioe)    {    System.err.println(   "Unclosed    entry:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
148	[BUG]  [BUGGY]  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "Closed  entry: "  +  ioe);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "Closed  entry: "  +  ioe);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "Closed  entry: "  +  ioe);	  Closed    =    false;    }    catch(IOException    ioe)    {    System.err.println(   "Unclosed    entry:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
149	[BUG]  [BUGGY]  Closed  =  true;  System.err.println( "Unclosed  entry: "  +  ioe);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  true;  System.err.println( "Unclosed  entry: "  +  ioe);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  true;  System.err.println( "Unclosed  entry: "  +  ioe);	  Closed    =    false;    }    catch(IOException    ioe)    {    System.err.println(   "Unclosed    entry:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
150	[BUG]  [BUGGY]  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "JSC_closed  entry: "  +  ioe);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "JSC_closed  entry: "  +  ioe);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "JSC_closed  entry: "  +  ioe);	  Closed    =    false;    }    catch(IOException    ioe)    {    System.err.println(   "Unclosed    entry:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
151	[BUG]  [BUGGY]  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "Failed  to  close  entry: "  +  ioe);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "Failed  to  close  entry: "  +  ioe);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "Failed  to  close  entry: "  +  ioe);	  Closed    =    false;    }    catch(IOException    ioe)    {    System.err.println(   "Unclosed    entry:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
152	[BUG]  [BUGGY]  Inflater  inf  =  bis.getInputStream();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  inf  =  bis.getInputStream();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  inf  =  bis.getInputStream();	  Inflater    inf    =    entryEncoding.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
153	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.close();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  inf  =  entryEncoding.close();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  inf  =  entryEncoding.close();	  Inflater    inf    =    entryEncoding.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
154	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.openStream();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  inf  =  entryEncoding.openStream();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  inf  =  entryEncoding.openStream();	  Inflater    inf    =    entryEncoding.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
155	[BUG]  [BUGGY]  Inflater  inf  =  this.entryEncoding.getInputStream();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  inf  =  this.entryEncoding.getInputStream();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  inf  =  this.entryEncoding.getInputStream();	  Inflater    inf    =    entryEncoding.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
156	[BUG]  [BUGGY]  Inflater  inf  =  zipEncoding.getInputStream();  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  inf  =  zipEncoding.getInputStream();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  inf  =  zipEncoding.getInputStream();	  Inflater    inf    =    entryEncoding.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
157	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(current,  true));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(current,  true));  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(current,  true));	  closure    |=    JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(current));    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
158	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(current,  false));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(current,  false));  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(current,  false));	  closure    |=    JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(current));    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
159	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(current,  0));  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(current,  0));  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(current,  0));	  closure    |=    JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(current));    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
160	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(current),  false);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(current),  false);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(current),  false);	  closure    |=    JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(current));    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
161	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(current),  true);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(current),  true);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(current),  true);	  closure    |=    JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(current));    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
162	[BUG]  [BUGGY]  closure  =  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(current));  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  =  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(current));  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  =  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(current));	  closure    |=    JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(current));    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
163	[BUG]  [BUGGY]  Inflater  {  Closed  =  true;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closing  file  name ");  close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  {  Closed  =  true;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closing  file  name ");  close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  {  Closed  =  true;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closing  file  name ");  close();  }	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closing    file    name   ");    close();    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
164	[BUG]  [BUGGY]  Inflater  {  Closed  =  false;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closing  file  name ");  close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  {  Closed  =  false;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closing  file  name ");  close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  {  Closed  =  false;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closing  file  name ");  close();  }	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closing    file    name   ");    close();    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
165	[BUG]  [BUGGY]  Closed  =  false;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closing  file  name ");  close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  false;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closing  file  name ");  close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  false;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closing  file  name ");  close();  }	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closing    file    name   ");    close();    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
166	[BUG]  [BUGGY]  Inflater  {  Closed  =  true;  }  else  if(allowStoredEntriesWithDataDescriptor)  {  System.err.println( "UnicodeExtraFields  with  closing  file  name ");  close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  {  Closed  =  true;  }  else  if(allowStoredEntriesWithDataDescriptor)  {  System.err.println( "UnicodeExtraFields  with  closing  file  name ");  close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  {  Closed  =  true;  }  else  if(allowStoredEntriesWithDataDescriptor)  {  System.err.println( "UnicodeExtraFields  with  closing  file  name ");  close();  }	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closing    file    name   ");    close();    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
167	[BUG]  [BUGGY]  if(!closed)  {  Closed  =  true;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closing  file  name ");  close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(!closed)  {  Closed  =  true;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closing  file  name ");  close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(!closed)  {  Closed  =  true;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closing  file  name ");  close();  }	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closing    file    name   ");    close();    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
168	[BUG]  [BUGGY]  if(!closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closing  file  name ");  close();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(!closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closing  file  name ");  close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(!closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closing  file  name ");  close();  }	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closing    file    name   ");    close();    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
169	[BUG]  [BUGGY]  Closed  =  this;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  this;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  this;	  Closed    =    null;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
170	[BUG]  [BUGGY]  Closed  =  Inflater.getInstance();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  Inflater.getInstance();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  Inflater.getInstance();	  Closed    =    null;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
171	[BUG]  [BUGGY]  Closed  =  new  ArrayList  <  ZipArchiveEntry>();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  new  ArrayList  <  ZipArchiveEntry>();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  new  ArrayList  <  ZipArchiveEntry>();	  Closed    =    null;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
172	[BUG]  [BUGGY]  if(in.close())  {  in.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(in.close())  {  in.close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(in.close())  {  in.close();  }	  in.close();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
173	[BUG]  [BUGGY]  in.flush();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  in.flush();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	in.flush();	  in.close();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
174	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	InputStream  bis  =  new  ZipInputStream(inf.length);	  in.close();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
175	[BUG]  [BUGGY]  closure  =  new  ZipArchiveEntry(inf.getLowerCase(),  inf.getLowerCase());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  =  new  ZipArchiveEntry(inf.getLowerCase(),  inf.getLowerCase());  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  =  new  ZipArchiveEntry(inf.getLowerCase(),  inf.getLowerCase());	  closure    =   "   ";    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
176	[BUG]  [BUGGY]  closure  =  new  ZipArchiveEntry(inf.getLength(),  inf.getLength());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  =  new  ZipArchiveEntry(inf.getLength(),  inf.getLength());  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  =  new  ZipArchiveEntry(inf.getLength(),  inf.getLength());	  closure    =   "   ";    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
177	[BUG]  [BUGGY]  closure  =  new  ZipArchiveEntry(inf.getValue(),  inf.getLength());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  =  new  ZipArchiveEntry(inf.getValue(),  inf.getLength());  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  =  new  ZipArchiveEntry(inf.getValue(),  inf.getLength());	  closure    =   "   ";    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
178	[BUG]  [BUGGY]  closure  =  System.currentTimeMillis();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  =  System.currentTimeMillis();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  =  System.currentTimeMillis();	  closure    =   "   ";    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
179	[BUG]  [BUGGY]  closure  =  new  ZipArchiveEntry(inf.getLength(),  inf.getLength()  +  1);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  =  new  ZipArchiveEntry(inf.getLength(),  inf.getLength()  +  1);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  =  new  ZipArchiveEntry(inf.getLength(),  inf.getLength()  +  1);	  closure    =   "   ";    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
180	[BUG]  [BUGGY]  closure  =  new  ZipArchiveEntry(inf.length(),  inf.length());  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  =  new  ZipArchiveEntry(inf.length(),  inf.length());  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  =  new  ZipArchiveEntry(inf.length(),  inf.length());	  closure    =   "   ";    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
181	[BUG]  [BUGGY]  closure  =  JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean( "UTF-8 "));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  =  JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean( "UTF-8 "));  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  =  JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean( "UTF-8 "));	  closure    |=    JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean(   "UTF-8   "));    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
182	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean( ".UTF-8 "));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean( ".UTF-8 "));  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean( ".UTF-8 "));	  closure    |=    JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean(   "UTF-8   "));    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
183	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean( "US-ASCII "));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean( "US-ASCII "));  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean( "US-ASCII "));	  closure    |=    JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean(   "UTF-8   "));    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
184	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean( "UTF-8_ "));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean( "UTF-8_ "));  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean( "UTF-8_ "));	  closure    |=    JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean(   "UTF-8   "));    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
185	[BUG]  [BUGGY]  Closed(false);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed(false);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed(false);	  Closed(true);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
186	[BUG]  [BUGGY]  Closed(false,  true);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed(false,  true);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed(false,  true);	  Closed(true);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
187	[BUG]  [BUGGY]  Closed(false,  false);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed(false,  false);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed(false,  false);	  Closed(true);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
188	[BUG]  [BUGGY]  Closed(false,  null);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed(false,  null);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed(false,  null);	  Closed(true);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
189	[BUG]  [BUGGY]  closed(false);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed(false);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed(false);	  Closed(true);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
190	[BUG]  [BUGGY]  Closed();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed();	  Closed(true);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
191	[BUG]  [BUGGY]  Closed(false,  0);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed(false,  0);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed(false,  0);	  Closed(true);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
192	[BUG]  [BUGGY]  closure  |=  ZERO_EXP_32;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  ZERO_EXP_32;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  ZERO_EXP_32;	  closure    =    true;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
193	[BUG]  [BUGGY]  closure  |=  ZERO_EXP_64;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  ZERO_EXP_64;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  ZERO_EXP_64;	  closure    =    true;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
194	[BUG]  [BUGGY]  closure  |=  ZERO_EXP_WARNING;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  ZERO_EXP_WARNING;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  ZERO_EXP_WARNING;	  closure    =    true;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
195	[BUG]  [BUGGY]  closure  |=  ZERO_EXP_WEEK;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  ZERO_EXP_WEEK;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  ZERO_EXP_WEEK;	  closure    =    true;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
196	[BUG]  [BUGGY]  closure  |=  ZERO_EXP_31;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  ZERO_EXP_31;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  ZERO_EXP_31;	  closure    =    true;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
197	[BUG]  [BUGGY]  if(in!=  null)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(in!=  null)  {  inf.close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(in!=  null)  {  inf.close();  }	  if(in!=    null)    {    in.close();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
198	[BUG]  [BUGGY]  InputStream  bis  =  null;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  InputStream  bis  =  null;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	InputStream  bis  =  null;	  if(in!=    null)    {    in.close();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
199	[BUG]  [BUGGY]  this.closed  =  new  java.util.ArrayList  <  ZipEncoding>();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  this.closed  =  new  java.util.ArrayList  <  ZipEncoding>();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	this.closed  =  new  java.util.ArrayList  <  ZipEncoding>();	  closed    =    new    java.util.ArrayList    <    ZipEncoding>();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
200	[BUG]  [BUGGY]  closed  =  new  java.util.ArrayList  <  ZipEncoding>(inf);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  =  new  java.util.ArrayList  <  ZipEncoding>(inf);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  =  new  java.util.ArrayList  <  ZipEncoding>(inf);	  closed    =    new    java.util.ArrayList    <    ZipEncoding>();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
201	[BUG]  [BUGGY]  closed  =  new  java.util.ArrayList  <  ZipEncoding>(in);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  =  new  java.util.ArrayList  <  ZipEncoding>(in);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  =  new  java.util.ArrayList  <  ZipEncoding>(in);	  closed    =    new    java.util.ArrayList    <    ZipEncoding>();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
202	[BUG]  [BUGGY]  closed  =  new  java.util.ArrayList  <  ZipEncoding>(inf.length);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  =  new  java.util.ArrayList  <  ZipEncoding>(inf.length);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  =  new  java.util.ArrayList  <  ZipEncoding>(inf.length);	  closed    =    new    java.util.ArrayList    <    ZipEncoding>();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
203	[BUG]  [BUGGY]  Inflater  inf  =(Inflater)in.close();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  inf  =(Inflater)in.close();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  inf  =(Inflater)in.close();	  Inflater    inf    =(Inflater)in.clone();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
204	[BUG]  [BUGGY]  Inflater  inf  =(int)in.clone();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  inf  =(int)in.clone();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  inf  =(int)in.clone();	  Inflater    inf    =(Inflater)in.clone();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
205	[BUG]  [BUGGY]  Inflater  inf  =(Inflater)in.next();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  inf  =(Inflater)in.next();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  inf  =(Inflater)in.next();	  Inflater    inf    =(Inflater)in.clone();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
206	[BUG]  [BUGGY]  Inflater  inf  =(Inflater)current.clone();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  inf  =(Inflater)current.clone();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  inf  =(Inflater)current.clone();	  Inflater    inf    =(Inflater)in.clone();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
207	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-8_ ");  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-8_ ");  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-8_ ");	  closure    |=    JsonStringEncoder.getInstance().encodeAsString(   "UTF-8   ");    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
208	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF8 ");  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF8 ");  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF8 ");	  closure    |=    JsonStringEncoder.getInstance().encodeAsString(   "UTF-8   ");    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
209	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString(ZipArchiveEntry.UTF8);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString(ZipArchiveEntry.UTF8);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsString(ZipArchiveEntry.UTF8);	  closure    |=    JsonStringEncoder.getInstance().encodeAsString(   "UTF-8   ");    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
210	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString(JsonStringEncoder.UTF_8);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString(JsonStringEncoder.UTF_8);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsString(JsonStringEncoder.UTF_8);	  closure    |=    JsonStringEncoder.getInstance().encodeAsString(   "UTF-8   ");    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
211	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString(ZipArchiveEntry.UTF_8);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString(ZipArchiveEntry.UTF_8);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsString(ZipArchiveEntry.UTF_8);	  closure    |=    JsonStringEncoder.getInstance().encodeAsString(   "UTF-8   ");    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
212	[BUG]  [BUGGY]  fermeture  =  false;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  fermeture  =  false;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	fermeture  =  false;	  fermeture    =    true;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
213	[BUG]  [BUGGY]  fermeture  =  null;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  fermeture  =  null;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	fermeture  =  null;	  fermeture    =    true;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
214	[BUG]  [BUGGY]  CloseEntry  <  TWO_EXP_32  ||  closeEntry  ==  TWO_EXP_32;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  TWO_EXP_32  ||  closeEntry  ==  TWO_EXP_32;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  TWO_EXP_32  ||  closeEntry  ==  TWO_EXP_32;	  CloseEntry    <    TWO_EXP_32    ||    closeEntry    >    TWO_EXP_32;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
215	[BUG]  [BUGGY]  CloseEntry  <  TWO_EXP_32  ||  closeEntry  >=  TWO_EXP_32;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  TWO_EXP_32  ||  closeEntry  >=  TWO_EXP_32;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  TWO_EXP_32  ||  closeEntry  >=  TWO_EXP_32;	  CloseEntry    <    TWO_EXP_32    ||    closeEntry    >    TWO_EXP_32;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
216	[BUG]  [BUGGY]  CloseEntry  <  TWO_EXP_32  ||  closeEntry!=  TWO_EXP_32;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  TWO_EXP_32  ||  closeEntry!=  TWO_EXP_32;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  TWO_EXP_32  ||  closeEntry!=  TWO_EXP_32;	  CloseEntry    <    TWO_EXP_32    ||    closeEntry    >    TWO_EXP_32;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
217	[BUG]  [BUGGY]  CloseEntry  <  TWO_EXP_32  &&  closeEntry  >  TWO_EXP_32;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  TWO_EXP_32  &&  closeEntry  >  TWO_EXP_32;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  TWO_EXP_32  &&  closeEntry  >  TWO_EXP_32;	  CloseEntry    <    TWO_EXP_32    ||    closeEntry    >    TWO_EXP_32;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
218	[BUG]  [BUGGY]  CloseEntry  <  TWO_EXP_32  ||  closeEntry  >>  TWO_EXP_32;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  TWO_EXP_32  ||  closeEntry  >>  TWO_EXP_32;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  TWO_EXP_32  ||  closeEntry  >>  TWO_EXP_32;	  CloseEntry    <    TWO_EXP_32    ||    closeEntry    >    TWO_EXP_32;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
219	[BUG]  [BUGGY]  CloseEntry  <  TWO_EXP_32  ||  closeEntry  >  TWO_EXP_32  +  1;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  TWO_EXP_32  ||  closeEntry  >  TWO_EXP_32  +  1;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  TWO_EXP_32  ||  closeEntry  >  TWO_EXP_32  +  1;	  CloseEntry    <    TWO_EXP_32    ||    closeEntry    >    TWO_EXP_32;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
220	[BUG]  [BUGGY]  ze.flush();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  ze.flush();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	ze.flush();	  ze.close();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
221	[BUG]  [BUGGY]  this.entryEncoding.close();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  this.entryEncoding.close();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	this.entryEncoding.close();	  ze.close();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
222	[BUG]  [BUGGY]  ze.closeEntry();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  ze.closeEntry();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	ze.closeEntry();	  ze.close();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
223	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
224	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
225	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
226	[BUG]  [BUGGY]  Entry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Entry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Entry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
227	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
228	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entriesRead.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entriesRead.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  entriesRead.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
229	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
230	[BUG]  [BUGGY]  Closed  =  false;  System.err.println( "UnicodeExtraFields  with  closed  file  name: "  +  ioe);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  false;  System.err.println( "UnicodeExtraFields  with  closed  file  name: "  +  ioe);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  false;  System.err.println( "UnicodeExtraFields  with  closed  file  name: "  +  ioe);	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    file    name:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
231	[BUG]  [BUGGY]  if(!closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  file  name: "  +  ioe);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(!closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  file  name: "  +  ioe);  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(!closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  file  name: "  +  ioe);  }	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    file    name:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
232	[BUG]  [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  file  name: "  +  ioe);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  file  name: "  +  ioe);  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  file  name: "  +  ioe);  }	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    file    name:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
233	[BUG]  [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  file  name: "  +  fileName);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  file  name: "  +  fileName);  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  file  name: "  +  fileName);  }	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    file    name:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
234	[BUG]  [BUGGY]  Inflater.println( "UnicodeExtraFields  with  closed  file  name: "  +  ioe);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater.println( "UnicodeExtraFields  with  closed  file  name: "  +  ioe);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater.println( "UnicodeExtraFields  with  closed  file  name: "  +  ioe);	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    file    name:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
235	[BUG]  [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  file  name: "  +  zipEncoding);  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  file  name: "  +  zipEncoding);  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  file  name: "  +  zipEncoding);  }	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    file    name:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
236	[BUG]  [BUGGY]  Inflater  inf  =  inputStream.getInputStream();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  inf  =  inputStream.getInputStream();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  inf  =  inputStream.getInputStream();	  Inflater    inf    =    ze.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
237	[BUG]  [BUGGY]  Inflater  inf  =  currentEntry.getInputStream();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  inf  =  currentEntry.getInputStream();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  inf  =  currentEntry.getInputStream();	  Inflater    inf    =    ze.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
238	[BUG]  [BUGGY]  Inflater  inf  =  entry.getEntry();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  inf  =  entry.getEntry();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  inf  =  entry.getEntry();	  Inflater    inf    =    ze.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
239	[BUG]  [BUGGY]  Inflater  inf  =(Inflater)current.in.clone();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  inf  =(Inflater)current.in.clone();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  inf  =(Inflater)current.in.clone();	  Inflater    inf    =(Inflater)this.in.clone();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
240	[BUG]  [BUGGY]  Inflater  inf  =(Inflater)super.in.clone();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  inf  =(Inflater)super.in.clone();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  inf  =(Inflater)super.in.clone();	  Inflater    inf    =(Inflater)this.in.clone();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
241	[BUG]  [BUGGY]  Inflater  inf  =(int)this.in.clone();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  inf  =(int)this.in.clone();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  inf  =(int)this.in.clone();	  Inflater    inf    =(Inflater)this.in.clone();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
242	[BUG]  [BUGGY]  Inflater  inf  =(Inflater)this.in.close();  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  inf  =(Inflater)this.in.close();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  inf  =(Inflater)this.in.close();	  Inflater    inf    =(Inflater)this.in.clone();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
243	[BUG]  [BUGGY]  closed  =  new  byte[inf.length()  +  1];  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  =  new  byte[inf.length()  +  1];  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  =  new  byte[inf.length()  +  1];	  closed    =    new    byte[inf.length()    ];    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
244	[BUG]  [BUGGY]  closed  =  new  byte[inf.length()  -  1];  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  =  new  byte[inf.length()  -  1];  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  =  new  byte[inf.length()  -  1];	  closed    =    new    byte[inf.length()    ];    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
245	[BUG]  [BUGGY]  closed  =  new  byte[inf.length()  *  2];  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  =  new  byte[inf.length()  *  2];  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  =  new  byte[inf.length()  *  2];	  closed    =    new    byte[inf.length()    ];    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
246	[BUG]  [BUGGY]  closed  =  new  byte[inf.length()  +  2];  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  =  new  byte[inf.length()  +  2];  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  =  new  byte[inf.length()  +  2];	  closed    =    new    byte[inf.length()    ];    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
247	[BUG]  [BUGGY]  closed  =  in.getInstance();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  =  in.getInstance();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  =  in.getInstance();	  closed    =    Inflater.getInstance();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
248	[BUG]  [BUGGY]  closed  =  Inflater.getInstance(inf);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  =  Inflater.getInstance(inf);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  =  Inflater.getInstance(inf);	  closed    =    Inflater.getInstance();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
249	[BUG]  [BUGGY]  close  =  Inflater.getInstance();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  close  =  Inflater.getInstance();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	close  =  Inflater.getInstance();	  closed    =    Inflater.getInstance();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
250	[BUG]  [BUGGY]  inf  =  Inflater.getInstance();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  inf  =  Inflater.getInstance();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	inf  =  Inflater.getInstance();	  closed    =    Inflater.getInstance();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
251	[BUG]  [BUGGY]  Inflater  inf  =  getInputFile();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  inf  =  getInputFile();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  inf  =  getInputFile();	  Inflater    inf    =    getOutputFile();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
252	[BUG]  [BUGGY]  Inflater  inf  =  getOutputFile().getInputStream();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  inf  =  getOutputFile().getInputStream();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  inf  =  getOutputFile().getInputStream();	  Inflater    inf    =    getOutputFile();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
253	[BUG]  [BUGGY]  Inflater  inf  =  getOutputFile().getCharset();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  inf  =  getOutputFile().getCharset();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  inf  =  getOutputFile().getCharset();	  Inflater    inf    =    getOutputFile();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
254	[BUG]  [BUGGY]  Inflater  inf  =  getOutputFile().openInputStream();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  inf  =  getOutputFile().openInputStream();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  inf  =  getOutputFile().openInputStream();	  Inflater    inf    =    getOutputFile();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
255	[BUG]  [BUGGY]  closed  =  new  LinkedList  <  ZipArchiveEntry>();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  =  new  LinkedList  <  ZipArchiveEntry>();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  =  new  LinkedList  <  ZipArchiveEntry>();	  closed    =    new    ArrayList    <    ZipArchiveEntry>();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
256	[BUG]  [BUGGY]  closed  =  new  LinkedHashSet  <  ZipArchiveEntry>();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  =  new  LinkedHashSet  <  ZipArchiveEntry>();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  =  new  LinkedHashSet  <  ZipArchiveEntry>();	  closed    =    new    ArrayList    <    ZipArchiveEntry>();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
257	[BUG]  [BUGGY]  closed  =  new  LinkedHashMap  <  ZipArchiveEntry>();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  =  new  LinkedHashMap  <  ZipArchiveEntry>();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  =  new  LinkedHashMap  <  ZipArchiveEntry>();	  closed    =    new    ArrayList    <    ZipArchiveEntry>();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
258	[BUG]  [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.next(),  entryEncoding);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.next(),  entryEncoding);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.next(),  entryEncoding);	  CloseEntry    <    K,    V>    inf    =    new    CloseEntry    <    K,    V>(inf.next());    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
259	[BUG]  [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.next(),  closed);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.next(),  closed);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.next(),  closed);	  CloseEntry    <    K,    V>    inf    =    new    CloseEntry    <    K,    V>(inf.next());    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
260	[BUG]  [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.close());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.close());  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.close());	  CloseEntry    <    K,    V>    inf    =    new    CloseEntry    <    K,    V>(inf.next());    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
261	[BUG]  [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.nextToken());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.nextToken());  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.nextToken());	  CloseEntry    <    K,    V>    inf    =    new    CloseEntry    <    K,    V>(inf.next());    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
262	[BUG]  [BUGGY]  Closed  =  true;  System.err.println( "UnicodeExtraFields  with  closed  file  name: "  +  ioe.getMessage());  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  true;  System.err.println( "UnicodeExtraFields  with  closed  file  name: "  +  ioe.getMessage());  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  true;  System.err.println( "UnicodeExtraFields  with  closed  file  name: "  +  ioe.getMessage());	  Closed    =    false;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    file    name:   "    +    ioe.getMessage());    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
263	[BUG]  [BUGGY]  if(!closed)  {  Closed  =  false;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  file  name: "  +  ioe.getMessage());  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(!closed)  {  Closed  =  false;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  file  name: "  +  ioe.getMessage());  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(!closed)  {  Closed  =  false;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  file  name: "  +  ioe.getMessage());  }	  Closed    =    false;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    file    name:   "    +    ioe.getMessage());    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
264	[BUG]  [BUGGY]  if(closed)  {  Closed  =  false;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  file  name: "  +  ioe.getMessage());  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(closed)  {  Closed  =  false;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  file  name: "  +  ioe.getMessage());  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(closed)  {  Closed  =  false;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  file  name: "  +  ioe.getMessage());  }	  Closed    =    false;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    file    name:   "    +    ioe.getMessage());    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
265	[BUG]  [BUGGY]  SecureAssertionError.println( "UnicodeExtraFields  closed: "  +  ioe.getMessage());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  SecureAssertionError.println( "UnicodeExtraFields  closed: "  +  ioe.getMessage());  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	SecureAssertionError.println( "UnicodeExtraFields  closed: "  +  ioe.getMessage());	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    ioe.getMessage());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
266	[BUG]  [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  ioe.getMessage());  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  ioe.getMessage());  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  ioe.getMessage());  }	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    ioe.getMessage());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
267	[BUG]  [BUGGY]  if(!closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  ioe.getMessage());  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(!closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  ioe.getMessage());  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(!closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  ioe.getMessage());  }	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    ioe.getMessage());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
268	[BUG]  [BUGGY]  Closed  =  false;  System.err.println( "UnicodeExtraFields  closed: "  +  ioe.getMessage());  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  false;  System.err.println( "UnicodeExtraFields  closed: "  +  ioe.getMessage());  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  false;  System.err.println( "UnicodeExtraFields  closed: "  +  ioe.getMessage());	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    ioe.getMessage());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
269	[BUG]  [BUGGY]  InputStream  inf  =  getOutputStream();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  InputStream  inf  =  getOutputStream();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	InputStream  inf  =  getOutputStream();	  InputStream    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
270	[BUG]  [BUGGY]  InputStream  inf  =  getReadInputStream();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  InputStream  inf  =  getReadInputStream();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	InputStream  inf  =  getReadInputStream();	  InputStream    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
271	[BUG]  [BUGGY]  InputStream  inf  =  getInputStream(outputBuffer);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  InputStream  inf  =  getInputStream(outputBuffer);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	InputStream  inf  =  getInputStream(outputBuffer);	  InputStream    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
272	[BUG]  [BUGGY]  InputStream  inf  =  getInputStream(),  bis;  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  InputStream  inf  =  getInputStream(),  bis;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	InputStream  inf  =  getInputStream(),  bis;	  InputStream    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
273	[BUG]  [BUGGY]  InputStream  inf  =  readInputStream();  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  InputStream  inf  =  readInputStream();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	InputStream  inf  =  readInputStream();	  InputStream    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
274	[BUG]  [BUGGY]  InputStream  inf  =  getInputStream(),  bis);  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  InputStream  inf  =  getInputStream(),  bis);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	InputStream  inf  =  getInputStream(),  bis);	  InputStream    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
275	[BUG]  [BUGGY]  Closed  |=  in;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  |=  in;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  |=  in;	  Closed    |=    null;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
276	[BUG]  [BUGGY]  Closed  |=  inf;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  |=  inf;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  |=  inf;	  Closed    |=    null;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
277	[BUG]  [BUGGY]  Closed  |=  Inflater.getInstance();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  |=  Inflater.getInstance();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  |=  Inflater.getInstance();	  Closed    |=    null;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
278	[BUG]  [BUGGY]  Closed  |=  Inflater.DEFAULT;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  |=  Inflater.DEFAULT;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  |=  Inflater.DEFAULT;	  Closed    |=    null;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
279	[BUG]  [BUGGY]  Closed  |=  in.read();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  |=  in.read();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  |=  in.read();	  Closed    |=    null;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
280	[BUG]  [BUGGY]  Closed  |=  ZERO;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  |=  ZERO;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  |=  ZERO;	  Closed    |=    null;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
281	[BUG]  [BUGGY]  SecureAssertionError.println( "UnicodeExtraFields  with  closed  file  name: "  +  ioe.getMessage());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  SecureAssertionError.println( "UnicodeExtraFields  with  closed  file  name: "  +  ioe.getMessage());  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	SecureAssertionError.println( "UnicodeExtraFields  with  closed  file  name: "  +  ioe.getMessage());	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    file    name:   "    +    ioe.getMessage());    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
282	[BUG]  [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  file  name: "  +  ioe.getMessage());  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  file  name: "  +  ioe.getMessage());  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  file  name: "  +  ioe.getMessage());  }	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    file    name:   "    +    ioe.getMessage());    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
283	[BUG]  [BUGGY]  if(!closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  file  name: "  +  ioe.getMessage());  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(!closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  file  name: "  +  ioe.getMessage());  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(!closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  file  name: "  +  ioe.getMessage());  }	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    file    name:   "    +    ioe.getMessage());    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
284	[BUG]  [BUGGY]  Closed  =  false;  System.err.println( "UnicodeExtraFields  with  closed  file  name: "  +  ioe.getMessage());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  false;  System.err.println( "UnicodeExtraFields  with  closed  file  name: "  +  ioe.getMessage());  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  false;  System.err.println( "UnicodeExtraFields  with  closed  file  name: "  +  ioe.getMessage());	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    file    name:   "    +    ioe.getMessage());    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
285	[BUG]  [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  ioe);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  ioe);  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  ioe);  }	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
286	[BUG]  [BUGGY]  Closed  =  false;  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  ioe);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  false;  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  ioe);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  false;  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  ioe);	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
287	[BUG]  [BUGGY]  Inflater.println( "UnicodeExtraFields  with  closed  entry: "  +  ioe);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater.println( "UnicodeExtraFields  with  closed  entry: "  +  ioe);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater.println( "UnicodeExtraFields  with  closed  entry: "  +  ioe);	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
288	[BUG]  [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  without  closed  entry: "  +  ioe);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  without  closed  entry: "  +  ioe);  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  without  closed  entry: "  +  ioe);  }	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
289	[BUG]  [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "JavaExtraFields  with  closed  entry: "  +  ioe);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "JavaExtraFields  with  closed  entry: "  +  ioe);  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "JavaExtraFields  with  closed  entry: "  +  ioe);  }	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
290	[BUG]  [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  i);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  i);  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  i);  }	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
291	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(true));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(true));  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(true));	  closure    |=    JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(false));    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
292	[BUG]  [BUGGY]  closure  =  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(false));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  =  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(false));  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  =  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(false));	  closure    |=    JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(false));    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
293	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(true,  false));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(true,  false));  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(true,  false));	  closure    |=    JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(false));    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
294	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(false,  true));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(false,  true));  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(false,  true));	  closure    |=    JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(false));    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
295	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(false,  false));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(false,  false));  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(false,  false));	  closure    |=    JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(false));    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
296	[BUG]  [BUGGY]  closure  =  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(true));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  =  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(true));  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  =  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(true));	  closure    |=    JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(false));    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
297	[BUG]  [BUGGY]  closed  =  new  LinkedList  <  ZipEncoding>();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  =  new  LinkedList  <  ZipEncoding>();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  =  new  LinkedList  <  ZipEncoding>();	  closed    =    new    ArrayList    <    ZipEncoding>();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
298	[BUG]  [BUGGY]  closed  =  new  LinkedHashSet  <  ZipEncoding>();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  =  new  LinkedHashSet  <  ZipEncoding>();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  =  new  LinkedHashSet  <  ZipEncoding>();	  closed    =    new    ArrayList    <    ZipEncoding>();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
299	[BUG]  [BUGGY]  closed  =  new  ArrayList  <  ZipEncoding>(inf.length);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  =  new  ArrayList  <  ZipEncoding>(inf.length);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  =  new  ArrayList  <  ZipEncoding>(inf.length);	  closed    =    new    ArrayList    <    ZipEncoding>();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
300	[BUG]  [BUGGY]  closure  =  JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean( "UTF-8 ")));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  =  JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean( "UTF-8 ")));  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  =  JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean( "UTF-8 ")));	  closure    |=    JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean(   "UTF-8   ")));    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
301	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean( ".UTF-8 ")));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean( ".UTF-8 ")));  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean( ".UTF-8 ")));	  closure    |=    JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean(   "UTF-8   ")));    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
302	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean( "UTF-8_ ")));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean( "UTF-8_ ")));  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean( "UTF-8_ ")));	  closure    |=    JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean(   "UTF-8   ")));    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
303	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean( "US-ASCII ")));  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean( "US-ASCII ")));  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean( "US-ASCII ")));	  closure    |=    JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean(   "UTF-8   ")));    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
304	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean( "UTF8 ")));  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean( "UTF8 ")));  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean( "UTF8 ")));	  closure    |=    JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean(   "UTF-8   ")));    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
305	[BUG]  [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.length);  close();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.length);  close();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.length);  close();	  CloseEntry    <    K,    V>    inf    =    new    CloseEntry    <    K,    V>(inf);    close();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
306	[BUG]  [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.clone());  close();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.clone());  close();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.clone());  close();	  CloseEntry    <    K,    V>    inf    =    new    CloseEntry    <    K,    V>(inf);    close();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
307	[BUG]  [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.getValue());  close();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.getValue());  close();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.getValue());  close();	  CloseEntry    <    K,    V>    inf    =    new    CloseEntry    <    K,    V>(inf);    close();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
308	[BUG]  [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.read());  close();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.read());  close();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.read());  close();	  CloseEntry    <    K,    V>    inf    =    new    CloseEntry    <    K,    V>(inf);    close();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
309	[BUG]  [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.cloneTree());  close();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.cloneTree());  close();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.cloneTree());  close();	  CloseEntry    <    K,    V>    inf    =    new    CloseEntry    <    K,    V>(inf);    close();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
310	[BUG]  [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.getBytes());  close();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.getBytes());  close();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.getBytes());  close();	  CloseEntry    <    K,    V>    inf    =    new    CloseEntry    <    K,    V>(inf);    close();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
311	[BUG]  [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(closed);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(closed);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(closed);	  CloseEntry    <    K,    V>    inf    =    new    CloseEntry    <    K,    V>();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
312	[BUG]  [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(1);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(1);	  CloseEntry    <    K,    V>    inf    =    new    CloseEntry    <    K,    V>();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
313	[BUG]  [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(null);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(null);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(null);	  CloseEntry    <    K,    V>    inf    =    new    CloseEntry    <    K,    V>();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
314	[BUG]  [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(current);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(current);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(current);	  CloseEntry    <    K,    V>    inf    =    new    CloseEntry    <    K,    V>();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
315	[BUG]  [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  ioe);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  ioe);  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  ioe);  }	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
316	[BUG]  [BUGGY]  if(!closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  ioe);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(!closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  ioe);  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(!closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  ioe);  }	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
317	[BUG]  [BUGGY]  Closed  =  false;  System.err.println( "UnicodeExtraFields  closed: "  +  ioe);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  false;  System.err.println( "UnicodeExtraFields  closed: "  +  ioe);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  false;  System.err.println( "UnicodeExtraFields  closed: "  +  ioe);	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
318	[BUG]  [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  close);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  close);  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  close);  }	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
319	[BUG]  [BUGGY]  Closed  =  true;  }  catch(Exception  ioe)  {  System.err.println( "UnicodeExtraFields  closed: "  +  ioe);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  true;  }  catch(Exception  ioe)  {  System.err.println( "UnicodeExtraFields  closed: "  +  ioe);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  true;  }  catch(Exception  ioe)  {  System.err.println( "UnicodeExtraFields  closed: "  +  ioe);	  Closed    =    false;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
320	[BUG]  [BUGGY]  Closed  =  true;  System.err.println( "UnicodeExtraFields  closed: "  +  ioe);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  true;  System.err.println( "UnicodeExtraFields  closed: "  +  ioe);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  true;  System.err.println( "UnicodeExtraFields  closed: "  +  ioe);	  Closed    =    false;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
321	[BUG]  [BUGGY]  if(closed)  {  Closed  =  false;  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  ioe);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(closed)  {  Closed  =  false;  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  ioe);  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(closed)  {  Closed  =  false;  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  ioe);  }	  Closed    =    false;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
322	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
323	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
324	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
325	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
326	[BUG]  [BUGGY]  closure  =  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue( "UTF-8 "));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  =  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue( "UTF-8 "));  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  =  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue( "UTF-8 "));	  closure    |=    JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(   "UTF-8   "));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
327	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue( "UTF-8_ "));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue( "UTF-8_ "));  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue( "UTF-8_ "));	  closure    |=    JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(   "UTF-8   "));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
328	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue( "US-ASCII "));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue( "US-ASCII "));  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue( "US-ASCII "));	  closure    |=    JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(   "UTF-8   "));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
329	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().urlEncodeAsBooleanValue( "UTF-8 "));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().urlEncodeAsBooleanValue( "UTF-8 "));  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().urlEncodeAsBooleanValue( "UTF-8 "));	  closure    |=    JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(   "UTF-8   "));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
330	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue( "UTF-8 ")));  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue( "UTF-8 ")));  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue( "UTF-8 ")));	  closure    |=    JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(   "UTF-8   "));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
331	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsIOException( "ZipArchiveEntry  has  been  closed ");  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsIOException( "ZipArchiveEntry  has  been  closed ");  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsIOException( "ZipArchiveEntry  has  been  closed ");	  closure    |=    JsonStringEncoder.getInstance().encodeAsIOException(   "Current    entry    has    been    closed   ");    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
332	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsIOException( "Current  entry  has  been  closed. ");  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsIOException( "Current  entry  has  been  closed. ");  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsIOException( "Current  entry  has  been  closed. ");	  closure    |=    JsonStringEncoder.getInstance().encodeAsIOException(   "Current    entry    has    been    closed   ");    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
333	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsIOException( "Current  entry  has  been  closed ",  in);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsIOException( "Current  entry  has  been  closed ",  in);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsIOException( "Current  entry  has  been  closed ",  in);	  closure    |=    JsonStringEncoder.getInstance().encodeAsIOException(   "Current    entry    has    been    closed   ");    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
334	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsIOException( "ZipArchiveEntry  has  been  closed. ");  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsIOException( "ZipArchiveEntry  has  been  closed. ");  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsIOException( "ZipArchiveEntry  has  been  closed. ");	  closure    |=    JsonStringEncoder.getInstance().encodeAsIOException(   "Current    entry    has    been    closed   ");    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
335	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsIOException( "Current  entry  has  been  closed ",  ze);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsIOException( "Current  entry  has  been  closed ",  ze);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsIOException( "Current  entry  has  been  closed ",  ze);	  closure    |=    JsonStringEncoder.getInstance().encodeAsIOException(   "Current    entry    has    been    closed   ");    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
336	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry.getMetho  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry.getMetho  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry.getMetho	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.get(i);    if(entry.getMethod().equals(entry.getMethod())    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
337	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.get(i);    if(entry.getMethod().equals(entry.getMethod())    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
338	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry.getMethod())  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry.getMethod())  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry.getMethod())	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.get(i);    if(entry.getMethod().equals(entry.getMethod())    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
339	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry.getMetho  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry.getMetho  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry.getMetho	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.get(i);    if(entry.getMethod().equals(entry.getMethod())    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
340	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.get(i);    if(entry.getMethod().equals(entry.getMethod())    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
341	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry.get  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry.get  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry.get	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.get(i);    if(entry.getMethod().equals(entry.getMethod    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
342	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry.  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry.  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry.	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.get(i);    if(entry.getMethod().equals(entry.getMethod    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
343	[BUG]  [BUGGY]  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.get(i);    if(entry.getMethod().equals(entry.getMethod    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
344	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry.get  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry.get  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry.get	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.get(i);    if(entry.getMethod().equals(entry.getMethod    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
345	[BUG]  [BUGGY]  Closed  =  false;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  in.getValue());  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  false;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  in.getValue());  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  false;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  in.getValue());  }	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    in.getValue());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
346	[BUG]  [BUGGY]  Closed  =  false;  }  else  if(closed)  {  System.err.println( "ZipArchiveEntry  with  closed  entry: "  +  in.getValue());  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  false;  }  else  if(closed)  {  System.err.println( "ZipArchiveEntry  with  closed  entry: "  +  in.getValue());  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  false;  }  else  if(closed)  {  System.err.println( "ZipArchiveEntry  with  closed  entry: "  +  in.getValue());  }	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    in.getValue());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
347	[BUG]  [BUGGY]  Closed  =  false;  }  else  if(closed)  {  System.err.println( "JavaExtraFields  with  closed  entry: "  +  in.getValue());  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  false;  }  else  if(closed)  {  System.err.println( "JavaExtraFields  with  closed  entry: "  +  in.getValue());  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  false;  }  else  if(closed)  {  System.err.println( "JavaExtraFields  with  closed  entry: "  +  in.getValue());  }	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    in.getValue());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
348	[BUG]  [BUGGY]  Closed  =  false;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  in.getKey());  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  false;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  in.getKey());  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  false;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  in.getKey());  }	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    in.getValue());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
349	[BUG]  [BUGGY]  Closed  =  false;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  in.getValue());  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  false;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  in.getValue());  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  false;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  in.getValue());	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    in.getValue());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
350	[BUG]  [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  closed  file  name: "  +  ioe);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  closed  file  name: "  +  ioe);  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  closed  file  name: "  +  ioe);  }	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    file    name:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
351	[BUG]  [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  without  closed  file  name: "  +  ioe);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  without  closed  file  name: "  +  ioe);  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  without  closed  file  name: "  +  ioe);  }	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    file    name:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
352	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
353	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.length;  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.length;  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.length;  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
354	[BUG]  [BUGGY]  closure  =  new  LinkedHashMap  <  String,Integer>();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  =  new  LinkedHashMap  <  String,Integer>();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  =  new  LinkedHashMap  <  String,Integer>();	  closure    =    null;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
355	[BUG]  [BUGGY]  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields:  closed ",  ioe);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields:  closed ",  ioe);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields:  closed ",  ioe);	  Closed    =    false;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields:    closed   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
356	[BUG]  [BUGGY]  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields:  closed. "  +  ioe);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields:  closed. "  +  ioe);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields:  closed. "  +  ioe);	  Closed    =    false;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields:    closed   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
357	[BUG]  [BUGGY]  SecureBoundedEntry  <  K,  V>  inf  =  entryEncoding.getValue();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  SecureBoundedEntry  <  K,  V>  inf  =  entryEncoding.getValue();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	SecureBoundedEntry  <  K,  V>  inf  =  entryEncoding.getValue();	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    in.getValue());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
358	[BUG]  [BUGGY]  SecureBoundedEntry  <  K,  V>  inf  =  entry.getValue();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  SecureBoundedEntry  <  K,  V>  inf  =  entry.getValue();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	SecureBoundedEntry  <  K,  V>  inf  =  entry.getValue();	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    in.getValue());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
359	[BUG]  [BUGGY]  SecureBoundedEntry  <  K,  V>  inf  =  entryEncoding.getInputFile();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  SecureBoundedEntry  <  K,  V>  inf  =  entryEncoding.getInputFile();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	SecureBoundedEntry  <  K,  V>  inf  =  entryEncoding.getInputFile();	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    in.getValue());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
360	[BUG]  [BUGGY]  SecureBoundedEntry  <  K,  V>  inf  =  entryEncoding.openByteArrayEntry();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  SecureBoundedEntry  <  K,  V>  inf  =  entryEncoding.openByteArrayEntry();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	SecureBoundedEntry  <  K,  V>  inf  =  entryEncoding.openByteArrayEntry();	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    in.getValue());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
361	[BUG]  [BUGGY]  SecureBoundedEntry  <  K,  V>  inf  =  entryEncoding.openByteArray();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  SecureBoundedEntry  <  K,  V>  inf  =  entryEncoding.openByteArray();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	SecureBoundedEntry  <  K,  V>  inf  =  entryEncoding.openByteArray();	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    in.getValue());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
362	[BUG]  [BUGGY]  SecureBoundedEntry  <  K,  V>  inf  =  entryEncoding.openByte(in);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  SecureBoundedEntry  <  K,  V>  inf  =  entryEncoding.openByte(in);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	SecureBoundedEntry  <  K,  V>  inf  =  entryEncoding.openByte(in);	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    in.getValue());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
363	[BUG]  [BUGGY]  Closed  =  true;  ioe.println( "UnicodeExtraFields  with  closed  file  name: "  +  ioe.getMessage());  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  true;  ioe.println( "UnicodeExtraFields  with  closed  file  name: "  +  ioe.getMessage());  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  true;  ioe.println( "UnicodeExtraFields  with  closed  file  name: "  +  ioe.getMessage());	  Closed    =    false;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    file    name:   "    +    ioe.getMessage());    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
364	[BUG]  [BUGGY]  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields  without  closed  file  name: "  +  ioe.getMessage());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields  without  closed  file  name: "  +  ioe.getMessage());  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields  without  closed  file  name: "  +  ioe.getMessage());	  Closed    =    false;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    file    name:   "    +    ioe.getMessage());    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
365	[BUG]  [BUGGY]  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closing  file  name ");  close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closing  file  name ");  close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(closed)  {  System.err.println( "UnicodeExtraFields  with  closing  file  name ");  close();  }	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closing    file    name   ");    close();    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
366	[BUG]  [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closing  file  name ");  close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closing  file  name ");  close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closing  file  name ");  close();  }	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closing    file    name   ");    close();    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
367	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsLongValue(false));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsLongValue(false));  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsLongValue(false));	  closure    |=    JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(false));    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
368	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(false),  0);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(false),  0);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(false),  0);	  closure    |=    JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(false));    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
369	[BUG]  [BUGGY]  if(in!=  null)  {  Closed  =  true;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closed  input  stream ");  close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(in!=  null)  {  Closed  =  true;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closed  input  stream ");  close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(in!=  null)  {  Closed  =  true;  }  else  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closed  input  stream ");  close();  }	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    input    stream   ");    close();    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
370	[BUG]  [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  input  stream ");  close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  input  stream ");  close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  input  stream ");  close();  }	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    input    stream   ");    close();    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
371	[BUG]  [BUGGY]  if(in!=  null)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  input  stream ");  close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(in!=  null)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  input  stream ");  close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(in!=  null)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  input  stream ");  close();  }	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    input    stream   ");    close();    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
372	[BUG]  [BUGGY]  Closed  =  new  java.util.ArrayList  <  ZipEntry>();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  new  java.util.ArrayList  <  ZipEntry>();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  new  java.util.ArrayList  <  ZipEntry>();	  closed    =    new    java.util.ArrayList    <    ZipEntry>();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
373	[BUG]  [BUGGY]  InputStream  inf  =  getInputStream(bis);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  InputStream  inf  =  getInputStream(bis);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	InputStream  inf  =  getInputStream(bis);	  InputStream    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
374	[BUG]  [BUGGY]  InputStream  inf  =  isEnabled(Feature.QUOTE_FIELD_NAMES);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  InputStream  inf  =  isEnabled(Feature.QUOTE_FIELD_NAMES);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	InputStream  inf  =  isEnabled(Feature.QUOTE_FIELD_NAMES);	  InputStream    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
375	[BUG]  [BUGGY]  InputStream  inf  =  isEnabled(Feature.AUTO_CLOSE_ERROR);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  InputStream  inf  =  isEnabled(Feature.AUTO_CLOSE_ERROR);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	InputStream  inf  =  isEnabled(Feature.AUTO_CLOSE_ERROR);	  InputStream    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
376	[BUG]  [BUGGY]  Inflater  inf  =(Inflater)in.open();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  inf  =(Inflater)in.open();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  inf  =(Inflater)in.open();	  Inflater    inf    =(Inflater)in.clone();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
377	[BUG]  [BUGGY]  Inflater  inf  =(Inflater)in.read();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  inf  =(Inflater)in.read();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  inf  =(Inflater)in.read();	  Inflater    inf    =(Inflater)in.clone();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
378	[BUG]  [BUGGY]  if(in!=  null)  {  close();  }  else  {  System.err.println( "UnicodeExtraFields  closed ");  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(in!=  null)  {  close();  }  else  {  System.err.println( "UnicodeExtraFields  closed ");  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(in!=  null)  {  close();  }  else  {  System.err.println( "UnicodeExtraFields  closed ");  }	  close();    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
379	[BUG]  [BUGGY]  if(in!=  null)  {  close();  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  input  stream ");  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(in!=  null)  {  close();  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  input  stream ");  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(in!=  null)  {  close();  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  input  stream ");  }	  close();    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
380	[BUG]  [BUGGY]  if(in!=  null)  {  close();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(in!=  null)  {  close();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(in!=  null)  {  close();  }  else  {  throw  new  IllegalStateException( " ");  }	  close();    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
381	[BUG]  [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  closed  file  name: "  +  ioe.getMessage());  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  closed  file  name: "  +  ioe.getMessage());  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  closed  file  name: "  +  ioe.getMessage());  }	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    file    name:   "    +    ioe.getMessage());    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
382	[BUG]  [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "Failed  to  close  file  name: "  +  ioe.getMessage());  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "Failed  to  close  file  name: "  +  ioe.getMessage());  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "Failed  to  close  file  name: "  +  ioe.getMessage());  }	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    file    name:   "    +    ioe.getMessage());    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
383	[BUG]  [BUGGY]  closed  =  new  byte[inf.length()  +  3];  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  =  new  byte[inf.length()  +  3];  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  =  new  byte[inf.length()  +  3];	  closed    =    new    byte[inf.length()    ];    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
384	[BUG]  [BUGGY]  closure  =  JsonStringEncoder.getInstance().encodeAsZip64(entriesZip64);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  =  JsonStringEncoder.getInstance().encodeAsZip64(entriesZip64);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  =  JsonStringEncoder.getInstance().encodeAsZip64(entriesZip64);	  closure    |=    JsonStringEncoder.getInstance().encodeAsZip64(entriesZip64);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
385	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsZip64(entryEncoding);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsZip64(entryEncoding);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsZip64(entryEncoding);	  closure    |=    JsonStringEncoder.getInstance().encodeAsZip64(entriesZip64);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
386	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsZip64(ze);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsZip64(ze);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsZip64(ze);	  closure    |=    JsonStringEncoder.getInstance().encodeAsZip64(entriesZip64);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
387	[BUG]  [BUGGY]  closure  =  JsonStringEncoder.getInstance().encodeAsIOException( "Current  entry  has  been  closed ");  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  =  JsonStringEncoder.getInstance().encodeAsIOException( "Current  entry  has  been  closed ");  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  =  JsonStringEncoder.getInstance().encodeAsIOException( "Current  entry  has  been  closed ");	  closure    |=    JsonStringEncoder.getInstance().encodeAsIOException(   "Current    entry    has    been    closed   ");    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
388	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsIOException( "Surrent  entry  has  been  closed ");  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsIOException( "Surrent  entry  has  been  closed ");  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsIOException( "Surrent  entry  has  been  closed ");	  closure    |=    JsonStringEncoder.getInstance().encodeAsIOException(   "Current    entry    has    been    closed   ");    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
389	[BUG]  [BUGGY]  Inflater  inf  =(Inflater)closed.clone();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  inf  =(Inflater)closed.clone();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  inf  =(Inflater)closed.clone();	  Inflater    inf    =(Inflater)this.in.clone();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
390	[BUG]  [BUGGY]  Inflater  inf  =(Inflater)this.in.getValue();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  inf  =(Inflater)this.in.getValue();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  inf  =(Inflater)this.in.getValue();	  Inflater    inf    =(Inflater)this.in.clone();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
391	[BUG]  [BUGGY]  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields  with  close  entry: "  +  ioe);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields  with  close  entry: "  +  ioe);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields  with  close  entry: "  +  ioe);	  Closed    =    false;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
392	[BUG]  [BUGGY]  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields  with  closed  entry:n "  +  ioe);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields  with  closed  entry:n "  +  ioe);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields  with  closed  entry:n "  +  ioe);	  Closed    =    false;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
393	[BUG]  [BUGGY]  Closed  =  Inflater.getInstance(inf);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  Inflater.getInstance(inf);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  Inflater.getInstance(inf);	  closed    =    Inflater.getInstance();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
394	[BUG]  [BUGGY]  Inflater  inf  =  getOutputFileInput();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  inf  =  getOutputFileInput();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  inf  =  getOutputFileInput();	  Inflater    inf    =    getOutputFile();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
395	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed ");  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed ");  }	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
396	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  input  stream ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  input  stream ");  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  input  stream ");  }	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
397	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  file  name ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  file  name ");  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  file  name ");  }	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
398	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue( ".UTF-8 "));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue( ".UTF-8 "));  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue( ".UTF-8 "));	  closure    |=    JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(   "UTF-8   "));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
399	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue( "UTF-16 "));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue( "UTF-16 "));  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue( "UTF-16 "));	  closure    |=    JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(   "UTF-8   "));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
400	[BUG]  [BUGGY]  ShuffleInternal.closeAndClearBuffer(inf);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  ShuffleInternal.closeAndClearBuffer(inf);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	ShuffleInternal.closeAndClearBuffer(inf);	  shutdown    =    true;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
401	[BUG]  [BUGGY]  ShuffleInternal.this.closeEntry(inf,  entryEncoding);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  ShuffleInternal.this.closeEntry(inf,  entryEncoding);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	ShuffleInternal.this.closeEntry(inf,  entryEncoding);	  shutdown    =    true;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
402	[BUG]  [BUGGY]  ShuffleInternal.this.closeEntry(inf);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  ShuffleInternal.this.closeEntry(inf);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	ShuffleInternal.this.closeEntry(inf);	  shutdown    =    true;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
403	[BUG]  [BUGGY]  ShuffleInternal.this.closeEntry(inf,  entryEncoding);  shutdown  =  false;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  ShuffleInternal.this.closeEntry(inf,  entryEncoding);  shutdown  =  false;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	ShuffleInternal.this.closeEntry(inf,  entryEncoding);  shutdown  =  false;	  shutdown    =    true;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
404	[BUG]  [BUGGY]  ShuffleInternal.closeAndClearBuffer(inf);  shutdown  =  false;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  ShuffleInternal.closeAndClearBuffer(inf);  shutdown  =  false;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	ShuffleInternal.closeAndClearBuffer(inf);  shutdown  =  false;	  shutdown    =    true;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
405	[BUG]  [BUGGY]  ShuffleInternal.this.closeEntry(inf);  shutdown  =  false;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  ShuffleInternal.this.closeEntry(inf);  shutdown  =  false;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	ShuffleInternal.this.closeEntry(inf);  shutdown  =  false;	  shutdown    =    true;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
406	[BUG]  [BUGGY]  closed  =  new  java.util.ArrayList  <  ZipEncoding>(encoding);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  =  new  java.util.ArrayList  <  ZipEncoding>(encoding);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  =  new  java.util.ArrayList  <  ZipEncoding>(encoding);	  closed    =    new    java.util.ArrayList    <    ZipEncoding>();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
407	[BUG]  [BUGGY]  closed  =  new  java.util.ArrayList  <  ZipEncoding>(1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  =  new  java.util.ArrayList  <  ZipEncoding>(1);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  =  new  java.util.ArrayList  <  ZipEncoding>(1);	  closed    =    new    java.util.ArrayList    <    ZipEncoding>();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
408	[BUG]  [BUGGY]  Inflater  inf.close();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  inf.close();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  inf.close();	  in.close();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
409	[BUG]  [BUGGY]  Inflater  inf  =  new  ZipArchiveEntry();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  inf  =  new  ZipArchiveEntry();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  inf  =  new  ZipArchiveEntry();	  in.close();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
410	[BUG]  [BUGGY]  Inflater  inf  =  bis.getOutputStream();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  inf  =  bis.getOutputStream();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  inf  =  bis.getOutputStream();	  Inflater    inf    =    ze.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
411	[BUG]  [BUGGY]  Inflater  inf  =  ze.close();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  inf  =  ze.close();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  inf  =  ze.close();	  Inflater    inf    =    ze.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
412	[BUG]  [BUGGY]  Inflater  inf  =  bis.next();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  inf  =  bis.next();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  inf  =  bis.next();	  Inflater    inf    =    ze.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
413	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-8 ", "null ",  null);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-8 ", "null ",  null);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-8 ", "null ",  null);	  closure    |=    JsonStringEncoder.getInstance().encodeAsString(   "UTF-8   ",   "null   ");    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
414	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(inf,  closed));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(inf,  closed));  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(inf,  closed));	  closure    |=    JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(inf));    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
415	[BUG]  [BUGGY]  SecureBoundedEntry  <  Void,  V>  inf  =  entryEncoding.getValue();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  SecureBoundedEntry  <  Void,  V>  inf  =  entryEncoding.getValue();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	SecureBoundedEntry  <  Void,  V>  inf  =  entryEncoding.getValue();	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    in.getValue());    return;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
416	[BUG]  [BUGGY]  Closed  =  new  ClosedInputStream();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  new  ClosedInputStream();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  new  ClosedInputStream();	  Closed    =    null;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
417	[BUG]  [BUGGY]  Closed  =  closed;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  closed;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  closed;	  Closed    =    null;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
418	[BUG]  [BUGGY]  Closed  =  in;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  in;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  in;	  Closed    =    null;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
419	[BUG]  [BUGGY]  closure  =  JsonStringEncoder.getInstance().encodeAsString( "UTF-8 ", "ISO-8859-1 ");  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  =  JsonStringEncoder.getInstance().encodeAsString( "UTF-8 ", "ISO-8859-1 ");  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  =  JsonStringEncoder.getInstance().encodeAsString( "UTF-8 ", "ISO-8859-1 ");	  closure    |=    JsonStringEncoder.getInstance().encodeAsString(   "UTF-8   ",   "ISO-8859-1   ");    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
420	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-8 ", "US-8859-1 ");  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-8 ", "US-8859-1 ");  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-8 ", "US-8859-1 ");	  closure    |=    JsonStringEncoder.getInstance().encodeAsString(   "UTF-8   ",   "ISO-8859-1   ");    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
421	[BUG]  [BUGGY]  Close  :  true;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Close  :  true;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Close  :  true;	  Close    =    true;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
422	[BUG]  [BUGGY]  SecureAssertionError.println( "UnicodeExtraFields  closed: "  +  ioe);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  SecureAssertionError.println( "UnicodeExtraFields  closed: "  +  ioe);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	SecureAssertionError.println( "UnicodeExtraFields  closed: "  +  ioe);	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
423	[BUG]  [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  open);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  open);  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  open);  }	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
424	[BUG]  [BUGGY]  if(!closed)  {  Closed  =  true;  }  else  {  System.err.println( "JikeExtraFields  with  closed  entry: "  +  in.getValue());  close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(!closed)  {  Closed  =  true;  }  else  {  System.err.println( "JikeExtraFields  with  closed  entry: "  +  in.getValue());  close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(!closed)  {  Closed  =  true;  }  else  {  System.err.println( "JikeExtraFields  with  closed  entry: "  +  in.getValue());  close();  }	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    in.getValue());    close();    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
425	[BUG]  [BUGGY]  if(!closed)  {  Closed  =  true;  }  else  {  System.err.println( "ZipArchiveEntry  with  closed  entry: "  +  in.getValue());  close();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(!closed)  {  Closed  =  true;  }  else  {  System.err.println( "ZipArchiveEntry  with  closed  entry: "  +  in.getValue());  close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(!closed)  {  Closed  =  true;  }  else  {  System.err.println( "ZipArchiveEntry  with  closed  entry: "  +  in.getValue());  close();  }	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    in.getValue());    close();    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
426	[BUG]  [BUGGY]  if(!closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  without  closed  entry: "  +  in.getValue());  close();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(!closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  without  closed  entry: "  +  in.getValue());  close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(!closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  without  closed  entry: "  +  in.getValue());  close();  }	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    in.getValue());    close();    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
427	[BUG]  [BUGGY]  if(!closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  in.getKey());  close();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(!closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  in.getKey());  close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(!closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  in.getKey());  close();  }	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    in.getValue());    close();    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
428	[BUG]  [BUGGY]  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields  closed:n "  +  ioe);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields  closed:n "  +  ioe);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields  closed:n "  +  ioe);	  Closed    =    false;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
429	[BUG]  [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.get(i);    if(entry.getMethod().equals(entry.getMethod())    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
430	[BUG]  [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry.getMetho  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry.getMetho  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry.getMetho	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.get(i);    if(entry.getMethod().equals(entry.getMethod())    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
431	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean( "UTF-16 "));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean( "UTF-16 "));  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean( "UTF-16 "));	  closure    |=    JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean(   "UTF-8   "));    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
432	[BUG]  [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.next(),  bis);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.next(),  bis);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.next(),  bis);	  CloseEntry    <    K,    V>    inf    =    new    CloseEntry    <    K,    V>(inf.next());    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
433	[BUG]  [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.clone());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.clone());  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.clone());	  CloseEntry    <    K,    V>    inf    =    new    CloseEntry    <    K,    V>(inf.next());    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
434	[BUG]  [BUGGY]  closure  =  new  StringBuffer();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  =  new  StringBuffer();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  =  new  StringBuffer();	  closure    =   "   ";    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
435	[BUG]  [BUGGY]  closure  =  new  FileInputStream(inf.getAbsolutePath());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  =  new  FileInputStream(inf.getAbsolutePath());  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  =  new  FileInputStream(inf.getAbsolutePath());	  closure    =   "   ";    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
436	[BUG]  [BUGGY]  closure  =  new  FileInputStream(in.getAbsolutePath());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  =  new  FileInputStream(in.getAbsolutePath());  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  =  new  FileInputStream(in.getAbsolutePath());	  closure    =   "   ";    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
437	[BUG]  [BUGGY]  if(inputStream  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(inputStream  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(inputStream  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.get(i);    if(entry.getMethod().equals(entry.getMethod    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
438	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.get(i);    if(entry.getMethod().equals(entry.getMethod    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
439	[BUG]  [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.get(i);    if(entry.getMethod().equals(entry.getMethod    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
440	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.get(i);    if(entry.getMethod().equals(entry.getMethod    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
441	[BUG]  [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf,  bis);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf,  bis);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf,  bis);	  CloseEntry    <    K,    V>    inf    =    new    CloseEntry    <    K,    V>(inf);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
442	[BUG]  [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf,  closing);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf,  closing);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf,  closing);	  CloseEntry    <    K,    V>    inf    =    new    CloseEntry    <    K,    V>(inf);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
443	[BUG]  [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf,  out);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf,  out);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf,  out);	  CloseEntry    <    K,    V>    inf    =    new    CloseEntry    <    K,    V>(inf);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
444	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
445	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString(ENCODING_STRING).encodeAsString();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString(ENCODING_STRING).encodeAsString();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsString(ENCODING_STRING).encodeAsString();	  closure    |=    JsonStringEncoder.getInstance().encodeAsString(   "UTF-8   ").encodeAsString();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
446	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString(ENCODING).encodeAsString();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString(ENCODING).encodeAsString();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsString(ENCODING).encodeAsString();	  closure    |=    JsonStringEncoder.getInstance().encodeAsString(   "UTF-8   ").encodeAsString();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
447	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString(ENCODING_UTF8).encodeAsString();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString(ENCODING_UTF8).encodeAsString();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsString(ENCODING_UTF8).encodeAsString();	  closure    |=    JsonStringEncoder.getInstance().encodeAsString(   "UTF-8   ").encodeAsString();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
448	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString(ENCODING_UTF_8).encodeAsString();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString(ENCODING_UTF_8).encodeAsString();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsString(ENCODING_UTF_8).encodeAsString();	  closure    |=    JsonStringEncoder.getInstance().encodeAsString(   "UTF-8   ").encodeAsString();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
449	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-8 ").encodeAsText();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-8 ").encodeAsText();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-8 ").encodeAsText();	  closure    |=    JsonStringEncoder.getInstance().encodeAsString(   "UTF-8   ").encodeAsString();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
450	[BUG]  [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf,  bis);  close();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf,  bis);  close();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf,  bis);  close();	  CloseEntry    <    K,    V>    inf    =    new    CloseEntry    <    K,    V>(inf);    close();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
451	[BUG]  [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf,  closed);  close();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf,  closed);  close();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf,  closed);  close();	  CloseEntry    <    K,    V>    inf    =    new    CloseEntry    <    K,    V>(inf);    close();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
452	[BUG]  [BUGGY]  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "Unclosed  entry:n "  +  ioe);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "Unclosed  entry:n "  +  ioe);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "Unclosed  entry:n "  +  ioe);	  Closed    =    false;    }    catch(IOException    ioe)    {    System.err.println(   "Unclosed    entry:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
453	[BUG]  [BUGGY]  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "Can  not  close  entry: "  +  ioe);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "Can  not  close  entry: "  +  ioe);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "Can  not  close  entry: "  +  ioe);	  Closed    =    false;    }    catch(IOException    ioe)    {    System.err.println(   "Unclosed    entry:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
454	[BUG]  [BUGGY]  ze.close(in);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  ze.close(in);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	ze.close(in);	  ze.close();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
455	[BUG]  [BUGGY]  ze.close(inf);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  ze.close(inf);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	ze.close(inf);	  ze.close();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
456	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean( "UTF-16 ")));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean( "UTF-16 ")));  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean( "UTF-16 ")));	  closure    |=    JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean(   "UTF-8   ")));    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
457	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean( "UTF-8 "))  &&  close);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean( "UTF-8 "))  &&  close);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean( "UTF-8 "))  &&  close);	  closure    |=    JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean(   "UTF-8   ")));    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
458	[BUG]  [BUGGY]  closed  =  new  LinkedHashMap  <  ZipEncoding>();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  =  new  LinkedHashMap  <  ZipEncoding>();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  =  new  LinkedHashMap  <  ZipEncoding>();	  closed    =    new    ArrayList    <    ZipEncoding>();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
459	[BUG]  [BUGGY]  closed  =  new  LinkedList  <  String,Integer>();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  =  new  LinkedList  <  String,Integer>();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  =  new  LinkedList  <  String,Integer>();	  closed    =    new    LinkedHashMap    <    String,Integer>();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
460	[BUG]  [BUGGY]  closed  =  new  ArrayHashMap  <  String,Integer>();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  =  new  ArrayHashMap  <  String,Integer>();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  =  new  ArrayHashMap  <  String,Integer>();	  closed    =    new    LinkedHashMap    <    String,Integer>();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
461	[BUG]  [BUGGY]  Closed  :  new  Runnable  <  ZipArchiveEntry>();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  :  new  Runnable  <  ZipArchiveEntry>();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  :  new  Runnable  <  ZipArchiveEntry>();	  Closed    :    true;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
462	[BUG]  [BUGGY]  Closed  :  new  HashMap  <  String,Integer>();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  :  new  HashMap  <  String,Integer>();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  :  new  HashMap  <  String,Integer>();	  Closed    :    true;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
463	[BUG]  [BUGGY]  Closed  :  new  HashMap  <  String,Object>();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  :  new  HashMap  <  String,Object>();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  :  new  HashMap  <  String,Object>();	  Closed    :    true;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
464	[BUG]  [BUGGY]  Closed  :  new  HashSet  <  String>();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  :  new  HashSet  <  String>();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  :  new  HashSet  <  String>();	  Closed    :    true;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
465	[BUG]  [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(2);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(2);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(2);	  CloseEntry    <    K,    V>    inf    =    new    CloseEntry    <    K,    V>();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
466	[BUG]  [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.read());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.read());  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.read());	  CloseEntry    <    K,    V>    inf    =    new    CloseEntry    <    K,    V>();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
467	[BUG]  [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  closed  entry: "  +  ioe);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  closed  entry: "  +  ioe);  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  closed  entry: "  +  ioe);  }	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
468	[BUG]  [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  close);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  close);  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  close);  }	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
469	[BUG]  [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  ze);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  ze);  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  ze);  }	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
470	[BUG]  [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.length  +  1,  inf.length);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.length  +  1,  inf.length);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.length  +  1,  inf.length);	  CloseEntry    <    K,    V>    inf    =    new    CloseEntry    <    K,    V>(inf.length);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
471	[BUG]  [BUGGY]  shut  =  new  BoundedInputStream();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  shut  =  new  BoundedInputStream();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	shut  =  new  BoundedInputStream();	  shut    =    null;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
472	[BUG]  [BUGGY]  shut  =  new  java.util.ArrayList  <  ZipEntry>();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  shut  =  new  java.util.ArrayList  <  ZipEntry>();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	shut  =  new  java.util.ArrayList  <  ZipEntry>();	  shut    =    null;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
473	[BUG]  [BUGGY]  shut  =  new  java.sql.InputStream();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  shut  =  new  java.sql.InputStream();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	shut  =  new  java.sql.InputStream();	  shut    =    null;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
474	[BUG]  [BUGGY]  closed  =  new  java.util.ArrayList  <  ZipArchiveEntry>(2);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  =  new  java.util.ArrayList  <  ZipArchiveEntry>(2);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  =  new  java.util.ArrayList  <  ZipArchiveEntry>(2);	  closed    =    new    java.util.ArrayList    <    ZipArchiveEntry>();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
475	[BUG]  [BUGGY]  closed  =  new  java.util.ArrayList  <  ZipArchiveEntry>(8);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  =  new  java.util.ArrayList  <  ZipArchiveEntry>(8);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  =  new  java.util.ArrayList  <  ZipArchiveEntry>(8);	  closed    =    new    java.util.ArrayList    <    ZipArchiveEntry>();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
476	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(bis);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  inf  =  getInputStream(bis);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  inf  =  getInputStream(bis);	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
477	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream().close();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  inf  =  getInputStream().close();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  inf  =  getInputStream().close();	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
478	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(bis.length);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  inf  =  getInputStream(bis.length);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  inf  =  getInputStream(bis.length);	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
479	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString(ENCODING_UTF8);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString(ENCODING_UTF8);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsString(ENCODING_UTF8);	  closure    |=    JsonStringEncoder.getInstance().encodeAsString(   "UTF-8   ");    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
480	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString(ENCODING);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString(ENCODING);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsString(ENCODING);	  closure    |=    JsonStringEncoder.getInstance().encodeAsString(   "UTF-8   ");    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
481	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString(ENCODING_BUFFER);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString(ENCODING_BUFFER);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsString(ENCODING_BUFFER);	  closure    |=    JsonStringEncoder.getInstance().encodeAsString(   "UTF-8   ");    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
482	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString(STRING_LITERAL_ENCODING);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString(STRING_LITERAL_ENCODING);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsString(STRING_LITERAL_ENCODING);	  closure    |=    JsonStringEncoder.getInstance().encodeAsString(   "UTF-8   ");    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
483	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString(ENCODING_UTF_8);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString(ENCODING_UTF_8);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsString(ENCODING_UTF_8);	  closure    |=    JsonStringEncoder.getInstance().encodeAsString(   "UTF-8   ");    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
484	[BUG]  [BUGGY]  SecureAssertionError.println( "UnicodeExtraFields  with  closed  entry: "  +  ioe.getMessage());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  SecureAssertionError.println( "UnicodeExtraFields  with  closed  entry: "  +  ioe.getMessage());  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	SecureAssertionError.println( "UnicodeExtraFields  with  closed  entry: "  +  ioe.getMessage());	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    ioe.getMessage());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
485	[BUG]  [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  closed  entry: "  +  ioe.getMessage());  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  closed  entry: "  +  ioe.getMessage());  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  closed  entry: "  +  ioe.getMessage());  }	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    ioe.getMessage());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
486	[BUG]  [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  ze.getMessage());  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  ze.getMessage());  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  ze.getMessage());  }	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    ioe.getMessage());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
487	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.closeEntry();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  inf  =  entryEncoding.closeEntry();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  inf  =  entryEncoding.closeEntry();	  Inflater    inf    =    entryEncoding.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
488	[BUG]  [BUGGY]  if(in  ==  null)  {  in.close();  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(in  ==  null)  {  in.close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(in  ==  null)  {  in.close();  }	  if(in!=    null)    {    in.close();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
489	[BUG]  [BUGGY]  SecureRandomAccessor.closeEntry(inf,  entryEncoding);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  SecureRandomAccessor.closeEntry(inf,  entryEncoding);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	SecureRandomAccessor.closeEntry(inf,  entryEncoding);	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    in.getClass().getName());    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
490	[BUG]  [BUGGY]  Closed  |=  closed;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  |=  closed;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  |=  closed;	  Closed    |=    null;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
491	[BUG]  [BUGGY]  Closed  |=  this;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  |=  this;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  |=  this;	  Closed    |=    null;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
492	[BUG]  [BUGGY]  Closed  |=  close;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  |=  close;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  |=  close;	  Closed    |=    null;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
493	[BUG]  [BUGGY]  Closed  |=  in.close();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  |=  in.close();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  |=  in.close();	  Closed    |=    null;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
494	[BUG]  [BUGGY]  closure  =  false;  System.err.println( "Current  entry  ' "  +  entry.getKey()  + "'  closed: "  +  entry.getValue());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  =  false;  System.err.println( "Current  entry  ' "  +  entry.getKey()  + "'  closed: "  +  entry.getValue());  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  =  false;  System.err.println( "Current  entry  ' "  +  entry.getKey()  + "'  closed: "  +  entry.getValue());	  closure    =    true;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
495	[BUG]  [BUGGY]  closure  =  false;  System.err.println( "Current  entry  ' "  +  entry.getValue()  + "'  closed: "  +  entry.getValue());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  =  false;  System.err.println( "Current  entry  ' "  +  entry.getValue()  + "'  closed: "  +  entry.getValue());  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  =  false;  System.err.println( "Current  entry  ' "  +  entry.getValue()  + "'  closed: "  +  entry.getValue());	  closure    =    true;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
496	[BUG]  [BUGGY]  closure  =  false;  System.err.println( "Current  entry  ' "  +  entry.getValue()  + "'  closed: "  +  entry.getKey());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  =  false;  System.err.println( "Current  entry  ' "  +  entry.getValue()  + "'  closed: "  +  entry.getKey());  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  =  false;  System.err.println( "Current  entry  ' "  +  entry.getValue()  + "'  closed: "  +  entry.getKey());	  closure    =    true;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
497	[BUG]  [BUGGY]  closure  =  false;  System.err.println( "Current  entry  ' "  +  entry.getValue()  + "'  closed: "  +  entry.getByteBuffer());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  =  false;  System.err.println( "Current  entry  ' "  +  entry.getValue()  + "'  closed: "  +  entry.getByteBuffer());  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  =  false;  System.err.println( "Current  entry  ' "  +  entry.getValue()  + "'  closed: "  +  entry.getByteBuffer());	  closure    =    true;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
498	[BUG]  [BUGGY]  closure  =  false;  System.err.println( "Current  entry  ' "  +  entry.getValue()  + "'  closed: "  +  entry.getName());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  =  false;  System.err.println( "Current  entry  ' "  +  entry.getValue()  + "'  closed: "  +  entry.getName());  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  =  false;  System.err.println( "Current  entry  ' "  +  entry.getValue()  + "'  closed: "  +  entry.getName());	  closure    =    true;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
499	[BUG]  [BUGGY]  closure  =  false;  System.err.println( "Current  entry  ' "  +  entry.getKey()  + "'  closed: "  +  entry.getValue());  in.close();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  =  false;  System.err.println( "Current  entry  ' "  +  entry.getKey()  + "'  closed: "  +  entry.getValue());  in.close();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  =  false;  System.err.println( "Current  entry  ' "  +  entry.getKey()  + "'  closed: "  +  entry.getValue());  in.close();	  closure    =    true;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
500	[BUG]  [BUGGY]  closed  =  new  ArrayList  <  ZipArchiveEntry>(inf.length);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  =  new  ArrayList  <  ZipArchiveEntry>(inf.length);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  =  new  ArrayList  <  ZipArchiveEntry>(inf.length);	  closed    =    new    ArrayList    <    ZipArchiveEntry>();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
501	[BUG]  [BUGGY]  Closed  =  false;  ioe.println( "UnicodeExtraFields  closed: "  +  ioe.getMessage());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  false;  ioe.println( "UnicodeExtraFields  closed: "  +  ioe.getMessage());  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  false;  ioe.println( "UnicodeExtraFields  closed: "  +  ioe.getMessage());	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    ioe.getMessage());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
502	[BUG]  [BUGGY]  SecureAssertionError.println( "Closed: "  +  ioe.getMessage());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  SecureAssertionError.println( "Closed: "  +  ioe.getMessage());  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	SecureAssertionError.println( "Closed: "  +  ioe.getMessage());	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    ioe.getMessage());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
503	[BUG]  [BUGGY]  SecureAssertionError.println( "Closed  entry: "  +  ioe.getMessage());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  SecureAssertionError.println( "Closed  entry: "  +  ioe.getMessage());  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	SecureAssertionError.println( "Closed  entry: "  +  ioe.getMessage());	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    ioe.getMessage());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
504	[BUG]  [BUGGY]  SecureAssertionError.println( "Current  entry  not  closed: "  +  ioe.getMessage());  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  SecureAssertionError.println( "Current  entry  not  closed: "  +  ioe.getMessage());  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	SecureAssertionError.println( "Current  entry  not  closed: "  +  ioe.getMessage());	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    ioe.getMessage());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
505	[BUG]  [BUGGY]  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields  with  close  entry: "  +  ioe.getMessage());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields  with  close  entry: "  +  ioe.getMessage());  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields  with  close  entry: "  +  ioe.getMessage());	  Closed    =    false;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    ioe.getMessage());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
506	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inputStream.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
507	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getKey());  entry.closeEntry();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
508	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entries.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entries.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  entries.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
509	[BUG]  [BUGGY]  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closed  input  stream ");  close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closed  input  stream ");  close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(closed)  {  System.err.println( "UnicodeExtraFields  with  closed  input  stream ");  close();  }	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    input    stream   ");    close();    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
510	[BUG]  [BUGGY]  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closed  input  stream. ");  close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closed  input  stream. ");  close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(closed)  {  System.err.println( "UnicodeExtraFields  with  closed  input  stream. ");  close();  }	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    input    stream   ");    close();    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
511	[BUG]  [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  input  stream. ");  close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  input  stream. ");  close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  input  stream. ");  close();  }	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    input    stream   ");    close();    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
512	[BUG]  [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "JikeExtraFields  with  closed  input  stream ");  close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "JikeExtraFields  with  closed  input  stream ");  close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "JikeExtraFields  with  closed  input  stream ");  close();  }	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    input    stream   ");    close();    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
513	[BUG]  [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  closed  in  input  stream ");  close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  closed  in  input  stream ");  close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  closed  in  input  stream ");  close();  }	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    input    stream   ");    close();    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
514	[BUG]  [BUGGY]  shut  =  new  LinkedList  <  ZipEncoding>();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  shut  =  new  LinkedList  <  ZipEncoding>();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	shut  =  new  LinkedList  <  ZipEncoding>();	  shut    =    null;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
515	[BUG]  [BUGGY]  shut  =  new  java.util.ArrayList();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  shut  =  new  java.util.ArrayList();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	shut  =  new  java.util.ArrayList();	  shut    =    null;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
516	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance(),  this.encodeAsBooleanValue(false));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance(),  this.encodeAsBooleanValue(false));  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance(),  this.encodeAsBooleanValue(false));	  closure    |=    JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(false));    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
517	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(false),  true);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(false),  true);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(false),  true);	  closure    |=    JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(false));    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
518	[BUG]  [BUGGY]  closed  |=  true;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  |=  true;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  |=  true;	  Closed    |=    true;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
519	[BUG]  [BUGGY]  closed  =  new  byte[in.getBytes()  ];  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  =  new  byte[in.getBytes()  ];  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  =  new  byte[in.getBytes()  ];	  closed    =    new    byte[in.length()    ];    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
520	[BUG]  [BUGGY]  SecureRandomAccessor.closeEntry(inf);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  SecureRandomAccessor.closeEntry(inf);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	SecureRandomAccessor.closeEntry(inf);	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    in.getValue());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
521	[BUG]  [BUGGY]  SecureZipEncoding.closeEntry(inf,  entryEncoding);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  SecureZipEncoding.closeEntry(inf,  entryEncoding);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	SecureZipEncoding.closeEntry(inf,  entryEncoding);	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    in.getValue());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
522	[BUG]  [BUGGY]  SecureRandomAccessor.closeEntry();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  SecureRandomAccessor.closeEntry();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	SecureRandomAccessor.closeEntry();	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    in.getValue());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
523	[BUG]  [BUGGY]  SecureFileEntry.closeEntry(inf,  entryEncoding);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  SecureFileEntry.closeEntry(inf,  entryEncoding);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	SecureFileEntry.closeEntry(inf,  entryEncoding);	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    in.getValue());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
524	[BUG]  [BUGGY]  SecureZipEncoding.closeEntry(inf);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  SecureZipEncoding.closeEntry(inf);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	SecureZipEncoding.closeEntry(inf);	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    in.getValue());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
525	[BUG]  [BUGGY]  SecureBoundedEntry  <  Void,  V>  inf  =  entryEncoding.getInputFile();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  SecureBoundedEntry  <  Void,  V>  inf  =  entryEncoding.getInputFile();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	SecureBoundedEntry  <  Void,  V>  inf  =  entryEncoding.getInputFile();	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    ioe.getMessage());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
526	[BUG]  [BUGGY]  SecureBoundedEntry  <?>  closed  =  true;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  SecureBoundedEntry  <?>  closed  =  true;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	SecureBoundedEntry  <?>  closed  =  true;	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    ioe.getMessage());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
527	[BUG]  [BUGGY]  SecureBoundedEntry  <  Void,  V>  closed  =  true;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  SecureBoundedEntry  <  Void,  V>  closed  =  true;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	SecureBoundedEntry  <  Void,  V>  closed  =  true;	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    ioe.getMessage());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
528	[BUG]  [BUGGY]  Closed(true,  false);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed(true,  false);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed(true,  false);	  Closed(true);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
529	[BUG]  [BUGGY]  Closed  =  new  LinkedHashMap  <  TWO_EXP_32,  ZipArchiveEntry>();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  new  LinkedHashMap  <  TWO_EXP_32,  ZipArchiveEntry>();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  new  LinkedHashMap  <  TWO_EXP_32,  ZipArchiveEntry>();	  Closed    =   "   ";    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
530	[BUG]  [BUGGY]  Closed  =  new  LinkedHashMap  <  String,ZipArchiveEntry>();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  new  LinkedHashMap  <  String,ZipArchiveEntry>();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  new  LinkedHashMap  <  String,ZipArchiveEntry>();	  Closed    =   "   ";    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
531	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  getZipArchiveEntry();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
532	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean( "UTF-8 ")||  encodeAsBoolean( "UTF-8 ")  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean( "UTF-8 ")||  encodeAsBoolean( "UTF-8 ")  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean( "UTF-8 ")||  encodeAsBoolean( "UTF-8 ")	  closure    |=    JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean(   "UTF-8   ")));    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
533	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry.  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry.  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry.	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.get(i);    if(entry.getMethod().equals(entry.getMethod    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
534	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  entry.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.get(i);    if(entry.getMethod().equals(entry.getMethod    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
535	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entries.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entries.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  entries.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.get(i);    if(entry.getMethod().equals(entry.getMethod    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
536	[BUG]  [BUGGY]  if(inf!=  null)  {  in.close();  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(inf!=  null)  {  in.close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(inf!=  null)  {  in.close();  }	  if(in!=    null)    {    in.close();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
537	[BUG]  [BUGGY]  if(inf  ==  null)  {  in.close();  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(inf  ==  null)  {  in.close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(inf  ==  null)  {  in.close();  }	  if(in!=    null)    {    in.close();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
538	[BUG]  [BUGGY]  if(inferred!=  null)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(inferred!=  null)  {  inf.close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(inferred!=  null)  {  inf.close();  }	  if(in!=    null)    {    in.close();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
539	[BUG]  [BUGGY]  if(inf.length  >  0)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(inf.length  >  0)  {  inf.close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(inf.length  >  0)  {  inf.close();  }	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
540	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
541	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "Failed  to  close  entry. ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "Failed  to  close  entry. ");  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "Failed  to  close  entry. ");  }	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
542	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  buffer.close();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  buffer.close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  buffer.close();  }	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
543	[BUG]  [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.cloneTwin());  close();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.cloneTwin());  close();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.cloneTwin());  close();	  CloseEntry    <    K,    V>    inf    =    new    CloseEntry    <    K,    V>(inf);    close();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
544	[BUG]  [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.next());  close();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.next());  close();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.next());  close();	  CloseEntry    <    K,    V>    inf    =    new    CloseEntry    <    K,    V>(inf);    close();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
545	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(inputStream);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  inf  =  getInputStream(inputStream);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  inf  =  getInputStream(inputStream);	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
546	[BUG]  [BUGGY]  Inflater  inf  =  closeEntry();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  inf  =  closeEntry();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  inf  =  closeEntry();	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
547	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(-1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  inf  =  getInputStream(-1);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  inf  =  getInputStream(-1);	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
548	[BUG]  [BUGGY]  ClosedEntry  <  ZipArchiveEntry>  closed  =  new  ClosedEntry  <  ZipArchiveEntry>();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  ClosedEntry  <  ZipArchiveEntry>  closed  =  new  ClosedEntry  <  ZipArchiveEntry>();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	ClosedEntry  <  ZipArchiveEntry>  closed  =  new  ClosedEntry  <  ZipArchiveEntry>();	  closed    =    new    ArrayList    <    ZipArchiveEntry>();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
549	[BUG]  [BUGGY]  closed  =  new  ArrayList  <  ZipArchiveEntry>(inf.size());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  =  new  ArrayList  <  ZipArchiveEntry>(inf.size());  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  =  new  ArrayList  <  ZipArchiveEntry>(inf.size());	  closed    =    new    ArrayList    <    ZipArchiveEntry>();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
550	[BUG]  [BUGGY]  closeEntry  =  new  LinkedList  <  ZipArchiveEntry>();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closeEntry  =  new  LinkedList  <  ZipArchiveEntry>();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closeEntry  =  new  LinkedList  <  ZipArchiveEntry>();	  closed    =    new    ArrayList    <    ZipArchiveEntry>();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
551	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString(encoding);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString(encoding);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsString(encoding);	  closure    |=    JsonStringEncoder.getInstance().encodeAsString(   "UTF-8   ").encodeAsString();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
552	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString(encoding, "UTF-8 ").encodeAsString();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString(encoding, "UTF-8 ").encodeAsString();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsString(encoding, "UTF-8 ").encodeAsString();	  closure    |=    JsonStringEncoder.getInstance().encodeAsString(   "UTF-8   ").encodeAsString();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
553	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString(encoding).encodeAsString();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString(encoding).encodeAsString();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsString(encoding).encodeAsString();	  closure    |=    JsonStringEncoder.getInstance().encodeAsString(   "UTF-8   ").encodeAsString();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
554	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString(ZipArchiveEntry.UTF8).encodeAsString();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString(ZipArchiveEntry.UTF8).encodeAsString();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsString(ZipArchiveEntry.UTF8).encodeAsString();	  closure    |=    JsonStringEncoder.getInstance().encodeAsString(   "UTF-8   ").encodeAsString();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
555	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString(ZipArchiveEntry.UTF_8).encodeAsString();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString(ZipArchiveEntry.UTF_8).encodeAsString();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsString(ZipArchiveEntry.UTF_8).encodeAsString();	  closure    |=    JsonStringEncoder.getInstance().encodeAsString(   "UTF-8   ").encodeAsString();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
556	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-8 ",  encoding, "UTF-8 ");  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-8 ",  encoding, "UTF-8 ");  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-8 ",  encoding, "UTF-8 ");	  closure    |=    JsonStringEncoder.getInstance().encodeAsString(   "UTF-8   ",   "ISO-8859-1   ");    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
557	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry.getMeth  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry.getMeth  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry.getMeth	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.get(i);    if(entry.getMethod().equals(entry.getMethod())    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
558	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry.getMethod  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry.getMethod  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.get(i);  if(entry.getMethod().equals(entry.getMethod	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.get(i);    if(entry.getMethod().equals(entry.getMethod())    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
559	[BUG]  [BUGGY]  if(closed)  {  Closed  =  false;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  ioe.getMessage());  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(closed)  {  Closed  =  false;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  ioe.getMessage());  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(closed)  {  Closed  =  false;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  ioe.getMessage());  }	  Closed    =    false;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    ioe.getMessage());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
560	[BUG]  [BUGGY]  Closed  =  true;  ioe.println( "UnicodeExtraFields  with  closed  entry: "  +  ioe.getMessage());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  true;  ioe.println( "UnicodeExtraFields  with  closed  entry: "  +  ioe.getMessage());  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  true;  ioe.println( "UnicodeExtraFields  with  closed  entry: "  +  ioe.getMessage());	  Closed    =    false;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    ioe.getMessage());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
561	[BUG]  [BUGGY]  if(closed)  {  Closed  =  false;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  ze.getMessage());  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(closed)  {  Closed  =  false;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  ze.getMessage());  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(closed)  {  Closed  =  false;  }  else  {  System.err.println( "UnicodeExtraFields  with  closed  entry: "  +  ze.getMessage());  }	  Closed    =    false;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    ioe.getMessage());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
562	[BUG]  [BUGGY]  if(closed)  {  Closed  =  false;  }  else  {  System.err.println( "UnicodeExtraFields  closed  entry: "  +  ioe.getMessage());  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(closed)  {  Closed  =  false;  }  else  {  System.err.println( "UnicodeExtraFields  closed  entry: "  +  ioe.getMessage());  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(closed)  {  Closed  =  false;  }  else  {  System.err.println( "UnicodeExtraFields  closed  entry: "  +  ioe.getMessage());  }	  Closed    =    false;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    ioe.getMessage());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
563	[BUG]  [BUGGY]  if(closed)  {  Closed  =  false;  }  else  {  System.err.println( "JikeExtraFields  closed  entry: "  +  ze.getMessage());  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(closed)  {  Closed  =  false;  }  else  {  System.err.println( "JikeExtraFields  closed  entry: "  +  ze.getMessage());  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(closed)  {  Closed  =  false;  }  else  {  System.err.println( "JikeExtraFields  closed  entry: "  +  ze.getMessage());  }	  Closed    =    false;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    ioe.getMessage());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
564	[BUG]  [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  closing  file  name ");  close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  closing  file  name ");  close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  closing  file  name ");  close();  }	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closing    file    name   ");    close();    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
565	[BUG]  [BUGGY]  if(closed)  {  System.err.println( "UseUnicodeExtraFields  with  closing  file  name ");  close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(closed)  {  System.err.println( "UseUnicodeExtraFields  with  closing  file  name ");  close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(closed)  {  System.err.println( "UseUnicodeExtraFields  with  closing  file  name ");  close();  }	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closing    file    name   ");    close();    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
566	[BUG]  [BUGGY]  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closing  file  name. ");  close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(closed)  {  System.err.println( "UnicodeExtraFields  with  closing  file  name. ");  close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(closed)  {  System.err.println( "UnicodeExtraFields  with  closing  file  name. ");  close();  }	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closing    file    name   ");    close();    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
567	[BUG]  [BUGGY]  if(inf.close())  {  in.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(inf.close())  {  in.close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(inf.close())  {  in.close();  }	  in.close();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
568	[BUG]  [BUGGY]  if(inf.isEnabled())  {  in.close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(inf.isEnabled())  {  in.close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(inf.isEnabled())  {  in.close();  }	  in.close();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
569	[BUG]  [BUGGY]  if(inf.isInputStream())  {  in.close();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(inf.isInputStream())  {  in.close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(inf.isInputStream())  {  in.close();  }	  in.close();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
570	[BUG]  [BUGGY]  SecureBoundedEntry  <  Void,  V>  inf  =  this.entryEncoding.getInputFile();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  SecureBoundedEntry  <  Void,  V>  inf  =  this.entryEncoding.getInputFile();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	SecureBoundedEntry  <  Void,  V>  inf  =  this.entryEncoding.getInputFile();	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
571	[BUG]  [BUGGY]  SecureBoundedEntry  <  Void,  V>  inf  =  entryEncoding.openByte();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  SecureBoundedEntry  <  Void,  V>  inf  =  entryEncoding.openByte();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	SecureBoundedEntry  <  Void,  V>  inf  =  entryEncoding.openByte();	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
572	[BUG]  [BUGGY]  SecureBoundedEntry  <  Void,  V>  inf  =  entryEncoding.openByteArray();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  SecureBoundedEntry  <  Void,  V>  inf  =  entryEncoding.openByteArray();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	SecureBoundedEntry  <  Void,  V>  inf  =  entryEncoding.openByteArray();	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
573	[BUG]  [BUGGY]  closeEntry();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closeEntry();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closeEntry();	  close();    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
574	[BUG]  [BUGGY]  if(inf!=  null)  {  close();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(inf!=  null)  {  close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(inf!=  null)  {  close();  }	  close();    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
575	[BUG]  [BUGGY]  if(inf!=  null)  {  close();  }  else  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(inf!=  null)  {  close();  }  else  {  inf.close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(inf!=  null)  {  close();  }  else  {  inf.close();  }	  close();    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
576	[BUG]  [BUGGY]  if(inf.length  >  0)  {  close();  }  else  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(inf.length  >  0)  {  close();  }  else  {  inf.close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(inf.length  >  0)  {  close();  }  else  {  inf.close();  }	  close();    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
577	[BUG]  [BUGGY]  if(inf!=  null)  {  close();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(inf!=  null)  {  close();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(inf!=  null)  {  close();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }	  close();    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
578	[BUG]  [BUGGY]  if(inf.isEnabled())  {  close();  }  else  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(inf.isEnabled())  {  close();  }  else  {  inf.close();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(inf.isEnabled())  {  close();  }  else  {  inf.close();  }	  close();    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
579	[BUG]  [BUGGY]  if(inf!=  null)  {  close();  }  else  {  inf  =  new  ZipArchiveEntry(inf.getValue());  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(inf!=  null)  {  close();  }  else  {  inf  =  new  ZipArchiveEntry(inf.getValue());  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(inf!=  null)  {  close();  }  else  {  inf  =  new  ZipArchiveEntry(inf.getValue());  }	  close();    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
580	[BUG]  [BUGGY]  this.entryEncoding.closeEntry();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  this.entryEncoding.closeEntry();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	this.entryEncoding.closeEntry();	  ze.close();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
581	[BUG]  [BUGGY]  CloseEntry  <  K,  V>  inf  =  null;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  K,  V>  inf  =  null;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  K,  V>  inf  =  null;	  close    =    true;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
582	[BUG]  [BUGGY]  CloseEntry  entry  =  null;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  entry  =  null;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  entry  =  null;	  close    =    true;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
583	[BUG]  [BUGGY]  CloseEntry  entry  =  new  CloseEntry(inf);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  entry  =  new  CloseEntry(inf);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  entry  =  new  CloseEntry(inf);	  close    =    true;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
584	[BUG]  [BUGGY]  closure  =  new  LinkedHashMap  <  String,Object>();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  =  new  LinkedHashMap  <  String,Object>();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  =  new  LinkedHashMap  <  String,Object>();	  closure    =    null;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
585	[BUG]  [BUGGY]  closure  =  new  LinkedList  <  ZipEncoding>();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  =  new  LinkedList  <  ZipEncoding>();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  =  new  LinkedList  <  ZipEncoding>();	  closure    =    null;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
586	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(inf,  false));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(inf,  false));  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(inf,  false));	  closure    |=    JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(inf));    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
587	[BUG]  [BUGGY]  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtra  fields  closed: "  +  ioe);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtra  fields  closed: "  +  ioe);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtra  fields  closed: "  +  ioe);	  Closed    =    false;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
588	[BUG]  [BUGGY]  Inflater  inf  =  this.ze.getInputStream();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  inf  =  this.ze.getInputStream();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  inf  =  this.ze.getInputStream();	  Inflater    inf    =    ze.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
589	[BUG]  [BUGGY]  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "Unclosed  entry: "  +  ioe);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "Unclosed  entry: "  +  ioe);  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "Unclosed  entry: "  +  ioe);  }	  Closed    =    false;    }    catch(IOException    ioe)    {    System.err.println(   "Unclosed    entry:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
590	[BUG]  [BUGGY]  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "Can  not  close  closed  entry: "  +  ioe);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "Can  not  close  closed  entry: "  +  ioe);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "Can  not  close  closed  entry: "  +  ioe);	  Closed    =    false;    }    catch(IOException    ioe)    {    System.err.println(   "Unclosed    entry:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
591	[BUG]  [BUGGY]  InputStream  inf  =  getInputStream(-1);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  InputStream  inf  =  getInputStream(-1);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	InputStream  inf  =  getInputStream(-1);	  InputStream    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
592	[BUG]  [BUGGY]  InputStream  inf  =  getInputStream(inputStream);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  InputStream  inf  =  getInputStream(inputStream);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	InputStream  inf  =  getInputStream(inputStream);	  InputStream    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
593	[BUG]  [BUGGY]  SecureRandomAccessor.this.closeEntry(inf);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  SecureRandomAccessor.this.closeEntry(inf);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	SecureRandomAccessor.this.closeEntry(inf);	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    in.getValue());    close();    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
594	[BUG]  [BUGGY]  SecureRandomAccessor.this.closeEntry(inf,  entryEncoding);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  SecureRandomAccessor.this.closeEntry(inf,  entryEncoding);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	SecureRandomAccessor.this.closeEntry(inf,  entryEncoding);	  Closed    =    true;    }    else    if(closed)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    in.getValue());    close();    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
595	[BUG]  [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.cloneTree());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.cloneTree());  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.cloneTree());	  CloseEntry    <    K,    V>    inf    =    new    CloseEntry    <    K,    V>(inf);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
596	[BUG]  [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.cloneTwin());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.cloneTwin());  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.cloneTwin());	  CloseEntry    <    K,    V>    inf    =    new    CloseEntry    <    K,    V>(inf);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
597	[BUG]  [BUGGY]  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "JikeExtraFields  with  closed  entry: "  +  ioe);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "JikeExtraFields  with  closed  entry: "  +  ioe);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "JikeExtraFields  with  closed  entry: "  +  ioe);	  Closed    =    false;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
598	[BUG]  [BUGGY]  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields  closed  entry: "  +  ioe);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields  closed  entry: "  +  ioe);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields  closed  entry: "  +  ioe);	  Closed    =    false;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    entry:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
599	[BUG]  [BUGGY]  closure  =  new  File(inf.getAbsolutePath());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  =  new  File(inf.getAbsolutePath());  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  =  new  File(inf.getAbsolutePath());	  closure    =   "   ";    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
600	[BUG]  [BUGGY]  closure  =  new  java.util.ArrayList  <  ZipEntry>();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  =  new  java.util.ArrayList  <  ZipEntry>();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  =  new  java.util.ArrayList  <  ZipEntry>();	  closure    =   "   ";    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
601	[BUG]  [BUGGY]  shutting  down();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  shutting  down();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	shutting  down();	  shutdown    =    true;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
602	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)inf.clone();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
603	[BUG]  [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(entry  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
604	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entries.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  entries.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  entries.size();  ++i)  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)entry.clone();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)inf.clone();    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
605	[BUG]  [BUGGY]  closeEntry  =  Inflater.getInstance();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closeEntry  =  Inflater.getInstance();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closeEntry  =  Inflater.getInstance();	  closed    =    Inflater.getInstance();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
606	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  zipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue());  entry.closeEntry();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
607	[BUG]  [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue()  +  entry.getName());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue()  +  entry.getName());  entry.closeEntry();  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(entry!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf.getValue()  +  entry.getName());  entry.closeEntry();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    ZipArchiveEntry    entry    =    new    ZipArchiveEntry(inf.getValue());    entry.closeEntry();    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
608	[BUG]  [BUGGY]  closed  =  new  ArrayList  <  ZipEncoding>(encoding);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  =  new  ArrayList  <  ZipEncoding>(encoding);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  =  new  ArrayList  <  ZipEncoding>(encoding);	  closed    =    new    ArrayList    <    ZipEncoding>();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
609	[BUG]  [BUGGY]  if(closed)  {  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields  closed: "  +  ioe);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(closed)  {  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields  closed: "  +  ioe);  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(closed)  {  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields  closed: "  +  ioe);  }	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
610	[BUG]  [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "JavaExtraFields  closed: "  +  ioe);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "JavaExtraFields  closed: "  +  ioe);  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "JavaExtraFields  closed: "  +  ioe);  }	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
611	[BUG]  [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  closed);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  closed);  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  closed);  }	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
612	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-8 ",  new  String[]  {   "null "  }  );  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-8 ",  new  String[]  {   "null "  }  );  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-8 ",  new  String[]  {   "null "  }  );	  closure    |=    JsonStringEncoder.getInstance().encodeAsString(   "UTF-8   ",   "null   ");    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
613	[BUG]  [BUGGY]  closeEntry  =  new  java.util.ArrayList  <  ZipArchiveEntry>();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closeEntry  =  new  java.util.ArrayList  <  ZipArchiveEntry>();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closeEntry  =  new  java.util.ArrayList  <  ZipArchiveEntry>();	  closed    =    new    java.util.ArrayList    <    ZipArchiveEntry>();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
614	[BUG]  [BUGGY]  closed  =  new  java.util.ArrayList  <  ZipArchiveEntry>(4);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  =  new  java.util.ArrayList  <  ZipArchiveEntry>(4);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  =  new  java.util.ArrayList  <  ZipArchiveEntry>(4);	  closed    =    new    java.util.ArrayList    <    ZipArchiveEntry>();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
615	[BUG]  [BUGGY]  closed  =  new  java.util.ArrayList  <  ZipArchiveEntry>(inf.length);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  =  new  java.util.ArrayList  <  ZipArchiveEntry>(inf.length);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  =  new  java.util.ArrayList  <  ZipArchiveEntry>(inf.length);	  closed    =    new    java.util.ArrayList    <    ZipArchiveEntry>();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
616	[BUG]  [BUGGY]  if(closed)  {  Closed  =  false;  }  else  {  System.err.println( "UnicodeExtraFields  closed  file  name: "  +  ioe.getMessage());  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(closed)  {  Closed  =  false;  }  else  {  System.err.println( "UnicodeExtraFields  closed  file  name: "  +  ioe.getMessage());  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(closed)  {  Closed  =  false;  }  else  {  System.err.println( "UnicodeExtraFields  closed  file  name: "  +  ioe.getMessage());  }	  Closed    =    false;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    file    name:   "    +    ioe.getMessage());    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
617	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.encode(zipEncoding);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  inf  =  entryEncoding.encode(zipEncoding);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  inf  =  entryEncoding.encode(zipEncoding);	  Inflater    inf    =    entryEncoding.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
618	[BUG]  [BUGGY]  if(closed)  {  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields  with  closed  file  name: "  +  ioe.getMessage());  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(closed)  {  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields  with  closed  file  name: "  +  ioe.getMessage());  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(closed)  {  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields  with  closed  file  name: "  +  ioe.getMessage());  }	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    file    name:   "    +    ioe.getMessage());    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
619	[BUG]  [BUGGY]  Closed  =  false;  ioe.println( "UnicodeExtraFields  with  closed  file  name: "  +  ioe.getMessage());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  false;  ioe.println( "UnicodeExtraFields  with  closed  file  name: "  +  ioe.getMessage());  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  false;  ioe.println( "UnicodeExtraFields  with  closed  file  name: "  +  ioe.getMessage());	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    file    name:   "    +    ioe.getMessage());    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
620	[BUG]  [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "JikeExtraFields  with  closed  file  name: "  +  ioe.getMessage());  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "JikeExtraFields  with  closed  file  name: "  +  ioe.getMessage());  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(closed)  {  Closed  =  true;  }  else  {  System.err.println( "JikeExtraFields  with  closed  file  name: "  +  ioe.getMessage());  }	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    file    name:   "    +    ioe.getMessage());    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
621	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-16 ");  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-16 ");  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-16 ");	  closure    |=    JsonStringEncoder.getInstance().encodeAsString(   "UTF-8   ");    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
622	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-8 ",  inf);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-8 ",  inf);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsString( "UTF-8 ",  inf);	  closure    |=    JsonStringEncoder.getInstance().encodeAsString(   "UTF-8   ");    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
623	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString(ENCODING_UNKNOWN);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsString(ENCODING_UNKNOWN);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsString(ENCODING_UNKNOWN);	  closure    |=    JsonStringEncoder.getInstance().encodeAsString(   "UTF-8   ");    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
624	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsZip64(zip64);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsZip64(zip64);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsZip64(zip64);	  closure    |=    JsonStringEncoder.getInstance().encodeAsZip64(entriesZip64);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
625	[BUG]  [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.getMethod());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.getMethod());  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  K,  V>  inf  =  new  CloseEntry  <  K,  V>(inf.getMethod());	  CloseEntry    <    K,    V>    inf    =    new    CloseEntry    <    K,    V>(inf.next());    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
626	[BUG]  [BUGGY]  closeEntry  =  new  java.util.ArrayList  <  ZipEntry>();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closeEntry  =  new  java.util.ArrayList  <  ZipEntry>();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closeEntry  =  new  java.util.ArrayList  <  ZipEntry>();	  closed    =    new    java.util.ArrayList    <    ZipEntry>();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
627	[BUG]  [BUGGY]  closed  =  new  java.util.ArrayList  <  ZipEntry>(inf.length);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  =  new  java.util.ArrayList  <  ZipEntry>(inf.length);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  =  new  java.util.ArrayList  <  ZipEntry>(inf.length);	  closed    =    new    java.util.ArrayList    <    ZipEntry>();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
628	[BUG]  [BUGGY]  closed  =  new  java.util.ArrayList  <  ZipEntry>(4);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  =  new  java.util.ArrayList  <  ZipEntry>(4);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  =  new  java.util.ArrayList  <  ZipEntry>(4);	  closed    =    new    java.util.ArrayList    <    ZipEntry>();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
629	[BUG]  [BUGGY]  closed  =  new  java.util.ArrayList  <  ZipEntry>(2);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closed  =  new  java.util.ArrayList  <  ZipEntry>(2);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closed  =  new  java.util.ArrayList  <  ZipEntry>(2);	  closed    =    new    java.util.ArrayList    <    ZipEntry>();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
630	[BUG]  [BUGGY]  closeEntry  =  null;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closeEntry  =  null;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closeEntry  =  null;	  fermeture    =    true;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
631	[BUG]  [BUGGY]  closeEntry  =  false;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closeEntry  =  false;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closeEntry  =  false;	  fermeture    =    true;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
632	[BUG]  [BUGGY]  closeEntry  =  new  byte[inf.length()  ];  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closeEntry  =  new  byte[inf.length()  ];  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closeEntry  =  new  byte[inf.length()  ];	  closed    =    new    byte[inf.length()    ];    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
633	[BUG]  [BUGGY]  close  =  new  LinkedHashMap  <  String,ZipArchiveEntry>();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  close  =  new  LinkedHashMap  <  String,ZipArchiveEntry>();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	close  =  new  LinkedHashMap  <  String,ZipArchiveEntry>();	  close    =    null;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
634	[BUG]  [BUGGY]  if(closed)  {  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields  with  closed  file  name: "  +  ioe);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  if(closed)  {  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields  with  closed  file  name: "  +  ioe);  }  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	if(closed)  {  Closed  =  true;  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields  with  closed  file  name: "  +  ioe);  }	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    with    closed    file    name:   "    +    ioe);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
635	[BUG]  [BUGGY]  closeEntry  =  new  java.util.ArrayList  <  ZipEncoding>();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closeEntry  =  new  java.util.ArrayList  <  ZipEncoding>();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closeEntry  =  new  java.util.ArrayList  <  ZipEncoding>();	  closed    =    new    java.util.ArrayList    <    ZipEncoding>();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
636	[BUG]  [BUGGY]  Closed  :  new  Runnable  <  ZipArchiveEntry>(inf);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  :  new  Runnable  <  ZipArchiveEntry>(inf);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  :  new  Runnable  <  ZipArchiveEntry>(inf);	  Closed    :    true;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
637	[BUG]  [BUGGY]  Closed  :  new  Runnable  <  ZipArchiveEntry>(inf.length));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  :  new  Runnable  <  ZipArchiveEntry>(inf.length));  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  :  new  Runnable  <  ZipArchiveEntry>(inf.length));	  Closed    :    true;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
638	[BUG]  [BUGGY]  Closed  :  new  Runnable  <  ZipArchiveEntry>(inf.length);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  :  new  Runnable  <  ZipArchiveEntry>(inf.length);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  :  new  Runnable  <  ZipArchiveEntry>(inf.length);	  Closed    :    true;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
639	[BUG]  [BUGGY]  Closed  :  new  Runnable  <  ZipArchiveEntry>(in);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  :  new  Runnable  <  ZipArchiveEntry>(in);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  :  new  Runnable  <  ZipArchiveEntry>(in);	  Closed    :    true;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
640	[BUG]  [BUGGY]  CloseEntry  <  TWO_EXP_32  ||  closeEntry  [Delete]  TWO_EXP_32;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  CloseEntry  <  TWO_EXP_32  ||  closeEntry  [Delete]  TWO_EXP_32;  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	CloseEntry  <  TWO_EXP_32  ||  closeEntry  [Delete]  TWO_EXP_32;	  CloseEntry    <    TWO_EXP_32    ||    closeEntry    >    TWO_EXP_32;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
641	[BUG]  [BUGGY]  Inflater  inf  =  getOutputFile().close();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Inflater  inf  =  getOutputFile().close();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Inflater  inf  =  getOutputFile().close();	  Inflater    inf    =    getOutputFile();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
642	[BUG]  [BUGGY]  SecureBoundedEntry  <  Object,  Branch>  inf  =  this.useUnicodeExtraFields.get(ioe);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  SecureBoundedEntry  <  Object,  Branch>  inf  =  this.useUnicodeExtraFields.get(ioe);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	SecureBoundedEntry  <  Object,  Branch>  inf  =  this.useUnicodeExtraFields.get(ioe);	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    ioe.getMessage());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
643	[BUG]  [BUGGY]  SecureBoundedEntry  <  Object,  Accessible>  inf  =  this.useUnicodeExtraFields.clone();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  SecureBoundedEntry  <  Object,  Accessible>  inf  =  this.useUnicodeExtraFields.clone();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	SecureBoundedEntry  <  Object,  Accessible>  inf  =  this.useUnicodeExtraFields.clone();	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    ioe.getMessage());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
644	[BUG]  [BUGGY]  SecureBoundedEntry  <  Object,  Branch>  inf  =  this.useUnicodeExtraFields.clone();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  SecureBoundedEntry  <  Object,  Branch>  inf  =  this.useUnicodeExtraFields.clone();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	SecureBoundedEntry  <  Object,  Branch>  inf  =  this.useUnicodeExtraFields.clone();	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    ioe.getMessage());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
645	[BUG]  [BUGGY]  SecureBoundedEntry  <  Object,  Accessible>  inf  =  this.useUnicodeExtraFields.get(ioe);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  SecureBoundedEntry  <  Object,  Accessible>  inf  =  this.useUnicodeExtraFields.get(ioe);  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	SecureBoundedEntry  <  Object,  Accessible>  inf  =  this.useUnicodeExtraFields.get(ioe);	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    ioe.getMessage());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
646	[BUG]  [BUGGY]  SecureBoundedEntry  <  Object,  Branch>  inf  =  this.useUnicodeExtraFields.get(ioe.getMessage());  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  SecureBoundedEntry  <  Object,  Branch>  inf  =  this.useUnicodeExtraFields.get(ioe.getMessage());  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	SecureBoundedEntry  <  Object,  Branch>  inf  =  this.useUnicodeExtraFields.get(ioe.getMessage());	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    ioe.getMessage());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
647	[BUG]  [BUGGY]  SecureBoundedEntry  <  Object,  Accessible>  inf  =  this.useUnicodeExtraFields.get( "closed ");  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  SecureBoundedEntry  <  Object,  Accessible>  inf  =  this.useUnicodeExtraFields.get( "closed ");  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	SecureBoundedEntry  <  Object,  Accessible>  inf  =  this.useUnicodeExtraFields.get( "closed ");	  Closed    =    true;    }    catch(IOException    ioe)    {    System.err.println(   "UnicodeExtraFields    closed:   "    +    ioe.getMessage());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
648	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().decodeAsBooleanValue( "UTF-8 "));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().decodeAsBooleanValue( "UTF-8 "));  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().decodeAsBooleanValue( "UTF-8 "));	  closure    |=    JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(   "UTF-8   "));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
649	[BUG]  [BUGGY]  Closed  =  new  Closed();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  Closed  =  new  Closed();  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	Closed  =  new  Closed();	  Closed    =    null;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
650	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBoolean( "UTF-8 ", "ISO-8859-1 ");  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBoolean( "UTF-8 ", "ISO-8859-1 ");  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsBoolean( "UTF-8 ", "ISO-8859-1 ");	  closure    =    true;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
651	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue( "UTF-8 ", "ISO-8859-1 ");  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue( "UTF-8 ", "ISO-8859-1 ");  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue( "UTF-8 ", "ISO-8859-1 ");	  closure    =    true;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
652	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBoolean( "UTF-8 ");  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBoolean( "UTF-8 ");  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsBoolean( "UTF-8 ");	  closure    =    true;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
653	[BUG]  [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue( "UTF-8 ");  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {      [BUGGY]  closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue( "UTF-8 ");  [BUGGY]      try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	550	550	1	replace	closure  |=  JsonStringEncoder.getInstance().encodeAsBooleanValue( "UTF-8 ");	  closure    =    true;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
