projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=true;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=false;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550close=false;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=false;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550shut=false;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure=false;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550close=true;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550shut=true;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed|=null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed:true;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550shutdown=true;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure=true;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550shut=null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550in.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550inf.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=(Inflater)in.clone();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=(Inflater)this.in.clone();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550InputStreaminf=getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(in!=null){in.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(false));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(inf));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean("UTF-8"));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue("UTF-8"));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean("UTF-8")));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(current));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newbyte[inf.length()];
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newjava.util.ArrayList<ZipArchiveEntry>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newjava.util.ArrayList<ZipEncoding>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newbyte[in.length()];
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=Inflater.getInstance();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newArrayList<ZipArchiveEntry>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed(true);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550close=null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newLinkedHashMap<String,Integer>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newjava.util.ArrayList<ZipEntry>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure=null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550fermeture=true;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure="";
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;}elseif(closed){System.err.println("UnicodeExtraFieldswithclosedinputstream");close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;}elseif(closed){System.err.println("UnicodeExtraFieldswithclosingfilename");close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;}elseif(closed){System.err.println("UnicodeExtraFieldswithclosedentry:"+in.getClass().getName());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;}elseif(closed){System.err.println("UnicodeExtraFieldswithclosedentry:"+in.getValue());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;}elseif(closed){System.err.println("UnicodeExtraFieldswithclosedentry:"+in.getValue());return;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;}elseif(closed){System.err.println("UnicodeExtraFieldswithclosedentry:"+in.getValue());close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed|=true;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed="";
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Close=true;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550ze.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=ze.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=getOutputFile();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=entryEncoding.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newArrayList<ZipEncoding>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(inf);close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(inf.length);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(inf.next());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<TWO_EXP_32||closeEntry>TWO_EXP_32;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldswithclosedfilename:"+ioe.getMessage());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldsclosed:"+ioe);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldswithclosedentry:"+ioe);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldswithclosedentry:"+ioe.getMessage());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldsclosed:"+ioe.getMessage());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldswithclosedfilename:"+ioe);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsString("UTF-8","ISO-8859-1");
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsString("UTF-8");
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsString("UTF-8").encodeAsString();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsString("UTF-8","null");
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsZip64(entriesZip64);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsIOException("Currententryhasbeenclosed");
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(inf!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(inf!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.get(i);if(entry.getMethod().equals(entry.getMethod())
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(inf!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.get(i);if(entry.getMethod().equals(entry.getMethod
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=false;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldswithclosedfilename:"+ioe.getMessage());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=false;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldsclosed:"+ioe);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=false;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldswithclosedentry:"+ioe);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=false;}catch(IOExceptionioe){System.err.println("Unclosedentry:"+ioe);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=false;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldswithclosedentry:"+ioe.getMessage());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=false;}catch(IOExceptionioe){System.err.println("UnicodeExtraFields:closed"+ioe);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550shutdown=false;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(entry!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(entry==null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(entry!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(entry!=null){for(inti=0;i<entry.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(inf!=null){for(inti=0;i<inputStream.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newjava.util.ArrayList<ZipEntry>(1);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550close=newjava.util.ArrayList<ZipEntry>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newjava.util.ArrayList<ZipEntry>(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550this.closed=newjava.util.ArrayList<ZipEntry>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newjava.util.ArrayList<ZipEntry>(in);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550shutdown=null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550shutting=false;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550shutting=true;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newjava.util.ArrayList<ZipArchiveEntry>(1);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newjava.util.ArrayList<ZipArchiveEntry>(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550close=newjava.util.ArrayList<ZipArchiveEntry>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550this.closed=newjava.util.ArrayList<ZipArchiveEntry>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newjava.util.ArrayList<ZipArchiveEntry>(in);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsString("UTF-8","UTF-8").encodeAsString();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsString("UTF-8_").encodeAsString();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsString("UTF-8",encoding).encodeAsString();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsString("UTF-8").encodeAsString(0);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsString("UTF-8").encodeAsString(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550close=this;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550close=newjava.util.ArrayList<ZipEncoding>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550close=newbyte[inf.length()];
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550close=newbyte[in.length()];
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;System.err.println("UnicodeExtraFieldswithclosedentry:"+ioe.getMessage());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(!closed){Closed=false;}else{System.err.println("UnicodeExtraFieldswithclosedentry:"+ioe.getMessage());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldswithoutclosedentry:"+ioe.getMessage());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newArrayList<String,Integer>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newLinkedHashMap<String,Integer>(inf.length);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newLinkedHashMap<String,Integer>(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newLinkedHashMap<String,Integer>(in.length);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newjava.util.ArrayList<String,Integer>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflater{Closed=true;}elseif(closed){System.err.println("UnicodeExtraFieldswithclosedinputstream");close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflater{Closed=false;}elseif(closed){System.err.println("UnicodeExtraFieldswithclosedinputstream");close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(in<null){Closed=true;}elseif(closed){System.err.println("UnicodeExtraFieldswithclosedinputstream");close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=false;}elseif(closed){System.err.println("UnicodeExtraFieldswithclosedinputstream");close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(!closed){Closed=true;}else{System.err.println("UnicodeExtraFieldswithclosedinputstream");close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflater{Closed=true;}elseif(closed){System.err.println("UnicodeExtraFieldswithclosedinputstream.");close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;}catch(IOExceptionioe){System.err.println("UnicodeExtraFields:closed"+ioe);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;System.err.println("UnicodeExtraFields:closed"+ioe);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;}catch(Exceptionioe){System.err.println("UnicodeExtraFields:closed"+ioe);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(closed){Closed=false;}else{System.err.println("UnicodeExtraFields:closed"+ioe);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=getOutputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=closeInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=this.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=this.inputStream;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=entry.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=entryEncoding.open();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=entryEncoding.openInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Context.checkState(!closed);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Close=false;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Close=null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Close:null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Close:false;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(in.isEnabled()){close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(in<null){close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(in!=null){close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(in<null){close();}else{in.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(in!=null){close();}else{in.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(in.read()>0){close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(inf!=null){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(inf!=null){inf.close();}else{thrownewIllegalStateException("");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(inf.length()>0){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(inf!=null){inf.close();}else{thrownewIllegalArgumentException("");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(inf==null){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure=newZipArchiveEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure=newjava.util.ArrayList<ZipArchiveEntry>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure=newjava.util.ArrayList<ZipEncoding>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure=newbyte[inf.length()];
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure=Inflater.getInstance();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure=newZipArchiveEntry(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsString("UTF-8","UTF-8");
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsString("UTF-8",encoding,"ISO-8859-1");
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550shut=newZipArchiveEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550shut=newjava.util.ArrayList<ZipArchiveEntry>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550shut=newjava.util.ArrayList<ZipEncoding>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550shut=newbyte[inf.length()];
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550shut=newZipInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550shut=newZipArchiveEntry(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(inf),false);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(inf),true);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(inf,0));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(inf),0);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(inf,true));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure=JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(inf));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed:false;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed:null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed:false;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed:FALSE;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=false;}elseif(closed){System.err.println("UnicodeExtraFieldswithclosedentry:"+in.getValue());return;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=false;}elseif(closed){System.err.println("ZipArchiveEntrywithclosedentry:"+in.getValue());return;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=false;}elseif(closed){System.err.println("UnicodeExtraFieldswithclosedentry:"+in.getKey());return;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=false;}elseif(closed){System.err.println("JavaExtraFieldswithclosedentry:"+in.getValue());return;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=false;}elseif(closed){System.err.println("UnicodeExtraFieldswithoutclosedentry:"+in.getValue());return;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(!closed){Closed=true;}else{System.err.println("UnicodeExtraFieldswithclosedentry:"+ioe.getMessage());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(closed){Closed=true;}else{System.err.println("UnicodeExtraFieldswithclosedentry:"+ioe.getMessage());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(!closed){Closed=true;}else{System.err.println("UnicodeExtraFieldswithoutclosedentry:"+ioe.getMessage());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(closed){Closed=true;}else{System.err.println("UnicodeExtraFieldswithoutclosedentry:"+ioe.getMessage());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=false;}elseif(closed){System.err.println("UnicodeExtraFieldswithclosedentry:"+in.getValue());close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflater{Closed=false;}elseif(closed){System.err.println("UnicodeExtraFieldswithclosedentry:"+in.getValue());close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(!closed){Closed=true;}else{System.err.println("UnicodeExtraFieldswithclosedentry:"+in.getValue());close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflater{Closed=false;}elseif(closed){System.err.println("JavaExtraFieldswithclosedentry:"+in.getValue());close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=false;}elseif(closed){System.err.println("UnicodeExtraFieldswithclosedentry:"+in.getKey());close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=false;}elseif(closed){System.err.println("ZipArchiveEntrywithclosedentry:"+in.getValue());close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;System.err.println("UnicodeExtraFieldswithclosedentry:"+ioe);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;}catch(Exceptionioe){System.err.println("UnicodeExtraFieldswithclosedentry:"+ioe);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldswithoutclosedentry:"+ioe);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsZip64(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsZip64(in);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsZip64(inf,entriesZip64);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsZip64(current);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsZip64(entriesZip64,entryEncoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsZip64(zipEncoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsZip64(outputStream);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed|=false;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed&=true;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed|=FALSE;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed|=!closed;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed|=false;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=newjava.util.ArrayList<ZipArchiveEntry>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=newjava.util.ArrayList<ZipEncoding>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=newjava.util.ArrayList<ZipArchiveEntry>(inf.length);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=newLinkedHashMap<String,Object>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(inf,closed);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(inf,entryEncoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(inf,ze);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(inf.getValue());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(inf,close);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(inf.getBytes());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newbyte[in.length()+1];
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newbyte[in.length()-1];
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newbyte[in.length()*2];
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newbyte[in.length()+2];
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(inf.length-1);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(inf.length+1);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(inf.length-1,inf.length);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(inf.length*2);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(inf.length-2);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(inf.length+2);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsString("UTF-8",encoding,"null");
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsString("UTF-8",null);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;}catch(IOExceptionioe){System.err.println("Unclosedentry:"+ioe);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;}catch(IOExceptionioe){System.err.println("Closedentry:"+ioe);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;System.err.println("Unclosedentry:"+ioe);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;}catch(IOExceptionioe){System.err.println("JSC_closedentry:"+ioe);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;}catch(IOExceptionioe){System.err.println("Failedtocloseentry:"+ioe);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=bis.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=entryEncoding.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=entryEncoding.openStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=this.entryEncoding.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=zipEncoding.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(current,true));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(current,false));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(current,0));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(current),false);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(current),true);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure=JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(current));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflater{Closed=true;}elseif(closed){System.err.println("UnicodeExtraFieldswithclosingfilename");close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflater{Closed=false;}elseif(closed){System.err.println("UnicodeExtraFieldswithclosingfilename");close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=false;}elseif(closed){System.err.println("UnicodeExtraFieldswithclosingfilename");close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflater{Closed=true;}elseif(allowStoredEntriesWithDataDescriptor){System.err.println("UnicodeExtraFieldswithclosingfilename");close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(!closed){Closed=true;}elseif(closed){System.err.println("UnicodeExtraFieldswithclosingfilename");close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(!closed){Closed=true;}else{System.err.println("UnicodeExtraFieldswithclosingfilename");close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=this;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=Inflater.getInstance();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=newArrayList<ZipArchiveEntry>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(in.close()){in.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550in.flush();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550InputStreambis=newZipInputStream(inf.length);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure=newZipArchiveEntry(inf.getLowerCase(),inf.getLowerCase());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure=newZipArchiveEntry(inf.getLength(),inf.getLength());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure=newZipArchiveEntry(inf.getValue(),inf.getLength());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure=System.currentTimeMillis();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure=newZipArchiveEntry(inf.getLength(),inf.getLength()+1);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure=newZipArchiveEntry(inf.length(),inf.length());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure=JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean("UTF-8"));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean(".UTF-8"));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean("US-ASCII"));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean("UTF-8_"));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed(false);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed(false,true);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed(false,false);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed(false,null);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed(false);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed(false,0);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=ZERO_EXP_32;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=ZERO_EXP_64;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=ZERO_EXP_WARNING;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=ZERO_EXP_WEEK;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=ZERO_EXP_31;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(in!=null){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550InputStreambis=null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550this.closed=newjava.util.ArrayList<ZipEncoding>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newjava.util.ArrayList<ZipEncoding>(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newjava.util.ArrayList<ZipEncoding>(in);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newjava.util.ArrayList<ZipEncoding>(inf.length);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=(Inflater)in.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=(int)in.clone();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=(Inflater)in.next();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=(Inflater)current.clone();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsString("UTF-8_");
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsString("UTF8");
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsString(ZipArchiveEntry.UTF8);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsString(JsonStringEncoder.UTF_8);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsString(ZipArchiveEntry.UTF_8);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550fermeture=false;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550fermeture=null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<TWO_EXP_32||closeEntry==TWO_EXP_32;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<TWO_EXP_32||closeEntry>=TWO_EXP_32;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<TWO_EXP_32||closeEntry!=TWO_EXP_32;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<TWO_EXP_32&&closeEntry>TWO_EXP_32;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<TWO_EXP_32||closeEntry>>TWO_EXP_32;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<TWO_EXP_32||closeEntry>TWO_EXP_32+1;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550ze.flush();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550this.entryEncoding.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550ze.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(entry==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getKey());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Entryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(entry!=null){for(inti=0;i<entry.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(entry!=null){for(inti=0;i<entriesRead.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(entry==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getKey());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=false;System.err.println("UnicodeExtraFieldswithclosedfilename:"+ioe);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(!closed){Closed=true;}else{System.err.println("UnicodeExtraFieldswithclosedfilename:"+ioe);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(closed){Closed=true;}else{System.err.println("UnicodeExtraFieldswithclosedfilename:"+ioe);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(closed){Closed=true;}else{System.err.println("UnicodeExtraFieldswithclosedfilename:"+fileName);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflater.println("UnicodeExtraFieldswithclosedfilename:"+ioe);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(closed){Closed=true;}else{System.err.println("UnicodeExtraFieldswithclosedfilename:"+zipEncoding);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=inputStream.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=currentEntry.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=entry.getEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=(Inflater)current.in.clone();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=(Inflater)super.in.clone();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=(int)this.in.clone();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=(Inflater)this.in.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newbyte[inf.length()+1];
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newbyte[inf.length()-1];
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newbyte[inf.length()*2];
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newbyte[inf.length()+2];
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=in.getInstance();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=Inflater.getInstance(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550close=Inflater.getInstance();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550inf=Inflater.getInstance();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=getInputFile();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=getOutputFile().getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=getOutputFile().getCharset();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=getOutputFile().openInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newLinkedList<ZipArchiveEntry>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newLinkedHashSet<ZipArchiveEntry>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newLinkedHashMap<ZipArchiveEntry>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(inf.next(),entryEncoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(inf.next(),closed);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(inf.close());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(inf.nextToken());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;System.err.println("UnicodeExtraFieldswithclosedfilename:"+ioe.getMessage());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(!closed){Closed=false;}else{System.err.println("UnicodeExtraFieldswithclosedfilename:"+ioe.getMessage());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(closed){Closed=false;}else{System.err.println("UnicodeExtraFieldswithclosedfilename:"+ioe.getMessage());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550SecureAssertionError.println("UnicodeExtraFieldsclosed:"+ioe.getMessage());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(closed){Closed=true;}else{System.err.println("UnicodeExtraFieldsclosed:"+ioe.getMessage());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(!closed){Closed=true;}else{System.err.println("UnicodeExtraFieldsclosed:"+ioe.getMessage());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=false;System.err.println("UnicodeExtraFieldsclosed:"+ioe.getMessage());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550InputStreaminf=getOutputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550InputStreaminf=getReadInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550InputStreaminf=getInputStream(outputBuffer);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550InputStreaminf=getInputStream(),bis;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550InputStreaminf=readInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550InputStreaminf=getInputStream(),bis);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed|=in;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed|=inf;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed|=Inflater.getInstance();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed|=Inflater.DEFAULT;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed|=in.read();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed|=ZERO;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550SecureAssertionError.println("UnicodeExtraFieldswithclosedfilename:"+ioe.getMessage());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(closed){Closed=true;}else{System.err.println("UnicodeExtraFieldswithclosedfilename:"+ioe.getMessage());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(!closed){Closed=true;}else{System.err.println("UnicodeExtraFieldswithclosedfilename:"+ioe.getMessage());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=false;System.err.println("UnicodeExtraFieldswithclosedfilename:"+ioe.getMessage());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(closed){Closed=true;}else{System.err.println("UnicodeExtraFieldswithclosedentry:"+ioe);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=false;System.err.println("UnicodeExtraFieldswithclosedentry:"+ioe);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflater.println("UnicodeExtraFieldswithclosedentry:"+ioe);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(closed){Closed=true;}else{System.err.println("UnicodeExtraFieldswithoutclosedentry:"+ioe);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(closed){Closed=true;}else{System.err.println("JavaExtraFieldswithclosedentry:"+ioe);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(closed){Closed=true;}else{System.err.println("UnicodeExtraFieldswithclosedentry:"+i);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(true));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure=JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(false));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(true,false));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(false,true));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(false,false));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure=JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(true));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newLinkedList<ZipEncoding>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newLinkedHashSet<ZipEncoding>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newArrayList<ZipEncoding>(inf.length);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure=JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean("UTF-8")));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean(".UTF-8")));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean("UTF-8_")));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean("US-ASCII")));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean("UTF8")));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(inf.length);close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(inf.clone());close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(inf.getValue());close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(inf.read());close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(inf.cloneTree());close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(inf.getBytes());close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(closed);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(1);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(null);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(current);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(closed){Closed=true;}else{System.err.println("UnicodeExtraFieldsclosed:"+ioe);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(!closed){Closed=true;}else{System.err.println("UnicodeExtraFieldsclosed:"+ioe);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=false;System.err.println("UnicodeExtraFieldsclosed:"+ioe);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(closed){Closed=true;}else{System.err.println("UnicodeExtraFieldsclosed:"+close);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;}catch(Exceptionioe){System.err.println("UnicodeExtraFieldsclosed:"+ioe);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;System.err.println("UnicodeExtraFieldsclosed:"+ioe);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(closed){Closed=false;}else{System.err.println("UnicodeExtraFieldsclosed:"+ioe);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(entry==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(entry==null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure=JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue("UTF-8"));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue("UTF-8_"));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue("US-ASCII"));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().urlEncodeAsBooleanValue("UTF-8"));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue("UTF-8")));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsIOException("ZipArchiveEntryhasbeenclosed");
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsIOException("Currententryhasbeenclosed.");
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsIOException("Currententryhasbeenclosed",in);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsIOException("ZipArchiveEntryhasbeenclosed.");
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsIOException("Currententryhasbeenclosed",ze);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(inf!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.get(i);if(entry.getMethod().equals(entry.getMetho
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(inf!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.get(i);if(entry.getMethod().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(entry!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.get(i);if(entry.getMethod().equals(entry.getMethod())
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(entry!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.get(i);if(entry.getMethod().equals(entry.getMetho
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(entry!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.get(i);if(entry.getMethod().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(inf!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.get(i);if(entry.getMethod().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(inf!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.get(i);if(entry.getMethod().equals(entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(inf==null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.get(i);if(entry.getMethod().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(entry!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.get(i);if(entry.getMethod().equals(entry.get
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=false;}elseif(closed){System.err.println("UnicodeExtraFieldswithclosedentry:"+in.getValue());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=false;}elseif(closed){System.err.println("ZipArchiveEntrywithclosedentry:"+in.getValue());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=false;}elseif(closed){System.err.println("JavaExtraFieldswithclosedentry:"+in.getValue());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=false;}elseif(closed){System.err.println("UnicodeExtraFieldswithclosedentry:"+in.getKey());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=false;}elseif(closed){System.err.println("UnicodeExtraFieldswithclosedentry:"+in.getValue());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(closed){Closed=true;}else{System.err.println("UnicodeExtraFieldsclosedfilename:"+ioe);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(closed){Closed=true;}else{System.err.println("UnicodeExtraFieldswithoutclosedfilename:"+ioe);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(entry!=null){for(inti=0;i<entry.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure=newLinkedHashMap<String,Integer>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;}catch(IOExceptionioe){System.err.println("UnicodeExtraFields:closed",ioe);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;}catch(IOExceptionioe){System.err.println("UnicodeExtraFields:closed."+ioe);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550SecureBoundedEntry<K,V>inf=entryEncoding.getValue();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550SecureBoundedEntry<K,V>inf=entry.getValue();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550SecureBoundedEntry<K,V>inf=entryEncoding.getInputFile();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550SecureBoundedEntry<K,V>inf=entryEncoding.openByteArrayEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550SecureBoundedEntry<K,V>inf=entryEncoding.openByteArray();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550SecureBoundedEntry<K,V>inf=entryEncoding.openByte(in);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;ioe.println("UnicodeExtraFieldswithclosedfilename:"+ioe.getMessage());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldswithoutclosedfilename:"+ioe.getMessage());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(closed){System.err.println("UnicodeExtraFieldswithclosingfilename");close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(closed){Closed=true;}else{System.err.println("UnicodeExtraFieldswithclosingfilename");close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsLongValue(false));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(false),0);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(in!=null){Closed=true;}elseif(closed){System.err.println("UnicodeExtraFieldswithclosedinputstream");close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(closed){Closed=true;}else{System.err.println("UnicodeExtraFieldswithclosedinputstream");close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(in!=null){Closed=true;}else{System.err.println("UnicodeExtraFieldswithclosedinputstream");close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=newjava.util.ArrayList<ZipEntry>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550InputStreaminf=getInputStream(bis);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550InputStreaminf=isEnabled(Feature.QUOTE_FIELD_NAMES);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550InputStreaminf=isEnabled(Feature.AUTO_CLOSE_ERROR);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=(Inflater)in.open();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=(Inflater)in.read();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(in!=null){close();}else{System.err.println("UnicodeExtraFieldsclosed");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(in!=null){close();}else{System.err.println("UnicodeExtraFieldswithclosedinputstream");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(in!=null){close();}else{thrownewIllegalStateException("");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(closed){Closed=true;}else{System.err.println("UnicodeExtraFieldsclosedfilename:"+ioe.getMessage());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(closed){Closed=true;}else{System.err.println("Failedtoclosefilename:"+ioe.getMessage());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newbyte[inf.length()+3];
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure=JsonStringEncoder.getInstance().encodeAsZip64(entriesZip64);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsZip64(entryEncoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsZip64(ze);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure=JsonStringEncoder.getInstance().encodeAsIOException("Currententryhasbeenclosed");
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsIOException("Surrententryhasbeenclosed");
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=(Inflater)closed.clone();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=(Inflater)this.in.getValue();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldswithcloseentry:"+ioe);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldswithclosedentry:n"+ioe);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=Inflater.getInstance(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=getOutputFileInput();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(inf!=null){inf.close();}else{System.err.println("UnicodeExtraFieldsclosed");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(inf!=null){inf.close();}else{System.err.println("UnicodeExtraFieldswithclosedinputstream");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(inf!=null){inf.close();}else{System.err.println("UnicodeExtraFieldswithclosedfilename");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(".UTF-8"));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue("UTF-16"));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550ShuffleInternal.closeAndClearBuffer(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550ShuffleInternal.this.closeEntry(inf,entryEncoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550ShuffleInternal.this.closeEntry(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550ShuffleInternal.this.closeEntry(inf,entryEncoding);shutdown=false;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550ShuffleInternal.closeAndClearBuffer(inf);shutdown=false;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550ShuffleInternal.this.closeEntry(inf);shutdown=false;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newjava.util.ArrayList<ZipEncoding>(encoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newjava.util.ArrayList<ZipEncoding>(1);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=newZipArchiveEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=bis.getOutputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=ze.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=bis.next();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsString("UTF-8","null",null);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(inf,closed));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550SecureBoundedEntry<Void,V>inf=entryEncoding.getValue();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=newClosedInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=closed;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=in;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure=JsonStringEncoder.getInstance().encodeAsString("UTF-8","ISO-8859-1");
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsString("UTF-8","US-8859-1");
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Close:true;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550SecureAssertionError.println("UnicodeExtraFieldsclosed:"+ioe);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(closed){Closed=true;}else{System.err.println("UnicodeExtraFieldsclosed:"+open);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(!closed){Closed=true;}else{System.err.println("JikeExtraFieldswithclosedentry:"+in.getValue());close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(!closed){Closed=true;}else{System.err.println("ZipArchiveEntrywithclosedentry:"+in.getValue());close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(!closed){Closed=true;}else{System.err.println("UnicodeExtraFieldswithoutclosedentry:"+in.getValue());close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(!closed){Closed=true;}else{System.err.println("UnicodeExtraFieldswithclosedentry:"+in.getKey());close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldsclosed:n"+ioe);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(inputStream!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.get(i);if(entry.getMethod().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(inputStream!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.get(i);if(entry.getMethod().equals(entry.getMetho
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean("UTF-16"));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(inf.next(),bis);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(inf.clone());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure=newStringBuffer();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure=newFileInputStream(inf.getAbsolutePath());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure=newFileInputStream(in.getAbsolutePath());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(inputStream==null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.get(i);if(entry.getMethod().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(inf!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.get(i);if(entry.getMethod().equals
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(inputStream!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.get(i);if(entry.getMethod().equals
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(entry!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.get(i);if(entry.getMethod().equals
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(inf,bis);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(inf,closing);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(inf,out);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(inf!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsString(ENCODING_STRING).encodeAsString();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsString(ENCODING).encodeAsString();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsString(ENCODING_UTF8).encodeAsString();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsString(ENCODING_UTF_8).encodeAsString();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsString("UTF-8").encodeAsText();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(inf,bis);close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(inf,closed);close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;}catch(IOExceptionioe){System.err.println("Unclosedentry:n"+ioe);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;}catch(IOExceptionioe){System.err.println("Cannotcloseentry:"+ioe);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550ze.close(in);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550ze.close(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean("UTF-16")));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean("UTF-8"))&&close);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newLinkedHashMap<ZipEncoding>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newLinkedList<String,Integer>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newArrayHashMap<String,Integer>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed:newRunnable<ZipArchiveEntry>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed:newHashMap<String,Integer>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed:newHashMap<String,Object>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed:newHashSet<String>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(2);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(inf.read());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(closed){Closed=true;}else{System.err.println("UnicodeExtraFieldsclosedentry:"+ioe);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(closed){Closed=true;}else{System.err.println("UnicodeExtraFieldswithclosedentry:"+close);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(closed){Closed=true;}else{System.err.println("UnicodeExtraFieldswithclosedentry:"+ze);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(inf.length+1,inf.length);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550shut=newBoundedInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550shut=newjava.util.ArrayList<ZipEntry>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550shut=newjava.sql.InputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newjava.util.ArrayList<ZipArchiveEntry>(2);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newjava.util.ArrayList<ZipArchiveEntry>(8);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=getInputStream(bis);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=getInputStream().close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=getInputStream(bis.length);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsString(ENCODING_UTF8);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsString(ENCODING);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsString(ENCODING_BUFFER);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsString(STRING_LITERAL_ENCODING);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsString(ENCODING_UTF_8);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550SecureAssertionError.println("UnicodeExtraFieldswithclosedentry:"+ioe.getMessage());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(closed){Closed=true;}else{System.err.println("UnicodeExtraFieldsclosedentry:"+ioe.getMessage());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(closed){Closed=true;}else{System.err.println("UnicodeExtraFieldswithclosedentry:"+ze.getMessage());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=entryEncoding.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(in==null){in.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550SecureRandomAccessor.closeEntry(inf,entryEncoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed|=closed;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed|=this;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed|=close;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed|=in.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure=false;System.err.println("Currententry'"+entry.getKey()+"'closed:"+entry.getValue());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure=false;System.err.println("Currententry'"+entry.getValue()+"'closed:"+entry.getValue());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure=false;System.err.println("Currententry'"+entry.getValue()+"'closed:"+entry.getKey());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure=false;System.err.println("Currententry'"+entry.getValue()+"'closed:"+entry.getByteBuffer());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure=false;System.err.println("Currententry'"+entry.getValue()+"'closed:"+entry.getName());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure=false;System.err.println("Currententry'"+entry.getKey()+"'closed:"+entry.getValue());in.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newArrayList<ZipArchiveEntry>(inf.length);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=false;ioe.println("UnicodeExtraFieldsclosed:"+ioe.getMessage());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550SecureAssertionError.println("Closed:"+ioe.getMessage());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550SecureAssertionError.println("Closedentry:"+ioe.getMessage());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550SecureAssertionError.println("Currententrynotclosed:"+ioe.getMessage());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldswithcloseentry:"+ioe.getMessage());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(entry!=null){for(inti=0;i<inputStream.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getKey());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(entry!=null){for(inti=0;i<entries.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(closed){System.err.println("UnicodeExtraFieldswithclosedinputstream");close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(closed){System.err.println("UnicodeExtraFieldswithclosedinputstream.");close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(closed){Closed=true;}else{System.err.println("UnicodeExtraFieldswithclosedinputstream.");close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(closed){Closed=true;}else{System.err.println("JikeExtraFieldswithclosedinputstream");close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(closed){Closed=true;}else{System.err.println("UnicodeExtraFieldsclosedininputstream");close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550shut=newLinkedList<ZipEncoding>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550shut=newjava.util.ArrayList();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance(),this.encodeAsBooleanValue(false));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(false),true);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed|=true;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newbyte[in.getBytes()];
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550SecureRandomAccessor.closeEntry(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550SecureZipEncoding.closeEntry(inf,entryEncoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550SecureRandomAccessor.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550SecureFileEntry.closeEntry(inf,entryEncoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550SecureZipEncoding.closeEntry(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550SecureBoundedEntry<Void,V>inf=entryEncoding.getInputFile();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550SecureBoundedEntry<?>closed=true;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550SecureBoundedEntry<Void,V>closed=true;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed(true,false);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=newLinkedHashMap<TWO_EXP_32,ZipArchiveEntry>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=newLinkedHashMap<String,ZipArchiveEntry>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=getZipArchiveEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean("UTF-8")||encodeAsBoolean("UTF-8")
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(entry!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.get(i);if(entry.getMethod().equals(entry.
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(entry!=null){for(inti=0;i<entry.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.get(i);if(entry.getMethod().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(entry!=null){for(inti=0;i<entries.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.get(i);if(entry.getMethod().equals(entry
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(inf!=null){in.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(inf==null){in.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(inferred!=null){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(inf.length>0){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(inf!=null){inf.close();}else{ZipArchiveEntryentry=newZipArchiveEntry(inf);entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(inf!=null){inf.close();}else{System.err.println("Failedtocloseentry.");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(inf!=null){inf.close();}else{buffer.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(inf.cloneTwin());close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(inf.next());close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=getInputStream(inputStream);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=getInputStream(-1);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550ClosedEntry<ZipArchiveEntry>closed=newClosedEntry<ZipArchiveEntry>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newArrayList<ZipArchiveEntry>(inf.size());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closeEntry=newLinkedList<ZipArchiveEntry>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsString(encoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsString(encoding,"UTF-8").encodeAsString();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsString(encoding).encodeAsString();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsString(ZipArchiveEntry.UTF8).encodeAsString();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsString(ZipArchiveEntry.UTF_8).encodeAsString();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsString("UTF-8",encoding,"UTF-8");
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(entry!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.get(i);if(entry.getMethod().equals(entry.getMeth
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(entry!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.get(i);if(entry.getMethod().equals(entry.getMethod
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(closed){Closed=false;}else{System.err.println("UnicodeExtraFieldswithclosedentry:"+ioe.getMessage());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;ioe.println("UnicodeExtraFieldswithclosedentry:"+ioe.getMessage());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(closed){Closed=false;}else{System.err.println("UnicodeExtraFieldswithclosedentry:"+ze.getMessage());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(closed){Closed=false;}else{System.err.println("UnicodeExtraFieldsclosedentry:"+ioe.getMessage());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(closed){Closed=false;}else{System.err.println("JikeExtraFieldsclosedentry:"+ze.getMessage());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(closed){Closed=true;}else{System.err.println("UnicodeExtraFieldsclosingfilename");close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(closed){System.err.println("UseUnicodeExtraFieldswithclosingfilename");close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(closed){System.err.println("UnicodeExtraFieldswithclosingfilename.");close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(inf.close()){in.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(inf.isEnabled()){in.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(inf.isInputStream()){in.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550SecureBoundedEntry<Void,V>inf=this.entryEncoding.getInputFile();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550SecureBoundedEntry<Void,V>inf=entryEncoding.openByte();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550SecureBoundedEntry<Void,V>inf=entryEncoding.openByteArray();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(inf!=null){close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(inf!=null){close();}else{inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(inf.length>0){close();}else{inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(inf!=null){close();}else{ZipArchiveEntryentry=newZipArchiveEntry(inf);entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(inf.isEnabled()){close();}else{inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(inf!=null){close();}else{inf=newZipArchiveEntry(inf.getValue());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550this.entryEncoding.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntryentry=null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntryentry=newCloseEntry(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure=newLinkedHashMap<String,Object>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure=newLinkedList<ZipEncoding>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(inf,false));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;}catch(IOExceptionioe){System.err.println("UnicodeExtrafieldsclosed:"+ioe);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=this.ze.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;}catch(IOExceptionioe){System.err.println("Unclosedentry:"+ioe);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;}catch(IOExceptionioe){System.err.println("Cannotcloseclosedentry:"+ioe);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550InputStreaminf=getInputStream(-1);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550InputStreaminf=getInputStream(inputStream);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550SecureRandomAccessor.this.closeEntry(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550SecureRandomAccessor.this.closeEntry(inf,entryEncoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(inf.cloneTree());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(inf.cloneTwin());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;}catch(IOExceptionioe){System.err.println("JikeExtraFieldswithclosedentry:"+ioe);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldsclosedentry:"+ioe);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure=newFile(inf.getAbsolutePath());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure=newjava.util.ArrayList<ZipEntry>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550shuttingdown();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(entry==null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(entry!=null){for(inti=0;i<entries.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)entry.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closeEntry=Inflater.getInstance();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(entry!=null){for(inti=0;i<inf.length;++i){zipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(entry!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue()+entry.getName());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newArrayList<ZipEncoding>(encoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(closed){Closed=true;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldsclosed:"+ioe);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(closed){Closed=true;}else{System.err.println("JavaExtraFieldsclosed:"+ioe);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(closed){Closed=true;}else{System.err.println("UnicodeExtraFieldsclosed:"+closed);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsString("UTF-8",newString[]{"null"});
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closeEntry=newjava.util.ArrayList<ZipArchiveEntry>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newjava.util.ArrayList<ZipArchiveEntry>(4);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newjava.util.ArrayList<ZipArchiveEntry>(inf.length);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(closed){Closed=false;}else{System.err.println("UnicodeExtraFieldsclosedfilename:"+ioe.getMessage());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=entryEncoding.encode(zipEncoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(closed){Closed=true;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldswithclosedfilename:"+ioe.getMessage());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=false;ioe.println("UnicodeExtraFieldswithclosedfilename:"+ioe.getMessage());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(closed){Closed=true;}else{System.err.println("JikeExtraFieldswithclosedfilename:"+ioe.getMessage());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsString("UTF-16");
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsString("UTF-8",inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsString(ENCODING_UNKNOWN);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsZip64(zip64);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(inf.getMethod());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closeEntry=newjava.util.ArrayList<ZipEntry>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newjava.util.ArrayList<ZipEntry>(inf.length);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newjava.util.ArrayList<ZipEntry>(4);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newjava.util.ArrayList<ZipEntry>(2);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closeEntry=null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closeEntry=false;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closeEntry=newbyte[inf.length()];
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550close=newLinkedHashMap<String,ZipArchiveEntry>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(closed){Closed=true;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldswithclosedfilename:"+ioe);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closeEntry=newjava.util.ArrayList<ZipEncoding>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed:newRunnable<ZipArchiveEntry>(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed:newRunnable<ZipArchiveEntry>(inf.length));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed:newRunnable<ZipArchiveEntry>(inf.length);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed:newRunnable<ZipArchiveEntry>(in);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<TWO_EXP_32||closeEntry[Delete]TWO_EXP_32;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=getOutputFile().close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550SecureBoundedEntry<Object,Branch>inf=this.useUnicodeExtraFields.get(ioe);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550SecureBoundedEntry<Object,Accessible>inf=this.useUnicodeExtraFields.clone();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550SecureBoundedEntry<Object,Branch>inf=this.useUnicodeExtraFields.clone();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550SecureBoundedEntry<Object,Accessible>inf=this.useUnicodeExtraFields.get(ioe);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550SecureBoundedEntry<Object,Branch>inf=this.useUnicodeExtraFields.get(ioe.getMessage());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550SecureBoundedEntry<Object,Accessible>inf=this.useUnicodeExtraFields.get("closed");
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().decodeAsBooleanValue("UTF-8"));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=newClosed();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBoolean("UTF-8","ISO-8859-1");
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBooleanValue("UTF-8","ISO-8859-1");
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBoolean("UTF-8");
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBooleanValue("UTF-8");
