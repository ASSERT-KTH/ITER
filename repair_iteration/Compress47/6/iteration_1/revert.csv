projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=true;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=false;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550close=false;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=false;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550shut=false;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure=false;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550close=true;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550shut=true;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed|=null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed:true;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550shutdown=true;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure=true;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550shut=null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550in.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550inf.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=(Inflater)in.clone();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=(Inflater)this.in.clone();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550InputStreaminf=getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(in!=null){in.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(false));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(inf));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean("UTF-8"));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue("UTF-8"));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBoolean(JsonStringEncoder.getInstance().encodeAsBoolean("UTF-8")));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(current));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newbyte[inf.length()];
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newjava.util.ArrayList<ZipArchiveEntry>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newjava.util.ArrayList<ZipEncoding>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newbyte[in.length()];
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=Inflater.getInstance();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newArrayList<ZipArchiveEntry>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed(true);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550close=null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newLinkedHashMap<String,Integer>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newjava.util.ArrayList<ZipEntry>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure=null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550fermeture=true;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure="";
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;}elseif(closed){System.err.println("UnicodeExtraFieldswithclosedinputstream");close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;}elseif(closed){System.err.println("UnicodeExtraFieldswithclosingfilename");close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;}elseif(closed){System.err.println("UnicodeExtraFieldswithclosedentry:"+in.getClass().getName());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;}elseif(closed){System.err.println("UnicodeExtraFieldswithclosedentry:"+in.getValue());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;}elseif(closed){System.err.println("UnicodeExtraFieldswithclosedentry:"+in.getValue());return;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;}elseif(closed){System.err.println("UnicodeExtraFieldswithclosedentry:"+in.getValue());close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed|=true;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed="";
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Close=true;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550ze.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=ze.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=getOutputFile();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Inflaterinf=entryEncoding.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closed=newArrayList<ZipEncoding>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(inf);close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(inf.length);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>(inf.next());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<K,V>inf=newCloseEntry<K,V>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550CloseEntry<TWO_EXP_32||closeEntry>TWO_EXP_32;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldswithclosedfilename:"+ioe.getMessage());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldsclosed:"+ioe);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldswithclosedentry:"+ioe);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldswithclosedentry:"+ioe.getMessage());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldsclosed:"+ioe.getMessage());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=true;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldswithclosedfilename:"+ioe);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsString("UTF-8","ISO-8859-1");
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsString("UTF-8");
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsString("UTF-8").encodeAsString();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsString("UTF-8","null");
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsZip64(entriesZip64);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550closure|=JsonStringEncoder.getInstance().encodeAsIOException("Currententryhasbeenclosed");
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=newZipArchiveEntry(inf.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(inf!=null){for(inti=0;i<inf.length;++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(inf!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.clone();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(inf!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.get(i);if(entry.getMethod().equals(entry.getMethod())
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550if(inf!=null){for(inti=0;i<inf.size();++i){ZipArchiveEntryentry=(ZipArchiveEntry)inf.get(i);if(entry.getMethod().equals(entry.getMethod
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=false;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldswithclosedfilename:"+ioe.getMessage());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=false;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldsclosed:"+ioe);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=false;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldswithclosedentry:"+ioe);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=false;}catch(IOExceptionioe){System.err.println("Unclosedentry:"+ioe);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=false;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldswithclosedentry:"+ioe.getMessage());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550Closed=false;}catch(IOExceptionioe){System.err.println("UnicodeExtraFields:closed"+ioe);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java550close();
