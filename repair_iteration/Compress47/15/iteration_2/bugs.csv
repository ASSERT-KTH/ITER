bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this.zipEncoding  =  ZipEncodingUtil.getZipEncoding(encoding,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.zipEncoding  =  ZipEncodingUtil.getZipEncoding(encoding,  useUnicodeExtraFields);  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.zipEncoding  =  ZipEncodingUtil.getZipEncoding(encoding,  useUnicodeExtraFields);	  this.zipEncoding    =    ZipEncodingUtil.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
2	[BUG]  [BUGGY]  this.zipEncoding  =  ZipEncodingUtil.getZipEncoding(encoding,  0);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.zipEncoding  =  ZipEncodingUtil.getZipEncoding(encoding,  0);  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.zipEncoding  =  ZipEncodingUtil.getZipEncoding(encoding,  0);	  this.zipEncoding    =    ZipEncodingUtil.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
3	[BUG]  [BUGGY]  this.zipEncoding  =  ZipEncodingUtil.getZipEncoding(encoding,  true);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.zipEncoding  =  ZipEncodingUtil.getZipEncoding(encoding,  true);  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.zipEncoding  =  ZipEncodingUtil.getZipEncoding(encoding,  true);	  this.zipEncoding    =    ZipEncodingUtil.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
4	[BUG]  [BUGGY]  this.zipEncoding  =  ZipEncodingUtil.getZipEncoding(encoding,  userUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.zipEncoding  =  ZipEncodingUtil.getZipEncoding(encoding,  userUnicodeExtraFields);  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.zipEncoding  =  ZipEncodingUtil.getZipEncoding(encoding,  userUnicodeExtraFields);	  this.zipEncoding    =    ZipEncodingUtil.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
5	[BUG]  [BUGGY]  this.zipEncoding  =  ZipEncodingUtil.getZipEncoding(encoding,  encoding);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.zipEncoding  =  ZipEncodingUtil.getZipEncoding(encoding,  encoding);  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.zipEncoding  =  ZipEncodingUtil.getZipEncoding(encoding,  encoding);	  this.zipEncoding    =    ZipEncodingUtil.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
6	[BUG]  [BUGGY]  this.zipEncoding  =  ZipEncodingUtil.getZipEncoding(encoding,  null);  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.zipEncoding  =  ZipEncodingUtil.getZipEncoding(encoding,  null);  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.zipEncoding  =  ZipEncodingUtil.getZipEncoding(encoding,  null);	  this.zipEncoding    =    ZipEncodingUtil.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
7	[BUG]  [BUGGY]  for(final  ZipArchiveEntry  entry  :  inputStream.getValues())  {  this.entry  =  entry.getValue();  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  for(final  ZipArchiveEntry  entry  :  inputStream.getValues())  {  this.entry  =  entry.getValue();  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	for(final  ZipArchiveEntry  entry  :  inputStream.getValues())  {  this.entry  =  entry.getValue();  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    entry    :    inputStream.getValues())    {    this.entry    =    entry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
8	[BUG]  [BUGGY]  final  ZipArchiveEntry  entry  =  inputStream.getValue();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  final  ZipArchiveEntry  entry  =  inputStream.getValue();  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	final  ZipArchiveEntry  entry  =  inputStream.getValue();	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    entry    :    inputStream.getValues())    {    this.entry    =    entry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
9	[BUG]  [BUGGY]  for(final  ZipArchiveEntry  entry  :  inputStream.getValues())  {  this.entry  =  entry.getKey();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  for(final  ZipArchiveEntry  entry  :  inputStream.getValues())  {  this.entry  =  entry.getKey();  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	for(final  ZipArchiveEntry  entry  :  inputStream.getValues())  {  this.entry  =  entry.getKey();  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    entry    :    inputStream.getValues())    {    this.entry    =    entry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
10	[BUG]  [BUGGY]  for(final  ZipArchiveEntry  entry  :  inputStream.getKeys())  {  this.entry  =  entry.getValue();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  for(final  ZipArchiveEntry  entry  :  inputStream.getKeys())  {  this.entry  =  entry.getValue();  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	for(final  ZipArchiveEntry  entry  :  inputStream.getKeys())  {  this.entry  =  entry.getValue();  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    entry    :    inputStream.getValues())    {    this.entry    =    entry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
11	[BUG]  [BUGGY]  for(final  ZipArchiveEntry  entry  :  inputStream.getChildren())  {  this.entry  =  entry.getValue();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  for(final  ZipArchiveEntry  entry  :  inputStream.getChildren())  {  this.entry  =  entry.getValue();  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	for(final  ZipArchiveEntry  entry  :  inputStream.getChildren())  {  this.entry  =  entry.getValue();  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    entry    :    inputStream.getValues())    {    this.entry    =    entry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
12	[BUG]  [BUGGY]  for(final  ZipArchiveEntry  entry  :  inputStream.getKey())  {  this.entry  =  entry.getValue();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  for(final  ZipArchiveEntry  entry  :  inputStream.getKey())  {  this.entry  =  entry.getValue();  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	for(final  ZipArchiveEntry  entry  :  inputStream.getKey())  {  this.entry  =  entry.getValue();  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    entry    :    inputStream.getValues())    {    this.entry    =    entry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
13	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	allowStoredEntriesWithDataDescriptor)  {  throw  new  IllegalStateException( " ");  }	  if(useUnicodeExtraFields)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
14	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  ||  useUnicodeExtraFields)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  allowStoredEntriesWithDataDescriptor  ||  useUnicodeExtraFields)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	allowStoredEntriesWithDataDescriptor  ||  useUnicodeExtraFields)  {  throw  new  IllegalStateException( " ");  }	  if(useUnicodeExtraFields)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
15	[BUG]  [BUGGY]  safeUseUnicodeExtraFields)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  safeUseUnicodeExtraFields)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	safeUseUnicodeExtraFields)  {  throw  new  IllegalStateException( " ");  }	  if(useUnicodeExtraFields)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
16	[BUG]  [BUGGY]  While(!useUnicodeExtraFields)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  While(!useUnicodeExtraFields)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	While(!useUnicodeExtraFields)  {  throw  new  IllegalStateException( " ");  }	  if(useUnicodeExtraFields)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
17	[BUG]  [BUGGY]  readFully(encoding,  useUnicodeExtraFields)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  readFully(encoding,  useUnicodeExtraFields)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	readFully(encoding,  useUnicodeExtraFields)  {  throw  new  IllegalStateException( " ");  }	  if(useUnicodeExtraFields)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
18	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  throw  new  IllegalStateException( " ".equals(encoding));  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  throw  new  IllegalStateException( " ".equals(encoding));  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	allowStoredEntriesWithDataDescriptor)  {  throw  new  IllegalStateException( " ".equals(encoding));  }	  if(useUnicodeExtraFields)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
19	[BUG]  [BUGGY]  safeUseUnicodeExtraFields())  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  safeUseUnicodeExtraFields())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	safeUseUnicodeExtraFields())  {  throw  new  IllegalStateException( " ");  }	  if(useUnicodeExtraFields)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
20	[BUG]  [BUGGY]  for(final  ZipArchiveEntry  <  String,  Object>  entry  :  inputStream.getEntries())  {  this.entry  =  entry;  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  for(final  ZipArchiveEntry  <  String,  Object>  entry  :  inputStream.getEntries())  {  this.entry  =  entry;  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	for(final  ZipArchiveEntry  <  String,  Object>  entry  :  inputStream.getEntries())  {  this.entry  =  entry;  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    String,    Object>    entry    :    inputStream.getEntries())    {    this.entry    =    entry;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
21	[BUG]  [BUGGY]  final  ZipArchiveEntry  <  String,  Object>  entry  :  inputStream.getEntries())  {  this.entry  =  entry;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  final  ZipArchiveEntry  <  String,  Object>  entry  :  inputStream.getEntries())  {  this.entry  =  entry;  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	final  ZipArchiveEntry  <  String,  Object>  entry  :  inputStream.getEntries())  {  this.entry  =  entry;  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    String,    Object>    entry    :    inputStream.getEntries())    {    this.entry    =    entry;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
22	[BUG]  [BUGGY]  if(useUnicodeExtraFields)  {  for(final  ZipArchiveEntry  <  final  String,  Object>  entry  :  inputStream.getEntries())  {  this.entry  =  entry;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  if(useUnicodeExtraFields)  {  for(final  ZipArchiveEntry  <  final  String,  Object>  entry  :  inputStream.getEntries())  {  this.entry  =  entry;  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	if(useUnicodeExtraFields)  {  for(final  ZipArchiveEntry  <  final  String,  Object>  entry  :  inputStream.getEntries())  {  this.entry  =  entry;  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    String,    Object>    entry    :    inputStream.getEntries())    {    this.entry    =    entry;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
23	[BUG]  [BUGGY]  final  ZipArchiveEntry  <  String,  Object>  entry  =  inputStream.getEntries();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  final  ZipArchiveEntry  <  String,  Object>  entry  =  inputStream.getEntries();  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	final  ZipArchiveEntry  <  String,  Object>  entry  =  inputStream.getEntries();	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    String,    Object>    entry    :    inputStream.getEntries())    {    this.entry    =    entry;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
24	[BUG]  [BUGGY]  if(useUnicodeExtraFields)  {  final  ZipArchiveEntry  <  String,  Object>  entry  :  inputStream.getEntries())  {  this.entry  =  entry;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  if(useUnicodeExtraFields)  {  final  ZipArchiveEntry  <  String,  Object>  entry  :  inputStream.getEntries())  {  this.entry  =  entry;  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	if(useUnicodeExtraFields)  {  final  ZipArchiveEntry  <  String,  Object>  entry  :  inputStream.getEntries())  {  this.entry  =  entry;  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    String,    Object>    entry    :    inputStream.getEntries())    {    this.entry    =    entry;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
25	[BUG]  [BUGGY]  for(final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getEntries())  {  this.entry  =  entry.getValue();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  for(final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getEntries())  {  this.entry  =  entry.getValue();  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	for(final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getEntries())  {  this.entry  =  entry.getValue();  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    entry    :    inputStream.getEntries())    {    this.entry    =    entry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
26	[BUG]  [BUGGY]  final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getEntries())  {  this.entry  =  entry.getValue();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getEntries())  {  this.entry  =  entry.getValue();  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getEntries())  {  this.entry  =  entry.getValue();  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    entry    :    inputStream.getEntries())    {    this.entry    =    entry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
27	[BUG]  [BUGGY]  final  ZipArchiveEntry  <  K,  V>  entry  =  inputStream.getEntries();  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  final  ZipArchiveEntry  <  K,  V>  entry  =  inputStream.getEntries();  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	final  ZipArchiveEntry  <  K,  V>  entry  =  inputStream.getEntries();	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    entry    :    inputStream.getEntries())    {    this.entry    =    entry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
28	[BUG]  [BUGGY]  if(useUnicodeExtraFields)  {  final  ZipArchiveEntry  <  K,  V>  entry  =  inputStream.getEntries();  this.entry  =  entry.getValue();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  if(useUnicodeExtraFields)  {  final  ZipArchiveEntry  <  K,  V>  entry  =  inputStream.getEntries();  this.entry  =  entry.getValue();  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	if(useUnicodeExtraFields)  {  final  ZipArchiveEntry  <  K,  V>  entry  =  inputStream.getEntries();  this.entry  =  entry.getValue();  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    entry    :    inputStream.getEntries())    {    this.entry    =    entry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
29	[BUG]  [BUGGY]  if(useUnicodeExtraFields)  {  for(final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getEntries())  {  this.entry  =  entry.getKey();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  if(useUnicodeExtraFields)  {  for(final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getEntries())  {  this.entry  =  entry.getKey();  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	if(useUnicodeExtraFields)  {  for(final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getEntries())  {  this.entry  =  entry.getKey();  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    entry    :    inputStream.getEntries())    {    this.entry    =    entry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
30	[BUG]  [BUGGY]  for(final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getValues())  {  this.entry  =  entry.getValue();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  for(final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getValues())  {  this.entry  =  entry.getValue();  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	for(final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getValues())  {  this.entry  =  entry.getValue();  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    entry    :    inputStream.getValues())    {    this.entry    =    entry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
31	[BUG]  [BUGGY]  final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getValues())  {  this.entry  =  entry.getValue();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getValues())  {  this.entry  =  entry.getValue();  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getValues())  {  this.entry  =  entry.getValue();  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    entry    :    inputStream.getValues())    {    this.entry    =    entry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
32	[BUG]  [BUGGY]  final  ZipArchiveEntry  <  K,  V>  entry  =  inputStream.getValue();  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  final  ZipArchiveEntry  <  K,  V>  entry  =  inputStream.getValue();  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	final  ZipArchiveEntry  <  K,  V>  entry  =  inputStream.getValue();	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    entry    :    inputStream.getValues())    {    this.entry    =    entry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
33	[BUG]  [BUGGY]  if(useUnicodeExtraFields)  {  for(final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getValues())  {  this.entry  =  entry.getKey();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  if(useUnicodeExtraFields)  {  for(final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getValues())  {  this.entry  =  entry.getKey();  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	if(useUnicodeExtraFields)  {  for(final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getValues())  {  this.entry  =  entry.getKey();  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    entry    :    inputStream.getValues())    {    this.entry    =    entry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
34	[BUG]  [BUGGY]  final  ZipArchiveEntry  <  K,  V>  entry  =  inputStream.getValues();  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  final  ZipArchiveEntry  <  K,  V>  entry  =  inputStream.getValues();  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	final  ZipArchiveEntry  <  K,  V>  entry  =  inputStream.getValues();	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    entry    :    inputStream.getValues())    {    this.entry    =    entry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
35	[BUG]  [BUGGY]  for(final  ZipArchiveEntry  <  K,  V>  current  :  inputStream.getValues())  {  this.current  =  current;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  for(final  ZipArchiveEntry  <  K,  V>  current  :  inputStream.getValues())  {  this.current  =  current;  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	for(final  ZipArchiveEntry  <  K,  V>  current  :  inputStream.getValues())  {  this.current  =  current;  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    current    :    inputStream.getValues())    {    this.current    =    current;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
36	[BUG]  [BUGGY]  final  ZipArchiveEntry  <  K,  V>  current  =  inputStream.getValues();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  final  ZipArchiveEntry  <  K,  V>  current  =  inputStream.getValues();  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	final  ZipArchiveEntry  <  K,  V>  current  =  inputStream.getValues();	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    current    :    inputStream.getValues())    {    this.current    =    current;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
37	[BUG]  [BUGGY]  final  ZipArchiveEntry  <  K,  V>  current  :  inputStream.getValues())  {  this.current  =  current;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  final  ZipArchiveEntry  <  K,  V>  current  :  inputStream.getValues())  {  this.current  =  current;  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	final  ZipArchiveEntry  <  K,  V>  current  :  inputStream.getValues())  {  this.current  =  current;  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    current    :    inputStream.getValues())    {    this.current    =    current;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
38	[BUG]  [BUGGY]  this.current  =  current;  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.current  =  current;  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.current  =  current;	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    current    :    inputStream.getValues())    {    this.current    =    current;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
39	[BUG]  [BUGGY]  this.current  =  inputStream.getValues();  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.current  =  inputStream.getValues();  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.current  =  inputStream.getValues();	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    current    :    inputStream.getValues())    {    this.current    =    current;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
40	[BUG]  [BUGGY]  for(final  ZipArchiveEntry  <  K,  V>  current  :  inputStream.getKeys())  {  this.current  =  current;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  for(final  ZipArchiveEntry  <  K,  V>  current  :  inputStream.getKeys())  {  this.current  =  current;  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	for(final  ZipArchiveEntry  <  K,  V>  current  :  inputStream.getKeys())  {  this.current  =  current;  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    current    :    inputStream.getValues())    {    this.current    =    current;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
41	[BUG]  [BUGGY]  for(final  ZipArchiveEntry  <  K,  V>  current  :  outputStream.getValues())  {  this.current  =  current;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  for(final  ZipArchiveEntry  <  K,  V>  current  :  outputStream.getValues())  {  this.current  =  current;  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	for(final  ZipArchiveEntry  <  K,  V>  current  :  outputStream.getValues())  {  this.current  =  current;  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    current    :    inputStream.getValues())    {    this.current    =    current;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
42	[BUG]  [BUGGY]  this.entry  =  entry.getValue()  +  1;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.entry  =  entry.getValue()  +  1;  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.entry  =  entry.getValue()  +  1;	  this.entry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
43	[BUG]  [BUGGY]  this.entry  =  entry.getEntry();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.entry  =  entry.getEntry();  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.entry  =  entry.getEntry();	  this.entry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
44	[BUG]  [BUGGY]  this.entry  =  inputStream.getValue();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.entry  =  inputStream.getValue();  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.entry  =  inputStream.getValue();	  this.entry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
45	[BUG]  [BUGGY]  this.entry  =  entry.getValue(),  encoding;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.entry  =  entry.getValue(),  encoding;  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.entry  =  entry.getValue(),  encoding;	  this.entry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
46	[BUG]  [BUGGY]  this.entry  =  entry.getValue()  -  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.entry  =  entry.getValue()  -  1;  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.entry  =  entry.getValue()  -  1;	  this.entry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
47	[BUG]  [BUGGY]  this.zipEncoding  =  ZipEncodingUtilities.getZipEncoding(encoding,  0);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.zipEncoding  =  ZipEncodingUtilities.getZipEncoding(encoding,  0);  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.zipEncoding  =  ZipEncodingUtilities.getZipEncoding(encoding,  0);	  this.zipEncoding    =    ZipEncodingUtilities.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
48	[BUG]  [BUGGY]  this.zipEncoding  =  ZipEncodingUtilities.getZipEncoding(encoding,  true);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.zipEncoding  =  ZipEncodingUtilities.getZipEncoding(encoding,  true);  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.zipEncoding  =  ZipEncodingUtilities.getZipEncoding(encoding,  true);	  this.zipEncoding    =    ZipEncodingUtilities.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
49	[BUG]  [BUGGY]  this.zipEncoding  =  ZipEncodingUtilities.getZipEncoding(encoding,  userUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.zipEncoding  =  ZipEncodingUtilities.getZipEncoding(encoding,  userUnicodeExtraFields);  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.zipEncoding  =  ZipEncodingUtilities.getZipEncoding(encoding,  userUnicodeExtraFields);	  this.zipEncoding    =    ZipEncodingUtilities.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
50	[BUG]  [BUGGY]  this.zipEncoding  =  ZipEncodingUtilities.getZipEncoding(encoding,  encoding);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.zipEncoding  =  ZipEncodingUtilities.getZipEncoding(encoding,  encoding);  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.zipEncoding  =  ZipEncodingUtilities.getZipEncoding(encoding,  encoding);	  this.zipEncoding    =    ZipEncodingUtilities.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
51	[BUG]  [BUGGY]  this.zipEncoding  =  ZipEncodingUtilities.getZipEncoding(encoding,  false);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.zipEncoding  =  ZipEncodingUtilities.getZipEncoding(encoding,  false);  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.zipEncoding  =  ZipEncodingUtilities.getZipEncoding(encoding,  false);	  this.zipEncoding    =    ZipEncodingUtilities.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
52	[BUG]  [BUGGY]  this.zipEncoding  =  ZipEncodingUtilities.getZipEncoding(encoding,  encoding,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.zipEncoding  =  ZipEncodingUtilities.getZipEncoding(encoding,  encoding,  useUnicodeExtraFields);  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.zipEncoding  =  ZipEncodingUtilities.getZipEncoding(encoding,  encoding,  useUnicodeExtraFields);	  this.zipEncoding    =    ZipEncodingUtilities.getZipEncoding(encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
53	[BUG]  [BUGGY]  this.zipEncoding  =  ZipEncodingUtilities.getZipEncoding(encoding,  encoding,  useUnicodeExtraFields,  false);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.zipEncoding  =  ZipEncodingUtilities.getZipEncoding(encoding,  encoding,  useUnicodeExtraFields,  false);  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.zipEncoding  =  ZipEncodingUtilities.getZipEncoding(encoding,  encoding,  useUnicodeExtraFields,  false);	  this.zipEncoding    =    ZipEncodingUtilities.getZipEncoding(encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
54	[BUG]  [BUGGY]  this.zipEncoding  =  ZipEncodingUtilities.getZipEncoding(encoding,  encoding,  useUnicodeExtraFields,  true);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.zipEncoding  =  ZipEncodingUtilities.getZipEncoding(encoding,  encoding,  useUnicodeExtraFields,  true);  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.zipEncoding  =  ZipEncodingUtilities.getZipEncoding(encoding,  encoding,  useUnicodeExtraFields,  true);	  this.zipEncoding    =    ZipEncodingUtilities.getZipEncoding(encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
55	[BUG]  [BUGGY]  this.zipEncoding  =  ZipEncodingUtilities.getZipEncoding(encoding,  useUnicodeExtraFields,  true);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.zipEncoding  =  ZipEncodingUtilities.getZipEncoding(encoding,  useUnicodeExtraFields,  true);  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.zipEncoding  =  ZipEncodingUtilities.getZipEncoding(encoding,  useUnicodeExtraFields,  true);	  this.zipEncoding    =    ZipEncodingUtilities.getZipEncoding(encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
56	[BUG]  [BUGGY]  this.zipEncoding  =  ZipEncodingUtilities.getZipEncoding(encoding,  useUnicodeExtraFields,  false);  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.zipEncoding  =  ZipEncodingUtilities.getZipEncoding(encoding,  useUnicodeExtraFields,  false);  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.zipEncoding  =  ZipEncodingUtilities.getZipEncoding(encoding,  useUnicodeExtraFields,  false);	  this.zipEncoding    =    ZipEncodingUtilities.getZipEncoding(encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
57	[BUG]  [BUGGY]  this.zipEncoding  =  encoding;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.zipEncoding  =  encoding;  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.zipEncoding  =  encoding;	  this.zipEncoding    =    zipEncoding;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
58	[BUG]  [BUGGY]  this.zipEncoding  =  new  ZipEncoding(encoding,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.zipEncoding  =  new  ZipEncoding(encoding,  useUnicodeExtraFields);  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.zipEncoding  =  new  ZipEncoding(encoding,  useUnicodeExtraFields);	  this.zipEncoding    =    zipEncoding;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
59	[BUG]  [BUGGY]  this.zipEncoding  =  new  ZipEncoding(encoding);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.zipEncoding  =  new  ZipEncoding(encoding);  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.zipEncoding  =  new  ZipEncoding(encoding);	  this.zipEncoding    =    zipEncoding;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
60	[BUG]  [BUGGY]  this.zipEncoding  =  ZipEncoding.DEFAULT_ZIP_ENCODING;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.zipEncoding  =  ZipEncoding.DEFAULT_ZIP_ENCODING;  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.zipEncoding  =  ZipEncoding.DEFAULT_ZIP_ENCODING;	  this.zipEncoding    =    zipEncoding;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
61	[BUG]  [BUGGY]  this.zipEncoding  =  new  ZipEncoding();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.zipEncoding  =  new  ZipEncoding();  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.zipEncoding  =  new  ZipEncoding();	  this.zipEncoding    =    zipEncoding;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
62	[BUG]  [BUGGY]  this.zipEncoding  =  CRC32.zipEncoding;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.zipEncoding  =  CRC32.zipEncoding;  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.zipEncoding  =  CRC32.zipEncoding;	  this.zipEncoding    =    zipEncoding;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
63	[BUG]  [BUGGY]  final  ZipArchiveEntry  entry  =  inputStream.getValues();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  final  ZipArchiveEntry  entry  =  inputStream.getValues();  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	final  ZipArchiveEntry  entry  =  inputStream.getValues();	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    entry    :    inputStream.getValues())    {    this.entry    =    entry.getKey();    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
64	[BUG]  [BUGGY]  for(final  ZipArchiveEntry  entry  :  inputStream.getValues())  {  this.encoding  =  entry.getKey();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  for(final  ZipArchiveEntry  entry  :  inputStream.getValues())  {  this.encoding  =  entry.getKey();  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	for(final  ZipArchiveEntry  entry  :  inputStream.getValues())  {  this.encoding  =  entry.getKey();  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    entry    :    inputStream.getValues())    {    this.entry    =    entry.getKey();    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
65	[BUG]  [BUGGY]  this.entry  =  new  ZipArchiveEntry(inputStream,  encoding,  useUnicodeExtraFields,  true);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.entry  =  new  ZipArchiveEntry(inputStream,  encoding,  useUnicodeExtraFields,  true);  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.entry  =  new  ZipArchiveEntry(inputStream,  encoding,  useUnicodeExtraFields,  true);	  this.entry    =    new    ZipArchiveEntry(inputStream,    encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
66	[BUG]  [BUGGY]  this.entry  =  new  ZipArchiveEntry(inputStream,  encoding,  useUnicodeExtraFields,  false);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.entry  =  new  ZipArchiveEntry(inputStream,  encoding,  useUnicodeExtraFields,  false);  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.entry  =  new  ZipArchiveEntry(inputStream,  encoding,  useUnicodeExtraFields,  false);	  this.entry    =    new    ZipArchiveEntry(inputStream,    encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
67	[BUG]  [BUGGY]  this.entry  =  new  ZipArchiveEntry(encoding,  inputStream,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.entry  =  new  ZipArchiveEntry(encoding,  inputStream,  useUnicodeExtraFields);  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.entry  =  new  ZipArchiveEntry(encoding,  inputStream,  useUnicodeExtraFields);	  this.entry    =    new    ZipArchiveEntry(inputStream,    encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
68	[BUG]  [BUGGY]  this.entry  =  new  ZipArchiveEntry(inputStream,  encoding,  useUnicodeExtraFields,  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.entry  =  new  ZipArchiveEntry(inputStream,  encoding,  useUnicodeExtraFields,  hasDataDescriptor);  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.entry  =  new  ZipArchiveEntry(inputStream,  encoding,  useUnicodeExtraFields,  hasDataDescriptor);	  this.entry    =    new    ZipArchiveEntry(inputStream,    encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
69	[BUG]  [BUGGY]  this.entry  =  new  ZipArchiveEntry(inputStream,  encoding,  0,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.entry  =  new  ZipArchiveEntry(inputStream,  encoding,  0,  useUnicodeExtraFields);  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.entry  =  new  ZipArchiveEntry(inputStream,  encoding,  0,  useUnicodeExtraFields);	  this.entry    =    new    ZipArchiveEntry(inputStream,    encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
70	[BUG]  [BUGGY]  this.entry  =  new  ZipArchiveEntry(inputStream,  encoding,  useUnicodeExtraFields,  isEnabled);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.entry  =  new  ZipArchiveEntry(inputStream,  encoding,  useUnicodeExtraFields,  isEnabled);  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.entry  =  new  ZipArchiveEntry(inputStream,  encoding,  useUnicodeExtraFields,  isEnabled);	  this.entry    =    new    ZipArchiveEntry(inputStream,    encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
71	[BUG]  [BUGGY]  new  ZipArchiveEntry(inputStream,  encoding,  useUnicodeExtraFields,  true);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  new  ZipArchiveEntry(inputStream,  encoding,  useUnicodeExtraFields,  true);  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	new  ZipArchiveEntry(inputStream,  encoding,  useUnicodeExtraFields,  true);	  new    ZipArchiveEntry(inputStream,    encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
72	[BUG]  [BUGGY]  new  ZipArchiveEntry(inputStream,  encoding,  useUnicodeExtraFields,  false);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  new  ZipArchiveEntry(inputStream,  encoding,  useUnicodeExtraFields,  false);  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	new  ZipArchiveEntry(inputStream,  encoding,  useUnicodeExtraFields,  false);	  new    ZipArchiveEntry(inputStream,    encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
73	[BUG]  [BUGGY]  new  ZipArchiveEntry(inputStream,  encoding,  useUnicodeExtraFields,  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  new  ZipArchiveEntry(inputStream,  encoding,  useUnicodeExtraFields,  hasDataDescriptor);  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	new  ZipArchiveEntry(inputStream,  encoding,  useUnicodeExtraFields,  hasDataDescriptor);	  new    ZipArchiveEntry(inputStream,    encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
74	[BUG]  [BUGGY]  new  ZipArchiveEntry(inputStream,  encoding,  useUnicodeExtraFields,  this);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  new  ZipArchiveEntry(inputStream,  encoding,  useUnicodeExtraFields,  this);  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	new  ZipArchiveEntry(inputStream,  encoding,  useUnicodeExtraFields,  this);	  new    ZipArchiveEntry(inputStream,    encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
75	[BUG]  [BUGGY]  new  ZipArchiveEntry(encoding,  inputStream,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  new  ZipArchiveEntry(encoding,  inputStream,  useUnicodeExtraFields);  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	new  ZipArchiveEntry(encoding,  inputStream,  useUnicodeExtraFields);	  new    ZipArchiveEntry(inputStream,    encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
76	[BUG]  [BUGGY]  new  ZipArchiveEntry(inputStream,  encoding,  useUnicodeExtraFields,  isEnabled);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  new  ZipArchiveEntry(inputStream,  encoding,  useUnicodeExtraFields,  isEnabled);  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	new  ZipArchiveEntry(inputStream,  encoding,  useUnicodeExtraFields,  isEnabled);	  new    ZipArchiveEntry(inputStream,    encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
77	[BUG]  [BUGGY]  final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getEntryList())  {  this.entry  =  entry;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getEntryList())  {  this.entry  =  entry;  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getEntryList())  {  this.entry  =  entry;  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    entry    :    inputStream.getEntryList())    {    this.entry    =    entry;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
78	[BUG]  [BUGGY]  for(final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getEntryList())  {  this.entry  =  entry;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  for(final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getEntryList())  {  this.entry  =  entry;  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	for(final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getEntryList())  {  this.entry  =  entry;  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    entry    :    inputStream.getEntryList())    {    this.entry    =    entry;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
79	[BUG]  [BUGGY]  final  ZipArchiveEntry  <  K,  V>  entry  =  inputStream.getEntryList();  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  final  ZipArchiveEntry  <  K,  V>  entry  =  inputStream.getEntryList();  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	final  ZipArchiveEntry  <  K,  V>  entry  =  inputStream.getEntryList();	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    entry    :    inputStream.getEntryList())    {    this.entry    =    entry;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
80	[BUG]  [BUGGY]  if(useUnicodeExtraFields)  {  final  ZipArchiveEntry  <  K,  V>  entry  =  inputStream.getEntryList();  for(final  ZipArchiveEntry  <  K,  V>  entry  :  entry.getValue())  {  this.entry  =  entry;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  if(useUnicodeExtraFields)  {  final  ZipArchiveEntry  <  K,  V>  entry  =  inputStream.getEntryList();  for(final  ZipArchiveEntry  <  K,  V>  entry  :  entry.getValue())  {  this.entry  =  entry;  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	if(useUnicodeExtraFields)  {  final  ZipArchiveEntry  <  K,  V>  entry  =  inputStream.getEntryList();  for(final  ZipArchiveEntry  <  K,  V>  entry  :  entry.getValue())  {  this.entry  =  entry;  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    entry    :    inputStream.getEntryList())    {    this.entry    =    entry;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
81	[BUG]  [BUGGY]  if(useUnicodeExtraFields)  {  final  ZipArchiveEntry  <  K,  V>  entry  =  inputStream.getEntryList();  for(final  ZipArchiveEntry  <  K,  V>  entry  :  entry.getKey())  {  this.entry  =  entry;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  if(useUnicodeExtraFields)  {  final  ZipArchiveEntry  <  K,  V>  entry  =  inputStream.getEntryList();  for(final  ZipArchiveEntry  <  K,  V>  entry  :  entry.getKey())  {  this.entry  =  entry;  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	if(useUnicodeExtraFields)  {  final  ZipArchiveEntry  <  K,  V>  entry  =  inputStream.getEntryList();  for(final  ZipArchiveEntry  <  K,  V>  entry  :  entry.getKey())  {  this.entry  =  entry;  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    entry    :    inputStream.getEntryList())    {    this.entry    =    entry;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
82	[BUG]  [BUGGY]  this.entry  =  entry.cloneTree();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.entry  =  entry.cloneTree();  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.entry  =  entry.cloneTree();	  this.entry    =    entry;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
83	[BUG]  [BUGGY]  this.entry  =  entry.cloneTarget();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.entry  =  entry.cloneTarget();  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.entry  =  entry.cloneTarget();	  this.entry    =    entry;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
84	[BUG]  [BUGGY]  this.entry  =  entry.toString();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.entry  =  entry.toString();  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.entry  =  entry.toString();	  this.entry    =    entry;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
85	[BUG]  [BUGGY]  this.entry  =  entry.inputStream;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.entry  =  entry.inputStream;  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.entry  =  entry.inputStream;	  this.entry    =    entry;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
86	[BUG]  [BUGGY]  this.in  =  new  ZipInputStream(inputStream,  encoding,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.in  =  new  ZipInputStream(inputStream,  encoding,  useUnicodeExtraFields);  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.in  =  new  ZipInputStream(inputStream,  encoding,  useUnicodeExtraFields);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
87	[BUG]  [BUGGY]  new  ZipArchiveEntry(inputStream,  encoding,  useUnicodeExtraFields));  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  new  ZipArchiveEntry(inputStream,  encoding,  useUnicodeExtraFields));  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	new  ZipArchiveEntry(inputStream,  encoding,  useUnicodeExtraFields));	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
88	[BUG]  [BUGGY]  for(final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getEntries())  {  this.entry  =  entry;  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  for(final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getEntries())  {  this.entry  =  entry;  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	for(final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getEntries())  {  this.entry  =  entry;  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    entry    :    inputStream.getEntries())    {    this.entry    =    entry;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
89	[BUG]  [BUGGY]  final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getEntries())  {  this.entry  =  entry;  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getEntries())  {  this.entry  =  entry;  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getEntries())  {  this.entry  =  entry;  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    entry    :    inputStream.getEntries())    {    this.entry    =    entry;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
90	[BUG]  [BUGGY]  if(useUnicodeExtraFields)  {  final  ZipArchiveEntry  <  K,  V>  entry  =  inputStream.getEntries();  for(final  ZipArchiveEntry  <  K,  V>  entry  :  entry.getValue())  {  this.entry  =  entry;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  if(useUnicodeExtraFields)  {  final  ZipArchiveEntry  <  K,  V>  entry  =  inputStream.getEntries();  for(final  ZipArchiveEntry  <  K,  V>  entry  :  entry.getValue())  {  this.entry  =  entry;  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	if(useUnicodeExtraFields)  {  final  ZipArchiveEntry  <  K,  V>  entry  =  inputStream.getEntries();  for(final  ZipArchiveEntry  <  K,  V>  entry  :  entry.getValue())  {  this.entry  =  entry;  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    entry    :    inputStream.getEntries())    {    this.entry    =    entry;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
91	[BUG]  [BUGGY]  if(useUnicodeExtraFields)  {  final  ZipArchiveEntry  <  K,  V>  entry  =  inputStream.getEntries();  for(final  ZipArchiveEntry  <  K,  V>  entry  :  entry.getKey())  {  this.entry  =  entry;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  if(useUnicodeExtraFields)  {  final  ZipArchiveEntry  <  K,  V>  entry  =  inputStream.getEntries();  for(final  ZipArchiveEntry  <  K,  V>  entry  :  entry.getKey())  {  this.entry  =  entry;  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	if(useUnicodeExtraFields)  {  final  ZipArchiveEntry  <  K,  V>  entry  =  inputStream.getEntries();  for(final  ZipArchiveEntry  <  K,  V>  entry  :  entry.getKey())  {  this.entry  =  entry;  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    entry    :    inputStream.getEntries())    {    this.entry    =    entry;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
92	[BUG]  [BUGGY]  if(useUnicodeExtraFields)  {  final  ZipArchiveEntry  <  K,  V>  entry  =  inputStream.getEntries();  for(final  ZipArchiveEntry  <  K,  V>  entry  :  entry.getEntries())  {  this.entry  =  entry;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  if(useUnicodeExtraFields)  {  final  ZipArchiveEntry  <  K,  V>  entry  =  inputStream.getEntries();  for(final  ZipArchiveEntry  <  K,  V>  entry  :  entry.getEntries())  {  this.entry  =  entry;  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	if(useUnicodeExtraFields)  {  final  ZipArchiveEntry  <  K,  V>  entry  =  inputStream.getEntries();  for(final  ZipArchiveEntry  <  K,  V>  entry  :  entry.getEntries())  {  this.entry  =  entry;  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    entry    :    inputStream.getEntries())    {    this.entry    =    entry;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
93	[BUG]  [BUGGY]  for(final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getEntrySet())  {  this.entry  =  entry.getValue();  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  for(final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getEntrySet())  {  this.entry  =  entry.getValue();  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	for(final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getEntrySet())  {  this.entry  =  entry.getValue();  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    entry    :    inputStream.getEntrySet())    {    this.entry    =    entry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
94	[BUG]  [BUGGY]  final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getEntrySet())  {  this.entry  =  entry.getValue();  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getEntrySet())  {  this.entry  =  entry.getValue();  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getEntrySet())  {  this.entry  =  entry.getValue();  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    entry    :    inputStream.getEntrySet())    {    this.entry    =    entry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
95	[BUG]  [BUGGY]  final  ZipArchiveEntry  <  K,  V>  entry  =  inputStream.getEntrySet();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  final  ZipArchiveEntry  <  K,  V>  entry  =  inputStream.getEntrySet();  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	final  ZipArchiveEntry  <  K,  V>  entry  =  inputStream.getEntrySet();	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    entry    :    inputStream.getEntrySet())    {    this.entry    =    entry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
96	[BUG]  [BUGGY]  for(final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getEntryList())  {  this.entry  =  entry.getValue();  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  for(final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getEntryList())  {  this.entry  =  entry.getValue();  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	for(final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getEntryList())  {  this.entry  =  entry.getValue();  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    entry    :    inputStream.getEntrySet())    {    this.entry    =    entry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
97	[BUG]  [BUGGY]  if(useUnicodeExtraFields)  {  final  ZipArchiveEntry  <  K,  V>  entry  =  inputStream.getEntrySet();  this.entry  =  entry.getValue();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  if(useUnicodeExtraFields)  {  final  ZipArchiveEntry  <  K,  V>  entry  =  inputStream.getEntrySet();  this.entry  =  entry.getValue();  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	if(useUnicodeExtraFields)  {  final  ZipArchiveEntry  <  K,  V>  entry  =  inputStream.getEntrySet();  this.entry  =  entry.getValue();  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    entry    :    inputStream.getEntrySet())    {    this.entry    =    entry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
98	[BUG]  [BUGGY]  this.entry  =  entry.getKey(),  encoding;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.entry  =  entry.getKey(),  encoding;  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.entry  =  entry.getKey(),  encoding;	  this.entry    =    entry.getKey();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
99	[BUG]  [BUGGY]  this.entry  =  entry.getKey()  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.entry  =  entry.getKey()  +  1;  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.entry  =  entry.getKey()  +  1;	  this.entry    =    entry.getKey();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
100	[BUG]  [BUGGY]  this.entry  =  entry.getKey()  +  encoding;  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.entry  =  entry.getKey()  +  encoding;  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.entry  =  entry.getKey()  +  encoding;	  this.entry    =    entry.getKey();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
101	[BUG]  [BUGGY]  this.entry  =  inputStream.getKey();  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.entry  =  inputStream.getKey();  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.entry  =  inputStream.getKey();	  this.entry    =    entry.getKey();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
102	[BUG]  [BUGGY]  this.zipEncoding  =  useUnicodeExtraFields;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.zipEncoding  =  useUnicodeExtraFields;  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.zipEncoding  =  useUnicodeExtraFields;	  this.zipEncoding    =    zipEncoding;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
103	[BUG]  [BUGGY]  this.zipEncoding  =  useUnicodeExtraFields?  zipEncoding  :  null;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.zipEncoding  =  useUnicodeExtraFields?  zipEncoding  :  null;  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.zipEncoding  =  useUnicodeExtraFields?  zipEncoding  :  null;	  this.zipEncoding    =    zipEncoding;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
104	[BUG]  [BUGGY]  this.zipEncoding  =  zipEncoding  +  useUnicodeExtraFields;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.zipEncoding  =  zipEncoding  +  useUnicodeExtraFields;  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.zipEncoding  =  zipEncoding  +  useUnicodeExtraFields;	  this.zipEncoding    =    zipEncoding;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
105	[BUG]  [BUGGY]  this.zipEncoding  =  encodeZipEncoding(useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.zipEncoding  =  encodeZipEncoding(useUnicodeExtraFields);  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.zipEncoding  =  encodeZipEncoding(useUnicodeExtraFields);	  this.zipEncoding    =    zipEncoding;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
106	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptor)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  if(!allowStoredEntriesWithDataDescriptor)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	if(!allowStoredEntriesWithDataDescriptor)  {  throw  new  IllegalStateException( " ");  }	  if(useUnicodeExtraFields)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
107	[BUG]  [BUGGY]  InputStream  hasDataDescriptor)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  InputStream  hasDataDescriptor)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	InputStream  hasDataDescriptor)  {  throw  new  IllegalStateException( " ");  }	  if(useUnicodeExtraFields)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
108	[BUG]  [BUGGY]  if(!allowStoredEntries)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  if(!allowStoredEntries)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	if(!allowStoredEntries)  {  throw  new  IllegalStateException( " ");  }	  if(useUnicodeExtraFields)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
109	[BUG]  [BUGGY]  InputStream  hasDataDescriptor  =  useUnicodeExtraFields?  this  :  null;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  InputStream  hasDataDescriptor  =  useUnicodeExtraFields?  this  :  null;  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	InputStream  hasDataDescriptor  =  useUnicodeExtraFields?  this  :  null;	  if(useUnicodeExtraFields)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
110	[BUG]  [BUGGY]  this.entry  =  new  ZipArchiveEntry(inputStream,  encoding,  useUnicodeExtraFields,  zipEncoding);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.entry  =  new  ZipArchiveEntry(inputStream,  encoding,  useUnicodeExtraFields,  zipEncoding);  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.entry  =  new  ZipArchiveEntry(inputStream,  encoding,  useUnicodeExtraFields,  zipEncoding);	  this.entry    =    new    ZipArchiveEntry(inputStream,    encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
111	[BUG]  [BUGGY]  this.entry  =  new  ZipArchiveEntry(outputStream,  encoding,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.entry  =  new  ZipArchiveEntry(outputStream,  encoding,  useUnicodeExtraFields);  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.entry  =  new  ZipArchiveEntry(outputStream,  encoding,  useUnicodeExtraFields);	  this.entry    =    new    ZipArchiveEntry(inputStream,    encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
112	[BUG]  [BUGGY]  this.entry  =  new  ZipArchiveEntry(zipEncoding,  inputStream,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.entry  =  new  ZipArchiveEntry(zipEncoding,  inputStream,  useUnicodeExtraFields);  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.entry  =  new  ZipArchiveEntry(zipEncoding,  inputStream,  useUnicodeExtraFields);	  this.entry    =    new    ZipArchiveEntry(inputStream,    encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
113	[BUG]  [BUGGY]  lastStoredEntry  =  inputStream.getLastStoredEntry();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  lastStoredEntry  =  inputStream.getLastStoredEntry();  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	lastStoredEntry  =  inputStream.getLastStoredEntry();	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    entry    :    inputStream.getEntries())    {    this.entry    =    entry;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
114	[BUG]  [BUGGY]  this.inputStream  =  inputStream.getEntries();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.inputStream  =  inputStream.getEntries();  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.inputStream  =  inputStream.getEntries();	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    entry    :    inputStream.getEntries())    {    this.entry    =    entry;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
115	[BUG]  [BUGGY]  this.inputStream  =  inputStream.getInputStream();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.inputStream  =  inputStream.getInputStream();  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.inputStream  =  inputStream.getInputStream();	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    entry    :    inputStream.getEntries())    {    this.entry    =    entry;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
116	[BUG]  [BUGGY]  new  ZipArchiveEntry(inputStream,  encoding,  useUnicodeExtraFields,  zipEncoding);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  new  ZipArchiveEntry(inputStream,  encoding,  useUnicodeExtraFields,  zipEncoding);  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	new  ZipArchiveEntry(inputStream,  encoding,  useUnicodeExtraFields,  zipEncoding);	  new    ZipArchiveEntry(inputStream,    encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
117	[BUG]  [BUGGY]  new  ZipArchiveEntry(inputStream,  encoding,  useUnicodeExtraFields,  null);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  new  ZipArchiveEntry(inputStream,  encoding,  useUnicodeExtraFields,  null);  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	new  ZipArchiveEntry(inputStream,  encoding,  useUnicodeExtraFields,  null);	  new    ZipArchiveEntry(inputStream,    encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
118	[BUG]  [BUGGY]  for(final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getEntries())  {  this.entry  =  entry.getKey();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  for(final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getEntries())  {  this.entry  =  entry.getKey();  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	for(final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getEntries())  {  this.entry  =  entry.getKey();  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    entry    :    inputStream.getEntries())    {    this.entry    =    entry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
119	[BUG]  [BUGGY]  if(useUnicodeExtraFields)  {  for(final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getEntries())  {  this.encoding  =  entry.getValue();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  if(useUnicodeExtraFields)  {  for(final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getEntries())  {  this.encoding  =  entry.getValue();  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	if(useUnicodeExtraFields)  {  for(final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getEntries())  {  this.encoding  =  entry.getValue();  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    entry    :    inputStream.getEntries())    {    this.entry    =    entry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
120	[BUG]  [BUGGY]  this.entry  =  entryStream.getValue();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.entry  =  entryStream.getValue();  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.entry  =  entryStream.getValue();	  this.entry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
121	[BUG]  [BUGGY]  if(useUnicodeExtraFields)  {  final  ZipArchiveEntry  <  K,  V>  current  =  inputStream.getValues();  this.current  =  current;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  if(useUnicodeExtraFields)  {  final  ZipArchiveEntry  <  K,  V>  current  =  inputStream.getValues();  this.current  =  current;  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	if(useUnicodeExtraFields)  {  final  ZipArchiveEntry  <  K,  V>  current  =  inputStream.getValues();  this.current  =  current;  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    current    :    inputStream.getValues())    {    this.current    =    current;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
122	[BUG]  [BUGGY]  if(useUnicodeExtraFields)  {  for(final  ZipArchiveEntry  <  K,  V>  current  :  outputStream.getValues())  {  this.current  =  current;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  if(useUnicodeExtraFields)  {  for(final  ZipArchiveEntry  <  K,  V>  current  :  outputStream.getValues())  {  this.current  =  current;  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	if(useUnicodeExtraFields)  {  for(final  ZipArchiveEntry  <  K,  V>  current  :  outputStream.getValues())  {  this.current  =  current;  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    current    :    inputStream.getValues())    {    this.current    =    current;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
123	[BUG]  [BUGGY]  this.inputStream  =  inputStream.getValues();  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.inputStream  =  inputStream.getValues();  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.inputStream  =  inputStream.getValues();	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    current    :    inputStream.getValues())    {    this.current    =    current;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
124	[BUG]  [BUGGY]  this.zipEncoding  =  ZipEncodingUtilities.getZipEncoding(encoding,  inputStream);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.zipEncoding  =  ZipEncodingUtilities.getZipEncoding(encoding,  inputStream);  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.zipEncoding  =  ZipEncodingUtilities.getZipEncoding(encoding,  inputStream);	  this.zipEncoding    =    ZipEncodingUtilities.getZipEncoding(encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
125	[BUG]  [BUGGY]  this.zipEncoding  =  ZipEncodingUtilities.getZipEncoding(encoding,  useUnicodeExtraFields,  0);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.zipEncoding  =  ZipEncodingUtilities.getZipEncoding(encoding,  useUnicodeExtraFields,  0);  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.zipEncoding  =  ZipEncodingUtilities.getZipEncoding(encoding,  useUnicodeExtraFields,  0);	  this.zipEncoding    =    ZipEncodingUtilities.getZipEncoding(encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
126	[BUG]  [BUGGY]  this.zipEncoding  =  ZipEncodingUtilities.getZipEncoding(inputStream,  encoding,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.zipEncoding  =  ZipEncodingUtilities.getZipEncoding(inputStream,  encoding,  useUnicodeExtraFields);  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.zipEncoding  =  ZipEncodingUtilities.getZipEncoding(inputStream,  encoding,  useUnicodeExtraFields);	  this.zipEncoding    =    ZipEncodingUtilities.getZipEncoding(encoding,    useUnicodeExtraFields);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
127	[BUG]  [BUGGY]  if(useUnicodeExtraFields)  {  final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getValues())  {  this.entry  =  entry.getValue();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  if(useUnicodeExtraFields)  {  final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getValues())  {  this.entry  =  entry.getValue();  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	if(useUnicodeExtraFields)  {  final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getValues())  {  this.entry  =  entry.getValue();  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    entry    :    inputStream.getValues())    {    this.entry    =    entry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
128	[BUG]  [BUGGY]  this.zipEncoding  =  ZipEncodingUtilities.getZipEncoding(useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.zipEncoding  =  ZipEncodingUtilities.getZipEncoding(useUnicodeExtraFields);  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.zipEncoding  =  ZipEncodingUtilities.getZipEncoding(useUnicodeExtraFields);	  this.zipEncoding    =    ZipEncodingUtilities.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
129	[BUG]  [BUGGY]  this.zipEncoding  =  ZipEncodingUtil.getZipEncoding(useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.zipEncoding  =  ZipEncodingUtil.getZipEncoding(useUnicodeExtraFields);  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.zipEncoding  =  ZipEncodingUtil.getZipEncoding(useUnicodeExtraFields);	  this.zipEncoding    =    ZipEncodingUtil.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
130	[BUG]  [BUGGY]  this.zipEncoding  =  ZipEncodingUtil.generateZipEncoding(encoding);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.zipEncoding  =  ZipEncodingUtil.generateZipEncoding(encoding);  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.zipEncoding  =  ZipEncodingUtil.generateZipEncoding(encoding);	  this.zipEncoding    =    ZipEncodingUtil.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
131	[BUG]  [BUGGY]  this.entry  =  entryStream.getKey();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.entry  =  entryStream.getKey();  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.entry  =  entryStream.getKey();	  this.entry    =    entry.getKey();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
132	[BUG]  [BUGGY]  this.entry  =  entry.readLine();  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.entry  =  entry.readLine();  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.entry  =  entry.readLine();	  this.entry    =    entry.getKey();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
133	[BUG]  [BUGGY]  this.entry  =  new  ZipArchiveEntry(encoding,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.entry  =  new  ZipArchiveEntry(encoding,  useUnicodeExtraFields);  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.entry  =  new  ZipArchiveEntry(encoding,  useUnicodeExtraFields);	  this.entry    =    entry;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
134	[BUG]  [BUGGY]  this.entry  =  new  ZipArchiveEntry(null,  encoding,  useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.entry  =  new  ZipArchiveEntry(null,  encoding,  useUnicodeExtraFields);  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.entry  =  new  ZipArchiveEntry(null,  encoding,  useUnicodeExtraFields);	  this.entry    =    entry;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
135	[BUG]  [BUGGY]  this.inputStream  =  inputStream.getEntryList();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.inputStream  =  inputStream.getEntryList();  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.inputStream  =  inputStream.getEntryList();	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    entry    :    inputStream.getEntryList())    {    this.entry    =    entry;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
136	[BUG]  [BUGGY]  for(final  ZipArchiveEntry  <  K,  V>  entry  :  outputStream.getEntryList())  {  this.entry  =  entry;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  for(final  ZipArchiveEntry  <  K,  V>  entry  :  outputStream.getEntryList())  {  this.entry  =  entry;  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	for(final  ZipArchiveEntry  <  K,  V>  entry  :  outputStream.getEntryList())  {  this.entry  =  entry;  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    entry    :    inputStream.getEntryList())    {    this.entry    =    entry;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
137	[BUG]  [BUGGY]  if(useUnicodeExtraFields)  {  final  ZipArchiveEntry  entry  =  inputStream.getValue();  for(final  ZipArchiveEntry  entry  :  entry.getValues())  {  this.entry  =  entry.getValue();  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  if(useUnicodeExtraFields)  {  final  ZipArchiveEntry  entry  =  inputStream.getValue();  for(final  ZipArchiveEntry  entry  :  entry.getValues())  {  this.entry  =  entry.getValue();  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	if(useUnicodeExtraFields)  {  final  ZipArchiveEntry  entry  =  inputStream.getValue();  for(final  ZipArchiveEntry  entry  :  entry.getValues())  {  this.entry  =  entry.getValue();  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    entry    :    inputStream.getValues())    {    this.entry    =    entry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
138	[BUG]  [BUGGY]  if(useUnicodeExtraFields)  {  for(final  ZipArchiveEntry  entry  :  inputStream.getKey())  {  this.entry  =  entry.getValue();  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  if(useUnicodeExtraFields)  {  for(final  ZipArchiveEntry  entry  :  inputStream.getKey())  {  this.entry  =  entry.getValue();  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	if(useUnicodeExtraFields)  {  for(final  ZipArchiveEntry  entry  :  inputStream.getKey())  {  this.entry  =  entry.getValue();  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    entry    :    inputStream.getValues())    {    this.entry    =    entry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
139	[BUG]  [BUGGY]  if(useUnicodeExtraFields)  {  for(final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getEntrySet())  {  this.entry  =  entry.getKey();  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  if(useUnicodeExtraFields)  {  for(final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getEntrySet())  {  this.entry  =  entry.getKey();  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	if(useUnicodeExtraFields)  {  for(final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getEntrySet())  {  this.entry  =  entry.getKey();  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    entry    :    inputStream.getEntrySet())    {    this.entry    =    entry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
140	[BUG]  [BUGGY]  if(useUnicodeExtraFields)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  if(useUnicodeExtraFields)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	if(useUnicodeExtraFields)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
141	[BUG]  [BUGGY]  new  ZipArchiveEntry(inputStream,  encoding,  useUnicodeExtraFields);  this.entry  =  inputStream;  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  new  ZipArchiveEntry(inputStream,  encoding,  useUnicodeExtraFields);  this.entry  =  inputStream;  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	new  ZipArchiveEntry(inputStream,  encoding,  useUnicodeExtraFields);  this.entry  =  inputStream;	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
142	[BUG]  [BUGGY]  if(useUnicodeExtraFields)  {  final  ZipArchiveEntry  entry  =  inputStream.getValues();  for(final  ZipArchiveEntry  entry  :  entry.getValues())  {  this.entry  =  entry.getKey();  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  if(useUnicodeExtraFields)  {  final  ZipArchiveEntry  entry  =  inputStream.getValues();  for(final  ZipArchiveEntry  entry  :  entry.getValues())  {  this.entry  =  entry.getKey();  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	if(useUnicodeExtraFields)  {  final  ZipArchiveEntry  entry  =  inputStream.getValues();  for(final  ZipArchiveEntry  entry  :  entry.getValues())  {  this.entry  =  entry.getKey();  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    entry    :    inputStream.getValues())    {    this.entry    =    entry.getKey();    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
143	[BUG]  [BUGGY]  if(useUnicodeExtraFields)  {  final  ZipArchiveEntry  entry  =  inputStream.getValues();  for(final  ZipArchiveEntry  entry  :  entry.getValues())  {  this.entry  =  entry.get  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  if(useUnicodeExtraFields)  {  final  ZipArchiveEntry  entry  =  inputStream.getValues();  for(final  ZipArchiveEntry  entry  :  entry.getValues())  {  this.entry  =  entry.get  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	if(useUnicodeExtraFields)  {  final  ZipArchiveEntry  entry  =  inputStream.getValues();  for(final  ZipArchiveEntry  entry  :  entry.getValues())  {  this.entry  =  entry.get	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    entry    :    inputStream.getValues())    {    this.entry    =    entry.getKey();    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
144	[BUG]  [BUGGY]  if(useUnicodeExtraFields)  {  final  ZipArchiveEntry  entry  =  inputStream.getValues();  for(final  ZipArchiveEntry  entry  :  entry.getKey())  {  this.entry  =  entry.getValue();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  if(useUnicodeExtraFields)  {  final  ZipArchiveEntry  entry  =  inputStream.getValues();  for(final  ZipArchiveEntry  entry  :  entry.getKey())  {  this.entry  =  entry.getValue();  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	if(useUnicodeExtraFields)  {  final  ZipArchiveEntry  entry  =  inputStream.getValues();  for(final  ZipArchiveEntry  entry  :  entry.getKey())  {  this.entry  =  entry.getValue();  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    entry    :    inputStream.getValues())    {    this.entry    =    entry.getKey();    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
145	[BUG]  [BUGGY]  if(useUnicodeExtraFields)  {  final  ZipArchiveEntry  entry  =  inputStream.getValues();  for(final  ZipArchiveEntry  entry  :  entry.getKey())  {  this.entry  =  entry.get  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  if(useUnicodeExtraFields)  {  final  ZipArchiveEntry  entry  =  inputStream.getValues();  for(final  ZipArchiveEntry  entry  :  entry.getKey())  {  this.entry  =  entry.get  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	if(useUnicodeExtraFields)  {  final  ZipArchiveEntry  entry  =  inputStream.getValues();  for(final  ZipArchiveEntry  entry  :  entry.getKey())  {  this.entry  =  entry.get	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    entry    :    inputStream.getValues())    {    this.entry    =    entry.getKey();    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
146	[BUG]  [BUGGY]  this.zipEncoding  =  ZipEncoding.getZipEncoding(encoding);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.zipEncoding  =  ZipEncoding.getZipEncoding(encoding);  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.zipEncoding  =  ZipEncoding.getZipEncoding(encoding);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
147	[BUG]  [BUGGY]  this.entriesZip64  =  inputStream.readLine();  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.entriesZip64  =  inputStream.readLine();  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.entriesZip64  =  inputStream.readLine();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
148	[BUG]  [BUGGY]  this.zipEncoding  =  new  ZipEncoding(useUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.zipEncoding  =  new  ZipEncoding(useUnicodeExtraFields);  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.zipEncoding  =  new  ZipEncoding(useUnicodeExtraFields);	  this.zipEncoding    =    zipEncoding;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
149	[BUG]  [BUGGY]  this.zipEncoding  =  ZipEncodingUtilities.getZipEncoding(encoding,  null);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.zipEncoding  =  ZipEncodingUtilities.getZipEncoding(encoding,  null);  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.zipEncoding  =  ZipEncodingUtilities.getZipEncoding(encoding,  null);	  this.zipEncoding    =    ZipEncodingUtilities.getZipEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
150	[BUG]  [BUGGY]  for(final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getValues())  {  this.entry  =  entry.getKey();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  for(final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getValues())  {  this.entry  =  entry.getKey();  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	for(final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getValues())  {  this.entry  =  entry.getKey();  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    entry    :    inputStream.getValues())    {    this.entry    =    entry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
151	[BUG]  [BUGGY]  this.inputStream  =  inputStream.getValue();  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.inputStream  =  inputStream.getValue();  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.inputStream  =  inputStream.getValue();	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    entry    :    inputStream.getValues())    {    this.entry    =    entry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
152	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(useUnicodeExtraFields)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  allowStoredEntriesWithDataDescriptor(useUnicodeExtraFields)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	allowStoredEntriesWithDataDescriptor(useUnicodeExtraFields)  {  throw  new  IllegalStateException( " ");  }	  if(useUnicodeExtraFields)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
153	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  throw  new  IllegalStateException( " ".equalsIgnoreCase(encoding));  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  throw  new  IllegalStateException( " ".equalsIgnoreCase(encoding));  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	allowStoredEntriesWithDataDescriptor)  {  throw  new  IllegalStateException( " ".equalsIgnoreCase(encoding));  }	  if(useUnicodeExtraFields)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
154	[BUG]  [BUGGY]  Thread.currentThread().interrupt();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  Thread.currentThread().interrupt();  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	Thread.currentThread().interrupt();	  if(useUnicodeExtraFields)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
155	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  throw  new  IllegalStateException( " ".equals(encoding);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  throw  new  IllegalStateException( " ".equals(encoding);  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	allowStoredEntriesWithDataDescriptor)  {  throw  new  IllegalStateException( " ".equals(encoding);  }	  if(useUnicodeExtraFields)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
156	[BUG]  [BUGGY]  for(final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.entrySet())  {  this.entry  =  entry.getValue();  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  for(final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.entrySet())  {  this.entry  =  entry.getValue();  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	for(final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.entrySet())  {  this.entry  =  entry.getValue();  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    entry    :    inputStream.getEntrySet())    {    this.entry    =    entry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
157	[BUG]  [BUGGY]  for(final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getEntry())  {  this.entry  =  entry.getValue();  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  for(final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getEntry())  {  this.entry  =  entry.getValue();  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	for(final  ZipArchiveEntry  <  K,  V>  entry  :  inputStream.getEntry())  {  this.entry  =  entry.getValue();  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    entry    :    inputStream.getEntrySet())    {    this.entry    =    entry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
158	[BUG]  [BUGGY]  for(final  ZipArchiveEntry  <  final  String,  Object>  entry  :  inputStream.getEntries())  {  this.entry  =  entry;  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  for(final  ZipArchiveEntry  <  final  String,  Object>  entry  :  inputStream.getEntries())  {  this.entry  =  entry;  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	for(final  ZipArchiveEntry  <  final  String,  Object>  entry  :  inputStream.getEntries())  {  this.entry  =  entry;  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    String,    Object>    entry    :    inputStream.getEntries())    {    this.entry    =    entry;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
159	[BUG]  [BUGGY]  this.entry  =  inputStream.getEntries();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.entry  =  inputStream.getEntries();  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.entry  =  inputStream.getEntries();	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    String,    Object>    entry    :    inputStream.getEntries())    {    this.entry    =    entry;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
160	[BUG]  [BUGGY]  this.entry  =  entry.data;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.entry  =  entry.data;  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.entry  =  entry.data;	  this.entry    =    entry;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
161	[BUG]  [BUGGY]  this.entry  =  inputStream.getEntryList();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.entry  =  inputStream.getEntryList();  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.entry  =  inputStream.getEntryList();	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    entry    :    inputStream.getEntryList())    {    this.entry    =    entry;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
162	[BUG]  [BUGGY]  this.current  =  new  ZipArchiveEntry  <  K,  V>(inputStream.getValues());  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  this.current  =  new  ZipArchiveEntry  <  K,  V>(inputStream.getValues());  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	this.current  =  new  ZipArchiveEntry  <  K,  V>(inputStream.getValues());	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    <    K,    V>    current    :    inputStream.getValues())    {    this.current    =    current;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
163	[BUG]  [BUGGY]  for(final  ZipArchiveEntry  entry  :  inputStream.getAllValues())  {  this.entry  =  entry.getValue();  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  for(final  ZipArchiveEntry  entry  :  inputStream.getAllValues())  {  this.entry  =  entry.getValue();  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	for(final  ZipArchiveEntry  entry  :  inputStream.getAllValues())  {  this.entry  =  entry.getValue();  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    entry    :    inputStream.getValues())    {    this.entry    =    entry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
164	[BUG]  [BUGGY]  for(final  ZipArchiveEntry  entry  :  inputStream.getEntries())  {  this.entry  =  entry.getValue();  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  for(final  ZipArchiveEntry  entry  :  inputStream.getEntries())  {  this.entry  =  entry.getValue();  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	for(final  ZipArchiveEntry  entry  :  inputStream.getEntries())  {  this.entry  =  entry.getValue();  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    entry    :    inputStream.getValues())    {    this.entry    =    entry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
165	[BUG]  [BUGGY]  for(final  ZipArchiveEntry  entry  :  this.entries)  {  this.entry  =  entry.getKey();  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  ZipArchiveInputStream(final  InputStream  inputStream,  final  String  encoding,  final  boolean  useUnicodeExtraFields)  {  this(inputStream,  encoding,  useUnicodeExtraFields,  false);    [BUGGY]  for(final  ZipArchiveEntry  entry  :  this.entries)  {  this.entry  =  entry.getKey();  }  [BUGGY]      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  <init>  [RETURN_TYPE]  String,boolean)  InputStream  inputStream  String  encoding  final  boolean  useUnicodeExtraFields  [VARIABLES]  ZipEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  byte[]  CFH  DD  LFH  lfhBuf  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  hasDataDescriptor  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.24253562503633297	193	193	1	replace	for(final  ZipArchiveEntry  entry  :  this.entries)  {  this.entry  =  entry.getKey();  }	  if(useUnicodeExtraFields)    {    for(final    ZipArchiveEntry    entry    :    inputStream.getValues())    {    this.entry    =    entry.getKey();    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
