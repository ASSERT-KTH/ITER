bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesZip64    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
2	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)	  return    entry.getGeneralPurposeBit().usesZip64    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
3	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)	  return    entry.getGeneralPurposeBit().usesZip64    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
4	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)	  return    entry.getGeneralPurposeBit().usesZip64    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
5	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usersDataDescriptor()  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usersDataDescriptor()  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usersDataDescriptor()  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usersDataDescriptor()    ||(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
6	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit().usersDataDescriptor()  ||(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGenericPurposeBit().usersDataDescriptor()  ||(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit().usersDataDescriptor()  ||(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usersDataDescriptor()    ||(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
7	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().useUnicodeExtraFields()  ||(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().useUnicodeExtraFields()  ||(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().useUnicodeExtraFields()  ||(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usersDataDescriptor()    ||(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
8	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usersDataDescriptor  ||(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usersDataDescriptor  ||(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usersDataDescriptor  ||(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usersDataDescriptor()    ||(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
9	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().useUnicodeExtraFields  ||(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().useUnicodeExtraFields  ||(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().useUnicodeExtraFields  ||(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usersDataDescriptor()    ||(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
10	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usersDataDescriptor()  ||(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usersDataDescriptor()  ||(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usersDataDescriptor()  ||(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)	  return    entry.getGeneralPurposeBit().usersDataDescriptor()    ||(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
11	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit().usesDataDescriptor()  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGenericPurposeBit().usesDataDescriptor()  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit().usesDataDescriptor()  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGenericPurposeBit().usesDataDescriptor()    ||(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
12	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit().usesDataDescriptor  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGenericPurposeBit().usesDataDescriptor  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit().usesDataDescriptor  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGenericPurposeBit().usesDataDescriptor()    ||(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
13	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit().usesDataDescriptor  ||(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGenericPurposeBit().usesDataDescriptor  ||(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit().usesDataDescriptor  ||(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGenericPurposeBit().usesDataDescriptor()    ||(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
14	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)||  (entry.getMethod()  ==  ZipEntry.DEFLATED  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)||  (entry.getMethod()  ==  ZipEntry.DEFLATED  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)||  (entry.getMethod()  ==  ZipEntry.DEFLATED  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(ze)||    (entry.getMethod()    ==    ZipEntry.DEFLATED    &&    entry.getMethod()    ==    ZipEntry.ENHANCED_DEFLATED)    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
15	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(encoding)||  (entry.getMethod()  ==  ZipEntry.DEFLATED  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(encoding)||  (entry.getMethod()  ==  ZipEntry.DEFLATED  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(encoding)||  (entry.getMethod()  ==  ZipEntry.DEFLATED  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(ze)||    (entry.getMethod()    ==    ZipEntry.DEFLATED    &&    entry.getMethod()    ==    ZipEntry.ENHANCED_DEFLATED)    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
16	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(encoding)||  (entry.getMethod()  ==  ZipEntry.DEFLATED  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(encoding)||  (entry.getMethod()  ==  ZipEntry.DEFLATED  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesDataDescriptor(encoding)||  (entry.getMethod()  ==  ZipEntry.DEFLATED  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(ze)||    (entry.getMethod()    ==    ZipEntry.DEFLATED    &&    entry.getMethod()    ==    ZipEntry.ENHANCED_DEFLATED)    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
17	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)||  (entry.getMethod()  ==  ZipEntry.DEFLATED  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)||  (entry.getMethod()  ==  ZipEntry.DEFLATED  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)||  (entry.getMethod()  ==  ZipEntry.DEFLATED  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(ze)||    (entry.getMethod()    ==    ZipEntry.DEFLATED    &&    entry.getMethod()    ==    ZipEntry.ENHANCED_DEFLATED)    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
18	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)||  (entry.getMethod()  ==  ZipEntry.DEFLATED  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATE  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)||  (entry.getMethod()  ==  ZipEntry.DEFLATED  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATE  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)||  (entry.getMethod()  ==  ZipEntry.DEFLATED  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATE	  return!entry.getGeneralPurposeBit().usesDataDescriptor(ze)||    (entry.getMethod()    ==    ZipEntry.DEFLATED    &&    entry.getMethod()    ==    ZipEntry.ENHANCED_DEFLATED)    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
19	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit().usesDataDescriptor()  ||(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGenericPurposeBit().usesDataDescriptor()  ||(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit().usesDataDescriptor()  ||(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGenericPurposeBit().usesDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
20	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit().usesDataDescriptor(true)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGenericPurposeBit().usesDataDescriptor(true)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit().usesDataDescriptor(true)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGenericPurposeBit().usesDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
21	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit().usesZip64()  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGenericPurposeBit().usesZip64()  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit().usesZip64()  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGenericPurposeBit().usesDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
22	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit().usesDataDescriptor()  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.DEFLATED)  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGenericPurposeBit().usesDataDescriptor()  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit().usesDataDescriptor()  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.DEFLATED)	  return    entry.getGenericPurposeBit().usesDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
23	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit().usesDataDescriptor()  ||(entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGenericPurposeBit().usesDataDescriptor()  ||(entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit().usesDataDescriptor()  ||(entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGenericPurposeBit().usesDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
24	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit().usesDataDescriptor()  &&(this.allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGenericPurposeBit().usesDataDescriptor()  &&(this.allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit().usesDataDescriptor()  &&(this.allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGenericPurposeBit().usesDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
25	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor()  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor()  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().hasDataDescriptor()  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)	  return    entry.getGeneralPurposeBit().hasDataDescriptor()    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STRING)    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
26	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit().hasDataDescriptor()  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGenericPurposeBit().hasDataDescriptor()  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit().hasDataDescriptor()  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)	  return    entry.getGeneralPurposeBit().hasDataDescriptor()    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STRING)    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
27	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor(true)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor(true)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().hasDataDescriptor(true)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)	  return    entry.getGeneralPurposeBit().hasDataDescriptor()    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STRING)    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
28	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(z)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(z)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(z)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor(z)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
29	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64(z)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64(z)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64(z)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor(z)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
30	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(z)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(z)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(z)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)	  return    entry.getGeneralPurposeBit().usesDataDescriptor(z)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
31	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(z)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(z)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(z)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor(z)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
32	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(z)||  (allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(z)||  (allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(z)||  (allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor(z)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
33	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit().usesDataDescriptor(z)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGenericPurposeBit().usesDataDescriptor(z)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit().usesDataDescriptor(z)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor(z)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
34	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor()  ||(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor()  ||(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().hasDataDescriptor()  ||(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().hasDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
35	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit().hasDataDescriptor()  ||(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGenericPurposeBit().hasDataDescriptor()  ||(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit().hasDataDescriptor()  ||(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().hasDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
36	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().isDataDescriptor()  ||(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().isDataDescriptor()  ||(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().isDataDescriptor()  ||(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().hasDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
37	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor()  &&(entry.getMethod()  ==  ZipEntry.STORED  ||  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor()  &&(entry.getMethod()  ==  ZipEntry.STORED  ||  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().hasDataDescriptor()  &&(entry.getMethod()  ==  ZipEntry.STORED  ||  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)	  return    entry.getGeneralPurposeBit().hasDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
38	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor()  ||(entry.getMethod()  ==  ZipEntry.STORED  ||  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor()  ||(entry.getMethod()  ==  ZipEntry.STORED  ||  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().hasDataDescriptor()  ||(entry.getMethod()  ==  ZipEntry.STORED  ||  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)	  return    entry.getGeneralPurposeBit().hasDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
39	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor()  &&(entry.getMethod()  ==  ZipEntry.STORED  ||  entry.getMethod()  ==  ZipEntry.DEFLATED)  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor()  &&(entry.getMethod()  ==  ZipEntry.STORED  ||  entry.getMethod()  ==  ZipEntry.DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().hasDataDescriptor()  &&(entry.getMethod()  ==  ZipEntry.STORED  ||  entry.getMethod()  ==  ZipEntry.DEFLATED)	  return    entry.getGeneralPurposeBit().hasDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
40	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor()  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.DEFLATED)  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor()  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().hasDataDescriptor()  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.DEFLATED)	  return    entry.getGeneralPurposeBit().hasDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
41	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  &&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  &&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64()  &&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)	  return    entry.getGeneralPurposeBit().usesZip64()    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STRING)    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
42	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit().usesZip64()  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGenericPurposeBit().usesZip64()  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit().usesZip64()  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)	  return    entry.getGeneralPurposeBit().usesZip64()    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STRING)    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
43	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  hasUTF8Flag  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  hasUTF8Flag  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64()  ||  hasUTF8Flag  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)	  return    entry.getGeneralPurposeBit().usesZip64()    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STRING)    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
44	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()!=  ZipEntry.STRING)  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()!=  ZipEntry.STRING)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64()  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()!=  ZipEntry.STRING)	  return    entry.getGeneralPurposeBit().usesZip64()    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STRING)    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
45	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor()  ||(!allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor()  ||(!allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor()  ||(!allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor()    &&(!allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
46	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(true)&&(!allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(true)&&(!allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(true)&&(!allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor()    &&(!allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
47	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor()  &&(!allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor()  &&(!allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor()  &&(!allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor()    &&(!allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
48	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  &&(!allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  &&(!allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64()  &&(!allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor()    &&(!allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
49	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(true)&&(!allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(true)&&(!allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(true)&&(!allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor()    &&(!allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
50	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(false)&&(!allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(false)&&(!allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(false)&&(!allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor()    &&(!allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
51	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit().usesDataDescriptor()  &&(!allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGenericPurposeBit().usesDataDescriptor()  &&(!allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit().usesDataDescriptor()  &&(!allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor()    &&(!allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
52	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(true)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(true)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(true)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)	  return    entry.getGeneralPurposeBit().usesDataDescriptor(false)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
53	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(true)||  (allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(true)||  (allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(true)||  (allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor(false)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
54	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  &&  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  &&  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64()  &&  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED	  return    entry.getGeneralPurposeBit().usesZip64()    ||    hasDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
55	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED;  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED;	  return    entry.getGeneralPurposeBit().usesZip64()    ||    hasDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
56	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGenericPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED	  return    entry.getGeneralPurposeBit().usesZip64()    ||    hasDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
57	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()!=  ZipEntry.STORED  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()!=  ZipEntry.STORED  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()!=  ZipEntry.STORED	  return    entry.getGeneralPurposeBit().usesZip64()    ||    hasDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
58	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getParent()  ==  ZipEntry.STORED  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getParent()  ==  ZipEntry.STORED  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getParent()  ==  ZipEntry.STORED	  return    entry.getGeneralPurposeBit().usesZip64()    ||    hasDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
59	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getSize()  ==  ZipEntry.STORED  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getSize()  ==  ZipEntry.STORED  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getSize()  ==  ZipEntry.STORED	  return    entry.getGeneralPurposeBit().usesZip64()    ||    hasDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
60	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64  &&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64  &&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesZip64  &&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesZip64    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
61	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor    &&(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
62	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit().usesDataDescriptor  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGenericPurposeBit().usesDataDescriptor  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit().usesDataDescriptor  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor    &&(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
63	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor  &&(entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor  &&(entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor  &&(entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor    &&(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
64	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor  &&(!allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor  &&(!allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor  &&(!allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor    &&(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
65	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(false)&&  (allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(false)&&  (allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesDataDescriptor(false)&&  (allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(true)&&    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
66	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(false)&&  (allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(false)&&  (allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(false)&&  (allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(true)&&    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
67	[BUG]  [BUGGY]  Inflater  inflater  =  getInflater(entry);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Inflater  inflater  =  getInflater(entry);  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Inflater  inflater  =  getInflater(entry);	  Inflater    inflater    =    getInflater();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
68	[BUG]  [BUGGY]  Inflater  inflater  =  getInflater(entry.getValue());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Inflater  inflater  =  getInflater(entry.getValue());  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Inflater  inflater  =  getInflater(entry.getValue());	  Inflater    inflater    =    getInflater();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
69	[BUG]  [BUGGY]  Inflater  inflater  =  getInflater(entry.getKey());  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Inflater  inflater  =  getInflater(entry.getKey());  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Inflater  inflater  =  getInflater(entry.getKey());	  Inflater    inflater    =    getInflater();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
70	[BUG]  [BUGGY]  Inflater  inflater  =  getInflater(entry.getMethod());  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Inflater  inflater  =  getInflater(entry.getMethod());  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Inflater  inflater  =  getInflater(entry.getMethod());	  Inflater    inflater    =    getInflater();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
71	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64(false)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64(false)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64(false)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesZip64(ze)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
72	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64(currentEntry)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64(currentEntry)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesZip64(currentEntry)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesZip64(ze)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
73	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64(version)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64(version)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesZip64(version)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesZip64(ze)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
74	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64(ze)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64(ze)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64(ze)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesZip64(ze)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
75	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64()  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesZip64()    &&(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
76	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  &&(this.allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  &&(this.allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64()  &&(this.allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesZip64()    &&(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
77	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64()  &&  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64()  &&  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesZip64()  &&  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesZip64()    ||    hasDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
78	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  &&  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  &&  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64()  &&  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesZip64()    ||    hasDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
79	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)	  return!entry.getGeneralPurposeBit().usesZip64()    ||    hasDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
80	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)	  return!entry.getGeneralPurposeBit().usesZip64()    ||    hasDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
81	[BUG]  [BUGGY]  ||  entry.getMethod()!=  ZipMethod.ENHANCED_DEFLATED);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  ||  entry.getMethod()!=  ZipMethod.ENHANCED_DEFLATED);  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getMethod()!=  ZipMethod.ENHANCED_DEFLATED);	  ||    entry.getMethod()    ==    ZipMethod.ENHANCED_DEFLATED);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
82	[BUG]  [BUGGY]  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED)  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED)	  ||    entry.getMethod()    ==    ZipMethod.ENHANCED_DEFLATED);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
83	[BUG]  [BUGGY]  ||  entry.getName()  ==  ZipMethod.ENHANCED_DEFLATED);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  ||  entry.getName()  ==  ZipMethod.ENHANCED_DEFLATED);  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getName()  ==  ZipMethod.ENHANCED_DEFLATED);	  ||    entry.getMethod()    ==    ZipMethod.ENHANCED_DEFLATED);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
84	[BUG]  [BUGGY]  ||  entry.getCode()  ==  ZipMethod.ENHANCED_DEFLATED);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  ||  entry.getCode()  ==  ZipMethod.ENHANCED_DEFLATED);  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getCode()  ==  ZipMethod.ENHANCED_DEFLATED);	  ||    entry.getMethod()    ==    ZipMethod.ENHANCED_DEFLATED);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
85	[BUG]  [BUGGY]  ||  entry.getValue()  ==  ZipMethod.ENHANCED_DEFLATED);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  ||  entry.getValue()  ==  ZipMethod.ENHANCED_DEFLATED);  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getValue()  ==  ZipMethod.ENHANCED_DEFLATED);	  ||    entry.getMethod()    ==    ZipMethod.ENHANCED_DEFLATED);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
86	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor()  ||(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor()  ||(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesDataDescriptor()  ||(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
87	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor()  ||(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor()  ||(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor()  ||(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
88	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64()  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64()  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesZip64()  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
89	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()!=  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()!=  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesDataDescriptor  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()!=  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()!=    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
90	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()!=  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()!=  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()!=  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()!=    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
91	[BUG]  [BUGGY]  Inflater  inf  =  entry.getInput()  {  }  ;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Inflater  inf  =  entry.getInput()  {  }  ;  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Inflater  inf  =  entry.getInput()  {  }  ;	  Inflater    inf    =    entry.getInput();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
92	[BUG]  [BUGGY]  Inflater  inf  =  entry.getInput()  +  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Inflater  inf  =  entry.getInput()  +  1;  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Inflater  inf  =  entry.getInput()  +  1;	  Inflater    inf    =    entry.getInput();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
93	[BUG]  [BUGGY]  Inflater  inf  =  entry.getInputFile();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Inflater  inf  =  entry.getInputFile();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Inflater  inf  =  entry.getInputFile();	  Inflater    inf    =    entry.getInput();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
94	[BUG]  [BUGGY]  Inflater  inf  =  entry.getEntry();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Inflater  inf  =  entry.getEntry();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Inflater  inf  =  entry.getEntry();	  Inflater    inf    =    entry.getInput();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
95	[BUG]  [BUGGY]  Inflater  inf  =  entry.getOutput();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Inflater  inf  =  entry.getOutput();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Inflater  inf  =  entry.getOutput();	  Inflater    inf    =    entry.getInput();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
96	[BUG]  [BUGGY]  Inflater  inf  =  entry.getAsInputStream();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Inflater  inf  =  entry.getAsInputStream();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Inflater  inf  =  entry.getAsInputStream();	  Inflater    inf    =    entry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
97	[BUG]  [BUGGY]  Inflater  inf  =  entry.getInputStream()  {  }  ;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Inflater  inf  =  entry.getInputStream()  {  }  ;  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Inflater  inf  =  entry.getInputStream()  {  }  ;	  Inflater    inf    =    entry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
98	[BUG]  [BUGGY]  Inflater  inf  =  entry.getValue();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Inflater  inf  =  entry.getValue();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Inflater  inf  =  entry.getValue();	  Inflater    inf    =    entry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
99	[BUG]  [BUGGY]  Inflater  inf  =  entry.getInputStream()  +  1;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Inflater  inf  =  entry.getInputStream()  +  1;  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Inflater  inf  =  entry.getInputStream()  +  1;	  Inflater    inf    =    entry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
100	[BUG]  [BUGGY]  Inflater  inf  =  entry.getOutputStream();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Inflater  inf  =  entry.getOutputStream();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Inflater  inf  =  entry.getOutputStream();	  Inflater    inf    =    entry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
101	[BUG]  [BUGGY]  Inflater  inf  =  entry.getInputStream(),  bis;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Inflater  inf  =  entry.getInputStream(),  bis;  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Inflater  inf  =  entry.getInputStream(),  bis;	  Inflater    inf    =    entry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
102	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  {  throw  new  IllegalStateException( "Current  entry  is  null. ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  {  throw  new  IllegalStateException( "Current  entry  is  null. ");  }  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  {  throw  new  IllegalStateException( "Current  entry  is  null. ");  }	  if(entry    ==    null)    {    throw    new    IllegalStateException(   "Current    entry    is    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
103	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  {  throw  new  IllegalStateException( "Current  entry  is  null. ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  {  throw  new  IllegalStateException( "Current  entry  is  null. ");  }  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  {  throw  new  IllegalStateException( "Current  entry  is  null. ");  }	  if(entry    ==    null)    {    throw    new    IllegalStateException(   "Current    entry    is    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
104	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  {  throw  new  IllegalStateException( "Current  entry  is  null. ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  {  throw  new  IllegalStateException( "Current  entry  is  null. ");  }  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  {  throw  new  IllegalStateException( "Current  entry  is  null. ");  }	  if(entry    ==    null)    {    throw    new    IllegalStateException(   "Current    entry    is    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
105	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  {  throw  new  IllegalStateException( "Current  entry  is  null. ");  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  {  throw  new  IllegalStateException( "Current  entry  is  null. ");  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  {  throw  new  IllegalStateException( "Current  entry  is  null. ");	  if(entry    ==    null)    {    throw    new    IllegalStateException(   "Current    entry    is    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
106	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED;  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED;	  if(entry    ==    null)    {    throw    new    IllegalStateException(   "Current    entry    is    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
107	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();	  if(entry    ==    null)    {    throw    new    IllegalStateException(   "Current    entry    is    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
108	[BUG]  [BUGGY]  if(entry  ==  null)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  if(entry  ==  null)  {  return  true;  }  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	if(entry  ==  null)  {  return  true;  }	  if(entry!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
109	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  if(entry  ==  null  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED)  {  return  false;  }  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	if(entry  ==  null  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED)  {  return  false;  }	  if(entry!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
110	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getMethod()!=  ZipMethod.ENHANCED_DEFLATED)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  if(entry  ==  null  ||  entry.getMethod()!=  ZipMethod.ENHANCED_DEFLATED)  {  return  false;  }  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	if(entry  ==  null  ||  entry.getMethod()!=  ZipMethod.ENHANCED_DEFLATED)  {  return  false;  }	  if(entry!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
111	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  if(entry  ==  null  ||  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  {  return  false;  }  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	if(entry  ==  null  ||  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  {  return  false;  }	  if(entry!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
112	[BUG]  [BUGGY]  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED)  {  return  false;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED)  {  return  false;  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED)  {  return  false;	  ||    entry.getMethod()    ==    ZipMethod.ENHANCED_DEFLATED)    {    return    true;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
113	[BUG]  [BUGGY]  ||  entry.getMethod()!=  ZipMethod.ENHANCED_DEFLATED)  {  return  false;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  ||  entry.getMethod()!=  ZipMethod.ENHANCED_DEFLATED)  {  return  false;  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getMethod()!=  ZipMethod.ENHANCED_DEFLATED)  {  return  false;	  ||    entry.getMethod()    ==    ZipMethod.ENHANCED_DEFLATED)    {    return    true;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
114	[BUG]  [BUGGY]  ||  entry.getValue()  ==  ZipMethod.ENHANCED_DEFLATED)  {  return  false;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  ||  entry.getValue()  ==  ZipMethod.ENHANCED_DEFLATED)  {  return  false;  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getValue()  ==  ZipMethod.ENHANCED_DEFLATED)  {  return  false;	  ||    entry.getMethod()    ==    ZipMethod.ENHANCED_DEFLATED)    {    return    true;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
115	[BUG]  [BUGGY]  ||  entry.getName()  ==  ZipMethod.ENHANCED_DEFLATED)  {  return  false;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  ||  entry.getName()  ==  ZipMethod.ENHANCED_DEFLATED)  {  return  false;  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getName()  ==  ZipMethod.ENHANCED_DEFLATED)  {  return  false;	  ||    entry.getMethod()    ==    ZipMethod.ENHANCED_DEFLATED)    {    return    true;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
116	[BUG]  [BUGGY]  ||  entry.getType()  ==  ZipMethod.ENHANCED_DEFLATED)  {  return  false;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  ||  entry.getType()  ==  ZipMethod.ENHANCED_DEFLATED)  {  return  false;  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getType()  ==  ZipMethod.ENHANCED_DEFLATED)  {  return  false;	  ||    entry.getMethod()    ==    ZipMethod.ENHANCED_DEFLATED)    {    return    true;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
117	[BUG]  [BUGGY]  ||  entry.getCode()  ==  ZipMethod.ENHANCED_DEFLATED)  {  return  true;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  ||  entry.getCode()  ==  ZipMethod.ENHANCED_DEFLATED)  {  return  true;  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getCode()  ==  ZipMethod.ENHANCED_DEFLATED)  {  return  true;	  ||    entry.getMethod()    ==    ZipMethod.ENHANCED_DEFLATED)    {    return    true;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
118	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(false)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(false)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesDataDescriptor(false)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(true)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.DEFLATED)    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
119	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(false)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(false)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(false)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(true)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.DEFLATED)    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
120	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(hasDataDescriptor)&&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(hasDataDescriptor)&&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(hasDataDescriptor)&&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor(hasDataDescriptor)&&(allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
121	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(hasDataDescriptor)||(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(hasDataDescriptor)||(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(hasDataDescriptor)||(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor(hasDataDescriptor)&&(allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
122	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(hasDataDescriptor)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.DEFLATED)  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(hasDataDescriptor)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(hasDataDescriptor)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.DEFLATED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor(hasDataDescriptor)&&(allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
123	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(hasDataDescriptor)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(hasDataDescriptor)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(hasDataDescriptor)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor(hasDataDescriptor)&&(allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
124	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(hasDataDescriptor)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STRING)  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(hasDataDescriptor)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STRING)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(hasDataDescriptor)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STRING)	  return    entry.getGeneralPurposeBit().usesDataDescriptor(hasDataDescriptor)&&(allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
125	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(hasDataDescriptor)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.DECEMBER)  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(hasDataDescriptor)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.DECEMBER)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(hasDataDescriptor)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.DECEMBER)	  return    entry.getGeneralPurposeBit().usesDataDescriptor(hasDataDescriptor)&&(allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
126	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64  ||  (entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64  ||  (entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64  ||  (entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor    ||    (entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
127	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor  ||!(entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor  ||!(entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor  ||!(entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor    ||    (entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
128	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(false)&&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(false)&&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(false)&&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor(true)&&(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
129	[BUG]  [BUGGY]  boolean  hasDataDescriptor  =  entry.hasValue();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  boolean  hasDataDescriptor  =  entry.hasValue();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	boolean  hasDataDescriptor  =  entry.hasValue();	  boolean    hasDataDescriptor    =    entry.hasDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
130	[BUG]  [BUGGY]  boolean  hasDataDescriptor  =  entry.hasImmediateDataDescriptor();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  boolean  hasDataDescriptor  =  entry.hasImmediateDataDescriptor();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	boolean  hasDataDescriptor  =  entry.hasImmediateDataDescriptor();	  boolean    hasDataDescriptor    =    entry.hasDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
131	[BUG]  [BUGGY]  boolean  hasDataDescriptor  =  entry.hasEntry();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  boolean  hasDataDescriptor  =  entry.hasEntry();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	boolean  hasDataDescriptor  =  entry.hasEntry();	  boolean    hasDataDescriptor    =    entry.hasDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
132	[BUG]  [BUGGY]  boolean  hasDataDescriptor  =  entry.hasDataDescriptor()  ||  entry.hasValue();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  boolean  hasDataDescriptor  =  entry.hasDataDescriptor()  ||  entry.hasValue();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	boolean  hasDataDescriptor  =  entry.hasDataDescriptor()  ||  entry.hasValue();	  boolean    hasDataDescriptor    =    entry.hasDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
133	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  &&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  &&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64()  &&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)	  return    entry.getGeneralPurposeBit().usesZip64()    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.DEFLATED)    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
134	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit().usesZip64()  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGenericPurposeBit().usesZip64()  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit().usesZip64()  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)	  return    entry.getGeneralPurposeBit().usesZip64()    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.DEFLATED)    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
135	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||!allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||!allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64()  ||!allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)	  return    entry.getGeneralPurposeBit().usesZip64()    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.DEFLATED)    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
136	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()!=  ZipEntry.DEFLATED)  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()!=  ZipEntry.DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64()  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()!=  ZipEntry.DEFLATED)	  return    entry.getGeneralPurposeBit().usesZip64()    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.DEFLATED)    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
137	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit()!=  null  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit()!=  null  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit()!=  null  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit()!=    null    &&(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
138	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit()!=  null  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGenericPurposeBit()!=  null  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit()!=  null  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit()!=    null    &&(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
139	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit()!=  null  ||(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit()!=  null  ||(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit()!=  null  ||(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit()!=    null    &&(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
140	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit()!=  null  &&(entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit()!=  null  &&(entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit()!=  null  &&(entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit()!=    null    &&(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
141	[BUG]  [BUGGY]  return  entry.getSize()!=  null  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getSize()!=  null  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getSize()!=  null  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit()!=    null    &&(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
142	[BUG]  [BUGGY]  return  entry.getValue()!=  null  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getValue()!=  null  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getValue()!=  null  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit()!=    null    &&(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
143	[BUG]  [BUGGY]  return  entry.getSize()!=  0  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getSize()!=  0  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getSize()!=  0  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit()!=    null    &&(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
144	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(true)||  (allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(true)||  (allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesDataDescriptor(true)||  (allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(true)&&    (allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
145	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(false)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(false)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesDataDescriptor(false)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(true)&&    (allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
146	[BUG]  [BUGGY]  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();	  ||    entry.getMethod()    ==    ZipMethod.ENHANCED_DEFLATED;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
147	[BUG]  [BUGGY]  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED;  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED;	  ||    entry.getMethod()    ==    ZipMethod.ENHANCED_DEFLATED;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
148	[BUG]  [BUGGY]  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED  ||  entry.getCode()  ==  ZipMethod.ENHANCED_DEFLATED;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED  ||  entry.getCode()  ==  ZipMethod.ENHANCED_DEFLATED;  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED  ||  entry.getCode()  ==  ZipMethod.ENHANCED_DEFLATED;	  ||    entry.getMethod()    ==    ZipMethod.ENHANCED_DEFLATED;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
149	[BUG]  [BUGGY]  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED	  ||    entry.getMethod()    ==    ZipMethod.ENHANCED_DEFLATED;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
150	[BUG]  [BUGGY]  ||  entry.getMethod()!=  ZipMethod.ENHANCED_DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  ||  entry.getMethod()!=  ZipMethod.ENHANCED_DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getMethod()!=  ZipMethod.ENHANCED_DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();	  ||    entry.getMethod()    ==    ZipMethod.ENHANCED_DEFLATED;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
151	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
152	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
153	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(encoding)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(encoding)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesDataDescriptor(encoding)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
154	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit().usesDataDescriptor(zipEncoding)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGenericPurposeBit().usesDataDescriptor(zipEncoding)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit().usesDataDescriptor(zipEncoding)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
155	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(encoding)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(encoding)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(encoding)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
156	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor(true)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor(true)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().hasDataDescriptor(true)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().hasDataDescriptor()    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
157	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64(z)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64(z)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesZip64(z)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)	  return!entry.getGeneralPurposeBit().usesZip64(z)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
158	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64(z)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64(z)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesZip64(z)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesZip64(z)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
159	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit().usesZip64(z)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGenericPurposeBit().usesZip64(z)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit().usesZip64(z)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesZip64(z)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
160	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entry.getKey();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Entry  <  K,  V>  entry  =  entry.getKey();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Entry  <  K,  V>  entry  =  entry.getKey();	  Entry    <    K,    V>    entry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
161	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entry.getValue()  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Entry  <  K,  V>  entry  =  entry.getValue()  +  1;  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Entry  <  K,  V>  entry  =  entry.getValue()  +  1;	  Entry    <    K,    V>    entry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
162	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entry.getEntry();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Entry  <  K,  V>  entry  =  entry.getEntry();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Entry  <  K,  V>  entry  =  entry.getEntry();	  Entry    <    K,    V>    entry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
163	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entry.getValue()  -  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Entry  <  K,  V>  entry  =  entry.getValue()  -  1;  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Entry  <  K,  V>  entry  =  entry.getValue()  -  1;	  Entry    <    K,    V>    entry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
164	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entry.getCurrentEntry();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Entry  <  K,  V>  entry  =  entry.getCurrentEntry();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Entry  <  K,  V>  entry  =  entry.getCurrentEntry();	  Entry    <    K,    V>    entry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
165	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entry.getAncestor();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Entry  <  K,  V>  entry  =  entry.getAncestor();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Entry  <  K,  V>  entry  =  entry.getAncestor();	  Entry    <    K,    V>    entry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
166	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit().usesDataDescriptor(false)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGenericPurposeBit().usesDataDescriptor(false)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit().usesDataDescriptor(false)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(false)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
167	[BUG]  [BUGGY]  Inflater  inflater  =  entry.getInflater()  +  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Inflater  inflater  =  entry.getInflater()  +  1;  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Inflater  inflater  =  entry.getInflater()  +  1;	  Inflater    inflater    =    entry.getInflater();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
168	[BUG]  [BUGGY]  Inflater  inflater  =  entry.getEntry();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Inflater  inflater  =  entry.getEntry();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Inflater  inflater  =  entry.getEntry();	  Inflater    inflater    =    entry.getInflater();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
169	[BUG]  [BUGGY]  Inflater  inflater  =  entry.getInflaterChar();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Inflater  inflater  =  entry.getInflaterChar();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Inflater  inflater  =  entry.getInflaterChar();	  Inflater    inflater    =    entry.getInflater();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
170	[BUG]  [BUGGY]  Inflater  inflater  =  entry.getInflaterBytes();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Inflater  inflater  =  entry.getInflaterBytes();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Inflater  inflater  =  entry.getInflaterBytes();	  Inflater    inflater    =    entry.getInflater();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
171	[BUG]  [BUGGY]  Inflater  inflater  =  entry.getInflater()  -  1;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Inflater  inflater  =  entry.getInflater()  -  1;  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Inflater  inflater  =  entry.getInflater()  -  1;	  Inflater    inflater    =    entry.getInflater();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
172	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit().hasDataDescriptor()  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGenericPurposeBit().hasDataDescriptor()  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit().hasDataDescriptor()  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().hasDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
173	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor(true)&&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor(true)&&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().hasDataDescriptor(true)&&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().hasDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
174	[BUG]  [BUGGY]  return  entry.getSize().hasDataDescriptor()  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getSize().hasDataDescriptor()  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getSize().hasDataDescriptor()  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().hasDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
175	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor()  &&(entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor()  &&(entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().hasDataDescriptor()  &&(entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().hasDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
176	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor(true)||  (entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor(true)||  (entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().hasDataDescriptor(true)||  (entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().hasDataDescriptor()    ||    (entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
177	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit().hasDataDescriptor()  ||  (entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGenericPurposeBit().hasDataDescriptor()  ||  (entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit().hasDataDescriptor()  ||  (entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().hasDataDescriptor()    ||    (entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
178	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor()  ||  entry.getMethod()  ==  ZipEntry.DEFLATED)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor()  ||  entry.getMethod()  ==  ZipEntry.DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().hasDataDescriptor()  ||  entry.getMethod()  ==  ZipEntry.DEFLATED)	  return    entry.getGeneralPurposeBit().hasDataDescriptor()    ||    (entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
179	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().isDataDescriptor()  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().isDataDescriptor()  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().isDataDescriptor()  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().hasDataDescriptor()    ||    (entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
180	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor()  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor()  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().hasDataDescriptor()  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().hasDataDescriptor()    ||    (entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
181	[BUG]  [BUGGY]  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED  &&  entry.getValue()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED  &&  entry.getValue()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED  &&  entry.getValue()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();	  ||    entry.getMethod()    ==    ZipMethod.ENHANCED_DEFLATED.getCode();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
182	[BUG]  [BUGGY]  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED  ||  entry.getMethod()!=  ZipMethod.ENHANCED_DEFLATED.getCode();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED  ||  entry.getMethod()!=  ZipMethod.ENHANCED_DEFLATED.getCode();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED  ||  entry.getMethod()!=  ZipMethod.ENHANCED_DEFLATED.getCode();	  ||    entry.getMethod()    ==    ZipMethod.ENHANCED_DEFLATED.getCode();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
183	[BUG]  [BUGGY]  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED  &&  entry.getValue()!=  ZipMethod.ENHANCED_DEFLATED.getCode();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED  &&  entry.getValue()!=  ZipMethod.ENHANCED_DEFLATED.getCode();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED  &&  entry.getValue()!=  ZipMethod.ENHANCED_DEFLATED.getCode();	  ||    entry.getMethod()    ==    ZipMethod.ENHANCED_DEFLATED.getCode();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
184	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64()  &&  (entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64()  &&  (entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesZip64()  &&  (entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesZip64()    ||    (entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
185	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  &&  (entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  &&  (entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64()  &&  (entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesZip64()    ||    (entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
186	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64()  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesZip64()    ||    (entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
187	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64()  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64()  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesZip64()  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesZip64()    ||    (entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
188	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64(true)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64(true)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64(true)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesZip64(true)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
189	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64(false)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64(false)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesZip64(false)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesZip64(true)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
190	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64(true)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64(true)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64(true)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)	  return!entry.getGeneralPurposeBit().usesZip64(true)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
191	[BUG]  [BUGGY]  int  pos  =  entry.getLength()  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  int  pos  =  entry.getLength()  +  1;  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	int  pos  =  entry.getLength()  +  1;	  int    pos    =    entry.getLength();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
192	[BUG]  [BUGGY]  int  pos  =  entry.getPosition();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  int  pos  =  entry.getPosition();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	int  pos  =  entry.getPosition();	  int    pos    =    entry.getLength();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
193	[BUG]  [BUGGY]  int  pos  =  entry.getLength()  *  2;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  int  pos  =  entry.getLength()  *  2;  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	int  pos  =  entry.getLength()  *  2;	  int    pos    =    entry.getLength();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
194	[BUG]  [BUGGY]  int  pos  =  entry.getPos();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  int  pos  =  entry.getPos();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	int  pos  =  entry.getPos();	  int    pos    =    entry.getLength();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
195	[BUG]  [BUGGY]  int  pos  =  entry.getLength()  +  2;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  int  pos  =  entry.getLength()  +  2;  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	int  pos  =  entry.getLength()  +  2;	  int    pos    =    entry.getLength();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
196	[BUG]  [BUGGY]  int  pos  =  entry.getOffset();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  int  pos  =  entry.getOffset();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	int  pos  =  entry.getOffset();	  int    pos    =    entry.getLength();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
197	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(this)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(this)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(this)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor(null)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
198	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(zip64)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(zip64)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(zip64)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor(null)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
199	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(null)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(null)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(null)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor(null)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
200	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)&&  (allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)&&  (allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)&&  (allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)&&    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
201	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit().usesDataDescriptor(zipEncoding)&&  (allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGenericPurposeBit().usesDataDescriptor(zipEncoding)&&  (allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit().usesDataDescriptor(zipEncoding)&&  (allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)&&    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
202	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit().usesDataDescriptor(zipEncoding)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGenericPurposeBit().usesDataDescriptor(zipEncoding)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit().usesDataDescriptor(zipEncoding)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)&&    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
203	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)&&  (!allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)&&  (!allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)&&  (!allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)&&    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
204	[BUG]  [BUGGY]  Entry  <?>  entry  =  entry.getKey();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Entry  <?>  entry  =  entry.getKey();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Entry  <?>  entry  =  entry.getKey();	  Entry    <?>    entry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
205	[BUG]  [BUGGY]  Entry  <?>  entry  =  entry.getValue()  +  1;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Entry  <?>  entry  =  entry.getValue()  +  1;  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Entry  <?>  entry  =  entry.getValue()  +  1;	  Entry    <?>    entry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
206	[BUG]  [BUGGY]  Entry  <?>  entry  =  entry.getEntry();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Entry  <?>  entry  =  entry.getEntry();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Entry  <?>  entry  =  entry.getEntry();	  Entry    <?>    entry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
207	[BUG]  [BUGGY]  Entry  <?>  entry  =  entry.getNext();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Entry  <?>  entry  =  entry.getNext();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Entry  <?>  entry  =  entry.getNext();	  Entry    <?>    entry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
208	[BUG]  [BUGGY]  Entry  <?>  entry  =  entry.getAncestor();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Entry  <?>  entry  =  entry.getAncestor();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Entry  <?>  entry  =  entry.getAncestor();	  Entry    <?>    entry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
209	[BUG]  [BUGGY]  Entry  <?>  entry  =  entry.getAnchor();  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Entry  <?>  entry  =  entry.getAnchor();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Entry  <?>  entry  =  entry.getAnchor();	  Entry    <?>    entry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
210	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  (entry.getMethod()  ==  ZipEntry.DEFLATED)  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  (entry.getMethod()  ==  ZipEntry.DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64()  ||  (entry.getMethod()  ==  ZipEntry.DEFLATED)	  return    entry.getGeneralPurposeBit().usesZip64()    ||    (entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
211	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  (entry.getMethod()  ==  ZipEntry.STRING)  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  (entry.getMethod()  ==  ZipEntry.STRING)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64()  ||  (entry.getMethod()  ==  ZipEntry.STRING)	  return    entry.getGeneralPurposeBit().usesZip64()    ||    (entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
212	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(z)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(z)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(z)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(z)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
213	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesDataDescriptor  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor    &&(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
214	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit().hasDataDescriptor()  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGenericPurposeBit().hasDataDescriptor()  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit().hasDataDescriptor()  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGenericPurposeBit().hasDataDescriptor()    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
215	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit().hasDataDescriptor(true)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGenericPurposeBit().hasDataDescriptor(true)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit().hasDataDescriptor(true)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGenericPurposeBit().hasDataDescriptor()    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
216	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit().hasDataDescriptor(null)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGenericPurposeBit().hasDataDescriptor(null)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit().hasDataDescriptor(null)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGenericPurposeBit().hasDataDescriptor()    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
217	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit().hasDataDescriptor()  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGenericPurposeBit().hasDataDescriptor()  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit().hasDataDescriptor()  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)	  return    entry.getGenericPurposeBit().hasDataDescriptor()    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
218	[BUG]  [BUGGY]  Entry  entry  =  entry.getKey();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Entry  entry  =  entry.getKey();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Entry  entry  =  entry.getKey();	  Entry    entry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
219	[BUG]  [BUGGY]  Entry  entry  =  entry.getValue()  ||  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Entry  entry  =  entry.getValue()  ||  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED;  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Entry  entry  =  entry.getValue()  ||  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED;	  Entry    entry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
220	[BUG]  [BUGGY]  Entry  entry  =  entry.getEntry();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Entry  entry  =  entry.getEntry();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Entry  entry  =  entry.getEntry();	  Entry    entry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
221	[BUG]  [BUGGY]  Entry  entry  =  entry.getValue()  &&  isEnabled(ZipMethod.ENHANCED_DEFLATED);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Entry  entry  =  entry.getValue()  &&  isEnabled(ZipMethod.ENHANCED_DEFLATED);  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Entry  entry  =  entry.getValue()  &&  isEnabled(ZipMethod.ENHANCED_DEFLATED);	  Entry    entry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
222	[BUG]  [BUGGY]  Entry  entry  =  entry.getValue()  +  1;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Entry  entry  =  entry.getValue()  +  1;  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Entry  entry  =  entry.getValue()  +  1;	  Entry    entry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
223	[BUG]  [BUGGY]  Entry  entry  =  entry.getValue()  ||  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED.getCode();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Entry  entry  =  entry.getValue()  ||  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED.getCode();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Entry  entry  =  entry.getValue()  ||  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED.getCode();	  Entry    entry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
224	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)	  return    entry.getGeneralPurposeBit().usesZip64()    ||    hasDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
225	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)	  return    entry.getGeneralPurposeBit().usesZip64()    ||    hasDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
226	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)	  return    entry.getGeneralPurposeBit().usesZip64()    ||    hasDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
227	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()!=  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()!=  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()!=  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesZip64()    ||    hasDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
228	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.HARD)  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.HARD)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.HARD)	  return    entry.getGeneralPurposeBit().usesZip64()    ||    hasDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
229	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)	  return    entry.getGeneralPurposeBit().usesDataDescriptor    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
230	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit().usesZip64()  &&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGenericPurposeBit().usesZip64()  &&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit().usesZip64()  &&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGenericPurposeBit().usesZip64()    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
231	[BUG]  [BUGGY]  ||  entry.getName()!=  ZipMethod.ENHANCED_DEFLATED;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  ||  entry.getName()!=  ZipMethod.ENHANCED_DEFLATED;  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getName()!=  ZipMethod.ENHANCED_DEFLATED;	  ||    entry.getMethod()!=    ZipMethod.ENHANCED_DEFLATED;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
232	[BUG]  [BUGGY]  ||  entry.getValue()!=  ZipMethod.ENHANCED_DEFLATED;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  ||  entry.getValue()!=  ZipMethod.ENHANCED_DEFLATED;  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getValue()!=  ZipMethod.ENHANCED_DEFLATED;	  ||    entry.getMethod()!=    ZipMethod.ENHANCED_DEFLATED;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
233	[BUG]  [BUGGY]  ||  entry.getCode()!=  ZipMethod.ENHANCED_DEFLATED;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  ||  entry.getCode()!=  ZipMethod.ENHANCED_DEFLATED;  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getCode()!=  ZipMethod.ENHANCED_DEFLATED;	  ||    entry.getMethod()!=    ZipMethod.ENHANCED_DEFLATED;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
234	[BUG]  [BUGGY]  ||  entry.getDescriptor()!=  ZipMethod.ENHANCED_DEFLATED;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  ||  entry.getDescriptor()!=  ZipMethod.ENHANCED_DEFLATED;  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getDescriptor()!=  ZipMethod.ENHANCED_DEFLATED;	  ||    entry.getMethod()!=    ZipMethod.ENHANCED_DEFLATED;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
235	[BUG]  [BUGGY]  ||  entry.getType()  ==  ZipMethod.ENHANCED_DEFLATED;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  ||  entry.getType()  ==  ZipMethod.ENHANCED_DEFLATED;  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getType()  ==  ZipMethod.ENHANCED_DEFLATED;	  ||    entry.getMethod()!=    ZipMethod.ENHANCED_DEFLATED;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
236	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor()  ||(entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor()  ||(entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor()  ||(entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
237	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor()  &&(entry.getMethod()  ==  ZipEntry.STORED  ||  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor()  &&(entry.getMethod()  ==  ZipEntry.STORED  ||  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor()  &&(entry.getMethod()  ==  ZipEntry.STORED  ||  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
238	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor()  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.DEFLATED)  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor()  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor()  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.DEFLATED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
239	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit().usesDataDescriptor(true)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGenericPurposeBit().usesDataDescriptor(true)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit().usesDataDescriptor(true)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)	  return    entry.getGenericPurposeBit().usesDataDescriptor(true)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
240	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit().usesZip64(true)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGenericPurposeBit().usesZip64(true)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit().usesZip64(true)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGenericPurposeBit().usesDataDescriptor(true)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
241	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit().usesDataDescriptor(true)||  (allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGenericPurposeBit().usesDataDescriptor(true)||  (allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit().usesDataDescriptor(true)||  (allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGenericPurposeBit().usesDataDescriptor(true)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
242	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit().usesDataDescriptor(true)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGenericPurposeBit().usesDataDescriptor(true)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit().usesDataDescriptor(true)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)	  return    entry.getGenericPurposeBit().usesDataDescriptor(true)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
243	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  {  throw  new  IllegalArgumentException( "Current  entry  is  null. ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  {  throw  new  IllegalArgumentException( "Current  entry  is  null. ");  }  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  {  throw  new  IllegalArgumentException( "Current  entry  is  null. ");  }	  if(entry    ==    null)    {    throw    new    IllegalArgumentException(   "Current    entry    is    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
244	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  {  throw  new  IllegalArgumentException( "Current  entry  is  null. ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  {  throw  new  IllegalArgumentException( "Current  entry  is  null. ");  }  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  {  throw  new  IllegalArgumentException( "Current  entry  is  null. ");  }	  if(entry    ==    null)    {    throw    new    IllegalArgumentException(   "Current    entry    is    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
245	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  {  throw  new  IllegalArgumentException( "Current  entry  is  null. ");  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  {  throw  new  IllegalArgumentException( "Current  entry  is  null. ");  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  {  throw  new  IllegalArgumentException( "Current  entry  is  null. ");	  if(entry    ==    null)    {    throw    new    IllegalArgumentException(   "Current    entry    is    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
246	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  {  throw  new  IllegalArgumentException( "Current  entry  is  null. ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  {  throw  new  IllegalArgumentException( "Current  entry  is  null. ");  }  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  {  throw  new  IllegalArgumentException( "Current  entry  is  null. ");  }	  if(entry    ==    null)    {    throw    new    IllegalArgumentException(   "Current    entry    is    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
247	[BUG]  [BUGGY]  ||  entry  ==  null)  {  throw  new  IllegalArgumentException( "Current  entry  is  null. ");  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  ||  entry  ==  null)  {  throw  new  IllegalArgumentException( "Current  entry  is  null. ");  }  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry  ==  null)  {  throw  new  IllegalArgumentException( "Current  entry  is  null. ");  }	  if(entry    ==    null)    {    throw    new    IllegalArgumentException(   "Current    entry    is    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
248	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  {  throw  new  IllegalArgumentException( "Current  entry  is  null. ");  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  {  throw  new  IllegalArgumentException( "Current  entry  is  null. ");  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  {  throw  new  IllegalArgumentException( "Current  entry  is  null. ");	  if(entry    ==    null)    {    throw    new    IllegalArgumentException(   "Current    entry    is    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
249	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(true)||  (allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.DEFLATED)  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(true)||  (allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(true)||  (allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.DEFLATED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor(true)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.DEFLATED)    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
250	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(false)||  (allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.DEFLATED)  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(false)||  (allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(false)||  (allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.DEFLATED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor(true)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.DEFLATED)    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
251	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(entry)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(entry)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(entry)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor(ze)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
252	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(ze)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(ze)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(ze)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor(ze)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
253	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(false)||(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(false)||(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(false)||(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor(true)&&(allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
254	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(true)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.DEFLATED)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(true)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(true)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.DEFLATED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor(true)&&(allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
255	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().hasDataDescriptor  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
256	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()!=  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()!=  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()!=  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
257	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor(zip64)&&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor(zip64)&&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().hasDataDescriptor(zip64)&&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().hasDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
258	[BUG]  [BUGGY]  return  entry.getName().hasDataDescriptor()  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getName().hasDataDescriptor()  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getName().hasDataDescriptor()  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().hasDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
259	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor()  ||(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()!=  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor()  ||(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()!=  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().hasDataDescriptor()  ||(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()!=  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().hasDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
260	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(ze)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(ze)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesDataDescriptor(ze)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
261	[BUG]  [BUGGY]  return  entry.getName()!=  null  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getName()!=  null  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getName()!=  null  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit()!=    null    &&(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
262	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit()!=  null  &&(entry.getMethod()  ==  ZipEntry.STRING)  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit()!=  null  &&(entry.getMethod()  ==  ZipEntry.STRING)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit()!=  null  &&(entry.getMethod()  ==  ZipEntry.STRING)	  return    entry.getGeneralPurposeBit()!=    null    &&(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
263	[BUG]  [BUGGY]  ||  entry.getParent()!=  ZipMethod.ENHANCED_DEFLATED;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  ||  entry.getParent()!=  ZipMethod.ENHANCED_DEFLATED;  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getParent()!=  ZipMethod.ENHANCED_DEFLATED;	  ||    entry.getMethod()!=    ZipMethod.ENHANCED_DEFLATED;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
264	[BUG]  [BUGGY]  ||  entry.getEntry()!=  ZipMethod.ENHANCED_DEFLATED;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  ||  entry.getEntry()!=  ZipMethod.ENHANCED_DEFLATED;  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getEntry()!=  ZipMethod.ENHANCED_DEFLATED;	  ||    entry.getMethod()!=    ZipMethod.ENHANCED_DEFLATED;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
265	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64(current)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64(current)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesZip64(current)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesZip64(ze)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
266	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64(prefix)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64(prefix)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesZip64(prefix)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesZip64(ze)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
267	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64(zipEncoding)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64(zipEncoding)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesZip64(zipEncoding)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesZip64(ze)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
268	[BUG]  [BUGGY]  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED);  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED);	  ||    entry.getMethod()    ==    ZipMethod.ENHANCED_DEFLATED);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
269	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor()  ||  (entry.getMethod()  ==  ZipEntry.DEFLATED)  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor()  ||  (entry.getMethod()  ==  ZipEntry.DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().hasDataDescriptor()  ||  (entry.getMethod()  ==  ZipEntry.DEFLATED)	  return    entry.getGeneralPurposeBit().hasDataDescriptor()    ||    (entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
270	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64(true)&&  (allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64(true)&&  (allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesZip64(true)&&  (allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(true)&&    (allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
271	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64(true)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64(true)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesZip64(true)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesZip64(true)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
272	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64(false)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64(false)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesZip64(false)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesZip64(true)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
273	[BUG]  [BUGGY]  ||  entry.getName()  ==  ZipMethod.ENHANCED_DEFLATED;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  ||  entry.getName()  ==  ZipMethod.ENHANCED_DEFLATED;  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getName()  ==  ZipMethod.ENHANCED_DEFLATED;	  ||    entry.getMethod()    ==    ZipMethod.ENHANCED_DEFLATED;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
274	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor()  ||  (entry.getMethod()  ==  ZipEntry.STRING  &&  hasDataDescriptor)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor()  ||  (entry.getMethod()  ==  ZipEntry.STRING  &&  hasDataDescriptor)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().hasDataDescriptor()  ||  (entry.getMethod()  ==  ZipEntry.STRING  &&  hasDataDescriptor)	  return    entry.getGeneralPurposeBit().hasDataDescriptor()    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STRING)    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
275	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor()  ||  (entry.getMethod()  ==  ZipEntry.STRING)  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor()  ||  (entry.getMethod()  ==  ZipEntry.STRING)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().hasDataDescriptor()  ||  (entry.getMethod()  ==  ZipEntry.STRING)	  return    entry.getGeneralPurposeBit().hasDataDescriptor()    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STRING)    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
276	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  (!allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  (!allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64()  ||  (!allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)	  return    entry.getGeneralPurposeBit().usesZip64()    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STRING)    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
277	[BUG]  [BUGGY]  int  pos  =  entry.getHeaderOffset();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  int  pos  =  entry.getHeaderOffset();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	int  pos  =  entry.getHeaderOffset();	  int    pos    =    entry.getLength();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
278	[BUG]  [BUGGY]  int  pos  =  entry.getSize();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  int  pos  =  entry.getSize();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	int  pos  =  entry.getSize();	  int    pos    =    entry.getLength();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
279	[BUG]  [BUGGY]  int  pos  =  entry.getRowLength();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  int  pos  =  entry.getRowLength();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	int  pos  =  entry.getRowLength();	  int    pos    =    entry.getLength();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
280	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(true)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(true)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesDataDescriptor(true)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(true)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.DEFLATED)    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
281	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(false)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(false)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesDataDescriptor(false)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(true)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.DEFLATED)    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
282	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit()!=  null  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGenericPurposeBit()!=  null  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit()!=  null  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGenericPurposeBit().hasDataDescriptor()    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
283	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()!=  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()!=  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesZip64  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()!=  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()!=    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
284	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getValue()  ==  ZipEntry.STORED  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getValue()  ==  ZipEntry.STORED  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getValue()  ==  ZipEntry.STORED	  return    entry.getGeneralPurposeBit().usesZip64()    ||    hasDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
285	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING	  return    entry.getGeneralPurposeBit().usesZip64()    ||    hasDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
286	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor    &&(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
287	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().hasDataDescriptor()  &&  (allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().hasDataDescriptor()  &&  (allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().hasDataDescriptor()  &&  (allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().hasDataDescriptor()    &&    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
288	[BUG]  [BUGGY]  Entry  <?>  entry  =  entry.getData();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Entry  <?>  entry  =  entry.getData();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Entry  <?>  entry  =  entry.getData();	  Entry    <?>    entry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
289	[BUG]  [BUGGY]  Entry  <?>  entry  =  entry.getImplicitReturn();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Entry  <?>  entry  =  entry.getImplicitReturn();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Entry  <?>  entry  =  entry.getImplicitReturn();	  Entry    <?>    entry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
290	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)||  (entry.getMethod()  ==  ZipEntry.DEFLATED  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)||  (entry.getMethod()  ==  ZipEntry.DEFLATED  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)||  (entry.getMethod()  ==  ZipEntry.DEFLATED  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_	  return!entry.getGeneralPurposeBit().usesDataDescriptor(ze)||    (entry.getMethod()    ==    ZipEntry.DEFLATED    &&    entry.getMethod()    ==    ZipEntry.ENHANCED_DEFLATED)    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
291	[BUG]  [BUGGY]  boolean  hasDataDescriptor  =  entry.getDataDescriptor();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  boolean  hasDataDescriptor  =  entry.getDataDescriptor();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	boolean  hasDataDescriptor  =  entry.getDataDescriptor();	  boolean    hasDataDescriptor    =    entry.hasDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
292	[BUG]  [BUGGY]  boolean  hasDataDescriptor  =  entry.hasHasDataDescriptor();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  boolean  hasDataDescriptor  =  entry.hasHasDataDescriptor();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	boolean  hasDataDescriptor  =  entry.hasHasDataDescriptor();	  boolean    hasDataDescriptor    =    entry.hasDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
293	[BUG]  [BUGGY]  boolean  hasDataDescriptor  =  entry.hasDataDescriptor()  ||  isEnabled(ZipMethod.ENHANCED_DEFLATED);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  boolean  hasDataDescriptor  =  entry.hasDataDescriptor()  ||  isEnabled(ZipMethod.ENHANCED_DEFLATED);  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	boolean  hasDataDescriptor  =  entry.hasDataDescriptor()  ||  isEnabled(ZipMethod.ENHANCED_DEFLATED);	  boolean    hasDataDescriptor    =    entry.hasDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
294	[BUG]  [BUGGY]  boolean  hasDataDescriptor  =  entry.hasDataDescriptor()  ||  hasUTF8Flag;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  boolean  hasDataDescriptor  =  entry.hasDataDescriptor()  ||  hasUTF8Flag;  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	boolean  hasDataDescriptor  =  entry.hasDataDescriptor()  ||  hasUTF8Flag;	  boolean    hasDataDescriptor    =    entry.hasDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
295	[BUG]  [BUGGY]  boolean  hasDataDescriptor  =  entry.hasDataDescriptor()  ||  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  boolean  hasDataDescriptor  =  entry.hasDataDescriptor()  ||  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED;  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	boolean  hasDataDescriptor  =  entry.hasDataDescriptor()  ||  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED;	  boolean    hasDataDescriptor    =    entry.hasDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
296	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesZip64    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
297	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit()!=  null  &&(!allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit()!=  null  &&(!allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit()!=  null  &&(!allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor()    &&(!allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
298	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(true)||  (!allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(true)||  (!allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(true)||  (!allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor(true)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.DEFLATED)    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
299	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(true)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(true)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(true)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor(true)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.DEFLATED)    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
300	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entry.getData();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Entry  <  K,  V>  entry  =  entry.getData();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Entry  <  K,  V>  entry  =  entry.getData();	  Entry    <    K,    V>    entry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
301	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64(null)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64(null)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64(null)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor(null)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
302	[BUG]  [BUGGY]  Inflater  inflater  =  entry.getInflater()  &&  isEnabled(ZipMethod.ENHANCED_DEFLATED);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Inflater  inflater  =  entry.getInflater()  &&  isEnabled(ZipMethod.ENHANCED_DEFLATED);  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Inflater  inflater  =  entry.getInflater()  &&  isEnabled(ZipMethod.ENHANCED_DEFLATED);	  Inflater    inflater    =    entry.getInflater();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
303	[BUG]  [BUGGY]  Inflater  inflater  =  entry.isInflater()?  false  :  entry.getInflater();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Inflater  inflater  =  entry.isInflater()?  false  :  entry.getInflater();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Inflater  inflater  =  entry.isInflater()?  false  :  entry.getInflater();	  Inflater    inflater    =    entry.getInflater();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
304	[BUG]  [BUGGY]  Inflater  inflater  =  entry.getInflater(ZipMethod.ENHANCED_DEFLATED);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Inflater  inflater  =  entry.getInflater(ZipMethod.ENHANCED_DEFLATED);  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Inflater  inflater  =  entry.getInflater(ZipMethod.ENHANCED_DEFLATED);	  Inflater    inflater    =    entry.getInflater();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
305	[BUG]  [BUGGY]  Inflater  inflater  =  entry.getInflater()  &&  isEnabled(ZipEntry.ENHANCED_DEFLATED);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Inflater  inflater  =  entry.getInflater()  &&  isEnabled(ZipEntry.ENHANCED_DEFLATED);  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Inflater  inflater  =  entry.getInflater()  &&  isEnabled(ZipEntry.ENHANCED_DEFLATED);	  Inflater    inflater    =    entry.getInflater();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
306	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64  ||  hasDataDescriptor  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64  ||  hasDataDescriptor  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesZip64  ||  hasDataDescriptor  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesZip64    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
307	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesZip64  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesZip64    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
308	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64  ||  (entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64  ||  (entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesZip64  ||  (entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesZip64    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
309	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(true)||  (!allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(true)||  (!allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(true)||  (!allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor(true)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
310	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(z)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(z)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesDataDescriptor(z)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(z)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
311	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(z)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(z)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesDataDescriptor(z)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(z)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
312	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  &&  entry  ==  null)  {  throw  new  IllegalStateException( "Current  entry  is  null. ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  &&  entry  ==  null)  {  throw  new  IllegalStateException( "Current  entry  is  null. ");  }  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	allowStoredEntriesWithDataDescriptor  &&  entry  ==  null)  {  throw  new  IllegalStateException( "Current  entry  is  null. ");  }	  if(entry    ==    null)    {    throw    new    IllegalStateException(   "Current    entry    is    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
313	[BUG]  [BUGGY]  ||  entry  ==  null)  {  throw  new  IllegalStateException( "Current  entry  is  null. ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  ||  entry  ==  null)  {  throw  new  IllegalStateException( "Current  entry  is  null. ");  }  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry  ==  null)  {  throw  new  IllegalStateException( "Current  entry  is  null. ");  }	  if(entry    ==    null)    {    throw    new    IllegalStateException(   "Current    entry    is    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
314	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  ||  entry  ==  null)  {  throw  new  IllegalStateException( "Current  entry  is  null. ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  ||  entry  ==  null)  {  throw  new  IllegalStateException( "Current  entry  is  null. ");  }  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	allowStoredEntriesWithDataDescriptor  ||  entry  ==  null)  {  throw  new  IllegalStateException( "Current  entry  is  null. ");  }	  if(entry    ==    null)    {    throw    new    IllegalStateException(   "Current    entry    is    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
315	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  &&  entry!=  null)  {  throw  new  IllegalStateException( "Current  entry  is  null. ");  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  &&  entry!=  null)  {  throw  new  IllegalStateException( "Current  entry  is  null. ");  }  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	allowStoredEntriesWithDataDescriptor  &&  entry!=  null)  {  throw  new  IllegalStateException( "Current  entry  is  null. ");  }	  if(entry    ==    null)    {    throw    new    IllegalStateException(   "Current    entry    is    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
316	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor()  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor()  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().hasDataDescriptor()  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().hasDataDescriptor()    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
317	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  (!allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  (!allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64()  ||  (!allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)	  return    entry.getGeneralPurposeBit().usesZip64()    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.DEFLATED)    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
318	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit().usesFileDataDescriptor()  ||(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGenericPurposeBit().usesFileDataDescriptor()  ||(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit().usesFileDataDescriptor()  ||(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGenericPurposeBit().usesDataDescriptor()    ||(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
319	[BUG]  [BUGGY]  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED  &&  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED  &&  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED  &&  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();	  ||    entry.getMethod()    ==    ZipMethod.ENHANCED_DEFLATED.getCode();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
320	[BUG]  [BUGGY]  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED  ||  entry.getMethod()  ==  ZipEntry.STORED.getCode();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED  ||  entry.getMethod()  ==  ZipEntry.STORED.getCode();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED  ||  entry.getMethod()  ==  ZipEntry.STORED.getCode();	  ||    entry.getMethod()    ==    ZipMethod.ENHANCED_DEFLATED.getCode();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
321	[BUG]  [BUGGY]  ||  entry.getName()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  ||  entry.getName()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getName()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();	  ||    entry.getMethod()    ==    ZipMethod.ENHANCED_DEFLATED.getCode();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
322	[BUG]  [BUGGY]  ||  entry.getValue()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  ||  entry.getValue()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getValue()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();	  ||    entry.getMethod()    ==    ZipMethod.ENHANCED_DEFLATED.getCode();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
323	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64(z)||  (hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64(z)||  (hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesZip64(z)||  (hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesZip64(z)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
324	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64(z)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64(z)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesZip64(z)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)	  return!entry.getGeneralPurposeBit().usesZip64(z)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
325	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit().usesFileDescriptor()  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGenericPurposeBit().usesFileDescriptor()  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit().usesFileDescriptor()  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGenericPurposeBit().usesDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
326	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit().usesUnicodeExtraFields()  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGenericPurposeBit().usesUnicodeExtraFields()  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit().usesUnicodeExtraFields()  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGenericPurposeBit().usesDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
327	[BUG]  [BUGGY]  if(entry!=  null)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  if(entry!=  null)  {  return  true;  }  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	if(entry!=  null)  {  return  true;  }	  if(entry!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
328	[BUG]  [BUGGY]  If(entry  ==  null)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  If(entry  ==  null)  {  return  false;  }  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	If(entry  ==  null)  {  return  false;  }	  if(entry!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
329	[BUG]  [BUGGY]  Inflater  inflater  =  getInflater(entry.getName());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Inflater  inflater  =  getInflater(entry.getName());  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Inflater  inflater  =  getInflater(entry.getName());	  Inflater    inflater    =    getInflater();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
330	[BUG]  [BUGGY]  Inflater  inflater  =  getInflater(entry.getData());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Inflater  inflater  =  getInflater(entry.getData());  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Inflater  inflater  =  getInflater(entry.getData());	  Inflater    inflater    =    getInflater();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
331	[BUG]  [BUGGY]  ||  entry.getName()  ==  ZipMethod.ENHANCED_DEFLATED)  {  return  true;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  ||  entry.getName()  ==  ZipMethod.ENHANCED_DEFLATED)  {  return  true;  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getName()  ==  ZipMethod.ENHANCED_DEFLATED)  {  return  true;	  ||    entry.getMethod()    ==    ZipMethod.ENHANCED_DEFLATED)    {    return    true;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
332	[BUG]  [BUGGY]  ||  entry.getValue()  ==  ZipMethod.ENHANCED_DEFLATED)  {  return  true;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  ||  entry.getValue()  ==  ZipMethod.ENHANCED_DEFLATED)  {  return  true;  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getValue()  ==  ZipMethod.ENHANCED_DEFLATED)  {  return  true;	  ||    entry.getMethod()    ==    ZipMethod.ENHANCED_DEFLATED)    {    return    true;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
333	[BUG]  [BUGGY]  ||  entry.getMethod()!=  ZipMethod.ENHANCED_DEFLATED)  {  return  true;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  ||  entry.getMethod()!=  ZipMethod.ENHANCED_DEFLATED)  {  return  true;  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getMethod()!=  ZipMethod.ENHANCED_DEFLATED)  {  return  true;	  ||    entry.getMethod()    ==    ZipMethod.ENHANCED_DEFLATED)    {    return    true;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
334	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesFileDataDescriptor(z)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesFileDataDescriptor(z)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesFileDataDescriptor(z)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor(z)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
335	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(z)||  (!allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(z)||  (!allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(z)||  (!allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor(z)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
336	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGenericPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesZip64()    ||    hasDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
337	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getSize()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getSize()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getSize()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesZip64()    ||    hasDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
338	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getValue()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getValue()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getValue()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesZip64()    ||    hasDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
339	[BUG]  [BUGGY]  Inflater  inf  =  entry.getFileInputStream();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Inflater  inf  =  entry.getFileInputStream();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Inflater  inf  =  entry.getFileInputStream();	  Inflater    inf    =    entry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
340	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor  ||  (entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor  ||  (entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().hasDataDescriptor  ||  (entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor    ||    (entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
341	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor  &&(entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor  &&(entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().hasDataDescriptor  &&(entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor    ||    (entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
342	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64(hasDataDescriptor)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64(hasDataDescriptor)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64(hasDataDescriptor)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor(hasDataDescriptor)&&(allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
343	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(hasUTF8Flag)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(hasUTF8Flag)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(hasUTF8Flag)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor(hasDataDescriptor)&&(allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
344	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64(entry)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64(entry)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64(entry)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor(hasDataDescriptor)&&(allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
345	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(current)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(current)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(current)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor(hasDataDescriptor)&&(allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
346	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getMethod()  ==  ZipEntry.STORED)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  if(entry  ==  null  ||  entry.getMethod()  ==  ZipEntry.STORED)  {  return  false;  }  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	if(entry  ==  null  ||  entry.getMethod()  ==  ZipEntry.STORED)  {  return  false;  }	  if(entry    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
347	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getMethod()!=  ZipEntry.STORED)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  if(entry  ==  null  ||  entry.getMethod()!=  ZipEntry.STORED)  {  return  false;  }  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	if(entry  ==  null  ||  entry.getMethod()!=  ZipEntry.STORED)  {  return  false;  }	  if(entry    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
348	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getName()!=  null)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  if(entry  ==  null  ||  entry.getName()!=  null)  {  return  false;  }  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	if(entry  ==  null  ||  entry.getName()!=  null)  {  return  false;  }	  if(entry    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
349	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64(true)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64(true)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64(true)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor(true)&&(allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
350	[BUG]  [BUGGY]  Entry  entry  =  entry.getImplicitReturn();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Entry  entry  =  entry.getImplicitReturn();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Entry  entry  =  entry.getImplicitReturn();	  Entry    entry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
351	[BUG]  [BUGGY]  Entry  entry  =  entry.getValue()  -  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Entry  entry  =  entry.getValue()  -  1;  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Entry  entry  =  entry.getValue()  -  1;	  Entry    entry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
352	[BUG]  [BUGGY]  Entry  entry  =  entry.getNext();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Entry  entry  =  entry.getNext();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Entry  entry  =  entry.getNext();	  Entry    entry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
353	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  &&(hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  &&(hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64()  &&(hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesZip64()    &&(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
354	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  &&(hasDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  &&(hasDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64()  &&(hasDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesZip64()    &&(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
355	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  &&  entry  ==  null)  {  throw  new  IllegalArgumentException( "Current  entry  is  null. ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  &&  entry  ==  null)  {  throw  new  IllegalArgumentException( "Current  entry  is  null. ");  }  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	allowStoredEntriesWithDataDescriptor  &&  entry  ==  null)  {  throw  new  IllegalArgumentException( "Current  entry  is  null. ");  }	  if(entry    ==    null)    {    throw    new    IllegalArgumentException(   "Current    entry    is    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
356	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  ||  entry  ==  null)  {  throw  new  IllegalArgumentException( "Current  entry  is  null. ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  ||  entry  ==  null)  {  throw  new  IllegalArgumentException( "Current  entry  is  null. ");  }  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	allowStoredEntriesWithDataDescriptor  ||  entry  ==  null)  {  throw  new  IllegalArgumentException( "Current  entry  is  null. ");  }	  if(entry    ==    null)    {    throw    new    IllegalArgumentException(   "Current    entry    is    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
357	[BUG]  [BUGGY]  if(entry!=  null)  {  throw  new  IllegalArgumentException( "Current  entry  is  null. ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  if(entry!=  null)  {  throw  new  IllegalArgumentException( "Current  entry  is  null. ");  }  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	if(entry!=  null)  {  throw  new  IllegalArgumentException( "Current  entry  is  null. ");  }	  if(entry    ==    null)    {    throw    new    IllegalArgumentException(   "Current    entry    is    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
358	[BUG]  [BUGGY]  ||  entry!=  null)  {  throw  new  IllegalArgumentException( "Current  entry  is  null. ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  ||  entry!=  null)  {  throw  new  IllegalArgumentException( "Current  entry  is  null. ");  }  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry!=  null)  {  throw  new  IllegalArgumentException( "Current  entry  is  null. ");  }	  if(entry    ==    null)    {    throw    new    IllegalArgumentException(   "Current    entry    is    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
359	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64(entry)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64(entry)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64(entry)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor(ze)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
360	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64(true)&&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64(true)&&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64(true)&&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor(true)&&(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
361	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesZip64  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor    &&(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
362	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64(zipEncoding)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64(zipEncoding)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64(zipEncoding)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
363	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)||  (entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)||  (entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)||  (entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
364	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)||  (entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)||  (entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)||  (entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
365	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)||  (entry.getMethod()  ==  ZipEntry.DEFLATED)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)||  (entry.getMethod()  ==  ZipEntry.DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)||  (entry.getMethod()  ==  ZipEntry.DEFLATED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
366	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit().usesDataDescriptor(true)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGenericPurposeBit().usesDataDescriptor(true)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit().usesDataDescriptor(true)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGenericPurposeBit().usesDataDescriptor(true)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
367	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit().usesFileDataDescriptor(true)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGenericPurposeBit().usesFileDataDescriptor(true)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit().usesFileDataDescriptor(true)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGenericPurposeBit().usesDataDescriptor(true)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
368	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit().usesDataDescriptor(false)||  (allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGenericPurposeBit().usesDataDescriptor(false)||  (allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit().usesDataDescriptor(false)||  (allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGenericPurposeBit().usesDataDescriptor(true)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
369	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor(ze)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor(ze)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().hasDataDescriptor(ze)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().hasDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
370	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor(zip64)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor(zip64)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().hasDataDescriptor(zip64)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().hasDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
371	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64(zipEncoding)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64(zipEncoding)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesZip64(zipEncoding)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)&&    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
372	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64(zipEncoding)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64(zipEncoding)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64(zipEncoding)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)&&    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
373	[BUG]  [BUGGY]  Inflater  inflater  =  entry.getOutflater();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Inflater  inflater  =  entry.getOutflater();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Inflater  inflater  =  entry.getOutflater();	  Inflater    inflater    =    entry.getInflater();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
374	[BUG]  [BUGGY]  Inflater  inflater  =  entry.getOutputFile();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Inflater  inflater  =  entry.getOutputFile();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Inflater  inflater  =  entry.getOutputFile();	  Inflater    inflater    =    entry.getInflater();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
375	[BUG]  [BUGGY]  Inflater  inflater  =  entry.inflater();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Inflater  inflater  =  entry.inflater();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Inflater  inflater  =  entry.inflater();	  Inflater    inflater    =    entry.getInflater();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
376	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor(ZipEntry.STRING)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor(ZipEntry.STRING)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().hasDataDescriptor(ZipEntry.STRING)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)	  return    entry.getGeneralPurposeBit().hasDataDescriptor()    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STRING)    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
377	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor(ZipEntry.STRING)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor(ZipEntry.STRING)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().hasDataDescriptor(ZipEntry.STRING)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().hasDataDescriptor()    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STRING)    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
378	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getName()!=  ZipMethod.ENHANCED_DEFLATED)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  if(entry  ==  null  ||  entry.getName()!=  ZipMethod.ENHANCED_DEFLATED)  {  return  false;  }  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	if(entry  ==  null  ||  entry.getName()!=  ZipMethod.ENHANCED_DEFLATED)  {  return  false;  }	  if(entry    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
379	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.hasDataDescriptor())  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  if(entry  ==  null  ||  entry.hasDataDescriptor())  {  return  false;  }  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	if(entry  ==  null  ||  entry.hasDataDescriptor())  {  return  false;  }	  if(entry    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
380	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64(entry)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64(entry)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesZip64(entry)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesZip64(ze)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
381	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64(currentEntry)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64(currentEntry)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesZip64(currentEntry)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesZip64(ze)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
382	[BUG]  [BUGGY]  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED  &&  entry.getCode()  ==  ZipMethod.ENHANCED_DEFLATED;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED  &&  entry.getCode()  ==  ZipMethod.ENHANCED_DEFLATED;  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED  &&  entry.getCode()  ==  ZipMethod.ENHANCED_DEFLATED;	  ||    entry.getMethod()    ==    ZipMethod.ENHANCED_DEFLATED;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
383	[BUG]  [BUGGY]  ||  entry.getCode()  ==  ZipMethod.ENHANCED_DEFLATED;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  ||  entry.getCode()  ==  ZipMethod.ENHANCED_DEFLATED;  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getCode()  ==  ZipMethod.ENHANCED_DEFLATED;	  ||    entry.getMethod()    ==    ZipMethod.ENHANCED_DEFLATED;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
384	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getMethod()  ==  ZipEntry.STORED)  {  throw  new  IllegalArgumentException( "Current  entry  is  null. ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  if(entry  ==  null  ||  entry.getMethod()  ==  ZipEntry.STORED)  {  throw  new  IllegalArgumentException( "Current  entry  is  null. ");  }  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	if(entry  ==  null  ||  entry.getMethod()  ==  ZipEntry.STORED)  {  throw  new  IllegalArgumentException( "Current  entry  is  null. ");  }	  if(entry    ==    null)    {    throw    new    IllegalArgumentException(   "Current    entry    is    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
385	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding,  zipEncoding)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding,  zipEncoding)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding,  zipEncoding)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
386	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding,  zipEncoding)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding,  zipEncoding)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding,  zipEncoding)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)&&    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
387	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)&&  (allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)&&  (allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)&&  (allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)&&    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
388	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usersDataDescriptor()  ||(entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usersDataDescriptor()  ||(entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usersDataDescriptor()  ||(entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usersDataDescriptor()    ||(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
389	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usersDataDescriptor()  ||(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usersDataDescriptor()  ||(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usersDataDescriptor()  ||(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)	  return    entry.getGeneralPurposeBit().usersDataDescriptor()    ||(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
390	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||!(entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||!(entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64()  ||!(entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesZip64()    ||    (entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
391	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  entry.getMethod()  ==  ZipEntry.DEFLATED)  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  entry.getMethod()  ==  ZipEntry.DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64()  ||  entry.getMethod()  ==  ZipEntry.DEFLATED)	  return    entry.getGeneralPurposeBit().usesZip64()    ||    (entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
392	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED	  return    entry.getGeneralPurposeBit().usesZip64    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
393	[BUG]  [BUGGY]  int  hasDataDescriptor  =  entry.hasDataDescriptor();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  int  hasDataDescriptor  =  entry.hasDataDescriptor();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	int  hasDataDescriptor  =  entry.hasDataDescriptor();	  boolean    hasDataDescriptor    =    entry.hasDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
394	[BUG]  [BUGGY]  boolean  hasDataDescriptor  =  entry.hasDataDescriptor()  ||  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFATED;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  boolean  hasDataDescriptor  =  entry.hasDataDescriptor()  ||  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFATED;  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	boolean  hasDataDescriptor  =  entry.hasDataDescriptor()  ||  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFATED;	  boolean    hasDataDescriptor    =    entry.hasDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
395	[BUG]  [BUGGY]  boolean  hasDataDescriptor  =  entry.isDataDescriptor();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  boolean  hasDataDescriptor  =  entry.isDataDescriptor();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	boolean  hasDataDescriptor  =  entry.isDataDescriptor();	  boolean    hasDataDescriptor    =    entry.hasDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
396	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding,  entry)||  (entry.getMethod()  ==  ZipEntry.DEFLATED  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding,  entry)||  (entry.getMethod()  ==  ZipEntry.DEFLATED  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding,  entry)||  (entry.getMethod()  ==  ZipEntry.DEFLATED  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(ze)||    (entry.getMethod()    ==    ZipEntry.DEFLATED    &&    entry.getMethod()    ==    ZipEntry.ENHANCED_DEFLATED)    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
397	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getEntry()  ==  ZipEntry.STORED  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getEntry()  ==  ZipEntry.STORED  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getEntry()  ==  ZipEntry.STORED	  return    entry.getGeneralPurposeBit().usesZip64()    ||    hasDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
398	[BUG]  [BUGGY]  Inflater  inf  =  entry.getInputSize();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Inflater  inf  =  entry.getInputSize();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Inflater  inf  =  entry.getInputSize();	  Inflater    inf    =    entry.getInput();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
399	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor  &&(entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor  &&(entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesDataDescriptor  &&(entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor    &&(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
400	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().hasDataDescriptor()  &&(entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().hasDataDescriptor()  &&(entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().hasDataDescriptor()  &&(entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)	  return!entry.getGeneralPurposeBit().hasDataDescriptor()    &&    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
401	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().hasDataDescriptor()  &&(entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().hasDataDescriptor()  &&(entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().hasDataDescriptor()  &&(entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().hasDataDescriptor()    &&    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
402	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor()  &&(entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor()  &&(entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor()  &&(entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
403	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit().usesDataDescriptor()  &&(entry.getMethod()  ==  ZipEntry.STORED  ||  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGenericPurposeBit().usesDataDescriptor()  &&(entry.getMethod()  ==  ZipEntry.STORED  ||  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit().usesDataDescriptor()  &&(entry.getMethod()  ==  ZipEntry.STORED  ||  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)	  return    entry.getGenericPurposeBit().usesDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
404	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(zip64)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(zip64)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(zip64)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor(hasDataDescriptor)&&(allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
405	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(hasDataDescriptor)&&(this.allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(hasDataDescriptor)&&(this.allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(hasDataDescriptor)&&(this.allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor(hasDataDescriptor)&&(allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
406	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(hasDataDescriptor)&&(entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(hasDataDescriptor)&&(entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(hasDataDescriptor)&&(entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor(hasDataDescriptor)&&(allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
407	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(null)&&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(null)&&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(null)&&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor(null)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
408	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor(zipEncoding)||  (entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor(zipEncoding)||  (entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().hasDataDescriptor(zipEncoding)||  (entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().hasDataDescriptor()    ||    (entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
409	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor(ZipEntry.DEFLATED)||  (entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor(ZipEntry.DEFLATED)||  (entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().hasDataDescriptor(ZipEntry.DEFLATED)||  (entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().hasDataDescriptor()    ||    (entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
410	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor(entry.getName())||  (entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor(entry.getName())||  (entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().hasDataDescriptor(entry.getName())||  (entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().hasDataDescriptor()    ||    (entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
411	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)	  return!entry.getGeneralPurposeBit().usesZip64()    ||    hasDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
412	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor()  ||(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor()  ||(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().hasDataDescriptor()  ||(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)	  return    entry.getGeneralPurposeBit().hasDataDescriptor()    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
413	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor(ZipEntry.DEFLATED)&&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor(ZipEntry.DEFLATED)&&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().hasDataDescriptor(ZipEntry.DEFLATED)&&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().hasDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
414	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor()  &&(entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor()  &&(entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().hasDataDescriptor()  &&(entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)	  return    entry.getGeneralPurposeBit().hasDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
415	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.getMethod()  ==  ZipEntry.STORED)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  if(entry!=  null  ||  entry.getMethod()  ==  ZipEntry.STORED)  {  return  false;  }  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	if(entry!=  null  ||  entry.getMethod()  ==  ZipEntry.STORED)  {  return  false;  }	  if(entry!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
416	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  if(entry!=  null  ||  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  {  return  false;  }  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	if(entry!=  null  ||  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  {  return  false;  }	  if(entry!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
417	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.getMethod()  ==  ZipEntry.DEFLATED)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  if(entry!=  null  ||  entry.getMethod()  ==  ZipEntry.DEFLATED)  {  return  false;  }  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	if(entry!=  null  ||  entry.getMethod()  ==  ZipEntry.DEFLATED)  {  return  false;  }	  if(entry!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
418	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.getMethod()  ==  ZipEntry.STRING)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  if(entry!=  null  ||  entry.getMethod()  ==  ZipEntry.STRING)  {  return  false;  }  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	if(entry!=  null  ||  entry.getMethod()  ==  ZipEntry.STRING)  {  return  false;  }	  if(entry!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
419	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit()!=  null  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGenericPurposeBit()!=  null  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit()!=  null  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGenericPurposeBit().usesDataDescriptor()    ||(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
420	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64()  ||  entry.getMethod()  ==  ZipEntry.STORED  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64()  ||  entry.getMethod()  ==  ZipEntry.STORED  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesZip64()  ||  entry.getMethod()  ==  ZipEntry.STORED	  return!entry.getGeneralPurposeBit().usesZip64()    ||    (entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
421	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64()  ||  entry.getMethod()  ==  ZipEntry.DEFLATED)  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64()  ||  entry.getMethod()  ==  ZipEntry.DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesZip64()  ||  entry.getMethod()  ==  ZipEntry.DEFLATED)	  return!entry.getGeneralPurposeBit().usesZip64()    ||    (entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
422	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor  &&(entry.getMethod()  ==  ZipEntry.STORED  ||  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor  &&(entry.getMethod()  ==  ZipEntry.STORED  ||  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor  &&(entry.getMethod()  ==  ZipEntry.STORED  ||  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor    &&(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
423	[BUG]  [BUGGY]  Entry  entry  =  entry.getStep();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Entry  entry  =  entry.getStep();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Entry  entry  =  entry.getStep();	  Entry    entry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
424	[BUG]  [BUGGY]  Entry  entry  =  entry.getAncestor();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Entry  entry  =  entry.getAncestor();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Entry  entry  =  entry.getAncestor();	  Entry    entry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
425	[BUG]  [BUGGY]  return  entry.getSize()!=  null  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getSize()!=  null  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getSize()!=  null  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit()!=    null    &&(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
426	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit()!=  null  &&(entry.getSize()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit()!=  null  &&(entry.getSize()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit()!=  null  &&(entry.getSize()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit()!=    null    &&(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
427	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit().usesZip64()  ||  (entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGenericPurposeBit().usesZip64()  ||  (entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit().usesZip64()  ||  (entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGenericPurposeBit().usesZip64()    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
428	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  {  throw  new  IllegalStateException( "Current  entry  is  null. ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  {  throw  new  IllegalStateException( "Current  entry  is  null. ");  }  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  {  throw  new  IllegalStateException( "Current  entry  is  null. ");  }	  if(entry    ==    null)    {    throw    new    IllegalStateException(   "Current    entry    is    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
429	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED);  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED);	  if(entry    ==    null)    {    throw    new    IllegalStateException(   "Current    entry    is    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
430	[BUG]  [BUGGY]  if(entry!=  null)  {  throw  new  IllegalStateException( "Current  entry  is  null. ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  if(entry!=  null)  {  throw  new  IllegalStateException( "Current  entry  is  null. ");  }  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	if(entry!=  null)  {  throw  new  IllegalStateException( "Current  entry  is  null. ");  }	  if(entry    ==    null)    {    throw    new    IllegalStateException(   "Current    entry    is    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
431	[BUG]  [BUGGY]  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED  &&  entry.getCode();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED  &&  entry.getCode();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED  &&  entry.getCode();	  ||    entry.getMethod()    ==    ZipMethod.ENHANCED_DEFLATED.getCode();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
432	[BUG]  [BUGGY]  ||  entry.getMethod()!=  ZipMethod.ENHANCED_DEFLATED.getCode();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  ||  entry.getMethod()!=  ZipMethod.ENHANCED_DEFLATED.getCode();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getMethod()!=  ZipMethod.ENHANCED_DEFLATED.getCode();	  ||    entry.getMethod()    ==    ZipMethod.ENHANCED_DEFLATED.getCode();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
433	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor(zipEncoding)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor(zipEncoding)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().hasDataDescriptor(zipEncoding)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().hasDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
434	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor(entry.getName())&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor(entry.getName())&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().hasDataDescriptor(entry.getName())&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().hasDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
435	[BUG]  [BUGGY]  Inflater  inf  =  entry.getInputStream(ZipEntry.ENHANCED_DEFLATED);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Inflater  inf  =  entry.getInputStream(ZipEntry.ENHANCED_DEFLATED);  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Inflater  inf  =  entry.getInputStream(ZipEntry.ENHANCED_DEFLATED);	  Inflater    inf    =    entry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
436	[BUG]  [BUGGY]  Inflater  inf  =  entry.getInputStream(ZipMethod.ENHANCED_DEFLATED);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Inflater  inf  =  entry.getInputStream(ZipMethod.ENHANCED_DEFLATED);  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Inflater  inf  =  entry.getInputStream(ZipMethod.ENHANCED_DEFLATED);	  Inflater    inf    =    entry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
437	[BUG]  [BUGGY]  Inflater  inf  =  entry.getImplicitReturn();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Inflater  inf  =  entry.getImplicitReturn();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Inflater  inf  =  entry.getImplicitReturn();	  Inflater    inf    =    entry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
438	[BUG]  [BUGGY]  Inflater  inf  =  entry.getInputStream(ZipEntry.DEFAULT_ENCODING);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Inflater  inf  =  entry.getInputStream(ZipEntry.DEFAULT_ENCODING);  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Inflater  inf  =  entry.getInputStream(ZipEntry.DEFAULT_ENCODING);	  Inflater    inf    =    entry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
439	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED	  return    entry.getGeneralPurposeBit().usesZip64()    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.DEFLATED)    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
440	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor()  &&(entry.getMethod()  ==  ZipEntry.STORED  ||  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor()  &&(entry.getMethod()  ==  ZipEntry.STORED  ||  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesDataDescriptor()  &&(entry.getMethod()  ==  ZipEntry.STORED  ||  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
441	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor()  &&(entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor()  &&(entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesDataDescriptor()  &&(entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
442	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor()  &&(entry.getMethod()  ==  ZipEntry.STORED  ||  entry.getMethod()  ==  ZipEntry.DEFLATED)  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor()  &&(entry.getMethod()  ==  ZipEntry.STORED  ||  entry.getMethod()  ==  ZipEntry.DEFLATED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesDataDescriptor()  &&(entry.getMethod()  ==  ZipEntry.STORED  ||  entry.getMethod()  ==  ZipEntry.DEFLATED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    ||    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
443	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  &&(this.allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  &&(this.allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64()  &&(this.allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesZip64()    &&(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
444	[BUG]  [BUGGY]  ||  entry.getClass()!=  ZipMethod.ENHANCED_DEFLATED;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  ||  entry.getClass()!=  ZipMethod.ENHANCED_DEFLATED;  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getClass()!=  ZipMethod.ENHANCED_DEFLATED;	  ||    entry.getMethod()!=    ZipMethod.ENHANCED_DEFLATED;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
445	[BUG]  [BUGGY]  Inflater  inflater  =  getInflaterInternal();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Inflater  inflater  =  getInflaterInternal();  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Inflater  inflater  =  getInflaterInternal();	  Inflater    inflater    =    getInflater();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
446	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entry.getValue()  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Entry  <  K,  V>  entry  =  entry.getValue()  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED;  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Entry  <  K,  V>  entry  =  entry.getValue()  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED;	  Entry    <    K,    V>    entry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
447	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entry.getValue()  &&  entry.getMethod()!=  ZipEntry.ENHANCED_DEFLATED;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Entry  <  K,  V>  entry  =  entry.getValue()  &&  entry.getMethod()!=  ZipEntry.ENHANCED_DEFLATED;  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Entry  <  K,  V>  entry  =  entry.getValue()  &&  entry.getMethod()!=  ZipEntry.ENHANCED_DEFLATED;	  Entry    <    K,    V>    entry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
448	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entry.getValue()  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFATED;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Entry  <  K,  V>  entry  =  entry.getValue()  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFATED;  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Entry  <  K,  V>  entry  =  entry.getValue()  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFATED;	  Entry    <    K,    V>    entry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
449	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entry.getValue()  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFINED;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  Entry  <  K,  V>  entry  =  entry.getValue()  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFINED;  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Entry  <  K,  V>  entry  =  entry.getValue()  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFINED;	  Entry    <    K,    V>    entry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
450	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(zip64)&&(!allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(zip64)&&(!allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(zip64)&&(!allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor()    &&(!allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
451	[BUG]  [BUGGY]  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED)  {  return  false;  }  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED)  {  return  false;  }	  ||    entry.getMethod()    ==    ZipMethod.ENHANCED_DEFLATED)    {    return    true;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
452	[BUG]  [BUGGY]  ||  entry.getType()  ==  ZipMethod.ENHANCED_DEFLATED)  {  return  true;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  ||  entry.getType()  ==  ZipMethod.ENHANCED_DEFLATED)  {  return  true;  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getType()  ==  ZipMethod.ENHANCED_DEFLATED)  {  return  true;	  ||    entry.getMethod()    ==    ZipMethod.ENHANCED_DEFLATED)    {    return    true;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
453	[BUG]  [BUGGY]  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED  &&  entry.getCode()  ==  ZipMethod.ENHANCED_DEFLATED);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED  &&  entry.getCode()  ==  ZipMethod.ENHANCED_DEFLATED);  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED  &&  entry.getCode()  ==  ZipMethod.ENHANCED_DEFLATED);	  ||    entry.getMethod()    ==    ZipMethod.ENHANCED_DEFLATED);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
454	[BUG]  [BUGGY]  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED  &&  entry.getCode()!=  ZipMethod.ENHANCED_DEFLATED);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED  &&  entry.getCode()!=  ZipMethod.ENHANCED_DEFLATED);  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED  &&  entry.getCode()!=  ZipMethod.ENHANCED_DEFLATED);	  ||    entry.getMethod()    ==    ZipMethod.ENHANCED_DEFLATED);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
455	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(true)&&(hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {      [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(true)&&(hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]        ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(true)&&(hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor(true)&&(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
