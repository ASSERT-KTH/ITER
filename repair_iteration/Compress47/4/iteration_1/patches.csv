bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor()  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor()  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().hasDataDescriptor()  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().hasDataDescriptor()    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
2	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor()  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor()  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().hasDataDescriptor()  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().hasDataDescriptor()    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
3	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit().hasDataDescriptor()  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return  entry.getGenericPurposeBit().hasDataDescriptor()  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit().hasDataDescriptor()  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().hasDataDescriptor()    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
4	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor()  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor()  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().hasDataDescriptor()  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)	  return!entry.getGeneralPurposeBit().hasDataDescriptor()    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
5	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor()  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor()  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor()  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
6	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(true)&&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(true)&&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(true)&&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
7	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64()  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
8	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit().usesDataDescriptor()  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return  entry.getGenericPurposeBit().usesDataDescriptor()  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit().usesDataDescriptor()  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
9	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit().usesDataDescriptor()  ||(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return  entry.getGenericPurposeBit().usesDataDescriptor()  ||(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit().usesDataDescriptor()  ||(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
10	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor()  &&(!allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor()  &&(!allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor()  &&(!allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
11	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
12	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesDataDescriptor  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
13	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
14	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64()  &&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64()  &&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesZip64()  &&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesZip64()    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
15	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(true)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(true)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesDataDescriptor(true)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor()    &&    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
16	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(true)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(true)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(true)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(true)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
17	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(false)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(false)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(false)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(true)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
18	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(false)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(false)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesDataDescriptor(false)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(true)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
19	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit().usesDataDescriptor(true)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return  entry.getGenericPurposeBit().usesDataDescriptor(true)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit().usesDataDescriptor(true)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(true)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
20	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(true)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(true)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(true)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(true)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
21	[BUG]  [BUGGY]  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED;  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED;	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
22	[BUG]  [BUGGY]  Inflater  inf  =  entry.getInputStream();  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  Inflater  inf  =  entry.getInputStream();  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Inflater  inf  =  entry.getInputStream();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
23	[BUG]  [BUGGY]  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED);  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
24	[BUG]  [BUGGY]  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED)  {  return  true;  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED)  {  return  true;  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED)  {  return  true;	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
25	[BUG]  [BUGGY]  Entry  <?>  entry  =  entry.getValue();  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  Entry  <?>  entry  =  entry.getValue();  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Entry  <?>  entry  =  entry.getValue();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
26	[BUG]  [BUGGY]  ||  entry.getMethod()!=  ZipMethod.ENHANCED_DEFLATED;  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  ||  entry.getMethod()!=  ZipMethod.ENHANCED_DEFLATED;  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getMethod()!=  ZipMethod.ENHANCED_DEFLATED;	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
27	[BUG]  [BUGGY]  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
28	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64()  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)	  return    entry.getGeneralPurposeBit().usesZip64()    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
29	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64()  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STRING)	  return    entry.getGeneralPurposeBit().usesZip64()    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
30	[BUG]  [BUGGY]  return  entry.getGenericPurposeBit().usesZip64()  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return  entry.getGenericPurposeBit().usesZip64()  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGenericPurposeBit().usesZip64()  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesZip64()    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
31	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(ze)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
32	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(ze)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(ze)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(ze)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(ze)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
33	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(null)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(null)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(null)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(ze)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
34	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(z)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(z)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(z)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(ze)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
35	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usersDataDescriptor()  ||(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return  entry.getGeneralPurposeBit().usersDataDescriptor()  ||(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usersDataDescriptor()  ||(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
36	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor()  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor()  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().hasDataDescriptor()  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
37	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64(true)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64(true)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesZip64(true)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(true)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
38	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(true)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(true)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesDataDescriptor(true)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.DEFLATED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(true)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
39	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().hasDataDescriptor()  &&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return!entry.getGeneralPurposeBit().hasDataDescriptor()  &&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().hasDataDescriptor()  &&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().hasDataDescriptor()    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
40	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor()  ||  (entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return  entry.getGeneralPurposeBit().hasDataDescriptor()  ||  (entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().hasDataDescriptor()  ||  (entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().hasDataDescriptor()    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
41	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesZip64  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
42	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
43	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor  ||  (entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor  ||  (entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor  ||  (entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
44	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesZip64()    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
45	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  (entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  (entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64()  ||  (entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesZip64()    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
46	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesZip64()    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
47	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64()  ||  (entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64()  ||  (entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesZip64()  ||  (entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesZip64()    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
48	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64(ze)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64(ze)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesZip64(ze)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(ze)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
49	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64(z)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return!entry.getGeneralPurposeBit().usesZip64(z)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesZip64(z)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(ze)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
50	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(z)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(z)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesDataDescriptor(z)||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(ze)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
51	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(ze)||  (entry.getMethod()  ==  ZipEntry.DEFLATED  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(ze)||  (entry.getMethod()  ==  ZipEntry.DEFLATED  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesDataDescriptor(ze)||  (entry.getMethod()  ==  ZipEntry.DEFLATED  &&  entry.getMethod()  ==  ZipEntry.ENHANCED_DEFLATED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(ze)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
52	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(true)&&  (allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(true)&&  (allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesDataDescriptor(true)&&  (allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor()    &&    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
53	[BUG]  [BUGGY]  if(entry  ==  null)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  if(entry  ==  null)  {  return  false;  }  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	if(entry  ==  null)  {  return  false;  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
54	[BUG]  [BUGGY]  if(entry!=  null)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  if(entry!=  null)  {  return  false;  }  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	if(entry!=  null)  {  return  false;  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
55	[BUG]  [BUGGY]  Inflater  inf  =  entry.getInput();  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  Inflater  inf  =  entry.getInput();  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Inflater  inf  =  entry.getInput();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
56	[BUG]  [BUGGY]  if(entry  ==  null)  {  throw  new  IllegalArgumentException( "Current  entry  is  null. ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  if(entry  ==  null)  {  throw  new  IllegalArgumentException( "Current  entry  is  null. ");  }  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	if(entry  ==  null)  {  throw  new  IllegalArgumentException( "Current  entry  is  null. ");  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
57	[BUG]  [BUGGY]  if(entry  ==  null)  {  throw  new  IllegalStateException( "Current  entry  is  null. ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  if(entry  ==  null)  {  throw  new  IllegalStateException( "Current  entry  is  null. ");  }  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	if(entry  ==  null)  {  throw  new  IllegalStateException( "Current  entry  is  null. ");  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
58	[BUG]  [BUGGY]  boolean  hasDataDescriptor  =  entry.hasDataDescriptor();  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  boolean  hasDataDescriptor  =  entry.hasDataDescriptor();  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	boolean  hasDataDescriptor  =  entry.hasDataDescriptor();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
59	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesZip64()  ||  hasDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED	  return    entry.getGeneralPurposeBit().usesZip64()    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
60	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(true)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(true)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(true)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
61	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit()!=  null  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return  entry.getGeneralPurposeBit()!=  null  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit()!=  null  &&(allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
62	[BUG]  [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(hasDataDescriptor)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return  entry.getGeneralPurposeBit().usesDataDescriptor(hasDataDescriptor)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return  entry.getGeneralPurposeBit().usesDataDescriptor(hasDataDescriptor)&&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return    entry.getGeneralPurposeBit().usesDataDescriptor()    &&(allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
63	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesDataDescriptor(zipEncoding)&&  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor(ze)||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
64	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entry.getValue();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  Entry  <  K,  V>  entry  =  entry.getValue();  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Entry  <  K,  V>  entry  =  entry.getValue();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
65	[BUG]  [BUGGY]  Entry  entry  =  entry.getValue();  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  Entry  entry  =  entry.getValue();  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Entry  entry  =  entry.getValue();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
66	[BUG]  [BUGGY]  int  pos  =  entry.getLength();  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  int  pos  =  entry.getLength();  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	int  pos  =  entry.getLength();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
67	[BUG]  [BUGGY]  Inflater  inflater  =  entry.getInflater();  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  Inflater  inflater  =  entry.getInflater();  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Inflater  inflater  =  entry.getInflater();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
68	[BUG]  [BUGGY]  Inflater  inflater  =  getInflater();  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  Inflater  inflater  =  getInflater();  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	Inflater  inflater  =  getInflater();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
69	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()!=  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()!=  ZipEntry.STORED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesDataDescriptor  ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()!=  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor    ||    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
70	[BUG]  [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor()  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  boolean  supportsDataDescriptorFor(final  ZipArchiveEntry  entry)  {    [BUGGY]  return!entry.getGeneralPurposeBit().usesDataDescriptor()  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)  [BUGGY]      ||  (allowStoredEntriesWithDataDescriptor  &&  entry.getMethod()  ==  ZipEntry.STORED)  ||  entry.getMethod()  ==  ZipEntry.DEFLATED  ||  entry.getMethod()  ==  ZipMethod.ENHANCED_DEFLATED.getCode();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  supportsDataDescriptorFor  [RETURN_TYPE]  boolean  ZipArchiveEntry  entry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  b  buffer  expected  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  signature  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3333333333333333	798	800	1	replace	return!entry.getGeneralPurposeBit().usesDataDescriptor()  &&(allowStoredEntriesWithDataDescriptor  ||  entry.getMethod()  ==  ZipEntry.STORED)	  return!entry.getGeneralPurposeBit().usesDataDescriptor()    &&    (allowStoredEntriesWithDataDescriptor    &&    entry.getMethod()    ==    ZipEntry.STORED)    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
