bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(in.isEnabled()  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in.isEnabled()  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in.isEnabled()  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {	  if(closed    ||    isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
2	[BUG]  [BUGGY]  if(in.close()  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in.close()  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in.close()  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {	  if(closed    ||    isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
3	[BUG]  [BUGGY]  if(!closed  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!closed  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(!closed  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {	  if(closed    ||    isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
4	[BUG]  [BUGGY]  if(isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(isEnabled(Feature.AUTO_CLOSE_SOURCE))  {	  if(closed    ||    isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
5	[BUG]  [BUGGY]  if(inferred  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(inferred  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(inferred  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {	  if(closed    ||    isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
6	[BUG]  [BUGGY]  if(current  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(current  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(current  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {	  if(closed    ||    isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
7	[BUG]  [BUGGY]  if(in  <  null  ||  in.closed)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in  <  null  ||  in.closed)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in  <  null  ||  in.closed)  {	  if(in.closed)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
8	[BUG]  [BUGGY]  if(in!=  null  ||  in.closed)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.closed)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in!=  null  ||  in.closed)  {	  if(in.closed)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
9	[BUG]  [BUGGY]  if(inf.closed)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(inf.closed)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(inf.closed)  {	  if(in.closed)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
10	[BUG]  [BUGGY]  if(in.open())  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in.open())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in.open())  {	  if(in.closed)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
11	[BUG]  [BUGGY]  if(in  <  null  ||  in.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in  <  null  ||  in.length()  ==  0)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in  <  null  ||  in.length()  ==  0)  {	  if(in    <    null)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
12	[BUG]  [BUGGY]  if(in  <  null  ||  in.isEnabled())  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in  <  null  ||  in.isEnabled())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in  <  null  ||  in.isEnabled())  {	  if(in    <    null)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
13	[BUG]  [BUGGY]  if(in  <  null  ||  in.size()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in  <  null  ||  in.size()  ==  0)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in  <  null  ||  in.size()  ==  0)  {	  if(in    <    null)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
14	[BUG]  [BUGGY]  ze.flush();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  ze.flush();  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	ze.flush();	  ze.close();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
15	[BUG]  [BUGGY]  this.entryEncoding.close();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  this.entryEncoding.close();  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	this.entryEncoding.close();	  ze.close();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
16	[BUG]  [BUGGY]  ze.closeEntry();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  ze.closeEntry();  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	ze.closeEntry();	  ze.close();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
17	[BUG]  [BUGGY]  if  (!closed  &&  in.close())  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if  (!closed  &&  in.close())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if  (!closed  &&  in.close())  {	  if    (!closed    ||    in.close())    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
18	[BUG]  [BUGGY]  if  (!closed  ||  inf.close())  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if  (!closed  ||  inf.close())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if  (!closed  ||  inf.close())  {	  if    (!closed    ||    in.close())    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
19	[BUG]  [BUGGY]  Inflater  inf  =  getOutputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getOutputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  getOutputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
20	[BUG]  [BUGGY]  InputStream  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  InputStream  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	InputStream  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
21	[BUG]  [BUGGY]  Inflater  inf  =  this.getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  this.getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  this.getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
22	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream();  for(int  i  =  0;  i  <  inf.length;  ++i)  {  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getInputStream();  for(int  i  =  0;  i  <  inf.length;  ++i)  {  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  getInputStream();  for(int  i  =  0;  i  <  inf.length;  ++i)  {  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
23	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    outf.close();    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
24	[BUG]  [BUGGY]  Inflater  inf  =  getOutputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getOutputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  getOutputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    outf.close();    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
25	[BUG]  [BUGGY]  Inflater  inf  =  this.getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  this.getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  this.getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    outf.close();    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
26	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream();  if(outf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getInputStream();  if(outf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  getInputStream();  if(outf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    outf.close();    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
27	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  outf.length;  ++i)  {  outf.close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  outf.length;  ++i)  {  outf.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  outf.length;  ++i)  {  outf.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    outf.close();    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
28	[BUG]  [BUGGY]  if(inferred  ||  in!=  null)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(inferred  ||  in!=  null)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(inferred  ||  in!=  null)  {	  if(closed    ||    in!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
29	[BUG]  [BUGGY]  if(in.close()  ||  in!=  null)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in.close()  ||  in!=  null)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in.close()  ||  in!=  null)  {	  if(closed    ||    in!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
30	[BUG]  [BUGGY]  if(inf!=  null)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(inf!=  null)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(inf!=  null)  {	  if(closed    ||    in!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
31	[BUG]  [BUGGY]  if(in  <  null  ||  closed  ||  in!=  null)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in  <  null  ||  closed  ||  in!=  null)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in  <  null  ||  closed  ||  in!=  null)  {	  if(closed    ||    in!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
32	[BUG]  [BUGGY]  if(inf  ==  null)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(inf  ==  null)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(inf  ==  null)  {	  if(closed    ||    in!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
33	[BUG]  [BUGGY]  if(inferred  ||  closed!=  null)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(inferred  ||  closed!=  null)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(inferred  ||  closed!=  null)  {	  if(closed    ||    in!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
34	[BUG]  [BUGGY]  if(in.close()!=  null)  {  in.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in.close()!=  null)  {  in.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in.close()!=  null)  {  in.close();  }	  in.close();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
35	[BUG]  [BUGGY]  if(in.close())  {  in.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in.close())  {  in.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in.close())  {  in.close();  }	  in.close();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
36	[BUG]  [BUGGY]  in.flush();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  in.flush();  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	in.flush();	  in.close();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
37	[BUG]  [BUGGY]  if(in.open)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in.open)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in.open)  {	  if(this.open)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
38	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
39	[BUG]  [BUGGY]  InputStream  bis  =  getInputStream();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  InputStream  bis  =  getInputStream();  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	InputStream  bis  =  getInputStream();	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
40	[BUG]  [BUGGY]  InputStream  bis  =  getInputStream();  if(bis!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  InputStream  bis  =  getInputStream();  if(bis!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	InputStream  bis  =  getInputStream();  if(bis!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
41	[BUG]  [BUGGY]  Inflater  inf  =  getOutputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getOutputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  getOutputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
42	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream();  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getInputStream();  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  getInputStream();  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
43	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
44	[BUG]  [BUGGY]  Inflater  inf  =  getOutputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getOutputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  getOutputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
45	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
46	[BUG]  [BUGGY]  InputStream  bis  =  getInputStream();  if(bis!=  null)  {  for(int  i  =  0;  i  <  bis.length();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  InputStream  bis  =  getInputStream();  if(bis!=  null)  {  for(int  i  =  0;  i  <  bis.length();  ++i)  {  inputStream.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	InputStream  bis  =  getInputStream();  if(bis!=  null)  {  for(int  i  =  0;  i  <  bis.length();  ++i)  {  inputStream.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
47	[BUG]  [BUGGY]  if  (!closed  &&  in.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if  (!closed  &&  in.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if  (!closed  &&  in.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (!closed    ||    in.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
48	[BUG]  [BUGGY]  if(in.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (!closed    ||    in.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
49	[BUG]  [BUGGY]  if  (!closed  ||  inf.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if  (!closed  ||  inf.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if  (!closed  ||  inf.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (!closed    ||    in.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
50	[BUG]  [BUGGY]  if(in!=  null)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in!=  null)  {  inf.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in!=  null)  {  inf.close();  }	  if(in!=    null)    {    in.close();    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
51	[BUG]  [BUGGY]  if(in  ==  null)  {  in.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in  ==  null)  {  in.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in  ==  null)  {  in.close();  }	  if(in!=    null)    {    in.close();    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
52	[BUG]  [BUGGY]  if  (!closed  &&  in  <  null)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if  (!closed  &&  in  <  null)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if  (!closed  &&  in  <  null)  {	  if    (!closed    ||    in    <    null)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
53	[BUG]  [BUGGY]  if  (closed  ||  in  <  null)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if  (closed  ||  in  <  null)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if  (closed  ||  in  <  null)  {	  if    (!closed    ||    in    <    null)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
54	[BUG]  [BUGGY]  if  (!closed  &&  inf!=  null)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if  (!closed  &&  inf!=  null)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if  (!closed  &&  inf!=  null)  {	  if    (!closed    &&    in!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
55	[BUG]  [BUGGY]  if  (!closed  &&  in  ==  null)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if  (!closed  &&  in  ==  null)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if  (!closed  &&  in  ==  null)  {	  if    (!closed    &&    in!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
56	[BUG]  [BUGGY]  if(!in.closed)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!in.closed)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(!in.closed)  {	  if(!this.closed)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
57	[BUG]  [BUGGY]  if(!open)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!open)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(!open)  {	  if(!this.closed)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
58	[BUG]  [BUGGY]  if  (!closed  ||  in  {  null)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if  (!closed  ||  in  {  null)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if  (!closed  ||  in  {  null)  {	  if    (!closed    ||    in    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
59	[BUG]  [BUGGY]  if(in.close()  ||  closed)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in.close()  ||  closed)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in.close()  ||  closed)  {	  if(closed    ||    in.close())    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
60	[BUG]  [BUGGY]  if(inf.close()  ||  in.close())  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(inf.close()  ||  in.close())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(inf.close()  ||  in.close())  {	  if(closed    ||    in.close())    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
61	[BUG]  [BUGGY]  if(inf.close())  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(inf.close())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(inf.close())  {	  if(closed    ||    in.close())    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
62	[BUG]  [BUGGY]  if(in.close()  ||  in.close())  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in.close()  ||  in.close())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in.close()  ||  in.close())  {	  if(closed    ||    in.close())    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
63	[BUG]  [BUGGY]  if(inf.isEnabled())  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(inf.isEnabled())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(inf.isEnabled())  {	  if(closed    ||    in.isEnabled())    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
64	[BUG]  [BUGGY]  if(in!closed  ||  in.isEnabled())  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in!closed  ||  in.isEnabled())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in!closed  ||  in.isEnabled())  {	  if(closed    ||    in.isEnabled())    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
65	[BUG]  [BUGGY]  if(inferred  ||  in.isEnabled())  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(inferred  ||  in.isEnabled())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(inferred  ||  in.isEnabled())  {	  if(closed    ||    in.isEnabled())    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
66	[BUG]  [BUGGY]  if(closed  ||  inf.isEnabled())  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(closed  ||  inf.isEnabled())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(closed  ||  inf.isEnabled())  {	  if(closed    ||    in.isEnabled())    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
67	[BUG]  [BUGGY]  if  (!closed  &&  inf.isEnabled())  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if  (!closed  &&  inf.isEnabled())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if  (!closed  &&  inf.isEnabled())  {	  if    (!closed    ||    inf.isEnabled())    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
68	[BUG]  [BUGGY]  Inflater  inf  =  getOut();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getOut();  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  getOut();	  Inflater    inf    =    getIn();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
69	[BUG]  [BUGGY]  Inflater  inf  =  this.getIn();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  this.getIn();  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  this.getIn();	  Inflater    inf    =    getIn();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
70	[BUG]  [BUGGY]  Inflater  inf  =  getFullInputStream();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getFullInputStream();  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  getFullInputStream();	  Inflater    inf    =    getIn();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
71	[BUG]  [BUGGY]  Inflater  inf  =  this.in;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  this.in;  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  this.in;	  Inflater    inf    =    getIn();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
72	[BUG]  [BUGGY]  Inflater  inf  =  getCurrentInput();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getCurrentInput();  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  getCurrentInput();	  Inflater    inf    =    getIn();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
73	[BUG]  [BUGGY]  Inflater  inf  =  getCurrentInputStream();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getCurrentInputStream();  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  getCurrentInputStream();	  Inflater    inf    =    getIn();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
74	[BUG]  [BUGGY]  if(in.isOpen()  ||  in.isVersion())  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in.isOpen()  ||  in.isVersion())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in.isOpen()  ||  in.isVersion())  {	  if(in.isOpen())    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
75	[BUG]  [BUGGY]  if(in.isOpen()  ||  in.isEnabled())  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in.isOpen()  ||  in.isEnabled())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in.isOpen()  ||  in.isEnabled())  {	  if(in.isOpen())    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
76	[BUG]  [BUGGY]  if(in.isOpen()  ||  in.isDirectory())  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in.isOpen()  ||  in.isDirectory())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in.isOpen()  ||  in.isDirectory())  {	  if(in.isOpen())    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
77	[BUG]  [BUGGY]  if(in.isOpen()  ||  in.isVerticalFile())  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in.isOpen()  ||  in.isVerticalFile())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in.isOpen()  ||  in.isVerticalFile())  {	  if(in.isOpen())    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
78	[BUG]  [BUGGY]  if(in.isOpen()  ||  in.isInput())  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in.isOpen()  ||  in.isInput())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in.isOpen()  ||  in.isInput())  {	  if(in.isOpen())    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
79	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  inputStream.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  inputStream.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
80	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  inputStream.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  inputStream.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
81	[BUG]  [BUGGY]  Inflater  inf  =  getOutputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getOutputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  inputStream.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  getOutputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  inputStream.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
82	[BUG]  [BUGGY]  InputStream  bis  =  getInputStream();  if(bis!=  null)  {  for(int  i  =  0;  i  <  bis.size();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  InputStream  bis  =  getInputStream();  if(bis!=  null)  {  for(int  i  =  0;  i  <  bis.size();  ++i)  {  inputStream.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	InputStream  bis  =  getInputStream();  if(bis!=  null)  {  for(int  i  =  0;  i  <  bis.size();  ++i)  {  inputStream.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
83	[BUG]  [BUGGY]  Inflater  inf  =  getOutputStream();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getOutputStream();  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  getOutputStream();	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
84	[BUG]  [BUGGY]  Inflater  inf  =  this.getInputStream();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  this.getInputStream();  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  this.getInputStream();	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
85	[BUG]  [BUGGY]  Inflater  inf  =  this.inputStream;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  this.inputStream;  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  this.inputStream;	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
86	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(),  bis;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getInputStream(),  bis;  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  getInputStream(),  bis;	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
87	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream().openStream();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getInputStream().openStream();  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  getInputStream().openStream();	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
88	[BUG]  [BUGGY]  InputStream  inf  =  getOutputStream();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  InputStream  inf  =  getOutputStream();  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	InputStream  inf  =  getOutputStream();	  InputStream    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
89	[BUG]  [BUGGY]  InputStream  inf  =  getReadInputStream();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  InputStream  inf  =  getReadInputStream();  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	InputStream  inf  =  getReadInputStream();	  InputStream    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
90	[BUG]  [BUGGY]  InputStream  inf  =  getInputStream(outputBuffer);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  InputStream  inf  =  getInputStream(outputBuffer);  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	InputStream  inf  =  getInputStream(outputBuffer);	  InputStream    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
91	[BUG]  [BUGGY]  InputStream  inf  =  this.inputStream;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  InputStream  inf  =  this.inputStream;  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	InputStream  inf  =  this.inputStream;	  InputStream    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
92	[BUG]  [BUGGY]  InputStream  inf  =  getInputStream().openStream();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  InputStream  inf  =  getInputStream().openStream();  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	InputStream  inf  =  getInputStream().openStream();	  InputStream    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
93	[BUG]  [BUGGY]  InputStream  inf  =  getInputStream(),  bis;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  InputStream  inf  =  getInputStream(),  bis;  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	InputStream  inf  =  getInputStream(),  bis;	  InputStream    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
94	[BUG]  [BUGGY]  if  (closed  ||  inf!=  null)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if  (closed  ||  inf!=  null)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if  (closed  ||  inf!=  null)  {	  if    (!closed    ||    inf!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
95	[BUG]  [BUGGY]  if(in!=  null  &&  in.close())  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in!=  null  &&  in.close())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in!=  null  &&  in.close())  {	  if(in!=    null    ||    in.close())    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
96	[BUG]  [BUGGY]  if(in  ==  null  ||  in.close())  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.close())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in  ==  null  ||  in.close())  {	  if(in!=    null    ||    in.close())    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
97	[BUG]  [BUGGY]  if(in!=  null  ||  inf.close())  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in!=  null  ||  inf.close())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in!=  null  ||  inf.close())  {	  if(in!=    null    ||    in.close())    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
98	[BUG]  [BUGGY]  if(in  >=  null  ||  in.close())  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in  >=  null  ||  in.close())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in  >=  null  ||  in.close())  {	  if(in!=    null    ||    in.close())    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
99	[BUG]  [BUGGY]  if(in!=  null  ||  in.isEnabled())  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.isEnabled())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in!=  null  ||  in.isEnabled())  {	  if(in!=    null    ||    in.close())    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
100	[BUG]  [BUGGY]  if(in  <  null  ||  in.close())  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in  <  null  ||  in.close())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in  <  null  ||  in.close())  {	  if(in!=    null    ||    in.close())    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
101	[BUG]  [BUGGY]  if  (!closed  &&  inf  ==  null)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if  (!closed  &&  inf  ==  null)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if  (!closed  &&  inf  ==  null)  {	  if    (!closed    ||    inf    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
102	[BUG]  [BUGGY]  if  (closed  ||  inf  ==  null)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if  (closed  ||  inf  ==  null)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if  (closed  ||  inf  ==  null)  {	  if    (!closed    ||    inf    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
103	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream();  if(inf  ==  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getInputStream();  if(inf  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  getInputStream();  if(inf  ==  null)  {  throw  new  IllegalStateException( " ");  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
104	[BUG]  [BUGGY]  Inflater  inf  =  getOutputStream();  if(inf!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getOutputStream();  if(inf!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  getOutputStream();  if(inf!=  null)  {  throw  new  IllegalStateException( " ");  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
105	[BUG]  [BUGGY]  Inflater  inf  =  getCurrentInputStream();  if(inf!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getCurrentInputStream();  if(inf!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  getCurrentInputStream();  if(inf!=  null)  {  throw  new  IllegalStateException( " ");  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
106	[BUG]  [BUGGY]  InputStream  inf  =  getInputStream();  if(inf!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  InputStream  inf  =  getInputStream();  if(inf!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	InputStream  inf  =  getInputStream();  if(inf!=  null)  {  throw  new  IllegalStateException( " ");  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
107	[BUG]  [BUGGY]  Inflater  inf  =  getOutputStream();  if(inf  ==  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getOutputStream();  if(inf  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  getOutputStream();  if(inf  ==  null)  {  throw  new  IllegalStateException( " ");  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
108	[BUG]  [BUGGY]  if(in  ==  null  ||  in.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.length()  ==  0)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in  ==  null  ||  in.length()  ==  0)  {	  if(in!=    null    ||    in.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
109	[BUG]  [BUGGY]  if(in  >=  null  ||  in.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in  >=  null  ||  in.length()  ==  0)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in  >=  null  ||  in.length()  ==  0)  {	  if(in!=    null    ||    in.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
110	[BUG]  [BUGGY]  if(in!=  null  ||  inf.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in!=  null  ||  inf.length()  ==  0)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in!=  null  ||  inf.length()  ==  0)  {	  if(in!=    null    ||    in.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
111	[BUG]  [BUGGY]  if(in  >>  null  ||  in.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in  >>  null  ||  in.length()  ==  0)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in  >>  null  ||  in.length()  ==  0)  {	  if(in!=    null    ||    in.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
112	[BUG]  [BUGGY]  if(in!=  null  ||  in.length()  >=  0)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.length()  >=  0)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in!=  null  ||  in.length()  >=  0)  {	  if(in!=    null    ||    in.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
113	[BUG]  [BUGGY]  if(in.close()  >  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in.close()  >  0)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in.close()  >  0)  {	  if(in.close())    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
114	[BUG]  [BUGGY]  if(!in.close())  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!in.close())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(!in.close())  {	  if(in.close())    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
115	[BUG]  [BUGGY]  if(in.close()  ||  inf.end())  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in.close()  ||  inf.end())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in.close()  ||  inf.end())  {	  if(in.close())    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
116	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(inf!=  null)  {  inf.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(inf!=  null)  {  inf.close();  }	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
117	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalStateException( " ");  }	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
118	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.arraycopy(inf,  0,  inf,  0,  inf.length);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.arraycopy(inf,  0,  inf,  0,  inf.length);  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  System.arraycopy(inf,  0,  inf,  0,  inf.length);  }	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
119	[BUG]  [BUGGY]  if(inf  ==  null)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(inf  ==  null)  {  inf.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(inf  ==  null)  {  inf.close();  }	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
120	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
121	[BUG]  [BUGGY]  inf.flush();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  inf.flush();  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	inf.flush();	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
122	[BUG]  [BUGGY]  if(in.isEnabled()  ||  isEnabled(Feature.AUTO_CLOSE_TOP))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in.isEnabled()  ||  isEnabled(Feature.AUTO_CLOSE_TOP))  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in.isEnabled()  ||  isEnabled(Feature.AUTO_CLOSE_TOP))  {	  if(closed    ||    isEnabled(Feature.AUTO_CLOSE_TOP))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
123	[BUG]  [BUGGY]  if(in.close()  ||  isEnabled(Feature.AUTO_CLOSE_TOP))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in.close()  ||  isEnabled(Feature.AUTO_CLOSE_TOP))  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in.close()  ||  isEnabled(Feature.AUTO_CLOSE_TOP))  {	  if(closed    ||    isEnabled(Feature.AUTO_CLOSE_TOP))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
124	[BUG]  [BUGGY]  if(!closed  ||  isEnabled(Feature.AUTO_CLOSE_TOP))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!closed  ||  isEnabled(Feature.AUTO_CLOSE_TOP))  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(!closed  ||  isEnabled(Feature.AUTO_CLOSE_TOP))  {	  if(closed    ||    isEnabled(Feature.AUTO_CLOSE_TOP))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
125	[BUG]  [BUGGY]  if(inferred  ||  isEnabled(Feature.AUTO_CLOSE_TOP))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(inferred  ||  isEnabled(Feature.AUTO_CLOSE_TOP))  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(inferred  ||  isEnabled(Feature.AUTO_CLOSE_TOP))  {	  if(closed    ||    isEnabled(Feature.AUTO_CLOSE_TOP))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
126	[BUG]  [BUGGY]  if(current  ||  isEnabled(Feature.AUTO_CLOSE_TOP))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(current  ||  isEnabled(Feature.AUTO_CLOSE_TOP))  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(current  ||  isEnabled(Feature.AUTO_CLOSE_TOP))  {	  if(closed    ||    isEnabled(Feature.AUTO_CLOSE_TOP))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
127	[BUG]  [BUGGY]  if(isEnabled(Feature.AUTO_CLOSE_TOP))  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.AUTO_CLOSE_TOP))  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(isEnabled(Feature.AUTO_CLOSE_TOP))  {	  if(closed    ||    isEnabled(Feature.AUTO_CLOSE_TOP))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
128	[BUG]  [BUGGY]  if(in.isEnabled()  ||  isEnabled(Feature.AUTO_CLOSE_CLOSED))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in.isEnabled()  ||  isEnabled(Feature.AUTO_CLOSE_CLOSED))  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in.isEnabled()  ||  isEnabled(Feature.AUTO_CLOSE_CLOSED))  {	  if(closed    ||    isEnabled(Feature.AUTO_CLOSE_CLOSED))    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
129	[BUG]  [BUGGY]  if(in.close()  ||  isEnabled(Feature.AUTO_CLOSE_CLOSED))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in.close()  ||  isEnabled(Feature.AUTO_CLOSE_CLOSED))  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in.close()  ||  isEnabled(Feature.AUTO_CLOSE_CLOSED))  {	  if(closed    ||    isEnabled(Feature.AUTO_CLOSE_CLOSED))    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
130	[BUG]  [BUGGY]  if(!closed  ||  isEnabled(Feature.AUTO_CLOSE_CLOSED))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!closed  ||  isEnabled(Feature.AUTO_CLOSE_CLOSED))  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(!closed  ||  isEnabled(Feature.AUTO_CLOSE_CLOSED))  {	  if(closed    ||    isEnabled(Feature.AUTO_CLOSE_CLOSED))    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
131	[BUG]  [BUGGY]  if(inferred  ||  isEnabled(Feature.AUTO_CLOSE_CLOSED))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(inferred  ||  isEnabled(Feature.AUTO_CLOSE_CLOSED))  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(inferred  ||  isEnabled(Feature.AUTO_CLOSE_CLOSED))  {	  if(closed    ||    isEnabled(Feature.AUTO_CLOSE_CLOSED))    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
132	[BUG]  [BUGGY]  if(current  ||  isEnabled(Feature.AUTO_CLOSE_CLOSED))  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(current  ||  isEnabled(Feature.AUTO_CLOSE_CLOSED))  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(current  ||  isEnabled(Feature.AUTO_CLOSE_CLOSED))  {	  if(closed    ||    isEnabled(Feature.AUTO_CLOSE_CLOSED))    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
133	[BUG]  [BUGGY]  if(in.closed  ||  isEnabled(Feature.AUTO_CLOSE_CLOSED))  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in.closed  ||  isEnabled(Feature.AUTO_CLOSE_CLOSED))  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in.closed  ||  isEnabled(Feature.AUTO_CLOSE_CLOSED))  {	  if(closed    ||    isEnabled(Feature.AUTO_CLOSE_CLOSED))    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
134	[BUG]  [BUGGY]  if(current!=  null)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(current!=  null)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  current.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(current!=  null)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  current.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
135	[BUG]  [BUGGY]  if(current!=  null)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  current.close();  }  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(current!=  null)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  current.close();  }  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(current!=  null)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  current.close();  }  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
136	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  current.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  current.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
137	[BUG]  [BUGGY]  if(current!=  null)  {  Inflater  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(current!=  null)  {  Inflater  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  current.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(current!=  null)  {  Inflater  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  current.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
138	[BUG]  [BUGGY]  Inflater  inf  =  getOutputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getOutputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  current.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  getOutputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  current.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
139	[BUG]  [BUGGY]  Inflater  inf  =  getOutputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getOutputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  getOutputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  }	  Inflater    inf    =    getInputStream();    if(inf    ==    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
140	[BUG]  [BUGGY]  InputStream  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  InputStream  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	InputStream  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  }	  Inflater    inf    =    getInputStream();    if(inf    ==    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
141	[BUG]  [BUGGY]  if(in  ==  null  ||  in.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.length  ==  0)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in  ==  null  ||  in.length  ==  0)  {	  if(in!=    null    ||    in.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
142	[BUG]  [BUGGY]  if(in!=  null  ||  in.length  >=  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.length  >=  0)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in!=  null  ||  in.length  >=  0)  {	  if(in!=    null    ||    in.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
143	[BUG]  [BUGGY]  if(in!=  null  ||  in.length  <  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.length  <  0)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in!=  null  ||  in.length  <  0)  {	  if(in!=    null    ||    in.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
144	[BUG]  [BUGGY]  if(in!=  null  ||  inf.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in!=  null  ||  inf.length  ==  0)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in!=  null  ||  inf.length  ==  0)  {	  if(in!=    null    ||    in.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
145	[BUG]  [BUGGY]  if(in!=  null  ||  in.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.length  >  0)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in!=  null  ||  in.length  >  0)  {	  if(in!=    null    ||    in.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
146	[BUG]  [BUGGY]  if(in.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in.length()  ==  0)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in.length()  ==  0)  {	  if(closed    ||    in.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
147	[BUG]  [BUGGY]  if(inf.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(inf.length()  ==  0)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(inf.length()  ==  0)  {	  if(closed    ||    in.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
148	[BUG]  [BUGGY]  if(inferred  ||  in.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(inferred  ||  in.length()  ==  0)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(inferred  ||  in.length()  ==  0)  {	  if(closed    ||    in.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
149	[BUG]  [BUGGY]  if(in.length()  ==  0  ||  closed.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in.length()  ==  0  ||  closed.length()  ==  0)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in.length()  ==  0  ||  closed.length()  ==  0)  {	  if(closed    ||    in.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
150	[BUG]  [BUGGY]  if(in!closed  ||  in.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in!closed  ||  in.length()  ==  0)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in!closed  ||  in.length()  ==  0)  {	  if(closed    ||    in.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
151	[BUG]  [BUGGY]  if(in.length()  ==  0  ||  in.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in.length()  ==  0  ||  in.length()  ==  0)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in.length()  ==  0  ||  in.length()  ==  0)  {	  if(closed    ||    in.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
152	[BUG]  [BUGGY]  if(in.isEnabled()  ||  in.isEnabled())  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in.isEnabled()  ||  in.isEnabled())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in.isEnabled()  ||  in.isEnabled())  {	  if(in.isEnabled())    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
153	[BUG]  [BUGGY]  if(in.isEnabled()  ||  inf.isEnabled())  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in.isEnabled()  ||  inf.isEnabled())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in.isEnabled()  ||  inf.isEnabled())  {	  if(in.isEnabled())    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
154	[BUG]  [BUGGY]  if(in.isEnabled()  &&  inf.isEnabled())  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in.isEnabled()  &&  inf.isEnabled())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in.isEnabled()  &&  inf.isEnabled())  {	  if(in.isEnabled())    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
155	[BUG]  [BUGGY]  if(in.isEnabled()  ||  in.isVersion())  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in.isEnabled()  ||  in.isVersion())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in.isEnabled()  ||  in.isVersion())  {	  if(in.isEnabled())    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
156	[BUG]  [BUGGY]  if(!in.isEnabled())  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!in.isEnabled())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(!in.isEnabled())  {	  if(in.isEnabled())    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
157	[BUG]  [BUGGY]  if(in.isEnabled()  ||  in.isVerticalState())  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in.isEnabled()  ||  in.isVerticalState())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in.isEnabled()  ||  in.isVerticalState())  {	  if(in.isEnabled())    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
158	[BUG]  [BUGGY]  if(closed)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(closed)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(closed)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
159	[BUG]  [BUGGY]  if(in  ==  null  ||  in.closed)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.closed)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in  ==  null  ||  in.closed)  {	  if(in.closed)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
160	[BUG]  [BUGGY]  if(closed)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(closed)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(closed)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  throw  new  IllegalStateException( " ");  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
161	[BUG]  [BUGGY]  InputStream  inf  =  getInputStream();  if(inf  ==  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  InputStream  inf  =  getInputStream();  if(inf  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	InputStream  inf  =  getInputStream();  if(inf  ==  null)  {  throw  new  IllegalStateException( " ");  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
162	[BUG]  [BUGGY]  if(in.isEnabled()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in.isEnabled()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in.isEnabled()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(in.isEnabled())    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
163	[BUG]  [BUGGY]  if(in.isEnabled()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in.isEnabled()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in.isEnabled()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(in.isEnabled())    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
164	[BUG]  [BUGGY]  if(in.isEnabled()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in.isEnabled()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in.isEnabled()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {	  if(in.isEnabled())    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
165	[BUG]  [BUGGY]  if(in.isEnabled()  ||  hasDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in.isEnabled()  ||  hasDataDescriptor)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in.isEnabled()  ||  hasDataDescriptor)  {	  if(in.isEnabled())    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
166	[BUG]  [BUGGY]  InputStream  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  InputStream  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	InputStream  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    outf.close();    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
167	[BUG]  [BUGGY]  InputStream  bis  =  getInputStream();  if(bis!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  InputStream  bis  =  getInputStream();  if(bis!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	InputStream  bis  =  getInputStream();  if(bis!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    outf.close();    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
168	[BUG]  [BUGGY]  InputStream  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  InputStream  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  current.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	InputStream  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  current.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
169	[BUG]  [BUGGY]  if(in!=  null)  {  in  =  null;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in!=  null)  {  in  =  null;  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in!=  null)  {  in  =  null;  }	  if(in!=    null)    {    in.close();    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
170	[BUG]  [BUGGY]  if(in!=  null)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in!=  null)  {  inputStream.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in!=  null)  {  inputStream.close();  }	  if(in!=    null)    {    in.close();    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
171	[BUG]  [BUGGY]  if(inputStream!=  null)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(inputStream!=  null)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(inputStream!=  null)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
172	[BUG]  [BUGGY]  if(inputStream!=  null)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(inputStream!=  null)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(inputStream!=  null)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
173	[BUG]  [BUGGY]  Inflater  inf  =  close();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  close();  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  close();	  Inflater    inf    =    getIn();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
174	[BUG]  [BUGGY]  Inflater  inf  =  getIn().close();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getIn().close();  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  getIn().close();	  Inflater    inf    =    getIn();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
175	[BUG]  [BUGGY]  Inflater  inf  =  getFullInput();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getFullInput();  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  getFullInput();	  Inflater    inf    =    getIn();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
176	[BUG]  [BUGGY]  ze.close(in);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  ze.close(in);  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	ze.close(in);	  ze.close();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
177	[BUG]  [BUGGY]  this.entryEncoding.closeEntry();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  this.entryEncoding.closeEntry();  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	this.entryEncoding.closeEntry();	  ze.close();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
178	[BUG]  [BUGGY]  if(in  >>  null  ||  in.close())  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in  >>  null  ||  in.close())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in  >>  null  ||  in.close())  {	  if(in!=    null    ||    in.close())    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
179	[BUG]  [BUGGY]  if(in  [Delete]  null  &&  in.close())  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in  [Delete]  null  &&  in.close())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in  [Delete]  null  &&  in.close())  {	  if(in!=    null    ||    in.close())    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
180	[BUG]  [BUGGY]  if(this.closed  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(this.closed  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(this.closed  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {	  if(closed    ||    isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
181	[BUG]  [BUGGY]  if(in!=  null  &&  in.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in!=  null  &&  in.length  ==  0)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in!=  null  &&  in.length  ==  0)  {	  if(in!=    null    ||    in.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
182	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(bis);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getInputStream(bis);  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  getInputStream(bis);	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
183	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream().close();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getInputStream().close();  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  getInputStream().close();	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
184	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(bis.length);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getInputStream(bis.length);  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  getInputStream(bis.length);	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
185	[BUG]  [BUGGY]  Inflater  inf  =  isEnabled(Feature.QUOTE_FIELD_NAMES);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  isEnabled(Feature.QUOTE_FIELD_NAMES);  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  isEnabled(Feature.QUOTE_FIELD_NAMES);	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
186	[BUG]  [BUGGY]  Inflater  inf  =  isEnabled(Feature.AUTO_CLOSE_ERROR);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  isEnabled(Feature.AUTO_CLOSE_ERROR);  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  isEnabled(Feature.AUTO_CLOSE_ERROR);	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
187	[BUG]  [BUGGY]  if(inputStream!=  null)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(inputStream!=  null)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(inputStream!=  null)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
188	[BUG]  [BUGGY]  if(inputStream!=  null)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(inputStream!=  null)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(inputStream!=  null)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
189	[BUG]  [BUGGY]  InputStream  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  InputStream  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	InputStream  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
190	[BUG]  [BUGGY]  if(in!=  null  &&  in.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in!=  null  &&  in.length()  ==  0)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in!=  null  &&  in.length()  ==  0)  {	  if(in!=    null    ||    in.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
191	[BUG]  [BUGGY]  if(in!=  null  ||  in.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.length()  >  0)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in!=  null  ||  in.length()  >  0)  {	  if(in!=    null    ||    in.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
192	[BUG]  [BUGGY]  if(in  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  if(closed  ||  in!=  null)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  if(closed  ||  in!=  null)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  if(closed  ||  in!=  null)  {	  if(closed    ||    in!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
193	[BUG]  [BUGGY]  if(in  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale();  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale();	  if(closed    ||    in!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
194	[BUG]  [BUGGY]  if(in  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  if(closed)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  if(closed)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  if(closed)  {	  if(closed    ||    in!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
195	[BUG]  [BUGGY]  if(in  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  if(closed  ||  in  ==  null)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  if(closed  ||  in  ==  null)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  if(closed  ||  in  ==  null)  {	  if(closed    ||    in!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
196	[BUG]  [BUGGY]  if(in  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale(in  ||  in!=  null)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale(in  ||  in!=  null)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale(in  ||  in!=  null)  {	  if(closed    ||    in!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
197	[BUG]  [BUGGY]  if(in  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  if(closed  ||  in  >=  null)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  if(closed  ||  in  >=  null)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  if(closed  ||  in  >=  null)  {	  if(closed    ||    in!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
198	[BUG]  [BUGGY]  if(in  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moaleIf(closed  ||  in!=  null)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moaleIf(closed  ||  in!=  null)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moale  moaleIf(closed  ||  in!=  null)  {	  if(closed    ||    in!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
199	[BUG]  [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in!=  null)  {  in.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  }	  in.close();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
200	[BUG]  [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in!=  null)  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }	  in.close();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
201	[BUG]  [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  System.err.println( "InputStream  closed: "  +  inputStream);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  System.err.println( "InputStream  closed: "  +  inputStream);  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in!=  null)  {  in.close();  }  else  {  System.err.println( "InputStream  closed: "  +  inputStream);  }	  in.close();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
202	[BUG]  [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  inputStream);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  inputStream);  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in!=  null)  {  in.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  inputStream);  }	  in.close();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
203	[BUG]  [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  System.err.println( "Failed  to  close  entry. ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  System.err.println( "Failed  to  close  entry. ");  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in!=  null)  {  in.close();  }  else  {  System.err.println( "Failed  to  close  entry. ");  }	  in.close();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
204	[BUG]  [BUGGY]  if(isOpen())  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isOpen())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(isOpen())  {	  if(!this.closed)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
205	[BUG]  [BUGGY]  if(inferred  ||  in.close())  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(inferred  ||  in.close())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(inferred  ||  in.close())  {	  if(closed    ||    in.close())    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
206	[BUG]  [BUGGY]  if(this.closed  ||  in.close())  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(this.closed  ||  in.close())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(this.closed  ||  in.close())  {	  if(closed    ||    in.close())    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
207	[BUG]  [BUGGY]  if(this.closed  ||  isEnabled(Feature.AUTO_CLOSE_CLOSED))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(this.closed  ||  isEnabled(Feature.AUTO_CLOSE_CLOSED))  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(this.closed  ||  isEnabled(Feature.AUTO_CLOSE_CLOSED))  {	  if(closed    ||    isEnabled(Feature.AUTO_CLOSE_CLOSED))    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
208	[BUG]  [BUGGY]  if(open  ||  isEnabled(Feature.AUTO_CLOSE_CLOSED))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(open  ||  isEnabled(Feature.AUTO_CLOSE_CLOSED))  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(open  ||  isEnabled(Feature.AUTO_CLOSE_CLOSED))  {	  if(closed    ||    isEnabled(Feature.AUTO_CLOSE_CLOSED))    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
209	[BUG]  [BUGGY]  if(isEnabled(Feature.AUTO_CLOSE_CLOSED)||  isEnabled(Feature.AUTO_CLOSE_FLOAT))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.AUTO_CLOSE_CLOSED)||  isEnabled(Feature.AUTO_CLOSE_FLOAT))  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(isEnabled(Feature.AUTO_CLOSE_CLOSED)||  isEnabled(Feature.AUTO_CLOSE_FLOAT))  {	  if(closed    ||    isEnabled(Feature.AUTO_CLOSE_CLOSED))    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
210	[BUG]  [BUGGY]  if(closed  ||  isEnabled(Feature.AUTO_CLOSE_CLOSED)||  hasUTF8Flag)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(closed  ||  isEnabled(Feature.AUTO_CLOSE_CLOSED)||  hasUTF8Flag)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(closed  ||  isEnabled(Feature.AUTO_CLOSE_CLOSED)||  hasUTF8Flag)  {	  if(closed    ||    isEnabled(Feature.AUTO_CLOSE_CLOSED))    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
211	[BUG]  [BUGGY]  InputStream  inf  =  isEnabled(Feature.QUOTE_FIELD_NAMES)?  getInputStream()  :  null;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  InputStream  inf  =  isEnabled(Feature.QUOTE_FIELD_NAMES)?  getInputStream()  :  null;  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	InputStream  inf  =  isEnabled(Feature.QUOTE_FIELD_NAMES)?  getInputStream()  :  null;	  InputStream    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
212	[BUG]  [BUGGY]  InputStream  inf  =  isEnabled(Feature.AUTO_CLOSE_ERROR)?  getInputStream()  :  null;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  InputStream  inf  =  isEnabled(Feature.AUTO_CLOSE_ERROR)?  getInputStream()  :  null;  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	InputStream  inf  =  isEnabled(Feature.AUTO_CLOSE_ERROR)?  getInputStream()  :  null;	  InputStream    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
213	[BUG]  [BUGGY]  InputStream  inf  =  isEnabled(Feature.AUTO_CLOSE_SOURCE)?  getInputStream()  :  null;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  InputStream  inf  =  isEnabled(Feature.AUTO_CLOSE_SOURCE)?  getInputStream()  :  null;  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	InputStream  inf  =  isEnabled(Feature.AUTO_CLOSE_SOURCE)?  getInputStream()  :  null;	  InputStream    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
214	[BUG]  [BUGGY]  InputStream  inf  =  isEnabled(Feature.QUOTE_FIELD_NAMES);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  InputStream  inf  =  isEnabled(Feature.QUOTE_FIELD_NAMES);  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	InputStream  inf  =  isEnabled(Feature.QUOTE_FIELD_NAMES);	  InputStream    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
215	[BUG]  [BUGGY]  InputStream  inf  =  isEnabled(Feature.AUTO_CLOSE_ERROR);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  InputStream  inf  =  isEnabled(Feature.AUTO_CLOSE_ERROR);  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	InputStream  inf  =  isEnabled(Feature.AUTO_CLOSE_ERROR);	  InputStream    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
216	[BUG]  [BUGGY]  if(in.isOpen()  ||  in.isShutdown())  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in.isOpen()  ||  in.isShutdown())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in.isOpen()  ||  in.isShutdown())  {	  if(in.isOpen())    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
217	[BUG]  [BUGGY]  if(in.isOpen()  ||  in.isAbsolute())  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in.isOpen()  ||  in.isAbsolute())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in.isOpen()  ||  in.isAbsolute())  {	  if(in.isOpen())    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
218	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  }	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
219	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "+inf.getClass().getName());  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "+inf.getClass().getName());  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "+inf.getClass().getName());  }	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
220	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "+inf.getName());  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "+inf.getName());  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "+inf.getName());  }	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
221	[BUG]  [BUGGY]  if(this.closed  ||  isEnabled(Feature.AUTO_CLOSE_TOP))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(this.closed  ||  isEnabled(Feature.AUTO_CLOSE_TOP))  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(this.closed  ||  isEnabled(Feature.AUTO_CLOSE_TOP))  {	  if(closed    ||    isEnabled(Feature.AUTO_CLOSE_TOP))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
222	[BUG]  [BUGGY]  if(closed  ||  isEnabled(Feature.AUTO_CLOSE_TOP)||  hasUTF8Flag)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(closed  ||  isEnabled(Feature.AUTO_CLOSE_TOP)||  hasUTF8Flag)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(closed  ||  isEnabled(Feature.AUTO_CLOSE_TOP)||  hasUTF8Flag)  {	  if(closed    ||    isEnabled(Feature.AUTO_CLOSE_TOP))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
223	[BUG]  [BUGGY]  if(closed  ||  isEnabled(Feature.AUTO_CLOSE_TOP)||  hasDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(closed  ||  isEnabled(Feature.AUTO_CLOSE_TOP)||  hasDataDescriptor)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(closed  ||  isEnabled(Feature.AUTO_CLOSE_TOP)||  hasDataDescriptor)  {	  if(closed    ||    isEnabled(Feature.AUTO_CLOSE_TOP))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
224	[BUG]  [BUGGY]  if(in.closed  ||  in.isEnabled())  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in.closed  ||  in.isEnabled())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in.closed  ||  in.isEnabled())  {	  if(closed    ||    in.isEnabled())    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
225	[BUG]  [BUGGY]  if(in.close()  ||  in.isEnabled())  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in.close()  ||  in.isEnabled())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in.close()  ||  in.isEnabled())  {	  if(closed    ||    in.isEnabled())    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
226	[BUG]  [BUGGY]  if(inputStream!=  null)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(inputStream!=  null)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  inputStream.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(inputStream!=  null)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  inputStream.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
227	[BUG]  [BUGGY]  if(inputStream!=  null)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  inputStream.close();  }  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(inputStream!=  null)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  inputStream.close();  }  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(inputStream!=  null)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  inputStream.close();  }  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
228	[BUG]  [BUGGY]  if(in  [Delete]  null)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in  [Delete]  null)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in  [Delete]  null)  {	  if(in    <    null)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
229	[BUG]  [BUGGY]  if(in.close()  ==  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in.close()  ==  0)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in.close()  ==  0)  {	  if(closed    ||    in.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
230	[BUG]  [BUGGY]  if(closed  ||  in.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(closed  ||  in.length()  >  0)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(closed  ||  in.length()  >  0)  {	  if(closed    ||    in.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
231	[BUG]  [BUGGY]  if(in  >  0  ||  in.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in  >  0  ||  in.length()  ==  0)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in  >  0  ||  in.length()  ==  0)  {	  if(closed    ||    in.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
232	[BUG]  [BUGGY]  if(closed  ||  in.length()!=  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(closed  ||  in.length()!=  0)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(closed  ||  in.length()!=  0)  {	  if(closed    ||    in.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
233	[BUG]  [BUGGY]  if(closed)  {  Inflater  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(closed)  {  Inflater  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(closed)  {  Inflater  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  }	  Inflater    inf    =    getInputStream();    if(inf    ==    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
234	[BUG]  [BUGGY]  if(!this.open)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!this.open)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(!this.open)  {	  if(this.open)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
235	[BUG]  [BUGGY]  if(closed  ||  in  ==  null)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(closed  ||  in  ==  null)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(closed  ||  in  ==  null)  {	  if(closed    ||    in!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
236	[BUG]  [BUGGY]  if(closed  ||  in.length()  <  =  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(closed  ||  in.length()  <  =  0)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(closed  ||  in.length()  <  =  0)  {	  if(closed    ||    in.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
237	[BUG]  [BUGGY]  if(closed  ||  in.size()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(closed  ||  in.size()  ==  0)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(closed  ||  in.size()  ==  0)  {	  if(closed    ||    in.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
238	[BUG]  [BUGGY]  if(closed  ||  in.length()  >=  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(closed  ||  in.length()  >=  0)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(closed  ||  in.length()  >=  0)  {	  if(closed    ||    in.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
239	[BUG]  [BUGGY]  if(closed)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(closed)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(closed)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
240	[BUG]  [BUGGY]  if(closed)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(closed)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(closed)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
241	[BUG]  [BUGGY]  InputStream  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  InputStream  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	InputStream  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
242	[BUG]  [BUGGY]  InputStream  inf  =  getOutputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  InputStream  inf  =  getOutputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	InputStream  inf  =  getOutputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    outf.close();    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
243	[BUG]  [BUGGY]  InputStream  inputStream  =  getInputStream();  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  InputStream  inputStream  =  getInputStream();  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	InputStream  inputStream  =  getInputStream();  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    outf.close();    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
244	[BUG]  [BUGGY]  InputStream  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  InputStream  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	InputStream  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    outf.close();    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
245	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(inputStream);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getInputStream(inputStream);  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  getInputStream(inputStream);	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
246	[BUG]  [BUGGY]  Inflater  inf  =  createInputStream();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  createInputStream();  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  createInputStream();	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
247	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(-1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getInputStream(-1);  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  getInputStream(-1);	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
248	[BUG]  [BUGGY]  Inflater  inf  =  closeInputStream();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  closeInputStream();  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  closeInputStream();	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
249	[BUG]  [BUGGY]  if(closed  =  true  ||  in.close())  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(closed  =  true  ||  in.close())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(closed  =  true  ||  in.close())  {	  if(closed    ||    in.close())    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
250	[BUG]  [BUGGY]  if(!closed  ||!this.closed)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!closed  ||!this.closed)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(!closed  ||!this.closed)  {	  if(!this.closed)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
251	[BUG]  [BUGGY]  if(!closed  ||!in.close())  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(!closed  ||!in.close())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(!closed  ||!in.close())  {	  if(!this.closed)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
252	[BUG]  [BUGGY]  if(in!=  null  &&  inf  ==  null)  {  in.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in!=  null  &&  inf  ==  null)  {  in.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in!=  null  &&  inf  ==  null)  {  in.close();  }	  if(in!=    null)    {    in.close();    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
253	[BUG]  [BUGGY]  if(in!=  null  &&  inf!=  null)  {  in.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in!=  null  &&  inf!=  null)  {  in.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in!=  null  &&  inf!=  null)  {  in.close();  }	  if(in!=    null)    {    in.close();    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
254	[BUG]  [BUGGY]  while(in!=  null)  {  in.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  while(in!=  null)  {  in.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	while(in!=  null)  {  in.close();  }	  if(in!=    null)    {    in.close();    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
255	[BUG]  [BUGGY]  if(in  ==  null  ||  in.isEnabled())  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in  ==  null  ||  in.isEnabled())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in  ==  null  ||  in.isEnabled())  {	  if    (in    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
256	[BUG]  [BUGGY]  if  (!closed  ||  in  >=  null)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if  (!closed  ||  in  >=  null)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if  (!closed  ||  in  >=  null)  {	  if    (!closed    ||    in    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
257	[BUG]  [BUGGY]  if(in!=  null  ||  in.length()  <  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in!=  null  ||  in.length()  <  0)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in!=  null  ||  in.length()  <  0)  {	  if(in!=    null    ||    in.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
258	[BUG]  [BUGGY]  if(closed!=  null  ||  in.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(closed!=  null  ||  in.length()  ==  0)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(closed!=  null  ||  in.length()  ==  0)  {	  if(in!=    null    ||    in.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
259	[BUG]  [BUGGY]  InputStream  bis  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  InputStream  bis  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	InputStream  bis  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
260	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outputStream.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outputStream.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outputStream.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
261	[BUG]  [BUGGY]  if(in.isInput())  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in.isInput())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in.isInput())  {	  if(in.isOpen())    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
262	[BUG]  [BUGGY]  if(in  <  null  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in  <  null  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in  <  null  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {	  if(in    <    null)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
263	[BUG]  [BUGGY]  if(in  <  null  ||  in.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in  <  null  ||  in.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in  <  null  ||  in.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {	  if(in    <    null)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
264	[BUG]  [BUGGY]  if(in  <  null  ||  isEnabled(Feature.AUTO_CLOSE_TOP))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in  <  null  ||  isEnabled(Feature.AUTO_CLOSE_TOP))  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in  <  null  ||  isEnabled(Feature.AUTO_CLOSE_TOP))  {	  if(in    <    null)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
265	[BUG]  [BUGGY]  if(in  >=  null  ||  in.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in  >=  null  ||  in.length  ==  0)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in  >=  null  ||  in.length  ==  0)  {	  if(in!=    null    ||    in.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
266	[BUG]  [BUGGY]  if(closed!=  null  ||  in.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(closed!=  null  ||  in.length  ==  0)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(closed!=  null  ||  in.length  ==  0)  {	  if(in!=    null    ||    in.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
267	[BUG]  [BUGGY]  Inflater  inf  =  getInput();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  getInput();  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  getInput();	  Inflater    inf    =    getIn();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
268	[BUG]  [BUGGY]  Inflater  inf  =  closeEntry();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  Inflater  inf  =  closeEntry();  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	Inflater  inf  =  closeEntry();	  Inflater    inf    =    getIn();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
269	[BUG]  [BUGGY]  if(in!=  null  &&  in.closed)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in!=  null  &&  in.closed)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in!=  null  &&  in.closed)  {	  if(in.closed)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
270	[BUG]  [BUGGY]  if(closed  ||  isEnabled(Feature.AUTO_CLOSE_TOP)||  isEnabled(Feature.FLUSH_EXP_32))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(closed  ||  isEnabled(Feature.AUTO_CLOSE_TOP)||  isEnabled(Feature.FLUSH_EXP_32))  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(closed  ||  isEnabled(Feature.AUTO_CLOSE_TOP)||  isEnabled(Feature.FLUSH_EXP_32))  {	  if(closed    ||    isEnabled(Feature.AUTO_CLOSE_TOP))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
271	[BUG]  [BUGGY]  if(open  ||  isEnabled(Feature.AUTO_CLOSE_TOP))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(open  ||  isEnabled(Feature.AUTO_CLOSE_TOP))  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(open  ||  isEnabled(Feature.AUTO_CLOSE_TOP))  {	  if(closed    ||    isEnabled(Feature.AUTO_CLOSE_TOP))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
272	[BUG]  [BUGGY]  if(closed  ||  isEnabled(Feature.AUTO_CLOSE_TOP)||  isEnabled(Feature.DEFAULT_CLOSED_ENTRY))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(closed  ||  isEnabled(Feature.AUTO_CLOSE_TOP)||  isEnabled(Feature.DEFAULT_CLOSED_ENTRY))  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(closed  ||  isEnabled(Feature.AUTO_CLOSE_TOP)||  isEnabled(Feature.DEFAULT_CLOSED_ENTRY))  {	  if(closed    ||    isEnabled(Feature.AUTO_CLOSE_TOP))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
273	[BUG]  [BUGGY]  if(closed  ||  isEnabled(Feature.AUTO_CLOSE_TOP)||  isEnabled(Feature.DEFAULT_CLOSE_SOURCE))  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(closed  ||  isEnabled(Feature.AUTO_CLOSE_TOP)||  isEnabled(Feature.DEFAULT_CLOSE_SOURCE))  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(closed  ||  isEnabled(Feature.AUTO_CLOSE_TOP)||  isEnabled(Feature.DEFAULT_CLOSE_SOURCE))  {	  if(closed    ||    isEnabled(Feature.AUTO_CLOSE_TOP))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
274	[BUG]  [BUGGY]  if(in.isEnabled()  &&  in.isEnabled())  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in.isEnabled()  &&  in.isEnabled())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in.isEnabled()  &&  in.isEnabled())  {	  if(in.isEnabled())    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
275	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  buffer.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  buffer.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  buffer.close();  }	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
276	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  break;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  break;  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  break;  }	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
277	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  return;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  return;  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  return;  }	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
278	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "Failed  to  close  entry. ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "Failed  to  close  entry. ");  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "Failed  to  close  entry. ");  }	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
279	[BUG]  [BUGGY]  if(inferred!=  null  &&  in.close())  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(inferred!=  null  &&  in.close())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(inferred!=  null  &&  in.close())  {	  if(in!=    null    ||    in.close())    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
280	[BUG]  [BUGGY]  if(closed!=  null  &&  in.close())  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(closed!=  null  &&  in.close())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(closed!=  null  &&  in.close())  {	  if(in!=    null    ||    in.close())    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
281	[BUG]  [BUGGY]  if(closed!=  null  ||  in.close())  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(closed!=  null  ||  in.close())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(closed!=  null  ||  in.close())  {	  if(in!=    null    ||    in.close())    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
282	[BUG]  [BUGGY]  InputStream  bis  =  getInputStream();  if(bis!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  InputStream  bis  =  getInputStream();  if(bis!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  current.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	InputStream  bis  =  getInputStream();  if(bis!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  current.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
283	[BUG]  [BUGGY]  InputStream  inputStream  =  getInputStream();  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  current.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  InputStream  inputStream  =  getInputStream();  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  current.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	InputStream  inputStream  =  getInputStream();  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  current.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    current.close();    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
284	[BUG]  [BUGGY]  if(closed)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(closed)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  inputStream.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(closed)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  inputStream.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
285	[BUG]  [BUGGY]  InputStream  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  InputStream  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  inputStream.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	InputStream  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  inputStream.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
286	[BUG]  [BUGGY]  if(closed)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  inputStream.close();  }  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(closed)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  inputStream.close();  }  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(closed)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  inputStream.close();  }  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
287	[BUG]  [BUGGY]  if  (!closed  ||  inf.length!=  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if  (!closed  ||  inf.length!=  0)  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if  (!closed  ||  inf.length!=  0)  {	  if    (!closed    ||    inf!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
288	[BUG]  [BUGGY]  if(closed  ||  in.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(closed  ||  in.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(closed  ||  in.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (!closed    ||    in.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
289	[BUG]  [BUGGY]  if(in.close())  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in.close())  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in.close())  {  in.close();  }  else  {  throw  new  IllegalStateException( " ");  }	  in.close();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
290	[BUG]  [BUGGY]  if(inf!=  null)  {  in.close();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(inf!=  null)  {  in.close();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(inf!=  null)  {  in.close();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }	  in.close();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
291	[BUG]  [BUGGY]  if(inf!=  null)  {  in.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(inf!=  null)  {  in.close();  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(inf!=  null)  {  in.close();  }	  in.close();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
292	[BUG]  [BUGGY]  if(in.close())  {  in.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in.close())  {  in.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in.close())  {  in.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: "  +  entryEncoding);  }	  in.close();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
293	[BUG]  [BUGGY]  if(in.close())  {  in.close();  }  else  {  System.exit(0);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(in.close())  {  in.close();  }  else  {  System.exit(0);  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(in.close())  {  in.close();  }  else  {  System.exit(0);  }	  in.close();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
294	[BUG]  [BUGGY]  try  {  ze.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  try  {  ze.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	try  {  ze.close();  }  catch(IOException  ioe)  {  }	  ze.close();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
295	[BUG]  [BUGGY]  try  {  ze.close();  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  try  {  ze.close();  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	try  {  ze.close();  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }	  ze.close();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
296	[BUG]  [BUGGY]  try  {  ze.close();  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields  closed: "  +  ioe);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  try  {  ze.close();  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields  closed: "  +  ioe);  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	try  {  ze.close();  }  catch(IOException  ioe)  {  System.err.println( "UnicodeExtraFields  closed: "  +  ioe);  }	  ze.close();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
297	[BUG]  [BUGGY]  try  {  ze.close();  }  catch(IOException  ioe)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  try  {  ze.close();  }  catch(IOException  ioe)  {  throw  new  IOException( " ");  }  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	try  {  ze.close();  }  catch(IOException  ioe)  {  throw  new  IOException( " ");  }	  ze.close();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
298	[BUG]  [BUGGY]  if(this.closed  ||  in.isEnabled())  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(this.closed  ||  in.isEnabled())  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(this.closed  ||  in.isEnabled())  {	  if(closed    ||    in.isEnabled())    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
299	[BUG]  [BUGGY]  if(shutdown  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(shutdown  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(shutdown  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {	  if(closed    ||    isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
300	[BUG]  [BUGGY]  if(closed  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(closed  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(closed  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(closed    ||    isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
301	[BUG]  [BUGGY]  if(closed  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE)||  isEnabled(Feature.FLUSH_EXP_32))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(closed  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE)||  isEnabled(Feature.FLUSH_EXP_32))  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(closed  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE)||  isEnabled(Feature.FLUSH_EXP_32))  {	  if(closed    ||    isEnabled(Feature.AUTO_CLOSE_SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
302	[BUG]  [BUGGY]  InputStream  inf  =  isEnabled(Feature.AUTO_CLOSE_SOURCE);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  InputStream  inf  =  isEnabled(Feature.AUTO_CLOSE_SOURCE);  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	InputStream  inf  =  isEnabled(Feature.AUTO_CLOSE_SOURCE);	  InputStream    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
303	[BUG]  [BUGGY]  InputStream  inf  =  isEnabled(Feature.AUTO_CLOSE_SOURCENAME)?  getInputStream()  :  null;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  InputStream  inf  =  isEnabled(Feature.AUTO_CLOSE_SOURCENAME)?  getInputStream()  :  null;  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	InputStream  inf  =  isEnabled(Feature.AUTO_CLOSE_SOURCENAME)?  getInputStream()  :  null;	  InputStream    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
304	[BUG]  [BUGGY]  InputStream  inf  =  getInputStream(inputStream);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  InputStream  inf  =  getInputStream(inputStream);  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	InputStream  inf  =  getInputStream(inputStream);	  InputStream    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
305	[BUG]  [BUGGY]  InputStream  inf  =  readInputStream();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  InputStream  inf  =  readInputStream();  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	InputStream  inf  =  readInputStream();	  InputStream    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
306	[BUG]  [BUGGY]  if(closed  ||  isEnabled(Feature.AUTO_CLOSE_CLOSED)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(closed  ||  isEnabled(Feature.AUTO_CLOSE_CLOSED)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(closed  ||  isEnabled(Feature.AUTO_CLOSE_CLOSED)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(closed    ||    isEnabled(Feature.AUTO_CLOSE_CLOSED))    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
307	[BUG]  [BUGGY]  if(closed  ||  isEnabled(Feature.AUTO_CLOSE_CLOSED)||  isEnabled(Feature.DEFAULT_CLOSE_SOURCE))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {      [BUGGY]  if(closed  ||  isEnabled(Feature.AUTO_CLOSE_CLOSED)||  isEnabled(Feature.DEFAULT_CLOSE_SOURCE))  {  [BUGGY]      closed  =  true;  try  {  in.close();  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	549	549	1	replace	if(closed  ||  isEnabled(Feature.AUTO_CLOSE_CLOSED)||  isEnabled(Feature.DEFAULT_CLOSE_SOURCE))  {	  if(closed    ||    isEnabled(Feature.AUTO_CLOSE_CLOSED))    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
