projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552in.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552inf.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552in.flush();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552ze.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.inf.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552ze.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552openEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552inf.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding=entryEncoding;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){for(inti=0;i<inf.length();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){for(inti=0;i<inf.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){inf=newZipArchiveEntry();}else{inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){inf=newZipInputStream(inf.length());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){inf=newZipArchiveEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=openInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=newInflater();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=this.inputStream.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=newInflater(inf.read());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.inf.flush();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.inf.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.inf.close(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.inf.closeInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552inf.flush();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552ze.flush();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552ze.closeEntry(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552ze.close(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getOutputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=closeInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getInputStream(bis);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=this.inputStream;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=startInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){inf.close();}else{thrownewIllegalStateException("");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){inf.close();}else{thrownewIllegalArgumentException("");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){inf.close();}else{closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getInputStream().close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getInputStream(bis.length);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552entry.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552closeEntry(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=entryEncoding.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552zipEncoding=getZipEncoding();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552zipEncoding.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=entryEncoding.open();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.inf=newZipInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=entryEncoding.openInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterbis=newZipInputStream(inf.read());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=entryEncoding.openInput();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552inf=newZipInputStream(inputStream);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=ze.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getInputStream();if(inf!=null){for(inti=0;i<inf.length;++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getInputStream();if(inf!=null){for(inti=0;i<inf.length;++i){closeInputStream(inf.get(i));}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getInputStream();if(inf!=null){for(inti=0;i<inf.size();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getInputStream();if(inf!=null){for(inti=0;i<inf.length;++i){outf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getInputStream();if(inf!=null){for(inti=0;i<inf.length;++i){outf.append('n');}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getInputStream(inputStream);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding.closeEntry(ze);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.inf=newZipInputStream(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf.close()){try{inf.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){inf.close();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){inf.close();}else{System.err.println("UnicodeExtraFieldsclosed");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){inf.close();}else{System.err.println("Failedtocloseentry.");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){inf.close();}else{buffer.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding=entryEncoding.encode(entry);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding=entryEncoding.openEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552zipEncoding.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){inf.close();}else{closed=false;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552InputStreambis=newZipInputStream(inf.getBytes());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=this.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=openEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=closeEntry(entry);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=closeZipEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=closeInput();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=this.inputStream.read();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=this.inputStream.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=this.inputStream.readIn();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=this.inputStream.start();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=this.inputStream.open();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getInputStream();if(inf==null){for(inti=0;i<inf.length;++i){outf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getOutputStream();if(inf!=null){for(inti=0;i<inf.length;++i){outf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552finalInflaterinf=getInputStream();if(inf!=null){for(inti=0;i<inf.length;++i){outf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getInputStream();for(inti=0;i<inf.length;++i){outf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getInputStream();if(inf!=null){for(inti=0;i<inf.length;++i){outf.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=startInputStream(bis);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=this.startInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=closed.startInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.inf.closeInputStream(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552inf.closeInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding.closeEntry(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding.close(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding.flush();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding.closeAllEntries();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding.closeEntry(inf,entry);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding.closeEntry(entry);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding.closeEntry(inf,ze);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding.closeEntry(enf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding.closeEntry(outputStream,ze);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding.closeEntry(outputStream);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552inf=newZipArchiveEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=newZipArchiveEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf==null){inf=newZipArchiveEntry();}else{inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf==null){inf=newZipArchiveEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552while(inf!=null){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){inf.close();}else{thrownewIllegalStateException("".getMessage());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getInputStream().flush();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getInputStream().closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getInputStream().close(bis);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getInputStream().getEnd();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getInputStream().start();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552System.err.println("UnicodeExtraFieldsclosed");
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){inf.close();}else{System.err.println("UnicodeExtraFieldsclosed.");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){inf.close();}else{System.err.println("UnicodeExtraFieldsclosed:");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){inf.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){inf.flush();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){inf.flush();}else{buffer.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){inf.flush();}else{closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){inf.flush();}else{inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getInputStream(bis.length-1);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getInputStream(bis.length+1);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getInputStream(bis.length-1,bis.length);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getInputStream(bis.length-2);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getInputStream(bis.length+1,bis.length);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getInputStream(bis,0,bis.length);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552openZipEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552ze.closeEntry(entry);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=zipEncoding.open();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=entryEncoding.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=entryEncoding.openStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=this.entryEncoding.open();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552entry.flush();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552entry.closeEntry(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.inf.close(inf,bis);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.inf.closeEntry(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.inf.close(inf,entryEncoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){buffer.close();}else{buffer.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=closeInputStream(bis);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=this.closeInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=closeInputStream(in);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=closeOutputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=closeInputStream(-1);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=closeBoundedInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552inf=newZipInputStream(inputStream,bis);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552inf=newZipInputStream(bis);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552InputStreambis=newZipInputStream(inputStream);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552inf=newZipInputStream(buff,inputStream);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552inf=newZipInputStream(BoundedInputStream.DEFAULT_OUTPUT);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552inf=newZipInputStream(buffer,inputStream);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552inf=newZipInputStream(BoundedInputStream.DEFAULT_ZIP_LENGTH);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552ze.closeEntry(inf,entryEncoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552ze.closeEntry(inf,closed);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552ze.closeEntry(inf,entry);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.inf=null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552for(inti=0;i<inf.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf==null){for(inti=0;i<inf.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){for(inti=0;i<inf.length();++i){closed=false;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf==null){for(inti=0;i<inf.length();++i){closed=false;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){for(inti=0;i<inputStream.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){for(inti=0;i<out.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=bis.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=this.entryEncoding.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=zipEncoding.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=this.openInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=closed.openInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=openInputStream(-1);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552ze.close(inf,entryEncoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552ze.close(inf,bis);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552ze.closeInputStream(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterbis=newZipInputStream(inf.read(),inf.length);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterbis=newZipInputStream(inf.read()+1);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterbis=newZipInputStream(inf.read(),inf.charAt(inf.length()-1));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterbis=newZipInputStream(inf.read(),inf.end());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterbis=newZipInputStream(inf.read(),zipEncoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterbis=newZipInputStream(inf.read()-1);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=newInflater(inputStream);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=newInflater(outputStream);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=newInflater(0);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=newInflater(true);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=newInflater(this.inputStream);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=newInflater(-1);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.inf=newZipInputStream(inf,bis);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.inf=newZipInputStream(inf,inf.length);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.inf=newZipInputStream(inf.getBytes());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.inf=newZipInputStream(inf.read());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.inf=newZipInputStream(inf,1);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.inf=newZipInputStream(inf,up);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552zipEncoding=getZipEncoding(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552zipEncoding=getCurrentZipEncoding();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552ZipEncodingentryEncoding=getZipEncoding();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552zipEncoding=getRawZipEncoding();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552zipEncoding=getCrc();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552ZipEncodingentryEncoding=getEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=zipEncoding.openInput();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=this.entryEncoding.openInput();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=entryEncoding.closeInput();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=entryEncoding.start();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552InputStreambis=newZipInputStream(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getInputStream();if(inf!=null){for(inti=0;i<inputStream.size();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552InputStreambis=getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getInputStream();if(inf==null){for(inti=0;i<inf.size();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552InputStreambis=getInputStream();if(bis!=null){for(inti=0;i<bis.size();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getOutputStream();if(inf!=null){for(inti=0;i<inf.size();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(closed){Inflaterinf=getInputStream();if(inf!=null){for(inti=0;i<inf.length;++i){outf.append('n');}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(closed){Inflaterinf=getInputStream();if(inf!=null){for(inti=0;i<inf.length;++i){outf.append('n');}}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getInputStream();if(inf==null){for(inti=0;i<inf.length;++i){outf.append('n');}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getOutputStream();if(inf!=null){for(inti=0;i<inf.length;++i){outf.append('n');}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552InputStreaminf=getInputStream();if(inf!=null){for(inti=0;i<inf.length;++i){outf.append('n');}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552while(inf!=null){inf.close();}else{thrownewIllegalArgumentException("");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){inf.close();}else{thrownewIllegalArgumentException("".getMessage());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getInputStream();if(inf==null){for(inti=0;i<inf.length;++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552InputStreambis=getInputStream();if(bis!=null){for(inti=0;i<inf.length;++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getOutputStream();if(inf!=null){for(inti=0;i<inf.length;++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552finalInflaterinf=getInputStream();if(inf!=null){for(inti=0;i<inf.length;++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getInputStream(bis,closed);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getInputStream(bis,encoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getInputStream(bis,0);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getInputStream(bis,buffer);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552openInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding=zipEncoding.encode(entry);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding=entryEncoding.encode(zipEncoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding=entryEncoding.encode(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding=entryEncoding.encode(current);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding=entryEncoding.encode(buf,entry);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding=entryEncoding.encode(ceiling);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552inf=newZipInputStream(inf.length());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552InputStreaminf=newZipInputStream(inf.length());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=newZipInputStream(inf.length());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552InputStreambis=newZipInputStream(inf.length());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding=zipEncoding;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding=encoding;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding=ZipEncoding.DEFAULT;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding=ZipEncoding.DEFAULT_ENTRY_ENCODING;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding=ZipEncoding.DEFAULT_ENCODING;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding=ZipEncoding.DEFAULT_ZIP_ENCODING;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding=ZipEncodingUtil.closeZipEncoding(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getCurrentInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getCurrentEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getOutputStream(),bis;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552zipEncoding.closeEntry(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552zipEncoding.closeEntry(entry);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552ZipEncodingentryEncoding=zipEncoding.openEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552ZipEncodingentryEncoding=zipEncoding.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552zipEncoding=entryEncoding.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){inf.close();}else{System.err.println("Failedtocloseentry.n");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){inf.close();}else{System.err.println("Failedtocloseentry..");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding=zipEncoding.openEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding=entryEncoding.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding=entryEncoding.openStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding=entryEncoding.openZipEncoding();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding=entryEncoding.openZipEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding=entryEncoding.openInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=this.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=open();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=closed;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getInputStream(inputStream,bis);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=closeInputStream(inputStream);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getInputStream(bis,inputStream);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getInputStream(outputStream);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getInputStream(initStream,bis);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=entry.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=entry.open();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=this.ze.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=closed.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=this.entry.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=close.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552InputStreaminf=newZipArchiveEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552(ZipArchiveEntry)inf.clone();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.inf.closeEntry(entry);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding.closeZipEncoding();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=this;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=newZipInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=ze;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552zipEncoding.close(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552zipEncoding.closeInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552ZipEncodingentryEncoding=zipEncoding.open();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552zipEncoding=entryEncoding.openStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inputStream!=null){inf.close();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inputStream!=null){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=newInflater(inf.read(),bis);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=newInflater(inf.read()+1);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=newInflater(inputStream.read());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=newInflater(inf.read(),closed);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=newInflater(outputStream.read());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=newInflater(inf.read(),out);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getInputStream();if(inf==null){for(inti=0;i<inf.length;++i){closeInputStream(inf.get(i));}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getOutputStream();if(inf!=null){for(inti=0;i<inf.length;++i){closeInputStream(inf.get(i));}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552InputStreaminf=getInputStream();if(inf!=null){for(inti=0;i<inf.length;++i){closeInputStream(inf.get(i));}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552InputStreambis=getInputStream();if(bis!=null){for(inti=0;i<inf.length;++i){closeInputStream(inf.get(i));}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getInputStream();if(inf!=null){for(inti=0;i<inf.length;++i){closeInputStream(inf.get(0));}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inputStream!=null){for(inti=0;i<inf.length();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552while(inf!=null){for(inti=0;i<inf.length();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552while(inf!=null){for(inti=0;i<inputStream.length();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inputStream!=null){for(inti=0;i<inputStream.length();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inputStream!=null){for(inti=0;i<inf.length();++i){outputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inputStream!=null){for(inti=0;i<inf.length();++i){this.inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552while(inf!=null){for(inti=0;i<inf.length();++i){inputStream.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.inf=newZipInputStream(outputStream);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.inf=newZipInputStream(inf.length);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.inf=newZipInputStream(0);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552inf=newZipInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552try{inf.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(!closed){if(inf.close()){try{inf.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552while(!closed){if(inf.close()){try{inf.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552while(!closed){try{inf.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Thread.currentThread().interrupt();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552try{inf.close();}catch(IOExceptionioe){
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552closeEntry(inf,entryEncoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552closeEntry(inf,entry);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552openEntry(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=bis.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=this.inputStream.flush();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=this.inputStream.closeInput();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=this.inputStream.getInputFile();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=zipEncoding.openInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=entryEncoding.openInputStream(bis);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=this.entryEncoding.openInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=bis.openInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=entryEncoding.closeInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552inf.close(entry);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552zipEncoding=null;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552zipEncoding=newZipEncoding();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552ZipEncodingentryEncoding.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=close(inputStream);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=closeOutput();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding=entryEncoding.clone();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding=entryEncoding.cloneTree();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=bis.closeInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=openInputStream(bis);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=ze.openInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=newjava.util.ArrayInflater();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=newBoundedInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=newDefaultInflater();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getInputStream(in);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.inf=newZipInputStream(inf,Bis.MAX_VALUE);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding=ze.encode(entry);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){inf.close();}else{thrownewIllegalStateException(".");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding.closeEntry(null);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.zipEncoding.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=bis.getOutputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=ze.getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=entryEncoding.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding.closeEntry(inf,bis);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding.closeInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=inputStream.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getOutputStream(bis);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getOutputStream().getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getOutputStream().close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=ze.inputStream;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=bis;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=this.inputStream,bis;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=inputStream;
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=createInflater(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){try{inf.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inputStream.close()){try{inf.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(closed){try{inf.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Integerinf=newZipArchiveEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552InputStreaminf=getInputStream();if(inf!=null){for(inti=0;i<inf.size();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552finalInputStreaminf=getInputStream();if(inf!=null){for(inti=0;i<inf.size();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getInputStream(bis.length,encoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterbis=newZipArchiveEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding.closeEntry(null,entry);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding.closeEntry(ceiling);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.inf=newZipInputStream(closed);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.inf=newZipInputStream(bis);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552fileName.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=bis.startInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=endInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getOutputStream(inputStream);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552InputStreaminf=getInputStream();if(inf!=null){for(inti=0;i<inf.length;++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552InputStreambis=getInputStream();if(inf!=null){for(inti=0;i<inf.length;++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552InputStreaminf=getInputStream();if(inf==null){for(inti=0;i<inf.length;++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){buffer.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inputStream!=null){inf.close();}else{System.err.println("UnicodeExtraFieldsclosed");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inputStream==null){inf.close();}else{System.err.println("UnicodeExtraFieldsclosed");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=closeFileEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=closeFile();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getInputStream().closeFile();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getInputStream().getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552ZipEncodingentryEncoding=getEntryEncoding();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552zipEncoding=getZipEncoding(inputStream);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552zipEncoding=getZipEncoding(0);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552ze.closeEntry(inf,bis);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552ze.closeEntry(inf,inputStream);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552InputStreaminf=getInputStream();if(inf!=null){for(inti=0;i<inf.length;++i){outf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552InputStreaminf=getInputStream();if(inf==null){for(inti=0;i<inf.length;++i){outf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552InputStreaminputStream=getInputStream();if(inputStream!=null){for(inti=0;i<inf.length;++i){outf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inputStream!=null){inf.close();}else{System.err.println("Failedtocloseentry.");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inputStream!=null){inf.close();}else{System.err.println("Failedtocloseentry.n");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552((ZipArchiveEntry)entry).close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inputStream!=null){inf.close();}else{System.err.println("Failedtocloseentry..");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=this.inputStream.close(bis);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=this.inputStream.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=newInflater(int.read(),bis);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=newInflater(inf.close());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=newInflater(inStream.read());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552InputStreaminf=getInputStream();if(inf==null){for(inti=0;i<inf.length;++i){outf.append('n');}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552InputStreaminputStream=getInputStream();if(inputStream!=null){for(inti=0;i<inf.length;++i){outf.append('n');}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552inf=newZipInputStream(buffer);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inputStream!=null){for(inti=0;i<inf.length();++i){inputStream.flush();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inputStream!=null){for(inti=0;i<inf.length();++i){entryEncoding.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inputStream!=null){for(inti=0;i<inputStream.length();++i){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=newInflater(closed);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=newInflater(100);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inputStream==null){inf.close();}else{inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inputStream==null){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inputStream!=null){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552openDirectory();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552open();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552openFileEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=ze.closeInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=closeFileInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552entry.close(inf);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterbis=newZipInputStream(inf.read(),inputStream);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterbis=newZipInputStream(inf.read(),buffer);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=ze.open();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552InputStreaminf=getInputStream();if(inf==null){for(inti=0;i<inf.length;++i){closeInputStream(inf.get(i));}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){for(inti=0;i<inf.size();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){for(inti=0;i<outf.length();++i){closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552inf=newZipInputStream(zipEncoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=bis.openInput();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=ze.openInput();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding=ze.openEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552closeEntry(inf,bis);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=this.entryEncoding.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=entry.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=entry.openInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding.closeEntry(inf,null);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){this.inf.close();}else{inf=null;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){this.inf.close();}else{System.arraycopy(inf,0,inf,1,inf.length);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){this.inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){this.inf.close();}else{System.arraycopy(inf,0,inf,0,inf.length);}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){inf.flush();}else{ZipArchiveEntryentry=newZipArchiveEntry(inf);entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){inf.flush();}else{ZipArchiveEntryentry=newZipArchiveEntry(entry.getValue());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){inf.flush();}else{ZipArchiveEntryentry=newZipArchiveEntry(entry);entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){inf.flush();}else{ZipArchiveEntryentry=newZipArchiveEntry(entry.getKey());entry.closeEntry();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.inf=newLinkedHashMap<String,Object>();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552while(inf.close()){try{inf.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf.close()){inf.close();}catch(IOExceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf.close()){try{inf.close();}catch(IOExceptionex){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf.close()){try{inf.close();}catch(Exceptionioe){}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.inf=newZipInputStream(inf,encoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=newInflater(inf.readLine());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=newInflater(inf.read(),inf.length);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding=entryEncoding.encode(ze);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=newZipInputStream(this.inputStream);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=newInflaterInputStream(this.inputStream);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=newBoundedInputStream(this.inputStream);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552InputStreaminf=getOutputStream();if(inf!=null){for(inti=0;i<inf.length;++i){outf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552InputStreaminf=getInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){inf=newZipInputStream(inf.getBytes());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf==null){inf.close();}else{buffer.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=closeEntry(current);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(closed){Inflaterinf=getInputStream();if(inf!=null){for(inti=0;i<inf.length;++i){closeInputStream(inf.get(i));}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(closed){Inflaterinf=getInputStream();if(inf!=null){for(inti=0;i<inf.length;++i){closeInputStream(inf.get(i));}}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552InputStreaminf=getOutputStream();if(inf!=null){for(inti=0;i<inf.length;++i){closeInputStream(inf.get(i));}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=entryEncoding.encode(zipEncoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552ze.closeEntry(entryEncoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getInputStream(bis.getBytes());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){System.err.println("UnicodeExtraFieldsclosed");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(closed){Inflaterinf=getInputStream();if(inf!=null){for(inti=0;i<inf.size();++i){inputStream.close();}}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(closed){Inflaterinf=getInputStream();if(inf!=null){for(inti=0;i<inf.size();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf==null){inf.close();}else{thrownewIllegalStateException("");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf==null){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552InputStreaminf=getOutputStream();if(inf!=null){for(inti=0;i<inf.length;++i){outf.append('n');}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterbis=newZipInputStream(inf.read(),inf.getCharset());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterbis=newZipInputStream(inf.readLine());
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=current.inputStream.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=ze.inputStream.close();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552inf=newZipInputStream(newBoundedInputStream(inputStream));
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=newZipInputStream(inputStream);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552intinf=getInputStream();if(inf!=null){for(inti=0;i<inf.length;++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552InputStreaminf=getInputStream(inputStream,bis);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552zipEncoding=getEntryEncoding();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552zipEncoding=getZipEncoding(encoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=newInflater(16);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding.closeEntry(current);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.zipEncoding.closeEntry(entry);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=closeInputStream(outputStream);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=newFloatInputStream();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=newFloatInputStream(inputStream);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding=entryEncoding.encode(ZipArchiveEntry.DEFAULT_ENTRY_ENCODING);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding=entryEncoding.getEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getInputStream().closeByteBuffer();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=getInputStream().closeAllArchiveEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552Inflaterinf=closeContext();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552ZipEncodingentryEncoding=zipEncoding.getEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552ZipEncodingentryEncoding=zipEncoding.encode(encoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552ZipEncodingentryEncoding.closeEntry();
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf==null){inf=newZipInputStream(inf.length());}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf==null){inf.close();}else{closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){inf=newZipInputStream(inf.getBytes());}else{closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){inf=newZipInputStream(inf.read());}else{closed=true;}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){for(inti=0;i<inputStream.length();++i){inputStream.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){for(inti=0;i<inputStream.length();++i){inf.close();}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding=newZipEncoding(ZipArchiveEntry.DEFAULT_ENTRY_ENCODING);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552this.entryEncoding=newZipEncoding(ZipArchiveEntry.DEFAULT_ENTRY_ENCODING,zipEncoding);
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf==null){inf.close();}else{thrownewIllegalArgumentException("");}
projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java552if(inf!=null){for(inti=1;i<inf.length();++i){closed=true;}
