bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  closed  =  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  closed  =  false;  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  closed  =  false;  }	  if(inf!=    null)    {    inf.close();    }    else    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
2	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getBytes());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.getBytes());  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	InputStream  bis  =  new  ZipInputStream(inf.getBytes());	  if(inf!=    null)    {    inf.close();    }    else    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
3	[BUG]  [BUGGY]  Inflater  inf  =  this.closeEntry();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  this.closeEntry();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  this.closeEntry();	  Inflater    inf    =    closeEntry();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
4	[BUG]  [BUGGY]  Inflater  inf  =  openEntry();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  openEntry();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  openEntry();	  Inflater    inf    =    closeEntry();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
5	[BUG]  [BUGGY]  Inflater  inf  =  closeEntry(entry);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  closeEntry(entry);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  closeEntry(entry);	  Inflater    inf    =    closeEntry();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
6	[BUG]  [BUGGY]  Inflater  inf  =  closeZipEntry();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  closeZipEntry();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  closeZipEntry();	  Inflater    inf    =    closeEntry();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
7	[BUG]  [BUGGY]  Inflater  inf  =  closeInput();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  closeInput();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  closeInput();	  Inflater    inf    =    closeEntry();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
8	[BUG]  [BUGGY]  Inflater  inf  =  this.inputStream.read();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  this.inputStream.read();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  this.inputStream.read();	  Inflater    inf    =    this.inputStream;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
9	[BUG]  [BUGGY]  Inflater  inf  =  this.inputStream.getInputStream();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  this.inputStream.getInputStream();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  this.inputStream.getInputStream();	  Inflater    inf    =    this.inputStream;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
10	[BUG]  [BUGGY]  Inflater  inf  =  this.inputStream.readIn();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  this.inputStream.readIn();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  this.inputStream.readIn();	  Inflater    inf    =    this.inputStream;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
11	[BUG]  [BUGGY]  Inflater  inf  =  this.inputStream.start();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  this.inputStream.start();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  this.inputStream.start();	  Inflater    inf    =    this.inputStream;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
12	[BUG]  [BUGGY]  Inflater  inf  =  this.inputStream.open();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  this.inputStream.open();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  this.inputStream.open();	  Inflater    inf    =    this.inputStream;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
13	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    outf.close();    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
14	[BUG]  [BUGGY]  Inflater  inf  =  getOutputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  getOutputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getOutputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    outf.close();    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
15	[BUG]  [BUGGY]  final  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  final  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	final  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    outf.close();    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
16	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream();  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  getInputStream();  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getInputStream();  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    outf.close();    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
17	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.flush();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.flush();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.flush();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    outf.close();    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
18	[BUG]  [BUGGY]  Inflater  inf  =  startInputStream(bis);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  startInputStream(bis);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  startInputStream(bis);	  Inflater    inf    =    startInputStream();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
19	[BUG]  [BUGGY]  Inflater  inf  =  this.startInputStream();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  this.startInputStream();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  this.startInputStream();	  Inflater    inf    =    startInputStream();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
20	[BUG]  [BUGGY]  Inflater  inf  =  closed.startInputStream();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  closed.startInputStream();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  closed.startInputStream();	  Inflater    inf    =    startInputStream();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
21	[BUG]  [BUGGY]  this.inf.closeInputStream(inf);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.inf.closeInputStream(inf);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.inf.closeInputStream(inf);	  this.inf.closeInputStream();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
22	[BUG]  [BUGGY]  inf.closeInputStream();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  inf.closeInputStream();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	inf.closeInputStream();	  this.inf.closeInputStream();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
23	[BUG]  [BUGGY]  this.entryEncoding.closeEntry(inf);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.entryEncoding.closeEntry(inf);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding.closeEntry(inf);	  this.entryEncoding.close();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
24	[BUG]  [BUGGY]  this.entryEncoding.close(inf);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.entryEncoding.close(inf);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding.close(inf);	  this.entryEncoding.close();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
25	[BUG]  [BUGGY]  this.entryEncoding.flush();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.entryEncoding.flush();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding.flush();	  this.entryEncoding.close();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
26	[BUG]  [BUGGY]  this.entryEncoding.closeAllEntries();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.entryEncoding.closeAllEntries();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding.closeAllEntries();	  this.entryEncoding.close();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
27	[BUG]  [BUGGY]  this.entryEncoding.closeEntry(inf,  entry);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.entryEncoding.closeEntry(inf,  entry);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding.closeEntry(inf,  entry);	  this.entryEncoding.close();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
28	[BUG]  [BUGGY]  this.entryEncoding.closeEntry(entry);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.entryEncoding.closeEntry(entry);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding.closeEntry(entry);	  this.entryEncoding.closeEntry(ze);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
29	[BUG]  [BUGGY]  this.entryEncoding.closeEntry(inf,  ze);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.entryEncoding.closeEntry(inf,  ze);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding.closeEntry(inf,  ze);	  this.entryEncoding.closeEntry(ze);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
30	[BUG]  [BUGGY]  this.entryEncoding.closeEntry(enf);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.entryEncoding.closeEntry(enf);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding.closeEntry(enf);	  this.entryEncoding.closeEntry(ze);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
31	[BUG]  [BUGGY]  this.entryEncoding.closeEntry(outputStream,  ze);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.entryEncoding.closeEntry(outputStream,  ze);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding.closeEntry(outputStream,  ze);	  this.entryEncoding.closeEntry(ze);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
32	[BUG]  [BUGGY]  this.entryEncoding.closeEntry(outputStream);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.entryEncoding.closeEntry(outputStream);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding.closeEntry(outputStream);	  this.entryEncoding.closeEntry(ze);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
33	[BUG]  [BUGGY]  inf  =  new  ZipArchiveEntry();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  inf  =  new  ZipArchiveEntry();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	inf  =  new  ZipArchiveEntry();	  if(inf!=    null)    {    inf    =    new    ZipArchiveEntry();    }    else    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
34	[BUG]  [BUGGY]  Inflater  inf  =  new  ZipArchiveEntry();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  new  ZipArchiveEntry();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  new  ZipArchiveEntry();	  if(inf!=    null)    {    inf    =    new    ZipArchiveEntry();    }    else    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
35	[BUG]  [BUGGY]  if(inf  ==  null)  {  inf  =  new  ZipArchiveEntry();  }  else  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf  ==  null)  {  inf  =  new  ZipArchiveEntry();  }  else  {  inf.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf  ==  null)  {  inf  =  new  ZipArchiveEntry();  }  else  {  inf.close();  }	  if(inf!=    null)    {    inf    =    new    ZipArchiveEntry();    }    else    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
36	[BUG]  [BUGGY]  if(inf  ==  null)  {  inf  =  new  ZipArchiveEntry();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf  ==  null)  {  inf  =  new  ZipArchiveEntry();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf  ==  null)  {  inf  =  new  ZipArchiveEntry();  }	  if(inf!=    null)    {    inf    =    new    ZipArchiveEntry();    }    else    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
37	[BUG]  [BUGGY]  while(inf!=  null)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  while(inf!=  null)  {  inf.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	while(inf!=  null)  {  inf.close();  }	  if(inf!=    null)    {    inf.close();    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
38	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalStateException( " ".getMessage());  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalStateException( " ".getMessage());  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalStateException( " ".getMessage());  }	  if(inf!=    null)    {    inf.close();    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
39	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream().flush();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  getInputStream().flush();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getInputStream().flush();	  Inflater    inf    =    getInputStream().close();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
40	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream().closeEntry();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  getInputStream().closeEntry();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getInputStream().closeEntry();	  Inflater    inf    =    getInputStream().close();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
41	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream().close(bis);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  getInputStream().close(bis);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getInputStream().close(bis);	  Inflater    inf    =    getInputStream().close();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
42	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream().getEnd();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  getInputStream().getEnd();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getInputStream().getEnd();	  Inflater    inf    =    getInputStream().close();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
43	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream().start();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  getInputStream().start();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getInputStream().start();	  Inflater    inf    =    getInputStream().close();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
44	[BUG]  [BUGGY]  System.err.println( "UnicodeExtraFields  closed ");  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  System.err.println( "UnicodeExtraFields  closed ");  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	System.err.println( "UnicodeExtraFields  closed ");	  if(inf!=    null)    {    inf.close();    }    else    {    System.err.println(   "UnicodeExtraFields    closed   ");    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
45	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed. ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed. ");  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed. ");  }	  if(inf!=    null)    {    inf.close();    }    else    {    System.err.println(   "UnicodeExtraFields    closed   ");    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
46	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: ");  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed: ");  }	  if(inf!=    null)    {    inf.close();    }    else    {    System.err.println(   "UnicodeExtraFields    closed   ");    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
47	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.flush();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf!=  null)  {  inf.flush();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  inf.flush();  }	  inf.flush();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
48	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.flush();  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf!=  null)  {  inf.flush();  }  else  {  inputStream.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  inf.flush();  }  else  {  inputStream.close();  }	  inf.flush();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
49	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.flush();  }  else  {  buffer.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf!=  null)  {  inf.flush();  }  else  {  buffer.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  inf.flush();  }  else  {  buffer.close();  }	  inf.flush();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
50	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.flush();  }  else  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf!=  null)  {  inf.flush();  }  else  {  closed  =  true;  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  inf.flush();  }  else  {  closed  =  true;  }	  inf.flush();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
51	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.flush();  }  else  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf!=  null)  {  inf.flush();  }  else  {  inf.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  inf.flush();  }  else  {  inf.close();  }	  inf.flush();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
52	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(bis.length  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  getInputStream(bis.length  -  1);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getInputStream(bis.length  -  1);	  Inflater    inf    =    getInputStream(bis.length);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
53	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(bis.length  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  getInputStream(bis.length  +  1);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getInputStream(bis.length  +  1);	  Inflater    inf    =    getInputStream(bis.length);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
54	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(bis.length  -  1,  bis.length);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  getInputStream(bis.length  -  1,  bis.length);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getInputStream(bis.length  -  1,  bis.length);	  Inflater    inf    =    getInputStream(bis.length);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
55	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(bis.length  -  2);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  getInputStream(bis.length  -  2);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getInputStream(bis.length  -  2);	  Inflater    inf    =    getInputStream(bis.length);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
56	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(bis.length  +  1,  bis.length);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  getInputStream(bis.length  +  1,  bis.length);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getInputStream(bis.length  +  1,  bis.length);	  Inflater    inf    =    getInputStream(bis.length);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
57	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(bis,  0,  bis.length);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  getInputStream(bis,  0,  bis.length);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getInputStream(bis,  0,  bis.length);	  Inflater    inf    =    getInputStream(bis.length);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
58	[BUG]  [BUGGY]  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  entry.closeEntry();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	entry.closeEntry();	  ze.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
59	[BUG]  [BUGGY]  openZipEntry();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  openZipEntry();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	openZipEntry();	  ze.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
60	[BUG]  [BUGGY]  ze.closeEntry(entry);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  ze.closeEntry(entry);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	ze.closeEntry(entry);	  ze.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
61	[BUG]  [BUGGY]  Inflater  inf  =  zipEncoding.open();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  zipEncoding.open();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  zipEncoding.open();	  Inflater    inf    =    entryEncoding.open();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
62	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.close();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  entryEncoding.close();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  entryEncoding.close();	  Inflater    inf    =    entryEncoding.open();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
63	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.openStream();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  entryEncoding.openStream();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  entryEncoding.openStream();	  Inflater    inf    =    entryEncoding.open();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
64	[BUG]  [BUGGY]  Inflater  inf  =  this.entryEncoding.open();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  this.entryEncoding.open();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  this.entryEncoding.open();	  Inflater    inf    =    entryEncoding.open();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
65	[BUG]  [BUGGY]  entry.flush();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  entry.flush();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	entry.flush();	  entry.close();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
66	[BUG]  [BUGGY]  entry.closeEntry(inf);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  entry.closeEntry(inf);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	entry.closeEntry(inf);	  entry.close();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
67	[BUG]  [BUGGY]  this.inf.close(inf,  bis);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.inf.close(inf,  bis);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.inf.close(inf,  bis);	  this.inf.close(inf);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
68	[BUG]  [BUGGY]  this.inf.closeEntry(inf);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.inf.closeEntry(inf);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.inf.closeEntry(inf);	  this.inf.close(inf);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
69	[BUG]  [BUGGY]  this.inf.close(inf,  entryEncoding);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.inf.close(inf,  entryEncoding);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.inf.close(inf,  entryEncoding);	  this.inf.close(inf);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
70	[BUG]  [BUGGY]  if(inf!=  null)  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf!=  null)  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  buffer.close();  }  else  {  buffer.close();  }	  if(inf!=    null)    {    inf.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
71	[BUG]  [BUGGY]  Inflater  inf  =  closeInputStream(bis);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  closeInputStream(bis);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  closeInputStream(bis);	  Inflater    inf    =    closeInputStream();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
72	[BUG]  [BUGGY]  Inflater  inf  =  this.closeInputStream();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  this.closeInputStream();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  this.closeInputStream();	  Inflater    inf    =    closeInputStream();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
73	[BUG]  [BUGGY]  Inflater  inf  =  closeInputStream(in);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  closeInputStream(in);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  closeInputStream(in);	  Inflater    inf    =    closeInputStream();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
74	[BUG]  [BUGGY]  Inflater  inf  =  closeOutputStream();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  closeOutputStream();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  closeOutputStream();	  Inflater    inf    =    closeInputStream();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
75	[BUG]  [BUGGY]  Inflater  inf  =  closeInputStream(-1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  closeInputStream(-1);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  closeInputStream(-1);	  Inflater    inf    =    closeInputStream();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
76	[BUG]  [BUGGY]  Inflater  inf  =  closeBoundedInputStream();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  closeBoundedInputStream();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  closeBoundedInputStream();	  Inflater    inf    =    closeInputStream();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
77	[BUG]  [BUGGY]  inf  =  new  ZipInputStream(inputStream,  bis);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  inf  =  new  ZipInputStream(inputStream,  bis);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	inf  =  new  ZipInputStream(inputStream,  bis);	  inf    =    new    ZipInputStream(inputStream);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
78	[BUG]  [BUGGY]  inf  =  new  ZipInputStream(bis);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  inf  =  new  ZipInputStream(bis);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	inf  =  new  ZipInputStream(bis);	  inf    =    new    ZipInputStream(inputStream);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
79	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inputStream);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inputStream);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	InputStream  bis  =  new  ZipInputStream(inputStream);	  inf    =    new    ZipInputStream(inputStream);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
80	[BUG]  [BUGGY]  inf  =  new  ZipInputStream(buff,  inputStream);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  inf  =  new  ZipInputStream(buff,  inputStream);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	inf  =  new  ZipInputStream(buff,  inputStream);	  inf    =    new    ZipInputStream(inputStream);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
81	[BUG]  [BUGGY]  inf  =  new  ZipInputStream(BoundedInputStream.DEFAULT_OUTPUT);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  inf  =  new  ZipInputStream(BoundedInputStream.DEFAULT_OUTPUT);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	inf  =  new  ZipInputStream(BoundedInputStream.DEFAULT_OUTPUT);	  inf    =    new    ZipInputStream(inputStream);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
82	[BUG]  [BUGGY]  inf  =  new  ZipInputStream(buffer,  inputStream);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  inf  =  new  ZipInputStream(buffer,  inputStream);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	inf  =  new  ZipInputStream(buffer,  inputStream);	  inf    =    new    ZipInputStream(inputStream);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
83	[BUG]  [BUGGY]  inf  =  new  ZipInputStream(BoundedInputStream.DEFAULT_ZIP_LENGTH);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  inf  =  new  ZipInputStream(BoundedInputStream.DEFAULT_ZIP_LENGTH);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	inf  =  new  ZipInputStream(BoundedInputStream.DEFAULT_ZIP_LENGTH);	  inf    =    new    ZipInputStream(inputStream);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
84	[BUG]  [BUGGY]  ze.closeEntry(inf,  entryEncoding);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  ze.closeEntry(inf,  entryEncoding);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	ze.closeEntry(inf,  entryEncoding);	  ze.closeEntry(inf);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
85	[BUG]  [BUGGY]  ze.closeEntry(inf,  closed);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  ze.closeEntry(inf,  closed);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	ze.closeEntry(inf,  closed);	  ze.closeEntry(inf);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
86	[BUG]  [BUGGY]  ze.closeEntry(inf,  entry);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  ze.closeEntry(inf,  entry);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	ze.closeEntry(inf,  entry);	  ze.closeEntry(inf);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
87	[BUG]  [BUGGY]  this.inf  =  null;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.inf  =  null;  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.inf  =  null;	  this.inf.flush();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
88	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
89	[BUG]  [BUGGY]  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
90	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  false;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  false;  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  false;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
91	[BUG]  [BUGGY]  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  false;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  false;  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  false;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
92	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  closed  =  true;  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  closed  =  true;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
93	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  out.length();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  out.length();  ++i)  {  closed  =  true;  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  out.length();  ++i)  {  closed  =  true;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
94	[BUG]  [BUGGY]  Inflater  inf  =  bis.getInputStream();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  bis.getInputStream();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  bis.getInputStream();	  Inflater    inf    =    entryEncoding.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
95	[BUG]  [BUGGY]  Inflater  inf  =  this.entryEncoding.getInputStream();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  this.entryEncoding.getInputStream();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  this.entryEncoding.getInputStream();	  Inflater    inf    =    entryEncoding.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
96	[BUG]  [BUGGY]  Inflater  inf  =  zipEncoding.getInputStream();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  zipEncoding.getInputStream();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  zipEncoding.getInputStream();	  Inflater    inf    =    entryEncoding.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
97	[BUG]  [BUGGY]  Inflater  inf  =  this.openInputStream();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  this.openInputStream();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  this.openInputStream();	  Inflater    inf    =    openInputStream();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
98	[BUG]  [BUGGY]  Inflater  inf  =  closed.openInputStream();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  closed.openInputStream();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  closed.openInputStream();	  Inflater    inf    =    openInputStream();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
99	[BUG]  [BUGGY]  Inflater  inf  =  openInputStream(-1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  openInputStream(-1);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  openInputStream(-1);	  Inflater    inf    =    openInputStream();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
100	[BUG]  [BUGGY]  ze.close(inf,  entryEncoding);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  ze.close(inf,  entryEncoding);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	ze.close(inf,  entryEncoding);	  ze.close(inf);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
101	[BUG]  [BUGGY]  ze.close(inf,  bis);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  ze.close(inf,  bis);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	ze.close(inf,  bis);	  ze.close(inf);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
102	[BUG]  [BUGGY]  ze.closeInputStream(inf);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  ze.closeInputStream(inf);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	ze.closeInputStream(inf);	  ze.close(inf);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
103	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.read(),  inf.length);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.read(),  inf.length);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  bis  =  new  ZipInputStream(inf.read(),  inf.length);	  Inflater    bis    =    new    ZipInputStream(inf.read());    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
104	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.read()  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.read()  +  1);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  bis  =  new  ZipInputStream(inf.read()  +  1);	  Inflater    bis    =    new    ZipInputStream(inf.read());    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
105	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.read(),  inf.charAt(inf.length()  -  1));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.read(),  inf.charAt(inf.length()  -  1));  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  bis  =  new  ZipInputStream(inf.read(),  inf.charAt(inf.length()  -  1));	  Inflater    bis    =    new    ZipInputStream(inf.read());    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
106	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.read(),  inf.end());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.read(),  inf.end());  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  bis  =  new  ZipInputStream(inf.read(),  inf.end());	  Inflater    bis    =    new    ZipInputStream(inf.read());    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
107	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.read(),  zipEncoding);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.read(),  zipEncoding);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  bis  =  new  ZipInputStream(inf.read(),  zipEncoding);	  Inflater    bis    =    new    ZipInputStream(inf.read());    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
108	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.read()  -  1);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.read()  -  1);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  bis  =  new  ZipInputStream(inf.read()  -  1);	  Inflater    bis    =    new    ZipInputStream(inf.read());    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
109	[BUG]  [BUGGY]  Inflater  inf  =  new  Inflater(inputStream);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  new  Inflater(inputStream);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  new  Inflater(inputStream);	  Inflater    inf    =    new    Inflater();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
110	[BUG]  [BUGGY]  Inflater  inf  =  new  Inflater(outputStream);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  new  Inflater(outputStream);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  new  Inflater(outputStream);	  Inflater    inf    =    new    Inflater();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
111	[BUG]  [BUGGY]  Inflater  inf  =  new  Inflater(0);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  new  Inflater(0);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  new  Inflater(0);	  Inflater    inf    =    new    Inflater();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
112	[BUG]  [BUGGY]  Inflater  inf  =  new  Inflater(true);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  new  Inflater(true);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  new  Inflater(true);	  Inflater    inf    =    new    Inflater();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
113	[BUG]  [BUGGY]  Inflater  inf  =  new  Inflater(this.inputStream);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  new  Inflater(this.inputStream);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  new  Inflater(this.inputStream);	  Inflater    inf    =    new    Inflater();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
114	[BUG]  [BUGGY]  Inflater  inf  =  new  Inflater(-1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  new  Inflater(-1);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  new  Inflater(-1);	  Inflater    inf    =    new    Inflater();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
115	[BUG]  [BUGGY]  this.inf  =  new  ZipInputStream(inf,  bis);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.inf  =  new  ZipInputStream(inf,  bis);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.inf  =  new  ZipInputStream(inf,  bis);	  this.inf    =    new    ZipInputStream(inf);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
116	[BUG]  [BUGGY]  this.inf  =  new  ZipInputStream(inf,  inf.length);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.inf  =  new  ZipInputStream(inf,  inf.length);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.inf  =  new  ZipInputStream(inf,  inf.length);	  this.inf    =    new    ZipInputStream(inf);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
117	[BUG]  [BUGGY]  this.inf  =  new  ZipInputStream(inf.getBytes());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.inf  =  new  ZipInputStream(inf.getBytes());  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.inf  =  new  ZipInputStream(inf.getBytes());	  this.inf    =    new    ZipInputStream(inf);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
118	[BUG]  [BUGGY]  this.inf  =  new  ZipInputStream(inf.read());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.inf  =  new  ZipInputStream(inf.read());  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.inf  =  new  ZipInputStream(inf.read());	  this.inf    =    new    ZipInputStream(inf);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
119	[BUG]  [BUGGY]  this.inf  =  new  ZipInputStream(inf,  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.inf  =  new  ZipInputStream(inf,  1);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.inf  =  new  ZipInputStream(inf,  1);	  this.inf    =    new    ZipInputStream(inf);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
120	[BUG]  [BUGGY]  this.inf  =  new  ZipInputStream(inf,  up);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.inf  =  new  ZipInputStream(inf,  up);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.inf  =  new  ZipInputStream(inf,  up);	  this.inf    =    new    ZipInputStream(inf);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
121	[BUG]  [BUGGY]  zipEncoding  =  getZipEncoding(inf);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  zipEncoding  =  getZipEncoding(inf);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	zipEncoding  =  getZipEncoding(inf);	  zipEncoding    =    getZipEncoding();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
122	[BUG]  [BUGGY]  zipEncoding  =  getCurrentZipEncoding();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  zipEncoding  =  getCurrentZipEncoding();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	zipEncoding  =  getCurrentZipEncoding();	  zipEncoding    =    getZipEncoding();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
123	[BUG]  [BUGGY]  ZipEncoding  entryEncoding  =  getZipEncoding();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  ZipEncoding  entryEncoding  =  getZipEncoding();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	ZipEncoding  entryEncoding  =  getZipEncoding();	  zipEncoding    =    getZipEncoding();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
124	[BUG]  [BUGGY]  zipEncoding  =  getRawZipEncoding();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  zipEncoding  =  getRawZipEncoding();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	zipEncoding  =  getRawZipEncoding();	  zipEncoding    =    getZipEncoding();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
125	[BUG]  [BUGGY]  zipEncoding  =  getCrc();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  zipEncoding  =  getCrc();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	zipEncoding  =  getCrc();	  zipEncoding    =    getZipEncoding();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
126	[BUG]  [BUGGY]  ZipEncoding  entryEncoding  =  getEntry();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  ZipEncoding  entryEncoding  =  getEntry();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	ZipEncoding  entryEncoding  =  getEntry();	  zipEncoding    =    getZipEncoding();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
127	[BUG]  [BUGGY]  Inflater  inf  =  zipEncoding.openInput();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  zipEncoding.openInput();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  zipEncoding.openInput();	  Inflater    inf    =    entryEncoding.openInput();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
128	[BUG]  [BUGGY]  Inflater  inf  =  this.entryEncoding.openInput();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  this.entryEncoding.openInput();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  this.entryEncoding.openInput();	  Inflater    inf    =    entryEncoding.openInput();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
129	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.closeInput();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  entryEncoding.closeInput();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  entryEncoding.closeInput();	  Inflater    inf    =    entryEncoding.openInput();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
130	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.start();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  entryEncoding.start();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  entryEncoding.start();	  Inflater    inf    =    entryEncoding.openInput();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
131	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	InputStream  bis  =  new  ZipInputStream(inf);	  if(inf!=    null)    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
132	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  inputStream.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.size();  ++i)  {  inputStream.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
133	[BUG]  [BUGGY]  InputStream  bis  =  getInputStream();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  InputStream  bis  =  getInputStream();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	InputStream  bis  =  getInputStream();	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
134	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  inputStream.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  inputStream.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
135	[BUG]  [BUGGY]  InputStream  bis  =  getInputStream();  if(bis!=  null)  {  for(int  i  =  0;  i  <  bis.size();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  InputStream  bis  =  getInputStream();  if(bis!=  null)  {  for(int  i  =  0;  i  <  bis.size();  ++i)  {  inputStream.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	InputStream  bis  =  getInputStream();  if(bis!=  null)  {  for(int  i  =  0;  i  <  bis.size();  ++i)  {  inputStream.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
136	[BUG]  [BUGGY]  Inflater  inf  =  getOutputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  getOutputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  inputStream.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getOutputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  inputStream.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
137	[BUG]  [BUGGY]  if(closed)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.append('n');  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(closed)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.append('n');  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(closed)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.append('n');  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    outf.append('n');    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
138	[BUG]  [BUGGY]  if(closed)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.append('n');  }  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(closed)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.append('n');  }  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(closed)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.append('n');  }  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    outf.append('n');    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
139	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.append('n');  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.append('n');  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.append('n');  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    outf.append('n');    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
140	[BUG]  [BUGGY]  Inflater  inf  =  getOutputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.append('n');  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  getOutputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.append('n');  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getOutputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.append('n');  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    outf.append('n');    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
141	[BUG]  [BUGGY]  InputStream  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.append('n');  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  InputStream  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.append('n');  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	InputStream  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.append('n');  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    outf.append('n');    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
142	[BUG]  [BUGGY]  while(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  while(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	while(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(inf!=    null)    {    inf.close();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
143	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalArgumentException( " ".getMessage());  }	  if(inf!=    null)    {    inf.close();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
144	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
145	[BUG]  [BUGGY]  InputStream  bis  =  getInputStream();  if(bis!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  InputStream  bis  =  getInputStream();  if(bis!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	InputStream  bis  =  getInputStream();  if(bis!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
146	[BUG]  [BUGGY]  Inflater  inf  =  getOutputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  getOutputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getOutputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
147	[BUG]  [BUGGY]  final  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  final  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	final  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
148	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(bis,  closed);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  getInputStream(bis,  closed);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getInputStream(bis,  closed);	  Inflater    inf    =    getInputStream(bis);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
149	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(bis,  encoding);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  getInputStream(bis,  encoding);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getInputStream(bis,  encoding);	  Inflater    inf    =    getInputStream(bis);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
150	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(bis,  0);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  getInputStream(bis,  0);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getInputStream(bis,  0);	  Inflater    inf    =    getInputStream(bis);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
151	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(bis,  buffer);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  getInputStream(bis,  buffer);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getInputStream(bis,  buffer);	  Inflater    inf    =    getInputStream(bis);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
152	[BUG]  [BUGGY]  openInputStream();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  openInputStream();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	openInputStream();	  openEntry();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
153	[BUG]  [BUGGY]  this.entryEncoding  =  zipEncoding.encode(entry);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.entryEncoding  =  zipEncoding.encode(entry);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding  =  zipEncoding.encode(entry);	  this.entryEncoding    =    entryEncoding.encode(entry);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
154	[BUG]  [BUGGY]  this.entryEncoding  =  entryEncoding.encode(zipEncoding);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.entryEncoding  =  entryEncoding.encode(zipEncoding);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding  =  entryEncoding.encode(zipEncoding);	  this.entryEncoding    =    entryEncoding.encode(entry);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
155	[BUG]  [BUGGY]  this.entryEncoding  =  entryEncoding.encode(inf);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.entryEncoding  =  entryEncoding.encode(inf);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding  =  entryEncoding.encode(inf);	  this.entryEncoding    =    entryEncoding.encode(entry);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
156	[BUG]  [BUGGY]  this.entryEncoding  =  entryEncoding.encode(current);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.entryEncoding  =  entryEncoding.encode(current);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding  =  entryEncoding.encode(current);	  this.entryEncoding    =    entryEncoding.encode(entry);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
157	[BUG]  [BUGGY]  this.entryEncoding  =  entryEncoding.encode(buf,  entry);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.entryEncoding  =  entryEncoding.encode(buf,  entry);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding  =  entryEncoding.encode(buf,  entry);	  this.entryEncoding    =    entryEncoding.encode(entry);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
158	[BUG]  [BUGGY]  this.entryEncoding  =  entryEncoding.encode(ceiling);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.entryEncoding  =  entryEncoding.encode(ceiling);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding  =  entryEncoding.encode(ceiling);	  this.entryEncoding    =    entryEncoding.encode(entry);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
159	[BUG]  [BUGGY]  inf  =  new  ZipInputStream(inf.length());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  inf  =  new  ZipInputStream(inf.length());  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	inf  =  new  ZipInputStream(inf.length());	  if(inf!=    null)    {    inf    =    new    ZipInputStream(inf.length());    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
160	[BUG]  [BUGGY]  InputStream  inf  =  new  ZipInputStream(inf.length());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  InputStream  inf  =  new  ZipInputStream(inf.length());  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	InputStream  inf  =  new  ZipInputStream(inf.length());	  if(inf!=    null)    {    inf    =    new    ZipInputStream(inf.length());    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
161	[BUG]  [BUGGY]  Inflater  inf  =  new  ZipInputStream(inf.length());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  new  ZipInputStream(inf.length());  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  new  ZipInputStream(inf.length());	  if(inf!=    null)    {    inf    =    new    ZipInputStream(inf.length());    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
162	[BUG]  [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length());  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  InputStream  bis  =  new  ZipInputStream(inf.length());  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	InputStream  bis  =  new  ZipInputStream(inf.length());	  if(inf!=    null)    {    inf    =    new    ZipInputStream(inf.length());    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
163	[BUG]  [BUGGY]  this.entryEncoding  =  zipEncoding;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.entryEncoding  =  zipEncoding;  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding  =  zipEncoding;	  this.entryEncoding    =    entryEncoding;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
164	[BUG]  [BUGGY]  this.entryEncoding  =  encoding;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.entryEncoding  =  encoding;  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding  =  encoding;	  this.entryEncoding    =    entryEncoding;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
165	[BUG]  [BUGGY]  this.entryEncoding  =  ZipEncoding.DEFAULT;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.entryEncoding  =  ZipEncoding.DEFAULT;  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding  =  ZipEncoding.DEFAULT;	  this.entryEncoding    =    entryEncoding;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
166	[BUG]  [BUGGY]  this.entryEncoding  =  ZipEncoding.DEFAULT_ENTRY_ENCODING;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.entryEncoding  =  ZipEncoding.DEFAULT_ENTRY_ENCODING;  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding  =  ZipEncoding.DEFAULT_ENTRY_ENCODING;	  this.entryEncoding    =    entryEncoding;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
167	[BUG]  [BUGGY]  this.entryEncoding  =  ZipEncoding.DEFAULT_ENCODING;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.entryEncoding  =  ZipEncoding.DEFAULT_ENCODING;  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding  =  ZipEncoding.DEFAULT_ENCODING;	  this.entryEncoding    =    entryEncoding;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
168	[BUG]  [BUGGY]  this.entryEncoding  =  ZipEncoding.DEFAULT_ZIP_ENCODING;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.entryEncoding  =  ZipEncoding.DEFAULT_ZIP_ENCODING;  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding  =  ZipEncoding.DEFAULT_ZIP_ENCODING;	  this.entryEncoding    =    entryEncoding;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
169	[BUG]  [BUGGY]  this.entryEncoding  =  ZipEncodingUtil.closeZipEncoding(inf);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.entryEncoding  =  ZipEncodingUtil.closeZipEncoding(inf);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding  =  ZipEncodingUtil.closeZipEncoding(inf);	  this.entryEncoding    =    entryEncoding;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
170	[BUG]  [BUGGY]  Inflater  inf  =  getCurrentInputStream();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  getCurrentInputStream();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getCurrentInputStream();	  Inflater    inf    =    getOutputStream();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
171	[BUG]  [BUGGY]  Inflater  inf  =  getCurrentEntry();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  getCurrentEntry();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getCurrentEntry();	  Inflater    inf    =    getOutputStream();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
172	[BUG]  [BUGGY]  Inflater  inf  =  getOutputStream(),  bis;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  getOutputStream(),  bis;  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getOutputStream(),  bis;	  Inflater    inf    =    getOutputStream();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
173	[BUG]  [BUGGY]  zipEncoding.closeEntry(inf);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  zipEncoding.closeEntry(inf);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	zipEncoding.closeEntry(inf);	  zipEncoding.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
174	[BUG]  [BUGGY]  zipEncoding.closeEntry(entry);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  zipEncoding.closeEntry(entry);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	zipEncoding.closeEntry(entry);	  zipEncoding.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
175	[BUG]  [BUGGY]  ZipEncoding  entryEncoding  =  zipEncoding.openEntry();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  ZipEncoding  entryEncoding  =  zipEncoding.openEntry();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	ZipEncoding  entryEncoding  =  zipEncoding.openEntry();	  zipEncoding.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
176	[BUG]  [BUGGY]  ZipEncoding  entryEncoding  =  zipEncoding.closeEntry();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  ZipEncoding  entryEncoding  =  zipEncoding.closeEntry();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	ZipEncoding  entryEncoding  =  zipEncoding.closeEntry();	  zipEncoding.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
177	[BUG]  [BUGGY]  zipEncoding  =  entryEncoding.closeEntry();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  zipEncoding  =  entryEncoding.closeEntry();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	zipEncoding  =  entryEncoding.closeEntry();	  zipEncoding.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
178	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "Failed  to  close  entry.n ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "Failed  to  close  entry.n ");  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "Failed  to  close  entry.n ");  }	  if(inf!=    null)    {    inf.close();    }    else    {    System.err.println(   "Failed    to    close    entry.   ");    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
179	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "Failed  to  close  entry.. ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "Failed  to  close  entry.. ");  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "Failed  to  close  entry.. ");  }	  if(inf!=    null)    {    inf.close();    }    else    {    System.err.println(   "Failed    to    close    entry.   ");    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
180	[BUG]  [BUGGY]  this.entryEncoding  =  zipEncoding.openEntry();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.entryEncoding  =  zipEncoding.openEntry();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding  =  zipEncoding.openEntry();	  this.entryEncoding    =    entryEncoding.openEntry();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
181	[BUG]  [BUGGY]  this.entryEncoding  =  entryEncoding.closeEntry();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.entryEncoding  =  entryEncoding.closeEntry();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding  =  entryEncoding.closeEntry();	  this.entryEncoding    =    entryEncoding.openEntry();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
182	[BUG]  [BUGGY]  this.entryEncoding  =  entryEncoding.openStream();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.entryEncoding  =  entryEncoding.openStream();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding  =  entryEncoding.openStream();	  this.entryEncoding    =    entryEncoding.openEntry();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
183	[BUG]  [BUGGY]  this.entryEncoding  =  entryEncoding.openZipEncoding();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.entryEncoding  =  entryEncoding.openZipEncoding();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding  =  entryEncoding.openZipEncoding();	  this.entryEncoding    =    entryEncoding.openEntry();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
184	[BUG]  [BUGGY]  this.entryEncoding  =  entryEncoding.openZipEntry();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.entryEncoding  =  entryEncoding.openZipEntry();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding  =  entryEncoding.openZipEntry();	  this.entryEncoding    =    entryEncoding.openEntry();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
185	[BUG]  [BUGGY]  this.entryEncoding  =  entryEncoding.openInputStream();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.entryEncoding  =  entryEncoding.openInputStream();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding  =  entryEncoding.openInputStream();	  this.entryEncoding    =    entryEncoding.openEntry();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
186	[BUG]  [BUGGY]  Inflater  inf  =  this.close();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  this.close();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  this.close();	  Inflater    inf    =    close();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
187	[BUG]  [BUGGY]  Inflater  inf  =  open();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  open();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  open();	  Inflater    inf    =    close();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
188	[BUG]  [BUGGY]  Inflater  inf  =  closed;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  closed;  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  closed;	  Inflater    inf    =    close();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
189	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(inputStream,  bis);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  getInputStream(inputStream,  bis);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getInputStream(inputStream,  bis);	  Inflater    inf    =    getInputStream(inputStream);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
190	[BUG]  [BUGGY]  Inflater  inf  =  closeInputStream(inputStream);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  closeInputStream(inputStream);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  closeInputStream(inputStream);	  Inflater    inf    =    getInputStream(inputStream);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
191	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(bis,  inputStream);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  getInputStream(bis,  inputStream);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getInputStream(bis,  inputStream);	  Inflater    inf    =    getInputStream(inputStream);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
192	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(outputStream);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  getInputStream(outputStream);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getInputStream(outputStream);	  Inflater    inf    =    getInputStream(inputStream);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
193	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(initStream,  bis);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  getInputStream(initStream,  bis);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getInputStream(initStream,  bis);	  Inflater    inf    =    getInputStream(inputStream);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
194	[BUG]  [BUGGY]  Inflater  inf  =  entry.close();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  entry.close();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  entry.close();	  Inflater    inf    =    ze.close();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
195	[BUG]  [BUGGY]  Inflater  inf  =  entry.open();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  entry.open();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  entry.open();	  Inflater    inf    =    ze.close();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
196	[BUG]  [BUGGY]  Inflater  inf  =  this.ze.close();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  this.ze.close();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  this.ze.close();	  Inflater    inf    =    ze.close();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
197	[BUG]  [BUGGY]  Inflater  inf  =  closed.close();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  closed.close();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  closed.close();	  Inflater    inf    =    ze.close();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
198	[BUG]  [BUGGY]  Inflater  inf  =  this.entry.close();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  this.entry.close();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  this.entry.close();	  Inflater    inf    =    ze.close();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
199	[BUG]  [BUGGY]  Inflater  inf  =  close.close();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  close.close();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  close.close();	  Inflater    inf    =    ze.close();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
200	[BUG]  [BUGGY]  InputStream  inf  =  new  ZipArchiveEntry();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  InputStream  inf  =  new  ZipArchiveEntry();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	InputStream  inf  =  new  ZipArchiveEntry();	  if(inf!=    null)    {    inf    =    new    ZipArchiveEntry();    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
201	[BUG]  [BUGGY]  (ZipArchiveEntry)inf.clone();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  (ZipArchiveEntry)inf.clone();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	(ZipArchiveEntry)inf.clone();	  if(inf!=    null)    {    inf    =    new    ZipArchiveEntry();    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
202	[BUG]  [BUGGY]  this.inf.closeEntry(entry);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.inf.closeEntry(entry);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.inf.closeEntry(entry);	  this.inf.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
203	[BUG]  [BUGGY]  this.entryEncoding.closeZipEncoding();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.entryEncoding.closeZipEncoding();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding.closeZipEncoding();	  this.entryEncoding.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
204	[BUG]  [BUGGY]  Inflater  inf  =  this;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  this;  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  this;	  Inflater    inf    =    null;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
205	[BUG]  [BUGGY]  Inflater  inf  =  new  ZipInputStream();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  new  ZipInputStream();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  new  ZipInputStream();	  Inflater    inf    =    null;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
206	[BUG]  [BUGGY]  Inflater  inf  =  ze;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  ze;  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  ze;	  Inflater    inf    =    null;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
207	[BUG]  [BUGGY]  zipEncoding.close(inf);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  zipEncoding.close(inf);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	zipEncoding.close(inf);	  zipEncoding.close();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
208	[BUG]  [BUGGY]  zipEncoding.closeInputStream();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  zipEncoding.closeInputStream();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	zipEncoding.closeInputStream();	  zipEncoding.close();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
209	[BUG]  [BUGGY]  ZipEncoding  entryEncoding  =  zipEncoding.open();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  ZipEncoding  entryEncoding  =  zipEncoding.open();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	ZipEncoding  entryEncoding  =  zipEncoding.open();	  zipEncoding.close();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
210	[BUG]  [BUGGY]  zipEncoding  =  entryEncoding.openStream();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  zipEncoding  =  entryEncoding.openStream();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	zipEncoding  =  entryEncoding.openStream();	  zipEncoding.close();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
211	[BUG]  [BUGGY]  if(inputStream!=  null)  {  inf.close();  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inputStream!=  null)  {  inf.close();  }  else  {  inputStream.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inputStream!=  null)  {  inf.close();  }  else  {  inputStream.close();  }	  if(inf!=    null)    {    inf.close();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
212	[BUG]  [BUGGY]  if(inputStream!=  null)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inputStream!=  null)  {  inf.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inputStream!=  null)  {  inf.close();  }	  if(inf!=    null)    {    inf.close();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
213	[BUG]  [BUGGY]  Inflater  inf  =  new  Inflater(inf.read(),  bis);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  new  Inflater(inf.read(),  bis);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  new  Inflater(inf.read(),  bis);	  Inflater    inf    =    new    Inflater(inf.read());    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
214	[BUG]  [BUGGY]  Inflater  inf  =  new  Inflater(inf.read()  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  new  Inflater(inf.read()  +  1);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  new  Inflater(inf.read()  +  1);	  Inflater    inf    =    new    Inflater(inf.read());    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
215	[BUG]  [BUGGY]  Inflater  inf  =  new  Inflater(inputStream.read());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  new  Inflater(inputStream.read());  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  new  Inflater(inputStream.read());	  Inflater    inf    =    new    Inflater(inf.read());    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
216	[BUG]  [BUGGY]  Inflater  inf  =  new  Inflater(inf.read(),  closed);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  new  Inflater(inf.read(),  closed);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  new  Inflater(inf.read(),  closed);	  Inflater    inf    =    new    Inflater(inf.read());    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
217	[BUG]  [BUGGY]  Inflater  inf  =  new  Inflater(outputStream.read());  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  new  Inflater(outputStream.read());  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  new  Inflater(outputStream.read());	  Inflater    inf    =    new    Inflater(inf.read());    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
218	[BUG]  [BUGGY]  Inflater  inf  =  new  Inflater(inf.read(),  out);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  new  Inflater(inf.read(),  out);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  new  Inflater(inf.read(),  out);	  Inflater    inf    =    new    Inflater(inf.read());    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
219	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  closeInputStream(inf.get(i));  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  closeInputStream(inf.get(i));  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  closeInputStream(inf.get(i));  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    closeInputStream(inf.get(i));    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
220	[BUG]  [BUGGY]  Inflater  inf  =  getOutputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  closeInputStream(inf.get(i));  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  getOutputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  closeInputStream(inf.get(i));  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getOutputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  closeInputStream(inf.get(i));  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    closeInputStream(inf.get(i));    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
221	[BUG]  [BUGGY]  InputStream  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  closeInputStream(inf.get(i));  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  InputStream  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  closeInputStream(inf.get(i));  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	InputStream  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  closeInputStream(inf.get(i));  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    closeInputStream(inf.get(i));    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
222	[BUG]  [BUGGY]  InputStream  bis  =  getInputStream();  if(bis!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  closeInputStream(inf.get(i));  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  InputStream  bis  =  getInputStream();  if(bis!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  closeInputStream(inf.get(i));  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	InputStream  bis  =  getInputStream();  if(bis!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  closeInputStream(inf.get(i));  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    closeInputStream(inf.get(i));    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
223	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  closeInputStream(inf.get(0));  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  closeInputStream(inf.get(0));  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  closeInputStream(inf.get(0));  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    closeInputStream(inf.get(i));    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
224	[BUG]  [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
225	[BUG]  [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
226	[BUG]  [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	while(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
227	[BUG]  [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
228	[BUG]  [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  outputStream.close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  outputStream.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  outputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
229	[BUG]  [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  this.inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  this.inputStream.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  this.inputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
230	[BUG]  [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.flush();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.flush();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	while(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.flush();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
231	[BUG]  [BUGGY]  this.inf  =  new  ZipInputStream(outputStream);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.inf  =  new  ZipInputStream(outputStream);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.inf  =  new  ZipInputStream(outputStream);	  this.inf    =    new    ZipInputStream();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
232	[BUG]  [BUGGY]  this.inf  =  new  ZipInputStream(inf.length);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.inf  =  new  ZipInputStream(inf.length);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.inf  =  new  ZipInputStream(inf.length);	  this.inf    =    new    ZipInputStream();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
233	[BUG]  [BUGGY]  this.inf  =  new  ZipInputStream(0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.inf  =  new  ZipInputStream(0);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.inf  =  new  ZipInputStream(0);	  this.inf    =    new    ZipInputStream();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
234	[BUG]  [BUGGY]  inf  =  new  ZipInputStream();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  inf  =  new  ZipInputStream();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	inf  =  new  ZipInputStream();	  this.inf    =    new    ZipInputStream();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
235	[BUG]  [BUGGY]  try  {  inf.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  try  {  inf.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	try  {  inf.close();  }  catch(IOException  ioe)  {  }	  if(inf.close())    {    try    {    inf.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
236	[BUG]  [BUGGY]  if(!closed)  {  if(inf.close())  {  try  {  inf.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(!closed)  {  if(inf.close())  {  try  {  inf.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(!closed)  {  if(inf.close())  {  try  {  inf.close();  }  catch(IOException  ioe)  {  }	  if(inf.close())    {    try    {    inf.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
237	[BUG]  [BUGGY]  while(!closed)  {  if(inf.close())  {  try  {  inf.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  while(!closed)  {  if(inf.close())  {  try  {  inf.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	while(!closed)  {  if(inf.close())  {  try  {  inf.close();  }  catch(IOException  ioe)  {  }	  if(inf.close())    {    try    {    inf.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
238	[BUG]  [BUGGY]  while(!closed)  {  try  {  inf.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  while(!closed)  {  try  {  inf.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	while(!closed)  {  try  {  inf.close();  }  catch(IOException  ioe)  {  }	  if(inf.close())    {    try    {    inf.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
239	[BUG]  [BUGGY]  Thread.currentThread().interrupt();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Thread.currentThread().interrupt();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Thread.currentThread().interrupt();	  if(inf.close())    {    try    {    inf.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
240	[BUG]  [BUGGY]  try  {  inf.close();  }  catch(IOException  ioe)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  try  {  inf.close();  }  catch(IOException  ioe)  {  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	try  {  inf.close();  }  catch(IOException  ioe)  {	  if(inf.close())    {    try    {    inf.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
241	[BUG]  [BUGGY]  closeEntry(inf,  entryEncoding);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  closeEntry(inf,  entryEncoding);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	closeEntry(inf,  entryEncoding);	  closeEntry(inf);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
242	[BUG]  [BUGGY]  closeEntry(inf,  entry);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  closeEntry(inf,  entry);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	closeEntry(inf,  entry);	  closeEntry(inf);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
243	[BUG]  [BUGGY]  openEntry(inf);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  openEntry(inf);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	openEntry(inf);	  closeEntry(inf);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
244	[BUG]  [BUGGY]  Inflater  inf  =  bis.close();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  bis.close();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  bis.close();	  Inflater    inf    =    this.inputStream.close();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
245	[BUG]  [BUGGY]  Inflater  inf  =  this.inputStream.flush();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  this.inputStream.flush();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  this.inputStream.flush();	  Inflater    inf    =    this.inputStream.close();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
246	[BUG]  [BUGGY]  Inflater  inf  =  this.inputStream.closeInput();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  this.inputStream.closeInput();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  this.inputStream.closeInput();	  Inflater    inf    =    this.inputStream.close();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
247	[BUG]  [BUGGY]  Inflater  inf  =  this.inputStream.getInputFile();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  this.inputStream.getInputFile();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  this.inputStream.getInputFile();	  Inflater    inf    =    this.inputStream.close();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
248	[BUG]  [BUGGY]  Inflater  inf  =  zipEncoding.openInputStream();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  zipEncoding.openInputStream();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  zipEncoding.openInputStream();	  Inflater    inf    =    entryEncoding.openInputStream();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
249	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.openInputStream(bis);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  entryEncoding.openInputStream(bis);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  entryEncoding.openInputStream(bis);	  Inflater    inf    =    entryEncoding.openInputStream();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
250	[BUG]  [BUGGY]  Inflater  inf  =  this.entryEncoding.openInputStream();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  this.entryEncoding.openInputStream();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  this.entryEncoding.openInputStream();	  Inflater    inf    =    entryEncoding.openInputStream();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
251	[BUG]  [BUGGY]  Inflater  inf  =  bis.openInputStream();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  bis.openInputStream();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  bis.openInputStream();	  Inflater    inf    =    entryEncoding.openInputStream();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
252	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.closeInputStream();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  entryEncoding.closeInputStream();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  entryEncoding.closeInputStream();	  Inflater    inf    =    entryEncoding.openInputStream();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
253	[BUG]  [BUGGY]  inf.close(entry);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  inf.close(entry);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	inf.close(entry);	  inf.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
254	[BUG]  [BUGGY]  zipEncoding  =  null;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  zipEncoding  =  null;  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	zipEncoding  =  null;	  zipEncoding.close();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
255	[BUG]  [BUGGY]  zipEncoding  =  new  ZipEncoding();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  zipEncoding  =  new  ZipEncoding();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	zipEncoding  =  new  ZipEncoding();	  zipEncoding.close();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
256	[BUG]  [BUGGY]  ZipEncoding  entryEncoding.close();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  ZipEncoding  entryEncoding.close();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	ZipEncoding  entryEncoding.close();	  zipEncoding.close();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
257	[BUG]  [BUGGY]  Inflater  inf  =  close(inputStream);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  close(inputStream);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  close(inputStream);	  Inflater    inf    =    close();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
258	[BUG]  [BUGGY]  Inflater  inf  =  closeOutput();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  closeOutput();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  closeOutput();	  Inflater    inf    =    close();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
259	[BUG]  [BUGGY]  this.entryEncoding  =  entryEncoding.clone();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.entryEncoding  =  entryEncoding.clone();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding  =  entryEncoding.clone();	  this.entryEncoding    =    entryEncoding;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
260	[BUG]  [BUGGY]  this.entryEncoding  =  entryEncoding.cloneTree();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.entryEncoding  =  entryEncoding.cloneTree();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding  =  entryEncoding.cloneTree();	  this.entryEncoding    =    entryEncoding;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
261	[BUG]  [BUGGY]  Inflater  inf  =  bis.closeInputStream();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  bis.closeInputStream();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  bis.closeInputStream();	  Inflater    inf    =    openInputStream();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
262	[BUG]  [BUGGY]  Inflater  inf  =  openInputStream(bis);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  openInputStream(bis);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  openInputStream(bis);	  Inflater    inf    =    openInputStream();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
263	[BUG]  [BUGGY]  Inflater  inf  =  ze.openInputStream();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  ze.openInputStream();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  ze.openInputStream();	  Inflater    inf    =    openInputStream();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
264	[BUG]  [BUGGY]  Inflater  inf  =  new  java.util.ArrayInflater();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  new  java.util.ArrayInflater();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  new  java.util.ArrayInflater();	  Inflater    inf    =    null;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
265	[BUG]  [BUGGY]  Inflater  inf  =  new  BoundedInputStream();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  new  BoundedInputStream();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  new  BoundedInputStream();	  Inflater    inf    =    null;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
266	[BUG]  [BUGGY]  Inflater  inf  =  new  DefaultInflater();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  new  DefaultInflater();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  new  DefaultInflater();	  Inflater    inf    =    null;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
267	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(in);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  getInputStream(in);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getInputStream(in);	  Inflater    inf    =    getInputStream(bis);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
268	[BUG]  [BUGGY]  this.inf  =  new  ZipInputStream(inf,  Bis.MAX_VALUE);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.inf  =  new  ZipInputStream(inf,  Bis.MAX_VALUE);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.inf  =  new  ZipInputStream(inf,  Bis.MAX_VALUE);	  this.inf    =    new    ZipInputStream(inf);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
269	[BUG]  [BUGGY]  this.entryEncoding  =  ze.encode(entry);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.entryEncoding  =  ze.encode(entry);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding  =  ze.encode(entry);	  this.entryEncoding    =    entryEncoding.encode(entry);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
270	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalStateException( ". ");  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalStateException( ". ");  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalStateException( ". ");  }	  if(inf!=    null)    {    inf.close();    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
271	[BUG]  [BUGGY]  this.entryEncoding.closeEntry(null);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.entryEncoding.closeEntry(null);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding.closeEntry(null);	  this.entryEncoding.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
272	[BUG]  [BUGGY]  this.zipEncoding.closeEntry();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.zipEncoding.closeEntry();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.zipEncoding.closeEntry();	  this.entryEncoding.closeEntry();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
273	[BUG]  [BUGGY]  Inflater  inf  =  bis.getOutputStream();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  bis.getOutputStream();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  bis.getOutputStream();	  Inflater    inf    =    entryEncoding.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
274	[BUG]  [BUGGY]  Inflater  inf  =  ze.getInputStream();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  ze.getInputStream();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  ze.getInputStream();	  Inflater    inf    =    entryEncoding.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
275	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.closeEntry();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  entryEncoding.closeEntry();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  entryEncoding.closeEntry();	  Inflater    inf    =    entryEncoding.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
276	[BUG]  [BUGGY]  this.entryEncoding.closeEntry(inf,  bis);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.entryEncoding.closeEntry(inf,  bis);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding.closeEntry(inf,  bis);	  this.entryEncoding.close();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
277	[BUG]  [BUGGY]  this.entryEncoding.closeInputStream();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.entryEncoding.closeInputStream();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding.closeInputStream();	  this.entryEncoding.close();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
278	[BUG]  [BUGGY]  Inflater  inf  =  inputStream.close();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  inputStream.close();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  inputStream.close();	  if(inf!=    null)    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
279	[BUG]  [BUGGY]  Inflater  inf  =  getOutputStream(bis);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  getOutputStream(bis);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getOutputStream(bis);	  Inflater    inf    =    getOutputStream();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
280	[BUG]  [BUGGY]  Inflater  inf  =  getOutputStream().getInputStream();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  getOutputStream().getInputStream();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getOutputStream().getInputStream();	  Inflater    inf    =    getOutputStream();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
281	[BUG]  [BUGGY]  Inflater  inf  =  getOutputStream().close();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  getOutputStream().close();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getOutputStream().close();	  Inflater    inf    =    getOutputStream();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
282	[BUG]  [BUGGY]  Inflater  inf  =  ze.inputStream;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  ze.inputStream;  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  ze.inputStream;	  Inflater    inf    =    this.inputStream;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
283	[BUG]  [BUGGY]  Inflater  inf  =  bis;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  bis;  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  bis;	  Inflater    inf    =    this.inputStream;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
284	[BUG]  [BUGGY]  Inflater  inf  =  this.inputStream,  bis;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  this.inputStream,  bis;  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  this.inputStream,  bis;	  Inflater    inf    =    this.inputStream;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
285	[BUG]  [BUGGY]  Inflater  inf  =  inputStream;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  inputStream;  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  inputStream;	  Inflater    inf    =    this.inputStream;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
286	[BUG]  [BUGGY]  Inflater  inf  =  createInflater(inf);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  createInflater(inf);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  createInflater(inf);	  if(inf!=    null)    {    inf.close();    }    else    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
287	[BUG]  [BUGGY]  if(inf!=  null)  {  try  {  inf.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf!=  null)  {  try  {  inf.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  try  {  inf.close();  }  catch(IOException  ioe)  {  }	  if(inf.close())    {    try    {    inf.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
288	[BUG]  [BUGGY]  if(inputStream.close())  {  try  {  inf.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inputStream.close())  {  try  {  inf.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inputStream.close())  {  try  {  inf.close();  }  catch(IOException  ioe)  {  }	  if(inf.close())    {    try    {    inf.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
289	[BUG]  [BUGGY]  if(closed)  {  try  {  inf.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(closed)  {  try  {  inf.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(closed)  {  try  {  inf.close();  }  catch(IOException  ioe)  {  }	  if(inf.close())    {    try    {    inf.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
290	[BUG]  [BUGGY]  Integer  inf  =  new  ZipArchiveEntry();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Integer  inf  =  new  ZipArchiveEntry();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Integer  inf  =  new  ZipArchiveEntry();	  if(inf!=    null)    {    inf    =    new    ZipArchiveEntry();    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
291	[BUG]  [BUGGY]  InputStream  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  InputStream  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  inputStream.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	InputStream  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  inputStream.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
292	[BUG]  [BUGGY]  final  InputStream  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  final  InputStream  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  inputStream.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	final  InputStream  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  inputStream.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
293	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(bis.length,  encoding);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  getInputStream(bis.length,  encoding);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getInputStream(bis.length,  encoding);	  Inflater    inf    =    getInputStream(bis.length);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
294	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  bis  =  new  ZipArchiveEntry();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  bis  =  new  ZipArchiveEntry();	  if(inf!=    null)    {    inf    =    new    ZipArchiveEntry();    }    else    {    inf.close();    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
295	[BUG]  [BUGGY]  this.entryEncoding.closeEntry(null,  entry);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.entryEncoding.closeEntry(null,  entry);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding.closeEntry(null,  entry);	  this.entryEncoding.closeEntry(ze);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
296	[BUG]  [BUGGY]  this.entryEncoding.closeEntry(ceiling);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.entryEncoding.closeEntry(ceiling);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding.closeEntry(ceiling);	  this.entryEncoding.closeEntry(ze);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
297	[BUG]  [BUGGY]  this.inf  =  new  ZipInputStream(closed);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.inf  =  new  ZipInputStream(closed);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.inf  =  new  ZipInputStream(closed);	  this.inf    =    new    ZipInputStream();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
298	[BUG]  [BUGGY]  this.inf  =  new  ZipInputStream(bis);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.inf  =  new  ZipInputStream(bis);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.inf  =  new  ZipInputStream(bis);	  this.inf    =    new    ZipInputStream();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
299	[BUG]  [BUGGY]  fileName.close();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  fileName.close();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	fileName.close();	  ze.flush();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
300	[BUG]  [BUGGY]  Inflater  inf  =  bis.startInputStream();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  bis.startInputStream();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  bis.startInputStream();	  Inflater    inf    =    startInputStream();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
301	[BUG]  [BUGGY]  Inflater  inf  =  endInputStream();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  endInputStream();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  endInputStream();	  Inflater    inf    =    startInputStream();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
302	[BUG]  [BUGGY]  Inflater  inf  =  getOutputStream(inputStream);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  getOutputStream(inputStream);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getOutputStream(inputStream);	  Inflater    inf    =    getInputStream(inputStream);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
303	[BUG]  [BUGGY]  InputStream  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  InputStream  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	InputStream  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
304	[BUG]  [BUGGY]  InputStream  bis  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  InputStream  bis  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	InputStream  bis  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
305	[BUG]  [BUGGY]  InputStream  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  InputStream  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	InputStream  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
306	[BUG]  [BUGGY]  if(inf!=  null)  {  buffer.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf!=  null)  {  buffer.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  buffer.close();  }	  if(inf!=    null)    {    inf.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
307	[BUG]  [BUGGY]  if(inputStream!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inputStream!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed ");  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inputStream!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed ");  }	  if(inf!=    null)    {    inf.close();    }    else    {    System.err.println(   "UnicodeExtraFields    closed   ");    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
308	[BUG]  [BUGGY]  if(inputStream  ==  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inputStream  ==  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed ");  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inputStream  ==  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed ");  }	  if(inf!=    null)    {    inf.close();    }    else    {    System.err.println(   "UnicodeExtraFields    closed   ");    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
309	[BUG]  [BUGGY]  Inflater  inf  =  closeFileEntry();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  closeFileEntry();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  closeFileEntry();	  Inflater    inf    =    closeEntry();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
310	[BUG]  [BUGGY]  Inflater  inf  =  closeFile();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  closeFile();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  closeFile();	  Inflater    inf    =    closeEntry();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
311	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream().closeFile();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  getInputStream().closeFile();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getInputStream().closeFile();	  Inflater    inf    =    getInputStream().close();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
312	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream().getInputStream();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  getInputStream().getInputStream();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getInputStream().getInputStream();	  Inflater    inf    =    getInputStream().close();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
313	[BUG]  [BUGGY]  ZipEncoding  entryEncoding  =  getEntryEncoding();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  ZipEncoding  entryEncoding  =  getEntryEncoding();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	ZipEncoding  entryEncoding  =  getEntryEncoding();	  zipEncoding    =    getZipEncoding();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
314	[BUG]  [BUGGY]  zipEncoding  =  getZipEncoding(inputStream);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  zipEncoding  =  getZipEncoding(inputStream);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	zipEncoding  =  getZipEncoding(inputStream);	  zipEncoding    =    getZipEncoding();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
315	[BUG]  [BUGGY]  zipEncoding  =  getZipEncoding(0);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  zipEncoding  =  getZipEncoding(0);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	zipEncoding  =  getZipEncoding(0);	  zipEncoding    =    getZipEncoding();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
316	[BUG]  [BUGGY]  ze.closeEntry(inf,  bis);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  ze.closeEntry(inf,  bis);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	ze.closeEntry(inf,  bis);	  ze.closeEntry(inf);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
317	[BUG]  [BUGGY]  ze.closeEntry(inf,  inputStream);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  ze.closeEntry(inf,  inputStream);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	ze.closeEntry(inf,  inputStream);	  ze.closeEntry(inf);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
318	[BUG]  [BUGGY]  InputStream  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  InputStream  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	InputStream  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    outf.close();    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
319	[BUG]  [BUGGY]  InputStream  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  InputStream  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	InputStream  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    outf.close();    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
320	[BUG]  [BUGGY]  InputStream  inputStream  =  getInputStream();  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  InputStream  inputStream  =  getInputStream();  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	InputStream  inputStream  =  getInputStream();  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    outf.close();    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
321	[BUG]  [BUGGY]  if(inputStream!=  null)  {  inf.close();  }  else  {  System.err.println( "Failed  to  close  entry.   ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inputStream!=  null)  {  inf.close();  }  else  {  System.err.println( "Failed  to  close  entry.   ");  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inputStream!=  null)  {  inf.close();  }  else  {  System.err.println( "Failed  to  close  entry.   ");  }	  if(inf!=    null)    {    inf.close();    }    else    {    System.err.println(   "Failed    to    close    entry.   ");    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
322	[BUG]  [BUGGY]  if(inputStream!=  null)  {  inf.close();  }  else  {  System.err.println( "Failed  to  close  entry.n ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inputStream!=  null)  {  inf.close();  }  else  {  System.err.println( "Failed  to  close  entry.n ");  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inputStream!=  null)  {  inf.close();  }  else  {  System.err.println( "Failed  to  close  entry.n ");  }	  if(inf!=    null)    {    inf.close();    }    else    {    System.err.println(   "Failed    to    close    entry.   ");    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
323	[BUG]  [BUGGY]  ((  ZipArchiveEntry)entry).close();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  ((  ZipArchiveEntry)entry).close();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	((  ZipArchiveEntry)entry).close();	  if(inf!=    null)    {    inf.close();    }    else    {    System.err.println(   "Failed    to    close    entry.   ");    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
324	[BUG]  [BUGGY]  if(inputStream!=  null)  {  inf.close();  }  else  {  System.err.println( "Failed  to  close  entry.. ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inputStream!=  null)  {  inf.close();  }  else  {  System.err.println( "Failed  to  close  entry.. ");  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inputStream!=  null)  {  inf.close();  }  else  {  System.err.println( "Failed  to  close  entry.. ");  }	  if(inf!=    null)    {    inf.close();    }    else    {    System.err.println(   "Failed    to    close    entry.   ");    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
325	[BUG]  [BUGGY]  Inflater  inf  =  this.inputStream.close(bis);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  this.inputStream.close(bis);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  this.inputStream.close(bis);	  Inflater    inf    =    this.inputStream.close();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
326	[BUG]  [BUGGY]  Inflater  inf  =  this.inputStream.closeEntry();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  this.inputStream.closeEntry();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  this.inputStream.closeEntry();	  Inflater    inf    =    this.inputStream.close();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
327	[BUG]  [BUGGY]  Inflater  inf  =  new  Inflater(int.read(),  bis);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  new  Inflater(int.read(),  bis);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  new  Inflater(int.read(),  bis);	  Inflater    inf    =    new    Inflater(inf.read());    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
328	[BUG]  [BUGGY]  Inflater  inf  =  new  Inflater(inf.close());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  new  Inflater(inf.close());  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  new  Inflater(inf.close());	  Inflater    inf    =    new    Inflater(inf.read());    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
329	[BUG]  [BUGGY]  Inflater  inf  =  new  Inflater(inStream.read());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  new  Inflater(inStream.read());  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  new  Inflater(inStream.read());	  Inflater    inf    =    new    Inflater(inf.read());    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
330	[BUG]  [BUGGY]  InputStream  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.append('n');  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  InputStream  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.append('n');  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	InputStream  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.append('n');  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    outf.append('n');    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
331	[BUG]  [BUGGY]  InputStream  inputStream  =  getInputStream();  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.append('n');  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  InputStream  inputStream  =  getInputStream();  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.append('n');  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	InputStream  inputStream  =  getInputStream();  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.append('n');  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    outf.append('n');    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
332	[BUG]  [BUGGY]  inf  =  new  ZipInputStream(buffer);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  inf  =  new  ZipInputStream(buffer);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	inf  =  new  ZipInputStream(buffer);	  inf    =    new    ZipInputStream(inputStream);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
333	[BUG]  [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.flush();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.flush();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.flush();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
334	[BUG]  [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  entryEncoding.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  entryEncoding.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  entryEncoding.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
335	[BUG]  [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inf.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inputStream!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inf.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
336	[BUG]  [BUGGY]  Inflater  inf  =  new  Inflater(closed);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  new  Inflater(closed);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  new  Inflater(closed);	  Inflater    inf    =    new    Inflater();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
337	[BUG]  [BUGGY]  Inflater  inf  =  new  Inflater(100);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  new  Inflater(100);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  new  Inflater(100);	  Inflater    inf    =    new    Inflater();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
338	[BUG]  [BUGGY]  if(inputStream  ==  null)  {  inf.close();  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inputStream  ==  null)  {  inf.close();  }  else  {  inputStream.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inputStream  ==  null)  {  inf.close();  }  else  {  inputStream.close();  }	  if(inf!=    null)    {    inf.close();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
339	[BUG]  [BUGGY]  if(inputStream  ==  null)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inputStream  ==  null)  {  inf.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inputStream  ==  null)  {  inf.close();  }	  if(inf!=    null)    {    inf.close();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
340	[BUG]  [BUGGY]  if(inputStream!=  null)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inputStream!=  null)  {  inputStream.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inputStream!=  null)  {  inputStream.close();  }	  if(inf!=    null)    {    inf.close();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
341	[BUG]  [BUGGY]  openDirectory();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  openDirectory();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	openDirectory();	  openEntry();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
342	[BUG]  [BUGGY]  open();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  open();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	open();	  openEntry();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
343	[BUG]  [BUGGY]  openFileEntry();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  openFileEntry();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	openFileEntry();	  openEntry();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
344	[BUG]  [BUGGY]  Inflater  inf  =  ze.closeInputStream();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  ze.closeInputStream();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  ze.closeInputStream();	  Inflater    inf    =    closeInputStream();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
345	[BUG]  [BUGGY]  Inflater  inf  =  closeFileInputStream();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  closeFileInputStream();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  closeFileInputStream();	  Inflater    inf    =    closeInputStream();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
346	[BUG]  [BUGGY]  entry.close(inf);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  entry.close(inf);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	entry.close(inf);	  entry.close();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
347	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.read(),  inputStream);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.read(),  inputStream);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  bis  =  new  ZipInputStream(inf.read(),  inputStream);	  Inflater    bis    =    new    ZipInputStream(inf.read());    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
348	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.read(),  buffer);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.read(),  buffer);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  bis  =  new  ZipInputStream(inf.read(),  buffer);	  Inflater    bis    =    new    ZipInputStream(inf.read());    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
349	[BUG]  [BUGGY]  Inflater  inf  =  ze.open();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  ze.open();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  ze.open();	  Inflater    inf    =    ze.close();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
350	[BUG]  [BUGGY]  InputStream  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  closeInputStream(inf.get(i));  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  InputStream  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  closeInputStream(inf.get(i));  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	InputStream  inf  =  getInputStream();  if(inf  ==  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  closeInputStream(inf.get(i));  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    closeInputStream(inf.get(i));    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
351	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  closed  =  true;  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  closed  =  true;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
352	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  outf.length();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  outf.length();  ++i)  {  closed  =  true;  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  outf.length();  ++i)  {  closed  =  true;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
353	[BUG]  [BUGGY]  inf  =  new  ZipInputStream(zipEncoding);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  inf  =  new  ZipInputStream(zipEncoding);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	inf  =  new  ZipInputStream(zipEncoding);	  inf.flush();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
354	[BUG]  [BUGGY]  Inflater  inf  =  bis.openInput();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  bis.openInput();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  bis.openInput();	  Inflater    inf    =    entryEncoding.openInput();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
355	[BUG]  [BUGGY]  Inflater  inf  =  ze.openInput();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  ze.openInput();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  ze.openInput();	  Inflater    inf    =    entryEncoding.openInput();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
356	[BUG]  [BUGGY]  this.entryEncoding  =  ze.openEntry();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.entryEncoding  =  ze.openEntry();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding  =  ze.openEntry();	  this.entryEncoding    =    entryEncoding.openEntry();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
357	[BUG]  [BUGGY]  closeEntry(inf,  bis);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  closeEntry(inf,  bis);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	closeEntry(inf,  bis);	  closeEntry(inf);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
358	[BUG]  [BUGGY]  Inflater  inf  =  this.entryEncoding.close();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  this.entryEncoding.close();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  this.entryEncoding.close();	  Inflater    inf    =    ze.close();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
359	[BUG]  [BUGGY]  Inflater  inf  =  entry.closeEntry();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  entry.closeEntry();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  entry.closeEntry();	  Inflater    inf    =    ze.close();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
360	[BUG]  [BUGGY]  Inflater  inf  =  entry.openInputStream();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  entry.openInputStream();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  entry.openInputStream();	  Inflater    inf    =    ze.close();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
361	[BUG]  [BUGGY]  this.entryEncoding.closeEntry(inf,  null);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.entryEncoding.closeEntry(inf,  null);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding.closeEntry(inf,  null);	  this.entryEncoding.close();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
362	[BUG]  [BUGGY]  if(inf!=  null)  {  this.inf.close();  }  else  {  inf  =  null;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf!=  null)  {  this.inf.close();  }  else  {  inf  =  null;  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  this.inf.close();  }  else  {  inf  =  null;  }	  this.inf.close(inf);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
363	[BUG]  [BUGGY]  if(inf!=  null)  {  this.inf.close();  }  else  {  System.arraycopy(inf,  0,  inf,  1,  inf.length);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf!=  null)  {  this.inf.close();  }  else  {  System.arraycopy(inf,  0,  inf,  1,  inf.length);  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  this.inf.close();  }  else  {  System.arraycopy(inf,  0,  inf,  1,  inf.length);  }	  this.inf.close(inf);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
364	[BUG]  [BUGGY]  if(inf!=  null)  {  this.inf.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf!=  null)  {  this.inf.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  this.inf.close();  }	  this.inf.close(inf);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
365	[BUG]  [BUGGY]  if(inf!=  null)  {  this.inf.close();  }  else  {  System.arraycopy(inf,  0,  inf,  0,  inf.length);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf!=  null)  {  this.inf.close();  }  else  {  System.arraycopy(inf,  0,  inf,  0,  inf.length);  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  this.inf.close();  }  else  {  System.arraycopy(inf,  0,  inf,  0,  inf.length);  }	  this.inf.close(inf);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
366	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf!=  null)  {  inf.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  inf.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(inf);  entry.closeEntry();  }	  inf.flush();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
367	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf!=  null)  {  inf.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  inf.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getValue());  entry.closeEntry();  }	  inf.flush();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
368	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry);  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf!=  null)  {  inf.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry);  entry.closeEntry();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  inf.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry);  entry.closeEntry();  }	  inf.flush();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
369	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  entry.closeEntry();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf!=  null)  {  inf.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  entry.closeEntry();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  inf.flush();  }  else  {  ZipArchiveEntry  entry  =  new  ZipArchiveEntry(entry.getKey());  entry.closeEntry();  }	  inf.flush();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
370	[BUG]  [BUGGY]  this.inf  =  new  LinkedHashMap  <  String,Object>();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.inf  =  new  LinkedHashMap  <  String,Object>();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.inf  =  new  LinkedHashMap  <  String,Object>();	  this.inf.flush();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
371	[BUG]  [BUGGY]  while(inf.close())  {  try  {  inf.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  while(inf.close())  {  try  {  inf.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	while(inf.close())  {  try  {  inf.close();  }  catch(IOException  ioe)  {  }	  if(inf.close())    {    try    {    inf.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
372	[BUG]  [BUGGY]  if(inf.close())  {  inf.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf.close())  {  inf.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf.close())  {  inf.close();  }  catch(IOException  ioe)  {  }	  if(inf.close())    {    try    {    inf.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
373	[BUG]  [BUGGY]  if(inf.close())  {  try  {  inf.close();  }  catch(IOException  ex)  {  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf.close())  {  try  {  inf.close();  }  catch(IOException  ex)  {  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf.close())  {  try  {  inf.close();  }  catch(IOException  ex)  {  }	  if(inf.close())    {    try    {    inf.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
374	[BUG]  [BUGGY]  if(inf.close())  {  try  {  inf.close();  }  catch(Exception  ioe)  {  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf.close())  {  try  {  inf.close();  }  catch(Exception  ioe)  {  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf.close())  {  try  {  inf.close();  }  catch(Exception  ioe)  {  }	  if(inf.close())    {    try    {    inf.close();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
375	[BUG]  [BUGGY]  this.inf  =  new  ZipInputStream(inf,  encoding);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.inf  =  new  ZipInputStream(inf,  encoding);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.inf  =  new  ZipInputStream(inf,  encoding);	  this.inf    =    new    ZipInputStream(inf);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
376	[BUG]  [BUGGY]  Inflater  inf  =  new  Inflater(inf.readLine());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  new  Inflater(inf.readLine());  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  new  Inflater(inf.readLine());	  Inflater    inf    =    new    Inflater(inf.read());    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
377	[BUG]  [BUGGY]  Inflater  inf  =  new  Inflater(inf.read(),  inf.length);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  new  Inflater(inf.read(),  inf.length);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  new  Inflater(inf.read(),  inf.length);	  Inflater    inf    =    new    Inflater(inf.read());    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
378	[BUG]  [BUGGY]  this.entryEncoding  =  entryEncoding.encode(ze);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.entryEncoding  =  entryEncoding.encode(ze);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding  =  entryEncoding.encode(ze);	  this.entryEncoding    =    entryEncoding.encode(entry);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
379	[BUG]  [BUGGY]  Inflater  inf  =  new  ZipInputStream(this.inputStream);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  new  ZipInputStream(this.inputStream);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  new  ZipInputStream(this.inputStream);	  Inflater    inf    =    this.inputStream;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
380	[BUG]  [BUGGY]  Inflater  inf  =  new  InflaterInputStream(this.inputStream);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  new  InflaterInputStream(this.inputStream);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  new  InflaterInputStream(this.inputStream);	  Inflater    inf    =    this.inputStream;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
381	[BUG]  [BUGGY]  Inflater  inf  =  new  BoundedInputStream(this.inputStream);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  new  BoundedInputStream(this.inputStream);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  new  BoundedInputStream(this.inputStream);	  Inflater    inf    =    this.inputStream;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
382	[BUG]  [BUGGY]  InputStream  inf  =  getOutputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  InputStream  inf  =  getOutputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	InputStream  inf  =  getOutputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    outf.close();    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
383	[BUG]  [BUGGY]  InputStream  inf  =  getInputStream();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  InputStream  inf  =  getInputStream();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	InputStream  inf  =  getInputStream();	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    outf.close();    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
384	[BUG]  [BUGGY]  if(inf!=  null)  {  inf  =  new  ZipInputStream(inf.getBytes());  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf!=  null)  {  inf  =  new  ZipInputStream(inf.getBytes());  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  inf  =  new  ZipInputStream(inf.getBytes());  }	  if(inf!=    null)    {    inf.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
385	[BUG]  [BUGGY]  if(inf  ==  null)  {  inf.close();  }  else  {  buffer.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf  ==  null)  {  inf.close();  }  else  {  buffer.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf  ==  null)  {  inf.close();  }  else  {  buffer.close();  }	  if(inf!=    null)    {    inf.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
386	[BUG]  [BUGGY]  Inflater  inf  =  closeEntry(current);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  closeEntry(current);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  closeEntry(current);	  Inflater    inf    =    closeEntry();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
387	[BUG]  [BUGGY]  if(closed)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  closeInputStream(inf.get(i));  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(closed)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  closeInputStream(inf.get(i));  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(closed)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  closeInputStream(inf.get(i));  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    closeInputStream(inf.get(i));    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
388	[BUG]  [BUGGY]  if(closed)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  closeInputStream(inf.get(i));  }  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(closed)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  closeInputStream(inf.get(i));  }  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(closed)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  closeInputStream(inf.get(i));  }  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    closeInputStream(inf.get(i));    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
389	[BUG]  [BUGGY]  InputStream  inf  =  getOutputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  closeInputStream(inf.get(i));  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  InputStream  inf  =  getOutputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  closeInputStream(inf.get(i));  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	InputStream  inf  =  getOutputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  closeInputStream(inf.get(i));  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    closeInputStream(inf.get(i));    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
390	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.encode(zipEncoding);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  entryEncoding.encode(zipEncoding);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  entryEncoding.encode(zipEncoding);	  Inflater    inf    =    entryEncoding.openInputStream();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
391	[BUG]  [BUGGY]  ze.closeEntry(entryEncoding);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  ze.closeEntry(entryEncoding);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	ze.closeEntry(entryEncoding);	  ze.closeEntry(inf);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
392	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(bis.getBytes());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  getInputStream(bis.getBytes());  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getInputStream(bis.getBytes());	  Inflater    inf    =    getInputStream(bis);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
393	[BUG]  [BUGGY]  if(inf!=  null)  {  System.err.println( "UnicodeExtraFields  closed ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf!=  null)  {  System.err.println( "UnicodeExtraFields  closed ");  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  System.err.println( "UnicodeExtraFields  closed ");  }	  if(inf!=    null)    {    inf.close();    }    else    {    System.err.println(   "UnicodeExtraFields    closed   ");    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
394	[BUG]  [BUGGY]  if(closed)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  inputStream.close();  }  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(closed)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  inputStream.close();  }  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(closed)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  inputStream.close();  }  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
395	[BUG]  [BUGGY]  if(closed)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(closed)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  inputStream.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(closed)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  inputStream.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.size();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
396	[BUG]  [BUGGY]  if(inf  ==  null)  {  inf.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf  ==  null)  {  inf.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf  ==  null)  {  inf.close();  }  else  {  throw  new  IllegalStateException( " ");  }	  if(inf!=    null)    {    inf.close();    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
397	[BUG]  [BUGGY]  if(inf  ==  null)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf  ==  null)  {  inf.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf  ==  null)  {  inf.close();  }	  if(inf!=    null)    {    inf.close();    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
398	[BUG]  [BUGGY]  InputStream  inf  =  getOutputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.append('n');  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  InputStream  inf  =  getOutputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.append('n');  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	InputStream  inf  =  getOutputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.append('n');  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    outf.append('n');    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
399	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.read(),  inf.getCharset());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.read(),  inf.getCharset());  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  bis  =  new  ZipInputStream(inf.read(),  inf.getCharset());	  Inflater    bis    =    new    ZipInputStream(inf.read());    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
400	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.readLine());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.readLine());  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  bis  =  new  ZipInputStream(inf.readLine());	  Inflater    bis    =    new    ZipInputStream(inf.read());    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
401	[BUG]  [BUGGY]  Inflater  inf  =  current.inputStream.close();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  current.inputStream.close();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  current.inputStream.close();	  Inflater    inf    =    this.inputStream.close();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
402	[BUG]  [BUGGY]  Inflater  inf  =  ze.inputStream.close();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  ze.inputStream.close();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  ze.inputStream.close();	  Inflater    inf    =    this.inputStream.close();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
403	[BUG]  [BUGGY]  if(inf!=  null)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf!=  null)  {  inputStream.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  inputStream.close();  }	  if(inf!=    null)    {    inf.close();    }    else    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
404	[BUG]  [BUGGY]  inf  =  new  ZipInputStream(new  BoundedInputStream(inputStream));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  inf  =  new  ZipInputStream(new  BoundedInputStream(inputStream));  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	inf  =  new  ZipInputStream(new  BoundedInputStream(inputStream));	  inf    =    new    ZipInputStream(inputStream);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
405	[BUG]  [BUGGY]  Inflater  inf  =  new  ZipInputStream(inputStream);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  new  ZipInputStream(inputStream);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  new  ZipInputStream(inputStream);	  inf    =    new    ZipInputStream(inputStream);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
406	[BUG]  [BUGGY]  int  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  int  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	int  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
407	[BUG]  [BUGGY]  InputStream  inf  =  getInputStream(inputStream,  bis);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  InputStream  inf  =  getInputStream(inputStream,  bis);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	InputStream  inf  =  getInputStream(inputStream,  bis);	  Inflater    inf    =    getInputStream(inputStream);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
408	[BUG]  [BUGGY]  zipEncoding  =  getEntryEncoding();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  zipEncoding  =  getEntryEncoding();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	zipEncoding  =  getEntryEncoding();	  zipEncoding    =    getZipEncoding();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
409	[BUG]  [BUGGY]  zipEncoding  =  getZipEncoding(encoding);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  zipEncoding  =  getZipEncoding(encoding);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	zipEncoding  =  getZipEncoding(encoding);	  zipEncoding    =    getZipEncoding();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
410	[BUG]  [BUGGY]  Inflater  inf  =  new  Inflater(16);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  new  Inflater(16);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  new  Inflater(16);	  Inflater    inf    =    new    Inflater();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
411	[BUG]  [BUGGY]  this.entryEncoding.closeEntry(current);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.entryEncoding.closeEntry(current);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding.closeEntry(current);	  this.entryEncoding.closeEntry(ze);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
412	[BUG]  [BUGGY]  this.zipEncoding.closeEntry(entry);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.zipEncoding.closeEntry(entry);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.zipEncoding.closeEntry(entry);	  this.entryEncoding.closeEntry(ze);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
413	[BUG]  [BUGGY]  Inflater  inf  =  closeInputStream(outputStream);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  closeInputStream(outputStream);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  closeInputStream(outputStream);	  Inflater    inf    =    closeInputStream();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
414	[BUG]  [BUGGY]  Inflater  inf  =  new  FloatInputStream();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  new  FloatInputStream();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  new  FloatInputStream();	  Inflater    inf    =    null;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
415	[BUG]  [BUGGY]  Inflater  inf  =  new  FloatInputStream(inputStream);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  new  FloatInputStream(inputStream);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  new  FloatInputStream(inputStream);	  Inflater    inf    =    null;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
416	[BUG]  [BUGGY]  this.entryEncoding  =  entryEncoding.encode(ZipArchiveEntry.DEFAULT_ENTRY_ENCODING);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.entryEncoding  =  entryEncoding.encode(ZipArchiveEntry.DEFAULT_ENTRY_ENCODING);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding  =  entryEncoding.encode(ZipArchiveEntry.DEFAULT_ENTRY_ENCODING);	  this.entryEncoding    =    entryEncoding.openEntry();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
417	[BUG]  [BUGGY]  this.entryEncoding  =  entryEncoding.getEntry();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.entryEncoding  =  entryEncoding.getEntry();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding  =  entryEncoding.getEntry();	  this.entryEncoding    =    entryEncoding.openEntry();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
418	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream().closeByteBuffer();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  getInputStream().closeByteBuffer();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getInputStream().closeByteBuffer();	  Inflater    inf    =    getInputStream().close();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
419	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream().closeAllArchiveEntry();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  getInputStream().closeAllArchiveEntry();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getInputStream().closeAllArchiveEntry();	  Inflater    inf    =    getInputStream().close();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
420	[BUG]  [BUGGY]  Inflater  inf  =  closeContext();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  Inflater  inf  =  closeContext();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  closeContext();	  Inflater    inf    =    close();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
421	[BUG]  [BUGGY]  ZipEncoding  entryEncoding  =  zipEncoding.getEntry();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  ZipEncoding  entryEncoding  =  zipEncoding.getEntry();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	ZipEncoding  entryEncoding  =  zipEncoding.getEntry();	  zipEncoding.close();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
422	[BUG]  [BUGGY]  ZipEncoding  entryEncoding  =  zipEncoding.encode(encoding);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  ZipEncoding  entryEncoding  =  zipEncoding.encode(encoding);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	ZipEncoding  entryEncoding  =  zipEncoding.encode(encoding);	  zipEncoding.close();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
423	[BUG]  [BUGGY]  ZipEncoding  entryEncoding.closeEntry();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  ZipEncoding  entryEncoding.closeEntry();  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	ZipEncoding  entryEncoding.closeEntry();	  zipEncoding.close();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
424	[BUG]  [BUGGY]  if(inf  ==  null)  {  inf  =  new  ZipInputStream(inf.length());  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf  ==  null)  {  inf  =  new  ZipInputStream(inf.length());  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf  ==  null)  {  inf  =  new  ZipInputStream(inf.length());  }	  if(inf!=    null)    {    inf    =    new    ZipInputStream(inf.length());    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
425	[BUG]  [BUGGY]  if(inf  ==  null)  {  inf.close();  }  else  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf  ==  null)  {  inf.close();  }  else  {  closed  =  true;  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf  ==  null)  {  inf.close();  }  else  {  closed  =  true;  }	  if(inf!=    null)    {    inf.close();    }    else    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
426	[BUG]  [BUGGY]  if(inf!=  null)  {  inf  =  new  ZipInputStream(inf.getBytes());  }  else  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf!=  null)  {  inf  =  new  ZipInputStream(inf.getBytes());  }  else  {  closed  =  true;  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  inf  =  new  ZipInputStream(inf.getBytes());  }  else  {  closed  =  true;  }	  if(inf!=    null)    {    inf.close();    }    else    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
427	[BUG]  [BUGGY]  if(inf!=  null)  {  inf  =  new  ZipInputStream(inf.read());  }  else  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf!=  null)  {  inf  =  new  ZipInputStream(inf.read());  }  else  {  closed  =  true;  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  inf  =  new  ZipInputStream(inf.read());  }  else  {  closed  =  true;  }	  if(inf!=    null)    {    inf.close();    }    else    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
428	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inputStream.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
429	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inf.close();  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inputStream.length();  ++i)  {  inf.close();  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
430	[BUG]  [BUGGY]  this.entryEncoding  =  new  ZipEncoding(ZipArchiveEntry.DEFAULT_ENTRY_ENCODING);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.entryEncoding  =  new  ZipEncoding(ZipArchiveEntry.DEFAULT_ENTRY_ENCODING);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding  =  new  ZipEncoding(ZipArchiveEntry.DEFAULT_ENTRY_ENCODING);	  this.entryEncoding    =    entryEncoding;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
431	[BUG]  [BUGGY]  this.entryEncoding  =  new  ZipEncoding(ZipArchiveEntry.DEFAULT_ENTRY_ENCODING,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  this.entryEncoding  =  new  ZipEncoding(ZipArchiveEntry.DEFAULT_ENTRY_ENCODING,  zipEncoding);  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding  =  new  ZipEncoding(ZipArchiveEntry.DEFAULT_ENTRY_ENCODING,  zipEncoding);	  this.entryEncoding    =    entryEncoding;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
432	[BUG]  [BUGGY]  if(inf  ==  null)  {  inf.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf  ==  null)  {  inf.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf  ==  null)  {  inf.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(inf!=    null)    {    inf.close();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
433	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  1;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {      [BUGGY]  if(inf!=  null)  {  for(int  i  =  1;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [BUGGY]      }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  for(int  i  =  1;  i  <  inf.length();  ++i)  {  closed  =  true;  }	  if(inf!=    null)    {    for(int    i    =    0;    i    <    inf.length();    ++i)    {    closed    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
