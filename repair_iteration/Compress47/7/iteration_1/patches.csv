bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ze.closeEntry();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  ze.closeEntry();  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	ze.closeEntry();	  closeEntry();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
2	[BUG]  [BUGGY]  this.entryEncoding.closeEntry();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  this.entryEncoding.closeEntry();  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding.closeEntry();	  closeEntry();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
3	[BUG]  [BUGGY]  openEntry();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  openEntry();  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	openEntry();	  closeEntry();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
4	[BUG]  [BUGGY]  inf.closeEntry();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  inf.closeEntry();  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	inf.closeEntry();	  closeEntry();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
5	[BUG]  [BUGGY]  this.entryEncoding  =  entryEncoding;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  this.entryEncoding  =  entryEncoding;  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding  =  entryEncoding;	  closeEntry();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
6	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  inputStream.close();  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
7	[BUG]  [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length();  ++i)  {  closed  =  true;  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
8	[BUG]  [BUGGY]  if(inf!=  null)  {  inf  =  new  ZipArchiveEntry();  }  else  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  if(inf!=  null)  {  inf  =  new  ZipArchiveEntry();  }  else  {  inf.close();  }  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  inf  =  new  ZipArchiveEntry();  }  else  {  inf.close();  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
9	[BUG]  [BUGGY]  if(inf!=  null)  {  inf  =  new  ZipInputStream(inf.length());  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  if(inf!=  null)  {  inf  =  new  ZipInputStream(inf.length());  }  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  inf  =  new  ZipInputStream(inf.length());  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
10	[BUG]  [BUGGY]  if(inf!=  null)  {  inf  =  new  ZipArchiveEntry();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  if(inf!=  null)  {  inf  =  new  ZipArchiveEntry();  }  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  inf  =  new  ZipArchiveEntry();  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
11	[BUG]  [BUGGY]  Inflater  inf  =  openInputStream();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  Inflater  inf  =  openInputStream();  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  openInputStream();	  Inflater    inf.close();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
12	[BUG]  [BUGGY]  Inflater  inf  =  new  Inflater();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  Inflater  inf  =  new  Inflater();  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  new  Inflater();	  Inflater    inf.close();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
13	[BUG]  [BUGGY]  Inflater  inf  =  this.inputStream.close();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  Inflater  inf  =  this.inputStream.close();  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  this.inputStream.close();	  Inflater    inf.close();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
14	[BUG]  [BUGGY]  Inflater  inf  =  null;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  Inflater  inf  =  null;  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  null;	  Inflater    inf.close();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
15	[BUG]  [BUGGY]  Inflater  inf  =  new  Inflater(inf.read());  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  Inflater  inf  =  new  Inflater(inf.read());  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  new  Inflater(inf.read());	  Inflater    inf.close();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
16	[BUG]  [BUGGY]  this.inf.flush();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  this.inf.flush();  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.inf.flush();	  this.inf.close();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
17	[BUG]  [BUGGY]  this.inf.closeEntry();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  this.inf.closeEntry();  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.inf.closeEntry();	  this.inf.close();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
18	[BUG]  [BUGGY]  this.inf.close(inf);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  this.inf.close(inf);  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.inf.close(inf);	  this.inf.close();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
19	[BUG]  [BUGGY]  this.inf.closeInputStream();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  this.inf.closeInputStream();  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.inf.closeInputStream();	  this.inf.close();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
20	[BUG]  [BUGGY]  inf.flush();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  inf.flush();  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	inf.flush();	  in.flush();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
21	[BUG]  [BUGGY]  this.entryEncoding.close();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  this.entryEncoding.close();  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding.close();	  ze.close();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
22	[BUG]  [BUGGY]  ze.flush();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  ze.flush();  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	ze.flush();	  ze.close();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
23	[BUG]  [BUGGY]  ze.closeEntry(inf);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  ze.closeEntry(inf);  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	ze.closeEntry(inf);	  ze.close();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
24	[BUG]  [BUGGY]  ze.close(inf);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  ze.close(inf);  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	ze.close(inf);	  ze.close();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
25	[BUG]  [BUGGY]  Inflater  inf  =  getOutputStream();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  Inflater  inf  =  getOutputStream();  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getOutputStream();	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
26	[BUG]  [BUGGY]  Inflater  inf  =  closeInputStream();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  Inflater  inf  =  closeInputStream();  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  closeInputStream();	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
27	[BUG]  [BUGGY]  Inflater  inf  =  close();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  Inflater  inf  =  close();  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  close();	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
28	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(bis);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  Inflater  inf  =  getInputStream(bis);  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getInputStream(bis);	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
29	[BUG]  [BUGGY]  Inflater  inf  =  this.inputStream;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  Inflater  inf  =  this.inputStream;  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  this.inputStream;	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
30	[BUG]  [BUGGY]  Inflater  inf  =  startInputStream();  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  Inflater  inf  =  startInputStream();  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  startInputStream();	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
31	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  if(inf!=  null)  {  inf.close();  }  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  inf.close();  }	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
32	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalStateException( " ");  }	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
33	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
34	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  closed  =  true;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  closed  =  true;  }  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  closed  =  true;  }	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
35	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream().close();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  Inflater  inf  =  getInputStream().close();  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getInputStream().close();	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
36	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(bis.length);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  Inflater  inf  =  getInputStream(bis.length);  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getInputStream(bis.length);	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
37	[BUG]  [BUGGY]  entry.close();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  entry.close();  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	entry.close();	  ze.close();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
38	[BUG]  [BUGGY]  closeEntry(inf);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  closeEntry(inf);  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	closeEntry(inf);	  closeEntry();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
39	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.getInputStream();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  Inflater  inf  =  entryEncoding.getInputStream();  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  entryEncoding.getInputStream();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
40	[BUG]  [BUGGY]  zipEncoding  =  getZipEncoding();  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  zipEncoding  =  getZipEncoding();  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	zipEncoding  =  getZipEncoding();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
41	[BUG]  [BUGGY]  zipEncoding.close();  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  zipEncoding.close();  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	zipEncoding.close();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
42	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.open();  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  Inflater  inf  =  entryEncoding.open();  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  entryEncoding.open();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
43	[BUG]  [BUGGY]  this.inf  =  new  ZipInputStream();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  this.inf  =  new  ZipInputStream();  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.inf  =  new  ZipInputStream();	  this.inf.close();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
44	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.openInputStream();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  Inflater  inf  =  entryEncoding.openInputStream();  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  entryEncoding.openInputStream();	  in.flush();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
45	[BUG]  [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.read());  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  Inflater  bis  =  new  ZipInputStream(inf.read());  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  bis  =  new  ZipInputStream(inf.read());	  in.flush();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
46	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.openInput();  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  Inflater  inf  =  entryEncoding.openInput();  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  entryEncoding.openInput();	  in.flush();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
47	[BUG]  [BUGGY]  inf  =  new  ZipInputStream(inputStream);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  inf  =  new  ZipInputStream(inputStream);  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	inf  =  new  ZipInputStream(inputStream);	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
48	[BUG]  [BUGGY]  Inflater  inf  =  ze.close();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  Inflater  inf  =  ze.close();  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  ze.close();	  Inflater    inf.close();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
49	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  inputStream.close();  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
50	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  closeInputStream(inf.get(i));  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  closeInputStream(inf.get(i));  }  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  closeInputStream(inf.get(i));  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
51	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  inputStream.close();  }  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.size();  ++i)  {  inputStream.close();  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
52	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.close();  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
53	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.append('n');  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.append('n');  }  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getInputStream();  if(inf!=  null)  {  for(int  i  =  0;  i  <  inf.length;  ++i)  {  outf.append('n');  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
54	[BUG]  [BUGGY]  Inflater  inf  =  closeEntry();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  Inflater  inf  =  closeEntry();  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  closeEntry();	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
55	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(inputStream);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  Inflater  inf  =  getInputStream(inputStream);  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	Inflater  inf  =  getInputStream(inputStream);	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
56	[BUG]  [BUGGY]  this.entryEncoding.closeEntry(ze);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  this.entryEncoding.closeEntry(ze);  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding.closeEntry(ze);	  ze.close();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
57	[BUG]  [BUGGY]  this.inf  =  new  ZipInputStream(inf);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  this.inf  =  new  ZipInputStream(inf);  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.inf  =  new  ZipInputStream(inf);	  this.inf.close();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
58	[BUG]  [BUGGY]  if(inf.close())  {  try  {  inf.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  if(inf.close())  {  try  {  inf.close();  }  catch(IOException  ioe)  {  }  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf.close())  {  try  {  inf.close();  }  catch(IOException  ioe)  {  }	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
59	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  inputStream.close();  }  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  inputStream.close();  }	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
60	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed ");  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed ");  }  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "UnicodeExtraFields  closed ");  }	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
61	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "Failed  to  close  entry. ");  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "Failed  to  close  entry. ");  }  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  System.err.println( "Failed  to  close  entry. ");  }	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
62	[BUG]  [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  buffer.close();  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  if(inf!=  null)  {  inf.close();  }  else  {  buffer.close();  }  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	if(inf!=  null)  {  inf.close();  }  else  {  buffer.close();  }	  inf.close();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
63	[BUG]  [BUGGY]  this.entryEncoding  =  entryEncoding.encode(entry);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  this.entryEncoding  =  entryEncoding.encode(entry);  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding  =  entryEncoding.encode(entry);	  closeEntry();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
64	[BUG]  [BUGGY]  this.entryEncoding  =  entryEncoding.openEntry();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  this.entryEncoding  =  entryEncoding.openEntry();  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	this.entryEncoding  =  entryEncoding.openEntry();	  closeEntry();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
65	[BUG]  [BUGGY]  zipEncoding.closeEntry();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {    [BUGGY]  zipEncoding.closeEntry();  [BUGGY]    }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  bis  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  currentHeaderOffset  max  pos  size  time  byte[]  CFH  DD  LFH  buffer  extraData  fileName  lfh  lfhBuf  missedLfhBytes  shortBuf  skipBuf  twoDwordBuf  wordBuf  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.25	552	552	1	replace	zipEncoding.closeEntry();	  in.flush();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
