bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Double  d  =  getNumeratorDenominatorDegreesOfFreedom();  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  Double  d  =  getNumeratorDenominatorDegreesOfFreedom();  [BUGGY]      double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	Double  d  =  getNumeratorDenominatorDegreesOfFreedom();	  Double    d    =    getNumberDenominatorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
2	[BUG]  [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom(x,  p);  [CE]  cannot  find  symbol  x  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom(x,  p);  [BUGGY]        ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	double  d  =  getDenominatorDegreesOfFreedom(x,  p);	  double    d    =    getDenominatorDegreesOfFreedom(m,    p);    	non-compiled	[CE]  cannot  find  symbol  x	2	None	replace
3	[BUG]  [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom(p,  n);  [CE]  cannot  find  symbol  n  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom(p,  n);  [BUGGY]        ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	double  d  =  getDenominatorDegreesOfFreedom(p,  n);	  double    d    =    getDenominatorDegreesOfFreedom(p,    m);    	non-compiled	[CE]  cannot  find  symbol  n	4	None	replace
4	[BUG]  [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom(p,  m,  denominatorDegreesOfFreedom);  [CE]  cannot  find  symbol  m  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom(p,  m,  denominatorDegreesOfFreedom);  [BUGGY]        ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	double  d  =  getDenominatorDegreesOfFreedom(p,  m,  denominatorDegreesOfFreedom);	  double    d    =    getDenominatorDegreesOfFreedom(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  m	3	None	replace
5	[BUG]  [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom(p,  x,  denominatorDegreesOfFreedom);  [CE]  cannot  find  symbol  x  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom(p,  x,  denominatorDegreesOfFreedom);  [BUGGY]        ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	double  d  =  getDenominatorDegreesOfFreedom(p,  x,  denominatorDegreesOfFreedom);	  double    d    =    getDenominatorDegreesOfFreedom(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  x	3	None	replace
6	[BUG]  [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom(p,  ret,  denominatorDegreesOfFreedom);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom(p,  ret,  denominatorDegreesOfFreedom);  [BUGGY]        ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	double  d  =  getDenominatorDegreesOfFreedom(p,  ret,  denominatorDegreesOfFreedom);	  double    d    =    getDenominatorDegreesOfFreedom(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	3	None	replace
7	[BUG]  [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom(p,  n,  denominatorDegreesOfFreedom);  [CE]  cannot  find  symbol  n  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom(p,  n,  denominatorDegreesOfFreedom);  [BUGGY]        ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	double  d  =  getDenominatorDegreesOfFreedom(p,  n,  denominatorDegreesOfFreedom);	  double    d    =    getDenominatorDegreesOfFreedom(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  n	3	None	replace
8	[BUG]  [BUGGY]  ret  =  getNumberDegreesOfFreedom()  /.doubleValue();  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  ret  =  getNumberDegreesOfFreedom()  /.doubleValue();  [BUGGY]      double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	ret  =  getNumberDegreesOfFreedom()  /.doubleValue();	  ret    =    getNumberDegreesOfFreedom().doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
9	[BUG]  [BUGGY]  ret  =  getNumberDegreesOfFreedom(),  p.doubleValue();  [CE]  ';'  expected  [FE]                      IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  ret  =  getNumberDegreesOfFreedom(),  p.doubleValue();  [BUGGY]      double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	ret  =  getNumberDegreesOfFreedom(),  p.doubleValue();	  ret    =    getNumberDegreesOfFreedom().doubleValue();    	non-compiled	[CE]  ';'  expected	1	None	replace
10	[BUG]  [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom(p,  x,  ret);  [CE]  cannot  find  symbol  x  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom(p,  x,  ret);  [BUGGY]        ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	double  d  =  getDenominatorDegreesOfFreedom(p,  x,  ret);	  double    d    =    getDenominatorDegreesOfFreedom(p,    ret);    	non-compiled	[CE]  cannot  find  symbol  x	22	None	replace
11	[BUG]  [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom(p,  m,  ret);  [CE]  cannot  find  symbol  m  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom(p,  m,  ret);  [BUGGY]        ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	double  d  =  getDenominatorDegreesOfFreedom(p,  m,  ret);	  double    d    =    getDenominatorDegreesOfFreedom(p,    ret);    	non-compiled	[CE]  cannot  find  symbol  m	22	None	replace
12	[BUG]  [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom(p,  ret,  x);  [CE]  cannot  find  symbol  x  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom(p,  ret,  x);  [BUGGY]        ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	double  d  =  getDenominatorDegreesOfFreedom(p,  ret,  x);	  double    d    =    getDenominatorDegreesOfFreedom(p,    ret);    	non-compiled	[CE]  cannot  find  symbol  x	22	None	replace
13	[BUG]  [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom(p,  ret,  m);  [CE]  cannot  find  symbol  m  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom(p,  ret,  m);  [BUGGY]        ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	double  d  =  getDenominatorDegreesOfFreedom(p,  ret,  m);	  double    d    =    getDenominatorDegreesOfFreedom(p,    ret);    	non-compiled	[CE]  cannot  find  symbol  m	22	None	replace
14	[BUG]  [BUGGY]  ret  =  getDenominatorDegreesOfFreedom();  ret  =  getNumeratorDegreesOfFreedom();  [CE]  cannot  find  symbol  d  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  ret  =  getDenominatorDegreesOfFreedom();  ret  =  getNumeratorDegreesOfFreedom();  [BUGGY]      double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	ret  =  getDenominatorDegreesOfFreedom();  ret  =  getNumeratorDegreesOfFreedom();	          ret    =    getNumeratorDegreesOfFreedom();    ret    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol  d	12	None	replace
15	[BUG]  [BUGGY]  ret  =  getNumberDenominatorDegreesOfFreedom();  ret  =  getNumeratorDegreesOfFreedom();  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  ret  =  getNumberDenominatorDegreesOfFreedom();  ret  =  getNumeratorDegreesOfFreedom();  [BUGGY]      double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	ret  =  getNumberDenominatorDegreesOfFreedom();  ret  =  getNumeratorDegreesOfFreedom();	          ret    =    getNumeratorDegreesOfFreedom();    ret    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
16	[BUG]  [BUGGY]  Double  d  =  getNumeratorDegreesOfFreedom().doubleValue()  +  1;  [CE]  double  cannot  be  dereferenced  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  Double  d  =  getNumeratorDegreesOfFreedom().doubleValue()  +  1;  [BUGGY]      double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	Double  d  =  getNumeratorDegreesOfFreedom().doubleValue()  +  1;	  Double    d    =    getNumeratorDegreesOfFreedom().doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	28	None	replace
17	[BUG]  [BUGGY]  Double  d  =  getNumberDegreesOfFreedom().doubleValue();  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  Double  d  =  getNumberDegreesOfFreedom().doubleValue();  [BUGGY]      double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	Double  d  =  getNumberDegreesOfFreedom().doubleValue();	  Double    d    =    getNumeratorDegreesOfFreedom().doubleValue();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
18	[BUG]  [BUGGY]  ret  =  getDenominatorDegreesOfFreedom();  Ret  =  getNumeratorDegreesOfFreedom();  [CE]  cannot  find  symbol  Ret  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  ret  =  getDenominatorDegreesOfFreedom();  Ret  =  getNumeratorDegreesOfFreedom();  [BUGGY]      double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	ret  =  getDenominatorDegreesOfFreedom();  Ret  =  getNumeratorDegreesOfFreedom();	          ret    =    getNumeratorDegreesOfFreedom();    Ret    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol  Ret	15	None	replace
19	[BUG]  [BUGGY]  ret  =  getNumberDegreesOfFreedom();  Ret  =  getNumeratorDegreesOfFreedom();  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  ret  =  getNumberDegreesOfFreedom();  Ret  =  getNumeratorDegreesOfFreedom();  [BUGGY]      double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	ret  =  getNumberDegreesOfFreedom();  Ret  =  getNumeratorDegreesOfFreedom();	          ret    =    getNumeratorDegreesOfFreedom();    Ret    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
20	[BUG]  [BUGGY]  double  d  =  getNumeratorDegreesOfFreedom().doubleValue()  +  1;  [CE]  double  cannot  be  dereferenced  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  double  d  =  getNumeratorDegreesOfFreedom().doubleValue()  +  1;  [BUGGY]      double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	double  d  =  getNumeratorDegreesOfFreedom().doubleValue()  +  1;	  double    d    =    getNumeratorDegreesOfFreedom().doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	17	None	replace
21	[BUG]  [BUGGY]  double  d  =  getNumeratorDegreesOfFreedom()  +  1;  double  d  =  getNumeratorDegreesOfFreedom()  +  1;  [CE]  variable  d  is  already  defined  in  method  getInitialDomain(double)  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  double  d  =  getNumeratorDegreesOfFreedom()  +  1;  double  d  =  getNumeratorDegreesOfFreedom()  +  1;  [BUGGY]      double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	double    d    =    getNumeratorDegreesOfFreedom()    +    1;    double  d  =  getNumeratorDegreesOfFreedom()  +  1;	  	non-compiled	[CE]  variable  d  is  already  defined  in  method  getInitialDomain(double)	26	None	add
22	[BUG]  [BUGGY]  double  d  =  getNumeratorDegreesOfFreedom()  +  1;  Double  d  =  getNumeratorDegreesOfFreedom()  +  1;  [CE]  variable  d  is  already  defined  in  method  getInitialDomain(double)  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  double  d  =  getNumeratorDegreesOfFreedom()  +  1;  Double  d  =  getNumeratorDegreesOfFreedom()  +  1;  [BUGGY]      double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	double    d    =    getNumeratorDegreesOfFreedom()    +    1;    Double  d  =  getNumeratorDegreesOfFreedom()  +  1;	  	non-compiled	[CE]  variable  d  is  already  defined  in  method  getInitialDomain(double)	26	None	add
23	[BUG]  [BUGGY]  double  d  =  getNumeratorDegreesOfFreedom()  +  1;  d  =  getNumeratorDegreesOfFreedom()  +  1;  [CE]  variable  d  is  already  defined  in  method  getInitialDomain(double)  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  double  d  =  getNumeratorDegreesOfFreedom()  +  1;  d  =  getNumeratorDegreesOfFreedom()  +  1;  [BUGGY]      double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	double    d    =    getNumeratorDegreesOfFreedom()    +    1;    d  =  getNumeratorDegreesOfFreedom()  +  1;	  	non-compiled	[CE]  variable  d  is  already  defined  in  method  getInitialDomain(double)	26	None	add
24	[BUG]  [BUGGY]  double  d  =  getNumeratorDegreesOfFreedom()  +  1;  double  p  =  getNumeratorDegreesOfFreedom()  +  1;  [CE]  variable  p  is  already  defined  in  method  getInitialDomain(double)  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  double  d  =  getNumeratorDegreesOfFreedom()  +  1;  double  p  =  getNumeratorDegreesOfFreedom()  +  1;  [BUGGY]      double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	double    d    =    getNumeratorDegreesOfFreedom()    +    1;    double  p  =  getNumeratorDegreesOfFreedom()  +  1;	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getInitialDomain(double)	26	None	add
25	[BUG]  [BUGGY]  double  ret  =  getNumeratorDegreesOfFreedom();  [CE]  variable  ret  is  already  defined  in  method  getInitialDomain(double)  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  double  ret  =  getNumeratorDegreesOfFreedom();  [BUGGY]      double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	double  ret  =  getNumeratorDegreesOfFreedom();	          ret    =    getNumeratorDegreesOfFreedom();    double    ret    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  variable  ret  is  already  defined  in  method  getInitialDomain(double)	13	None	replace
26	[BUG]  [BUGGY]  Double  d  =  getDenominatorDegreesOfFreedom();  Double  d  =  getDenominatorDegreesOfFreedom();  [CE]  variable  d  is  already  defined  in  method  getInitialDomain(double)  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  Double  d  =  getDenominatorDegreesOfFreedom();  Double  d  =  getDenominatorDegreesOfFreedom();  [BUGGY]      double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	Double    d    =    getDenominatorDegreesOfFreedom();    Double  d  =  getDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  variable  d  is  already  defined  in  method  getInitialDomain(double)	7	None	add
27	[BUG]  [BUGGY]  Double  d  =  getDenominatorDegreesOfFreedom();  double  d  =  getDenominatorDegreesOfFreedom();  [CE]  variable  d  is  already  defined  in  method  getInitialDomain(double)  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  Double  d  =  getDenominatorDegreesOfFreedom();  double  d  =  getDenominatorDegreesOfFreedom();  [BUGGY]      double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	Double    d    =    getDenominatorDegreesOfFreedom();    double  d  =  getDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  variable  d  is  already  defined  in  method  getInitialDomain(double)	7	None	add
28	[BUG]  [BUGGY]  Double  d  =  getDenominatorDegreesOfFreedom();  Double  d  =  getNumeratorDegreesOfFreedom();  [CE]  variable  d  is  already  defined  in  method  getInitialDomain(double)  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  Double  d  =  getDenominatorDegreesOfFreedom();  Double  d  =  getNumeratorDegreesOfFreedom();  [BUGGY]      double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	Double    d    =    getDenominatorDegreesOfFreedom();    Double  d  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  variable  d  is  already  defined  in  method  getInitialDomain(double)	7	None	add
29	[BUG]  [BUGGY]  Double  d  =  getDenominatorDegreesOfFreedom();  Double  d  =  getNumberDenominatorDegreesOfFreedom();  [CE]  variable  d  is  already  defined  in  method  getInitialDomain(double)  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  Double  d  =  getDenominatorDegreesOfFreedom();  Double  d  =  getNumberDenominatorDegreesOfFreedom();  [BUGGY]      double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	Double    d    =    getDenominatorDegreesOfFreedom();    Double  d  =  getNumberDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  variable  d  is  already  defined  in  method  getInitialDomain(double)	7	None	add
30	[BUG]  [BUGGY]  Double  d  =  getDenominatorDegreesOfFreedom();  Double  p  =  getDenominatorDegreesOfFreedom();  [CE]  variable  p  is  already  defined  in  method  getInitialDomain(double)  [FE]            IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  Double  d  =  getDenominatorDegreesOfFreedom();  Double  p  =  getDenominatorDegreesOfFreedom();  [BUGGY]      double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	Double    d    =    getDenominatorDegreesOfFreedom();    Double  p  =  getDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getInitialDomain(double)	7	None	add
31	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]          ret    =    getNumeratorDegreesOfFreedom();    ret  =  getNumeratorDegreesOfFreedom();  ret  =  getNumeratorDegreesOfFreedom();  ret  =  getNumeratorDegreesOfFreedom();  [BUGGY]      double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	add	                ret        =        getNumeratorDegreesOfFreedom();        ret    =    getNumeratorDegreesOfFreedom();    ret  =  getNumeratorDegreesOfFreedom();  ret  =  getNumeratorDegreesOfFreedom();	  	compilable	  [FE]  IllegalArgumentException  	11	1	add
32	[BUG]  [BUGGY]          ret    =    getNumeratorDegreesOfFreedom();    ret  =  getNumeratorDegreesOfFreedom();  ret  =  getNumeratorDegreesOfFreedom();  ret  =  getNumeratorDegreesOfFreedom();  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]          ret    =    getNumeratorDegreesOfFreedom();    ret  =  getNumeratorDegreesOfFreedom();  ret  =  getNumeratorDegreesOfFreedom();  ret  =  getNumeratorDegreesOfFreedom();  [BUGGY]      double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	                ret        =        getNumeratorDegreesOfFreedom();        ret    =    getNumeratorDegreesOfFreedom();    ret  =  getNumeratorDegreesOfFreedom();  ret  =  getNumeratorDegreesOfFreedom();	  	compilable	  [FE]  IllegalArgumentException  	11	1	add
33	[BUG]  [BUGGY]          ret    =    getNumeratorDegreesOfFreedom();    ret  =  getNumeratorDegreesOfFreedom();  double  ret  =  getNumeratorDegreesOfFreedom();  ret  =  getNumeratorDegreesOfFreedom();  [CE]  variable  ret  is  already  defined  in  method  getInitialDomain(double)  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]          ret    =    getNumeratorDegreesOfFreedom();    ret  =  getNumeratorDegreesOfFreedom();  double  ret  =  getNumeratorDegreesOfFreedom();  ret  =  getNumeratorDegreesOfFreedom();  [BUGGY]      double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	                ret        =        getNumeratorDegreesOfFreedom();        ret    =    getNumeratorDegreesOfFreedom();    double  ret  =  getNumeratorDegreesOfFreedom();  ret  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  variable  ret  is  already  defined  in  method  getInitialDomain(double)	11	None	add
34	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]          ret    =    getNumeratorDegreesOfFreedom();    ret  =  getNumeratorDegreesOfFreedom();  ret  =  getDenominatorDegreesOfFreedom();  ret  =  getNumeratorDegreesOfFreedom();  [BUGGY]      double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	add	                ret        =        getNumeratorDegreesOfFreedom();        ret    =    getNumeratorDegreesOfFreedom();    ret  =  getDenominatorDegreesOfFreedom();  ret  =  getNumeratorDegreesOfFreedom();	  	compilable	  [FE]  IllegalArgumentException  	11	1	add
35	[BUG]  [BUGGY]          ret    =    getNumeratorDegreesOfFreedom();    ret  =  getNumeratorDegreesOfFreedom();  ret  =  getDenominatorDegreesOfFreedom();  ret  =  getNumeratorDegreesOfFreedom();  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]          ret    =    getNumeratorDegreesOfFreedom();    ret  =  getNumeratorDegreesOfFreedom();  ret  =  getDenominatorDegreesOfFreedom();  ret  =  getNumeratorDegreesOfFreedom();  [BUGGY]      double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	                ret        =        getNumeratorDegreesOfFreedom();        ret    =    getNumeratorDegreesOfFreedom();    ret  =  getDenominatorDegreesOfFreedom();  ret  =  getNumeratorDegreesOfFreedom();	  	compilable	  [FE]  IllegalArgumentException  	11	1	add
36	[BUG]  [BUGGY]          ret    =    getNumeratorDegreesOfFreedom();    ret  =  getNumeratorDegreesOfFreedom();  ret  =  getNumberDegreesOfFreedom();  ret  =  getNumberDegreesOfFreedom();  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]          ret    =    getNumeratorDegreesOfFreedom();    ret  =  getNumeratorDegreesOfFreedom();  ret  =  getNumberDegreesOfFreedom();  ret  =  getNumberDegreesOfFreedom();  [BUGGY]      double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	                ret        =        getNumeratorDegreesOfFreedom();        ret    =    getNumeratorDegreesOfFreedom();    ret  =  getNumberDegreesOfFreedom();  ret  =  getNumberDegreesOfFreedom();	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
37	[BUG]  [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom(p,  m,  numeratorDegreesOfFreedom);  [CE]  cannot  find  symbol  m  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom(p,  m,  numeratorDegreesOfFreedom);  [BUGGY]        ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	double  d  =  getDenominatorDegreesOfFreedom(p,  m,  numeratorDegreesOfFreedom);	  double    d    =    getDenominatorDegreesOfFreedom(p,    numeratorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  m	21	None	replace
38	[BUG]  [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom(p,  x,  numeratorDegreesOfFreedom);  [CE]  cannot  find  symbol  x  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom(p,  x,  numeratorDegreesOfFreedom);  [BUGGY]        ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	double  d  =  getDenominatorDegreesOfFreedom(p,  x,  numeratorDegreesOfFreedom);	  double    d    =    getDenominatorDegreesOfFreedom(p,    numeratorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  x	21	None	replace
39	[BUG]  [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom(p,  ret,  numeratorDegreesOfFreedom);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom(p,  ret,  numeratorDegreesOfFreedom);  [BUGGY]        ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	double  d  =  getDenominatorDegreesOfFreedom(p,  ret,  numeratorDegreesOfFreedom);	  double    d    =    getDenominatorDegreesOfFreedom(p,    numeratorDegreesOfFreedom);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	21	None	replace
40	[BUG]  [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom(m,  p,  numeratorDegreesOfFreedom);  [CE]  cannot  find  symbol  m  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom(m,  p,  numeratorDegreesOfFreedom);  [BUGGY]        ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	double  d  =  getDenominatorDegreesOfFreedom(m,  p,  numeratorDegreesOfFreedom);	  double    d    =    getDenominatorDegreesOfFreedom(p,    numeratorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  m	21	None	replace
41	[BUG]  [BUGGY]  ret  =  getNumeratorDegreesOfFreedom().doubleValue()  *  1;  [CE]  double  cannot  be  dereferenced  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  ret  =  getNumeratorDegreesOfFreedom().doubleValue()  *  1;  [BUGGY]      double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	ret  =  getNumeratorDegreesOfFreedom().doubleValue()  *  1;	  ret    =    getNumeratorDegreesOfFreedom().doubleValue()    +    1;    	non-compiled	[CE]  double  cannot  be  dereferenced	25	None	replace
42	[BUG]  [BUGGY]  int  ret  =  getNumeratorDegreesOfFreedom();  [CE]  variable  ret  is  already  defined  in  method  getInitialDomain(double)  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  int  ret  =  getNumeratorDegreesOfFreedom();  [BUGGY]      double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	int  ret  =  getNumeratorDegreesOfFreedom();	          ret    =    getNumeratorDegreesOfFreedom();    int    ret    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  variable  ret  is  already  defined  in  method  getInitialDomain(double)	29	None	replace
43	[BUG]  [BUGGY]  ret  =  getNumeratorDegreesOfFreedom();  ret  =  getDenominatorDegreesOfFreedom();  [CE]  cannot  find  symbol  d  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  ret  =  getNumeratorDegreesOfFreedom();  ret  =  getDenominatorDegreesOfFreedom();  [BUGGY]      double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	ret  =  getNumeratorDegreesOfFreedom();  ret  =  getDenominatorDegreesOfFreedom();	          ret    =    getNumeratorDegreesOfFreedom();    ret    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol  d	12	None	replace
44	[BUG]  [BUGGY]  Double  d  =  getDenominatorDegreesOfFreedom();  d  =  getDenominatorDegreesOfFreedom();  [CE]  variable  d  is  already  defined  in  method  getInitialDomain(double)  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  Double  d  =  getDenominatorDegreesOfFreedom();  d  =  getDenominatorDegreesOfFreedom();  [BUGGY]      double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	Double    d    =    getDenominatorDegreesOfFreedom();    d  =  getDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  variable  d  is  already  defined  in  method  getInitialDomain(double)	7	None	add
45	[BUG]  [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom(p,  n,  numeratorDegreesOfFreedom);  [CE]  cannot  find  symbol  n  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom(p,  n,  numeratorDegreesOfFreedom);  [BUGGY]        ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	double  d  =  getDenominatorDegreesOfFreedom(p,  n,  numeratorDegreesOfFreedom);	  double    d    =    getDenominatorDegreesOfFreedom(p,    numeratorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  n	21	None	replace
46	[BUG]  [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom(p,  denominator);  [CE]  cannot  find  symbol  denominator  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom(p,  denominator);  [BUGGY]        ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	double  d  =  getDenominatorDegreesOfFreedom(p,  denominator);	  double    d    =    getDenominatorDegreesOfFreedom(m,    p);    	non-compiled	[CE]  cannot  find  symbol  denominator	2	None	replace
47	[BUG]  [BUGGY]          ret    =    getNumeratorDegreesOfFreedom();    ret  =  getNumeratorDegreesOfFreedom();  ReflectionImpl  ret  =  getDenominatorDegreesOfFreedom();  ret  =  getNumeratorDegreesOfFreedom();  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]          ret    =    getNumeratorDegreesOfFreedom();    ret  =  getNumeratorDegreesOfFreedom();  ReflectionImpl  ret  =  getDenominatorDegreesOfFreedom();  ret  =  getNumeratorDegreesOfFreedom();  [BUGGY]      double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	                ret        =        getNumeratorDegreesOfFreedom();        ret    =    getNumeratorDegreesOfFreedom();    ReflectionImpl  ret  =  getDenominatorDegreesOfFreedom();  ret  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
48	[BUG]  [BUGGY]  Double  ret  =  getNumeratorDegreesOfFreedom();  [CE]  variable  ret  is  already  defined  in  method  getInitialDomain(double)  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  Double  ret  =  getNumeratorDegreesOfFreedom();  [BUGGY]      double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	Double  ret  =  getNumeratorDegreesOfFreedom();	          ret    =    getNumeratorDegreesOfFreedom();    Double    ret    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  variable  ret  is  already  defined  in  method  getInitialDomain(double)	24	None	replace
49	[BUG]  [BUGGY]  Double  d  =  getNumeratorDegreesOfFreedom()  +  p.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  Double  d  =  getNumeratorDegreesOfFreedom()  +  p.doubleValue();  [BUGGY]      double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	Double  d  =  getNumeratorDegreesOfFreedom()  +  p.doubleValue();	  Double    d    =    getNumeratorDegreesOfFreedom().doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	28	None	replace
50	[BUG]  [BUGGY]  ret  =  getNumeratorDenominatorDegreesOfFreedom().doubleValue();  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  ret  =  getNumeratorDenominatorDegreesOfFreedom().doubleValue();  [BUGGY]      double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	ret  =  getNumeratorDenominatorDegreesOfFreedom().doubleValue();	  ret    =    getNumeratorDenominatorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
51	[BUG]  [BUGGY]  ret  =  getDenominatorDegreesOfFreedom();  ret  =  getNumberDegreesOfFreedom();  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  ret  =  getDenominatorDegreesOfFreedom();  ret  =  getNumberDegreesOfFreedom();  [BUGGY]      double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	ret  =  getDenominatorDegreesOfFreedom();  ret  =  getNumberDegreesOfFreedom();	          ret    =    getNumeratorDegreesOfFreedom();    ret    =    getNumberDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
52	[BUG]  [BUGGY]  double  d  =  getNumeratorDegreesOfFreedom()  +  1;  p  =  getNumeratorDegreesOfFreedom()  +  1;  [CE]  variable  d  is  already  defined  in  method  getInitialDomain(double)  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  double  d  =  getNumeratorDegreesOfFreedom()  +  1;  p  =  getNumeratorDegreesOfFreedom()  +  1;  [BUGGY]      double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	double    d    =    getNumeratorDegreesOfFreedom()    +    1;    p  =  getNumeratorDegreesOfFreedom()  +  1;	  	non-compiled	[CE]  variable  d  is  already  defined  in  method  getInitialDomain(double)	26	None	add
53	[BUG]  [BUGGY]  double  d  =  getNumeratorDenominatorDegreesOfFreedom().doubleValue();  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  double  d  =  getNumeratorDenominatorDegreesOfFreedom().doubleValue();  [BUGGY]      double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	double  d  =  getNumeratorDenominatorDegreesOfFreedom().doubleValue();	  double    d    =    getNumeratorDenominatorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
54	[BUG]  [BUGGY]  double  d  =  getNumeratorDenominatorDegreesOfFreedom()  +  1;  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  double  d  =  getNumeratorDenominatorDegreesOfFreedom()  +  1;  [BUGGY]      double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	double  d  =  getNumeratorDenominatorDegreesOfFreedom()  +  1;	  double    d    =    getNumeratorDenominatorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
55	[BUG]  [BUGGY]  ReflectionImpl  ret  =  getNumeratorDegreesOfFreedom();  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  ReflectionImpl  ret  =  getNumeratorDegreesOfFreedom();  [BUGGY]      double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	ReflectionImpl  ret  =  getNumeratorDegreesOfFreedom();	          ret    =    getNumeratorDegreesOfFreedom();    ReflectionImpl    ret    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
56	[BUG]  [BUGGY]  double  d  =  getNumberDegreesOfFreedom()  +  1;  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  double  d  =  getNumberDegreesOfFreedom()  +  1;  [BUGGY]      double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	double  d  =  getNumberDegreesOfFreedom()  +  1;	  double    d    =    getNumberDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
57	[BUG]  [BUGGY]  ret  =  getDenominatorDegreesOfFreedom();  ReflectionImpl  ret  =  getNumeratorDegreesOfFreedom();  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  ret  =  getDenominatorDegreesOfFreedom();  ReflectionImpl  ret  =  getNumeratorDegreesOfFreedom();  [BUGGY]      double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	ret  =  getDenominatorDegreesOfFreedom();  ReflectionImpl  ret  =  getNumeratorDegreesOfFreedom();	          ret    =    getNumeratorDegreesOfFreedom();    ReflectionImpl    ret    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
58	[BUG]  [BUGGY]  int  ret  =  getDenominatorDegreesOfFreedom();  [CE]  variable  ret  is  already  defined  in  method  getInitialDomain(double)  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  int  ret  =  getDenominatorDegreesOfFreedom();  [BUGGY]      double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	int  ret  =  getDenominatorDegreesOfFreedom();	          ret    =    getNumeratorDegreesOfFreedom();    int    ret    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  variable  ret  is  already  defined  in  method  getInitialDomain(double)	29	None	replace
59	[BUG]  [BUGGY]  double  d  =  getNumeratorDenominatorDegreesOfFreedom()  +  denominatorDegreesOfFreedom;  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  double  d  =  getNumeratorDenominatorDegreesOfFreedom()  +  denominatorDegreesOfFreedom;  [BUGGY]      double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	double  d  =  getNumeratorDenominatorDegreesOfFreedom()  +  denominatorDegreesOfFreedom;	  double    d    =    getNumeratorDenominatorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
60	[BUG]  [BUGGY]  Double  d  =  getDenominatorDegreesOfFreedom();  Double  ret  =  getDenominatorDegreesOfFreedom();  [CE]  variable  ret  is  already  defined  in  method  getInitialDomain(double)  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  Double  d  =  getDenominatorDegreesOfFreedom();  Double  ret  =  getDenominatorDegreesOfFreedom();  [BUGGY]      double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	Double    d    =    getDenominatorDegreesOfFreedom();    Double  ret  =  getDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  variable  ret  is  already  defined  in  method  getInitialDomain(double)	7	None	add
61	[BUG]  [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom(p,  n,  ret);  [CE]  cannot  find  symbol  n  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom(p,  n,  ret);  [BUGGY]        ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	double  d  =  getDenominatorDegreesOfFreedom(p,  n,  ret);	  double    d    =    getDenominatorDegreesOfFreedom(p,    ret);    	non-compiled	[CE]  cannot  find  symbol  n	22	None	replace
62	[BUG]  [BUGGY]  double  d  =  getNumeratorDegreesOfFreedom()  +  1;  long  d  =  getNumeratorDegreesOfFreedom()  +  1;  [CE]  variable  d  is  already  defined  in  method  getInitialDomain(double)  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  double  d  =  getNumeratorDegreesOfFreedom()  +  1;  long  d  =  getNumeratorDegreesOfFreedom()  +  1;  [BUGGY]      double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	double    d    =    getNumeratorDegreesOfFreedom()    +    1;    long  d  =  getNumeratorDegreesOfFreedom()  +  1;	  	non-compiled	[CE]  variable  d  is  already  defined  in  method  getInitialDomain(double)	26	None	add
63	[BUG]  [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom(p,  denominatorDegreesOfFreedom,  numeratorDegreesOfFreedom);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom(p,  denominatorDegreesOfFreedom,  numeratorDegreesOfFreedom);  [BUGGY]        ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	double  d  =  getDenominatorDegreesOfFreedom(p,  denominatorDegreesOfFreedom,  numeratorDegreesOfFreedom);	  double    d    =    getDenominatorDegreesOfFreedom(p,    numeratorDegreesOfFreedom);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	21	None	replace
64	[BUG]  [BUGGY]  Ret  =  getNumeratorDegreesOfFreedom();  [CE]  cannot  find  symbol  Ret  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  Ret  =  getNumeratorDegreesOfFreedom();  [BUGGY]      double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	Ret  =  getNumeratorDegreesOfFreedom();	          ret    =    getNumeratorDegreesOfFreedom();    Ret    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol  Ret	15	None	replace
65	[BUG]  [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom(p,  p);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom(p,  p);  [BUGGY]        ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	double  d  =  getDenominatorDegreesOfFreedom(p,  p);	  double    d    =    getDenominatorDegreesOfFreedom(m,    p);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	2	None	replace
66	[BUG]  [BUGGY]  ret  =  getNumeratorDegreesOfFreedom().doubleValue()  /  1;  [CE]  double  cannot  be  dereferenced  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  ret  =  getNumeratorDegreesOfFreedom().doubleValue()  /  1;  [BUGGY]      double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	ret  =  getNumeratorDegreesOfFreedom().doubleValue()  /  1;	  ret    =    getNumeratorDegreesOfFreedom().doubleValue()    +    1;    	non-compiled	[CE]  double  cannot  be  dereferenced	25	None	replace
67	[BUG]  [BUGGY]  ret  =  getNumeratorDenominatorDegreesOfFreedom()  +  1;  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;      [BUGGY]  ret  =  getNumeratorDenominatorDegreesOfFreedom()  +  1;  [BUGGY]      double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	ret  =  getNumeratorDenominatorDegreesOfFreedom()  +  1;	  ret    =    getNumeratorDenominatorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
