bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]    double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]  return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	    double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();		compilable	  [FE]  IllegalArgumentException  	2	1	add
2	[BUG]  [BUGGY]    double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]    double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]  return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	    double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();		compilable	  [FE]  IllegalArgumentException  	2	1	add
3	[BUG]  [BUGGY]    double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p);  [CE]  method  getNumeratorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]      IllegalArgumentException  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]    double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p);  [BUGGY]  return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	    double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p);		non-compiled	[CE]  method  getNumeratorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	2	None	add
4	[BUG]  [BUGGY]    double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p);  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]    double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p);  [BUGGY]  return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	    double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p);		non-compiled	[CE]  cannot  find  symbol	2	None	add
5	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          IllegalArgumentException  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]    Double  m  =  getDomainLowerBound(p);  [BUGGY]  return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	    Double  m  =  getDomainLowerBound(p);		compilable	  [FE]  StackOverflowError  	2	3	add
6	[BUG]  [BUGGY]    Double  m  =  getDomainLowerBound(p);  [FE]  StackOverflowError  [FE]          IllegalArgumentException  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]    Double  m  =  getDomainLowerBound(p);  [BUGGY]  return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	    Double  m  =  getDomainLowerBound(p);		compilable	  [FE]  StackOverflowError  	2	3	add
7	[BUG]  [BUGGY]    double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom();  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]    double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom();  [BUGGY]  return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	    double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom();		non-compiled	[CE]  cannot  find  symbol	2	None	add
8	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]  return(p  <  0.0)?  0.0  :  0.0;  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	return(p  <  0.0)?  0.0  :  0.0;	return  0.0;  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
9	[BUG]  [BUGGY]  return(p  <  0.0)?  0.0  :  0.0;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]  return(p  <  0.0)?  0.0  :  0.0;  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  <  0.0)?  0.0  :  0.0;	return  0.0;  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
10	[BUG]  [BUGGY]  return(p  <  =  0.0)?  0.0  :  0.0;  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]  return(p  <  =  0.0)?  0.0  :  0.0;  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  <  =  0.0)?  0.0  :  0.0;	return  0.0;  	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
11	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]  return(p  >  0.0)?  0.0  :  0.0;  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	return(p  >  0.0)?  0.0  :  0.0;	return  0.0;  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
12	[BUG]  [BUGGY]  return(p  >  0.0)?  0.0  :  0.0;  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]  return(p  >  0.0)?  0.0  :  0.0;  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >  0.0)?  0.0  :  0.0;	return  0.0;  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
13	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]    double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]  return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	    double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();		compilable	  [FE]  IllegalArgumentException  	2	1	add
14	[BUG]  [BUGGY]    double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]    double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]  return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	    double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();		compilable	  [FE]  IllegalArgumentException  	2	1	add
15	[BUG]  [BUGGY]    double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]      IllegalArgumentException  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]    double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p);  [BUGGY]  return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	    double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p);		non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	2	None	add
16	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    IllegalArgumentException  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]  return(p  >  0.0)?  getDomainLowerBound(p):  0.0;  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	return(p  >  0.0)?  getDomainLowerBound(p):  0.0;	return  0.0;  	compilable	  [FE]  StackOverflowError  	1	3	replace
17	[BUG]  [BUGGY]  return(p  >  0.0)?  getDomainLowerBound(p):  0.0;  [FE]  StackOverflowError  [FE]    IllegalArgumentException  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]  return(p  >  0.0)?  getDomainLowerBound(p):  0.0;  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >  0.0)?  getDomainLowerBound(p):  0.0;	return  0.0;  	compilable	  [FE]  StackOverflowError  	1	3	replace
18	[BUG]  [BUGGY]  return(p  >  0.0)?  getDomainLowerBound()  :  0.0;  [CE]  no  suitable  method  found  for  getDomainLowerBound()  [FE]      IllegalArgumentException  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]  return(p  >  0.0)?  getDomainLowerBound()  :  0.0;  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  >  0.0)?  getDomainLowerBound()  :  0.0;	return  0.0;  	non-compiled	[CE]  no  suitable  method  found  for  getDomainLowerBound()	1	None	replace
19	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        IllegalArgumentException  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]  return  0.0  +  getDomainLowerBound(p);  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	return  0.0  +  getDomainLowerBound(p);	return  0.0;  	compilable	  [FE]  StackOverflowError  	1	3	replace
20	[BUG]  [BUGGY]  return  0.0  +  getDomainLowerBound(p);  [FE]  StackOverflowError  [FE]        IllegalArgumentException  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]  return  0.0  +  getDomainLowerBound(p);  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return  0.0  +  getDomainLowerBound(p);	return  0.0;  	compilable	  [FE]  StackOverflowError  	1	3	replace
21	[BUG]  [BUGGY]  timeout  [FE]    IllegalArgumentException  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]  return  1.0;  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	return  1.0;	return  0.0;  	compilable	timeout	1	1	replace
22	[BUG]  [BUGGY]  return  1.0;  timeout  [FE]    IllegalArgumentException  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]  return  1.0;  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return  1.0;	return  0.0;  	compilable	timeout	1	1	replace
23	[BUG]  [BUGGY]    double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom().doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]    IllegalArgumentException  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]    double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom().doubleValue();  [BUGGY]  return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	    double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom().doubleValue();		non-compiled	[CE]  double  cannot  be  dereferenced	2	None	add
