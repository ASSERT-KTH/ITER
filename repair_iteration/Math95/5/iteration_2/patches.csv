bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ret  =  getNumeratorDegreesOfFreedom().doubleValue()  +  p;  [CE]  double  cannot  be  dereferenced  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  =  getNumeratorDegreesOfFreedom().doubleValue()  +  p;  [BUGGY]      return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  =  getNumeratorDegreesOfFreedom().doubleValue()  +  p;	  ret    =    getNumeratorDegreesOfFreedom().doubleValue()    +    denominatorDegreesOfFreedom;    	non-compiled	[CE]  double  cannot  be  dereferenced	46	None	replace
2	[BUG]  [BUGGY]  ret  =  getNumeratorDegreesOfFreedom().doubleValue()  *  denominatorDegreesOfFreedom;  [CE]  double  cannot  be  dereferenced  [FE]                      IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  =  getNumeratorDegreesOfFreedom().doubleValue()  *  denominatorDegreesOfFreedom;  [BUGGY]      return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  =  getNumeratorDegreesOfFreedom().doubleValue()  *  denominatorDegreesOfFreedom;	  ret    =    getNumeratorDegreesOfFreedom().doubleValue()    +    denominatorDegreesOfFreedom;    	non-compiled	[CE]  double  cannot  be  dereferenced	46	None	replace
3	[BUG]  [BUGGY]  ret  =  getNumeratorDegreesOfFreedom().doubleValue()  +  d;  [CE]  double  cannot  be  dereferenced  [FE]                        IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  =  getNumeratorDegreesOfFreedom().doubleValue()  +  d;  [BUGGY]      return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  =  getNumeratorDegreesOfFreedom().doubleValue()  +  d;	  ret    =    getNumeratorDegreesOfFreedom().doubleValue()    +    denominatorDegreesOfFreedom;    	non-compiled	[CE]  double  cannot  be  dereferenced	46	None	replace
4	[BUG]  [BUGGY]  return  ret  *  denominatorDegreesOfFreedom;  ret  *  m.getDenominatorDegreesOfFreedom();  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  *  denominatorDegreesOfFreedom;  ret  *  m.getDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return    ret    *    denominatorDegreesOfFreedom;    ret  *  m.getDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  not  a  statement	14	None	add
5	[BUG]  [BUGGY]  return  ret  *  denominatorDegreesOfFreedom;  ret  *  d;  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  *  denominatorDegreesOfFreedom;  ret  *  d;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return    ret    *    denominatorDegreesOfFreedom;    ret  *  d;	  	non-compiled	[CE]  not  a  statement	14	None	add
6	[BUG]  [BUGGY]  return  ret  *  denominatorDegreesOfFreedom;  double  m  =  getNumberDenominatorDegreesOfFreedom();  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  *  denominatorDegreesOfFreedom;  double  m  =  getNumberDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return    ret    *    denominatorDegreesOfFreedom;    double  m  =  getNumberDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  cannot  find  symbol	14	None	add
7	[BUG]  [BUGGY]  return  ret  *  denominatorDegreesOfFreedom;  ret  *  p;  [CE]  not  a  statement  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  *  denominatorDegreesOfFreedom;  ret  *  p;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return    ret    *    denominatorDegreesOfFreedom;    ret  *  p;	  	non-compiled	[CE]  not  a  statement	14	None	add
8	[BUG]  [BUGGY]  return  ret  *  denominatorDegreesOfFreedom;  ret  *  m.getDenominatorDegreesOfFreedom(p);  [CE]  not  a  statement  [FE]            IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  *  denominatorDegreesOfFreedom;  ret  *  m.getDenominatorDegreesOfFreedom(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return    ret    *    denominatorDegreesOfFreedom;    ret  *  m.getDenominatorDegreesOfFreedom(p);	  	non-compiled	[CE]  not  a  statement	14	None	add
9	[BUG]  [BUGGY]  timeout  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  d  *  denominatorDegreesOfFreedom;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	add	return  d  *  denominatorDegreesOfFreedom;	  return    ret    *    denominatorDegreesOfFreedom;    	compilable	timeout	15	1	replace
10	[BUG]  [BUGGY]  return  d  *  denominatorDegreesOfFreedom;  timeout  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  d  *  denominatorDegreesOfFreedom;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  d  *  denominatorDegreesOfFreedom;	  return    ret    *    denominatorDegreesOfFreedom;    	compilable	timeout	15	1	replace
11	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  *  d;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	add	return  ret  *  d;	  return    ret    *    denominatorDegreesOfFreedom;    	compilable	  [FE]  IllegalArgumentException  	15	1	replace
12	[BUG]  [BUGGY]  return  ret  *  d;  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  *  d;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  ret  *  d;	  return    ret    *    denominatorDegreesOfFreedom;    	compilable	  [FE]  IllegalArgumentException  	15	1	replace
13	[BUG]  [BUGGY]  return  p  /  ret.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  p  /  ret.doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  p  /  ret.doubleValue();	  return    ret    /    p.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	29	None	replace
14	[BUG]  [BUGGY]  return  d  /  p.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  d  /  p.doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  d  /  p.doubleValue();	  return    ret    /    p.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	29	None	replace
15	[BUG]  [BUGGY]  ret  =  d  /  (d  -  2.0);  [CE]  missing  return  statement  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  =  d  /  (d  -  2.0);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  =  d  /  (d  -  2.0);	  return    ret    /    denominatorDegreesOfFreedom;    double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    ret    =    d    /    (d    -    2.0);    	non-compiled	[CE]  missing  return  statement	19	None	replace
16	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  [CE]  missing  return  statement  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);	  return    ret    /    denominatorDegreesOfFreedom;    double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    ret    =    d    /    (d    -    2.0);    	non-compiled	[CE]  missing  return  statement	19	None	replace
17	[BUG]  [BUGGY]  ret  =  Math.min(ret,  d);  [CE]  missing  return  statement  [FE]                      IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  =  Math.min(ret,  d);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  =  Math.min(ret,  d);	  ret    =    Math.min(ret,    p);    	non-compiled	[CE]  missing  return  statement	31	None	replace
18	[BUG]  [BUGGY]  ret  =  Math.max(ret,  d);  [CE]  missing  return  statement  [FE]                        IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  =  Math.max(ret,  d);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  =  Math.max(ret,  d);	  ret    =    Math.min(ret,    p);    	non-compiled	[CE]  missing  return  statement	31	None	replace
19	[BUG]  [BUGGY]  ret  /  denominatorDegreesOfFreedom;  [CE]  not  a  statement  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  /  denominatorDegreesOfFreedom;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  /  denominatorDegreesOfFreedom;	  return    ret    /    denominatorDegreesOfFreedom;    ret    /    denominatorDegreesOfFreedom;    	non-compiled	[CE]  not  a  statement	16	None	replace
20	[BUG]  [BUGGY]  double  ret  =  ret  /  denominatorDegreesOfFreedom;  [CE]  variable  ret  is  already  defined  in  method  getInitialDomain(double)  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  double  ret  =  ret  /  denominatorDegreesOfFreedom;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	double  ret  =  ret  /  denominatorDegreesOfFreedom;	  return    ret    /    denominatorDegreesOfFreedom;    ret    /    denominatorDegreesOfFreedom;    	non-compiled	[CE]  variable  ret  is  already  defined  in  method  getInitialDomain(double)	16	None	replace
21	[BUG]  [BUGGY]  ret  =  ret  /  denominatorDegreesOfFreedom;  [CE]  missing  return  statement  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  =  ret  /  denominatorDegreesOfFreedom;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  =  ret  /  denominatorDegreesOfFreedom;	  return    ret    /    denominatorDegreesOfFreedom;    ret    /    denominatorDegreesOfFreedom;    	non-compiled	[CE]  missing  return  statement	16	None	replace
22	[BUG]  [BUGGY]  double  p  =  getDenominatorDegreesOfFreedom();  [CE]  variable  p  is  already  defined  in  method  getInitialDomain(double)  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  double  p  =  getDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	double  p  =  getDenominatorDegreesOfFreedom();	  return    ret    -    p;    double    p    =    getDenominatorDegreesOfFreedom();    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getInitialDomain(double)	42	None	replace
23	[BUG]  [BUGGY]  ret  -=  p;  double  p  =  getDenominatorDegreesOfFreedom();  [CE]  variable  p  is  already  defined  in  method  getInitialDomain(double)  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  -=  p;  double  p  =  getDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  -=  p;  double  p  =  getDenominatorDegreesOfFreedom();	  return    ret    -    p;    double    p    =    getDenominatorDegreesOfFreedom();    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getInitialDomain(double)	42	None	replace
24	[BUG]  [BUGGY]  return  ret  -  d;  double  p  =  getDenominatorDegreesOfFreedom();  [CE]  variable  p  is  already  defined  in  method  getInitialDomain(double)  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  -  d;  double  p  =  getDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  ret  -  d;  double  p  =  getDenominatorDegreesOfFreedom();	  return    ret    -    p;    double    p    =    getDenominatorDegreesOfFreedom();    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getInitialDomain(double)	42	None	replace
25	[BUG]  [BUGGY]  return  ret  /  p;  ret  /  p;  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  /  p;  ret  /  p;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return    ret    /    p;    ret  /  p;	  	non-compiled	[CE]  not  a  statement	6	None	add
26	[BUG]  [BUGGY]  return  ret  /  p;  double  ret  =  getNumberDenominatorDegreesOfFreedom();  [CE]  variable  ret  is  already  defined  in  method  getInitialDomain(double)  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  /  p;  double  ret  =  getNumberDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return    ret    /    p;    double  ret  =  getNumberDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  variable  ret  is  already  defined  in  method  getInitialDomain(double)	6	None	add
27	[BUG]  [BUGGY]  return  ret  /  p;  double  ret  =  getNumberDenominatorDegreesOfFreedom().doubleValue();  [CE]  variable  ret  is  already  defined  in  method  getInitialDomain(double)  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  /  p;  double  ret  =  getNumberDenominatorDegreesOfFreedom().doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return    ret    /    p;    double  ret  =  getNumberDenominatorDegreesOfFreedom().doubleValue();	  	non-compiled	[CE]  variable  ret  is  already  defined  in  method  getInitialDomain(double)	6	None	add
28	[BUG]  [BUGGY]  return  ret  /  p;  ret  -=  p;  [CE]  unreachable  statement  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  /  p;  ret  -=  p;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return    ret    /    p;    ret  -=  p;	  	non-compiled	[CE]  unreachable  statement	6	None	add
29	[BUG]  [BUGGY]  return  ret  /  p;  double  ret  =  getNumberDenominatorDegreesOfFreedom(p);  [CE]  variable  ret  is  already  defined  in  method  getInitialDomain(double)  [FE]            IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  /  p;  double  ret  =  getNumberDenominatorDegreesOfFreedom(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return    ret    /    p;    double  ret  =  getNumberDenominatorDegreesOfFreedom(p);	  	non-compiled	[CE]  variable  ret  is  already  defined  in  method  getInitialDomain(double)	6	None	add
30	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  p  /  ret;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	add	return  p  /  ret;	  return    p    /    denominatorDegrees_OfFreedom;    	compilable	  [FE]  IllegalArgumentException  	11	1	replace
31	[BUG]  [BUGGY]  return  p  /  ret;  [FE]  IllegalArgumentException  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  p  /  ret;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  p  /  ret;	  return    p    /    denominatorDegrees_OfFreedom;    	compilable	  [FE]  IllegalArgumentException  	11	1	replace
32	[BUG]  [BUGGY]  double  ret  =  getDenominatorDegreesOfFreedom();  [CE]  variable  ret  is  already  defined  in  method  getInitialDomain(double)  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  double  ret  =  getDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	double  ret  =  getDenominatorDegreesOfFreedom();	  return    ret    /    denominatorDegreesOfFreedom;    double    ret    =    getDenominatorDegreesOfFreedom();    	non-compiled	[CE]  variable  ret  is  already  defined  in  method  getInitialDomain(double)	35	None	replace
33	[BUG]  [BUGGY]  ret  /=  denominatorDegreesOfFreedom;  [CE]  missing  return  statement  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  /=  denominatorDegreesOfFreedom;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  /=  denominatorDegreesOfFreedom;	  return    ret    /    denominatorDegreesOfFreedom;    double    ret    =    getDenominatorDegreesOfFreedom();    	non-compiled	[CE]  missing  return  statement	35	None	replace
34	[BUG]  [BUGGY]  Double  ret  =  getDenominatorDegreesOfFreedom();  [CE]  variable  ret  is  already  defined  in  method  getInitialDomain(double)  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  Double  ret  =  getDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	Double  ret  =  getDenominatorDegreesOfFreedom();	  return    ret    /    denominatorDegreesOfFreedom;    double    ret    =    getDenominatorDegreesOfFreedom();    	non-compiled	[CE]  variable  ret  is  already  defined  in  method  getInitialDomain(double)	35	None	replace
35	[BUG]  [BUGGY]  ret  =  getDenominatorDegreesOfFreedom().doubleValue()  *  d;  [CE]  double  cannot  be  dereferenced  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  =  getDenominatorDegreesOfFreedom().doubleValue()  *  d;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  =  getDenominatorDegreesOfFreedom().doubleValue()  *  d;	  ret    =    getDenominatorDegreesOfFreedom().doubleValue()    *    p;    	non-compiled	[CE]  double  cannot  be  dereferenced	47	None	replace
36	[BUG]  [BUGGY]  ret  =  getNumberDenominatorDegreesOfFreedom().doubleValue()  *  p;  [CE]  cannot  find  symbol  [FE]                      IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  =  getNumberDenominatorDegreesOfFreedom().doubleValue()  *  p;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  =  getNumberDenominatorDegreesOfFreedom().doubleValue()  *  p;	  ret    =    getDenominatorDegreesOfFreedom().doubleValue()    *    p;    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
37	[BUG]  [BUGGY]  ret  =  getDenominatorDegreesOfFreedom().doubleValue()  /  p;  [CE]  double  cannot  be  dereferenced  [FE]                        IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  =  getDenominatorDegreesOfFreedom().doubleValue()  /  p;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  =  getDenominatorDegreesOfFreedom().doubleValue()  /  p;	  ret    =    getDenominatorDegreesOfFreedom().doubleValue()    *    p;    	non-compiled	[CE]  double  cannot  be  dereferenced	47	None	replace
38	[BUG]  [BUGGY]  ret  =  getNemeratorDegreesOfFreedom()  *  denominatorDegreesOfFreedom;  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  =  getNemeratorDegreesOfFreedom()  *  denominatorDegreesOfFreedom;  [BUGGY]      return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  =  getNemeratorDegreesOfFreedom()  *  denominatorDegreesOfFreedom;	  ret    =    getNemeratorDegreesOfFreedom()    /    denominatorDegreesOfFreedom;    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
39	[BUG]  [BUGGY]  ret  =  getNemeratorDegreesOfFreedom()  /  p;  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  =  getNemeratorDegreesOfFreedom()  /  p;  [BUGGY]      return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  =  getNemeratorDegreesOfFreedom()  /  p;	  ret    =    getNemeratorDegreesOfFreedom()    /    denominatorDegreesOfFreedom;    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
40	[BUG]  [BUGGY]  ret  =  getNumberDenominatorDegreesOfFreedom()  /.doubleValue();  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  =  getNumberDenominatorDegreesOfFreedom()  /.doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  =  getNumberDenominatorDegreesOfFreedom()  /.doubleValue();	  ret    =    getNumberDenominatorDegreesOfFreedom().doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
41	[BUG]  [BUGGY]  return  d  /  ret.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  d  /  ret.doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  d  /  ret.doubleValue();	  return    ret    /    d.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	3	None	replace
42	[BUG]  [BUGGY]  return  p  /  d.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  p  /  d.doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  p  /  d.doubleValue();	  return    ret    /    d.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	3	None	replace
43	[BUG]  [BUGGY]  return  d  *  ret.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  d  *  ret.doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  d  *  ret.doubleValue();	  return    ret    /    d.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	3	None	replace
44	[BUG]  [BUGGY]  double  p  =  getNumeratorDegreesOfFreedom();  [CE]  variable  p  is  already  defined  in  method  getInitialDomain(double)  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  double  p  =  getNumeratorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	double  p  =  getNumeratorDegreesOfFreedom();	  return    ret    -    p;    double    p    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getInitialDomain(double)	38	None	replace
45	[BUG]  [BUGGY]  ret  -=  p;  double  p  =  getNumeratorDegreesOfFreedom();  [CE]  variable  p  is  already  defined  in  method  getInitialDomain(double)  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  -=  p;  double  p  =  getNumeratorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  -=  p;  double  p  =  getNumeratorDegreesOfFreedom();	  return    ret    -    p;    double    p    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getInitialDomain(double)	38	None	replace
46	[BUG]  [BUGGY]  return  ret  -  d;  double  p  =  getNumeratorDegreesOfFreedom();  [CE]  variable  p  is  already  defined  in  method  getInitialDomain(double)  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  -  d;  double  p  =  getNumeratorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  ret  -  d;  double  p  =  getNumeratorDegreesOfFreedom();	  return    ret    -    p;    double    p    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getInitialDomain(double)	38	None	replace
47	[BUG]  [BUGGY]  return  denominatorDegreesOfFreedom  /  d.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  denominatorDegreesOfFreedom  /  d.doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  denominatorDegreesOfFreedom  /  d.doubleValue();	  return    d    /    denominatorDegreesOfFreedom.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	1	None	replace
48	[BUG]  [BUGGY]  ret  -=  p;  [CE]  missing  return  statement  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  -=  p;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  -=  p;	  return    ret    -    p;    ret    =    getNumberDenominatorDegreesOfFreedom();    	non-compiled	[CE]  missing  return  statement	25	None	replace
49	[BUG]  [BUGGY]  return  p  -  ret;  ret  =  getNumberDenominatorDegreesOfFreedom();  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  p  -  ret;  ret  =  getNumberDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  p  -  ret;  ret  =  getNumberDenominatorDegreesOfFreedom();	  return    ret    -    p;    ret    =    getNumberDenominatorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
50	[BUG]  [BUGGY]  ret  =  numeratorDegreesOfFreedom  -  p;  [CE]  missing  return  statement  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  =  numeratorDegreesOfFreedom  -  p;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  =  numeratorDegreesOfFreedom  -  p;	  return    ret    -    p;    ret    =    getNumberDenominatorDegreesOfFreedom();    	non-compiled	[CE]  missing  return  statement	25	None	replace
51	[BUG]  [BUGGY]  return  d  *  denominatorDegreesOfFreedom.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  d  *  denominatorDegreesOfFreedom.doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  d  *  denominatorDegreesOfFreedom.doubleValue();	  return    ret    *    denominatorDegreesOfFreedom.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	4	None	replace
52	[BUG]  [BUGGY]  return  p  *  denominatorDegreesOfFreedom.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  p  *  denominatorDegreesOfFreedom.doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  p  *  denominatorDegreesOfFreedom.doubleValue();	  return    ret    *    denominatorDegreesOfFreedom.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	4	None	replace
53	[BUG]  [BUGGY]  return  ret  *  d.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                      IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  *  d.doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  ret  *  d.doubleValue();	  return    ret    *    denominatorDegreesOfFreedom.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	4	None	replace
54	[BUG]  [BUGGY]  return  ret  *  p.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                        IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  *  p.doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  ret  *  p.doubleValue();	  return    ret    *    denominatorDegreesOfFreedom.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	4	None	replace
55	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom();  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom();	  return    ret    /    denominatorDegreesOfFreedom;    double    denominatorDegreesOfFreedom    =    getNumberDenominatorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
56	[BUG]  [BUGGY]  ret  /  d;  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom();  [CE]  not  a  statement  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  /  d;  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  /  d;  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom();	  return    ret    /    denominatorDegreesOfFreedom;    double    denominatorDegreesOfFreedom    =    getNumberDenominatorDegreesOfFreedom();    	non-compiled	[CE]  not  a  statement	18	None	replace
57	[BUG]  [BUGGY]  return  ret  /  p;  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom();  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  /  p;  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  ret  /  p;  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom();	  return    ret    /    denominatorDegreesOfFreedom;    double    denominatorDegreesOfFreedom    =    getNumberDenominatorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
58	[BUG]  [BUGGY]  p  =  getNumeratorDegreesOfFreedom();  [CE]  missing  return  statement  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  p  =  getNumeratorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	p  =  getNumeratorDegreesOfFreedom();	  return    ret    -    p;    p    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  missing  return  statement	43	None	replace
59	[BUG]  [BUGGY]  ret  -=  p;  p  =  getNumeratorDegreesOfFreedom();  [CE]  missing  return  statement  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  -=  p;  p  =  getNumeratorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  -=  p;  p  =  getNumeratorDegreesOfFreedom();	  return    ret    -    p;    p    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  missing  return  statement	43	None	replace
60	[BUG]  [BUGGY]  p  =  getNumberDegreesOfFreedom();  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  p  =  getNumberDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	p  =  getNumberDegreesOfFreedom();	  return    ret    -    p;    p    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
61	[BUG]  [BUGGY]  double  p  =  getNumberDenominatorDegreesOfFreedom();  [CE]  variable  p  is  already  defined  in  method  getInitialDomain(double)  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  double  p  =  getNumberDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	double  p  =  getNumberDenominatorDegreesOfFreedom();	  return    ret    -    p;    double    p    =    getNumberDenominatorDegreesOfFreedom();    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getInitialDomain(double)	40	None	replace
62	[BUG]  [BUGGY]  ret  -=  p;  double  p  =  getNumberDenominatorDegreesOfFreedom();  [CE]  variable  p  is  already  defined  in  method  getInitialDomain(double)  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  -=  p;  double  p  =  getNumberDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  -=  p;  double  p  =  getNumberDenominatorDegreesOfFreedom();	  return    ret    -    p;    double    p    =    getNumberDenominatorDegreesOfFreedom();    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getInitialDomain(double)	40	None	replace
63	[BUG]  [BUGGY]  return  p  -  ret;  ret  =  getNumeratorDegreesOfFreedom();  [CE]  unreachable  statement  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  p  -  ret;  ret  =  getNumeratorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  p  -  ret;  ret  =  getNumeratorDegreesOfFreedom();	  return    ret    -    p;    ret    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  unreachable  statement	37	None	replace
64	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  d  -  ret;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	add	return  d  -  ret;	  return    p    -    ret;    	compilable	  [FE]  IllegalArgumentException  	21	1	replace
65	[BUG]  [BUGGY]  return  d  -  ret;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  d  -  ret;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  d  -  ret;	  return    p    -    ret;    	compilable	  [FE]  IllegalArgumentException  	21	1	replace
66	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  p  -  d;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	add	return  p  -  d;	  return    p    -    ret;    	compilable	  [FE]  IllegalArgumentException  	21	3	replace
67	[BUG]  [BUGGY]  return  p  -  d;  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  p  -  d;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  p  -  d;	  return    p    -    ret;    	compilable	  [FE]  IllegalArgumentException  	21	3	replace
68	[BUG]  [BUGGY]  return  p  -  ret;  ret  -=  p;  [CE]  unreachable  statement  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  p  -  ret;  ret  -=  p;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  p  -  ret;  ret  -=  p;	  return    ret    -    p;    ret    -    p;    	non-compiled	[CE]  unreachable  statement	24	None	replace
69	[BUG]  [BUGGY]  return  ret  -  p;  ret  -=  p;  [CE]  unreachable  statement  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  -  p;  ret  -=  p;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  ret  -  p;  ret  -=  p;	  return    ret    -    p;    ret    -    p;    	non-compiled	[CE]  unreachable  statement	24	None	replace
70	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  missing  return  statement  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  return    ret    /    denominatorDegreesOfFreedom;    double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  missing  return  statement	17	None	replace
71	[BUG]  [BUGGY]  ret  /=  denominatorDegreesOfFreedom;  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  missing  return  statement  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  /=  denominatorDegreesOfFreedom;  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  /=  denominatorDegreesOfFreedom;  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  return    ret    /    denominatorDegreesOfFreedom;    double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  missing  return  statement	17	None	replace
72	[BUG]  [BUGGY]  ret  =  ret  /  denominatorDegreesOfFreedom;  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  missing  return  statement  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  =  ret  /  denominatorDegreesOfFreedom;  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  =  ret  /  denominatorDegreesOfFreedom;  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  return    ret    /    denominatorDegreesOfFreedom;    double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  missing  return  statement	17	None	replace
73	[BUG]  [BUGGY]  ret  -=  p;  ret  =  getNumeratorDegreesOfFreedom().doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  -=  p;  ret  =  getNumeratorDegreesOfFreedom().doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  -=  p;  ret  =  getNumeratorDegreesOfFreedom().doubleValue();	  return    ret    -    p;    ret    =    getNumeratorDegreesOfFreedom().doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	39	None	replace
74	[BUG]  [BUGGY]  return  p  -  ret;  ret  =  getNumeratorDegreesOfFreedom().doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  p  -  ret;  ret  =  getNumeratorDegreesOfFreedom().doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  p  -  ret;  ret  =  getNumeratorDegreesOfFreedom().doubleValue();	  return    ret    -    p;    ret    =    getNumeratorDegreesOfFreedom().doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	39	None	replace
75	[BUG]  [BUGGY]  ret  =  p  -  ret;  [CE]  missing  return  statement  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  =  p  -  ret;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  =  p  -  ret;	  return    ret    -    p;    ret    =    getNumeratorDegreesOfFreedom().doubleValue();    	non-compiled	[CE]  missing  return  statement	39	None	replace
76	[BUG]  [BUGGY]  return  ret  /  d;  ret  /  d;  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  /  d;  ret  /  d;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return    ret    /    d;    ret  /  d;	  	non-compiled	[CE]  not  a  statement	8	None	add
77	[BUG]  [BUGGY]  return  ret  /  d;  d  =  getNumeratorDegreesOfFreedom();  [CE]  unreachable  statement  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  /  d;  d  =  getNumeratorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return    ret    /    d;    d  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  unreachable  statement	8	None	add
78	[BUG]  [BUGGY]  return  ret  /  d;  d  =  getNumberDenominatorDegreesOfFreedom();  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  /  d;  d  =  getNumberDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return    ret    /    d;    d  =  getNumberDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
79	[BUG]  [BUGGY]  return  ret  /  d;  double  d  =  getNumberDenominatorDegreesOfFreedom();  [CE]  variable  d  is  already  defined  in  method  getInitialDomain(double)  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  /  d;  double  d  =  getNumberDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return    ret    /    d;    double  d  =  getNumberDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  variable  d  is  already  defined  in  method  getInitialDomain(double)	8	None	add
80	[BUG]  [BUGGY]  return  ret  /  d;  d  =  getNumeratorDegreesOfFreedom().doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]            IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  /  d;  d  =  getNumeratorDegreesOfFreedom().doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return    ret    /    d;    d  =  getNumeratorDegreesOfFreedom().doubleValue();	  	non-compiled	[CE]  double  cannot  be  dereferenced	8	None	add
81	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  missing  return  statement  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	  return    ret    /    denominatorDegreesOfFreedom;    double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    	non-compiled	[CE]  missing  return  statement	41	None	replace
82	[BUG]  [BUGGY]  ret  /=  denominatorDegreesOfFreedom;  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  missing  return  statement  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  /=  denominatorDegreesOfFreedom;  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  /=  denominatorDegreesOfFreedom;  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	  return    ret    /    denominatorDegreesOfFreedom;    double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    	non-compiled	[CE]  missing  return  statement	41	None	replace
83	[BUG]  [BUGGY]  n  /  denominatorDegreesOfFreedom;  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  not  a  statement  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  n  /  denominatorDegreesOfFreedom;  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	n  /  denominatorDegreesOfFreedom;  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	  return    ret    /    denominatorDegreesOfFreedom;    double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    	non-compiled	[CE]  not  a  statement	41	None	replace
84	[BUG]  [BUGGY]  ret  -=  p;  ret  =  getNumberDenominatorDegreesOfFreedom().doubleValue();  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  -=  p;  ret  =  getNumberDenominatorDegreesOfFreedom().doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  -=  p;  ret  =  getNumberDenominatorDegreesOfFreedom().doubleValue();	  return    ret    -    p;    ret    =    getNumberDenominatorDegreesOfFreedom().doubleValue();    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
85	[BUG]  [BUGGY]  return  p  -  ret;  ret  =  getNumberDenominatorDegreesOfFreedom().doubleValue();  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  p  -  ret;  ret  =  getNumberDenominatorDegreesOfFreedom().doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  p  -  ret;  ret  =  getNumberDenominatorDegreesOfFreedom().doubleValue();	  return    ret    -    p;    ret    =    getNumberDenominatorDegreesOfFreedom().doubleValue();    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
86	[BUG]  [BUGGY]  ret  =  getNumeratorDegreesOfFreedom().doubleValue()  *  1;  [CE]  double  cannot  be  dereferenced  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  =  getNumeratorDegreesOfFreedom().doubleValue()  *  1;  [BUGGY]      return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  =  getNumeratorDegreesOfFreedom().doubleValue()  *  1;	  ret    =    getNumeratorDegreesOfFreedom().doubleValue()    +    1;    	non-compiled	[CE]  double  cannot  be  dereferenced	12	None	replace
87	[BUG]  [BUGGY]  ret  =  getNumeratorDegreesOfFreedom().doubleValue()  /  1;  [CE]  double  cannot  be  dereferenced  [FE]                      IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  =  getNumeratorDegreesOfFreedom().doubleValue()  /  1;  [BUGGY]      return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  =  getNumeratorDegreesOfFreedom().doubleValue()  /  1;	  ret    =    getNumeratorDegreesOfFreedom().doubleValue()    +    1;    	non-compiled	[CE]  double  cannot  be  dereferenced	12	None	replace
88	[BUG]  [BUGGY]  return  ret  -  d;  ret  -  d;  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  -  d;  ret  -  d;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return    ret    -    d;    ret  -  d;	  	non-compiled	[CE]  not  a  statement	22	None	add
89	[BUG]  [BUGGY]  return  ret  -  d;  d  =  getNumeratorDegreesOfFreedom();  [CE]  unreachable  statement  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  -  d;  d  =  getNumeratorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return    ret    -    d;    d  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  unreachable  statement	22	None	add
90	[BUG]  [BUGGY]  return  ret  -  d;  d  =  getDenominatorDegreesOfFreedom();  [CE]  unreachable  statement  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  -  d;  d  =  getDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return    ret    -    d;    d  =  getDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  unreachable  statement	22	None	add
91	[BUG]  [BUGGY]  return  ret  -  d;  d  =  getNumberDenominatorDegreesOfFreedom();  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  -  d;  d  =  getNumberDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return    ret    -    d;    d  =  getNumberDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  cannot  find  symbol	22	None	add
92	[BUG]  [BUGGY]  return  ret  -  d;  d  =  getDenominatorDegreesOfFreedom();  ret  -=  d;  [CE]  unreachable  statement  [FE]            IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  -  d;  d  =  getDenominatorDegreesOfFreedom();  ret  -=  d;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return    ret    -    d;    d  =  getDenominatorDegreesOfFreedom();  ret  -=  d;	  	non-compiled	[CE]  unreachable  statement	22	None	add
93	[BUG]  [BUGGY]  double  p  =  getNumeratorDegreesOfFreedom().doubleValue();  [CE]  variable  p  is  already  defined  in  method  getInitialDomain(double)  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  double  p  =  getNumeratorDegreesOfFreedom().doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	double  p  =  getNumeratorDegreesOfFreedom().doubleValue();	  return    ret    -    p;    double    p    =    getNumeratorDegreesOfFreedom().doubleValue();    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getInitialDomain(double)	44	None	replace
94	[BUG]  [BUGGY]  ret  -=  p;  double  p  =  getNumeratorDegreesOfFreedom().doubleValue();  [CE]  variable  p  is  already  defined  in  method  getInitialDomain(double)  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  -=  p;  double  p  =  getNumeratorDegreesOfFreedom().doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  -=  p;  double  p  =  getNumeratorDegreesOfFreedom().doubleValue();	  return    ret    -    p;    double    p    =    getNumeratorDegreesOfFreedom().doubleValue();    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getInitialDomain(double)	44	None	replace
95	[BUG]  [BUGGY]  return  ret  -  d;  double  p  =  getNumeratorDegreesOfFreedom().doubleValue();  [CE]  variable  p  is  already  defined  in  method  getInitialDomain(double)  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  -  d;  double  p  =  getNumeratorDegreesOfFreedom().doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  ret  -  d;  double  p  =  getNumeratorDegreesOfFreedom().doubleValue();	  return    ret    -    p;    double    p    =    getNumeratorDegreesOfFreedom().doubleValue();    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getInitialDomain(double)	44	None	replace
96	[BUG]  [BUGGY]  return  p  -  ret;  ret  =  getDenominatorDegreesOfFreedom();  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  p  -  ret;  ret  =  getDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return    p    -    ret;    ret  =  getDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  unreachable  statement	20	None	add
97	[BUG]  [BUGGY]  return  p  -  ret;  ret  =  getDenominatorDegreesOfFreedom().doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  p  -  ret;  ret  =  getDenominatorDegreesOfFreedom().doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return    p    -    ret;    ret  =  getDenominatorDegreesOfFreedom().doubleValue();	  	non-compiled	[CE]  double  cannot  be  dereferenced	20	None	add
98	[BUG]  [BUGGY]  return  denominatorDegreesOfFreedom  /  p.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  denominatorDegreesOfFreedom  /  p.doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  denominatorDegreesOfFreedom  /  p.doubleValue();	  return    p    /    denominatorDegreesOfFreedom.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	2	None	replace
99	[BUG]  [BUGGY]  return  p  /  denominatorDegreesOfFreedom;  ret  =  getNumeratorDegreesOfFreedom();  [CE]  unreachable  statement  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  p  /  denominatorDegreesOfFreedom;  ret  =  getNumeratorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  p  /  denominatorDegreesOfFreedom;  ret  =  getNumeratorDegreesOfFreedom();	  return    ret    /    denominatorDegreesOfFreedom;    ret    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  unreachable  statement	33	None	replace
100	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  d  /  ret;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	add	return  d  /  ret;	  return    ret    /    d;    	compilable	  [FE]  IllegalArgumentException  	9	1	replace
101	[BUG]  [BUGGY]  return  d  /  ret;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  d  /  ret;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  d  /  ret;	  return    ret    /    d;    	compilable	  [FE]  IllegalArgumentException  	9	1	replace
102	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  /  d  +  denominatorDegreesOfFreedom;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	add	return  ret  /  d  +  denominatorDegreesOfFreedom;	  return    ret    /    d;    	compilable	  [FE]  IllegalArgumentException  	9	1	replace
103	[BUG]  [BUGGY]  return  ret  /  d  +  denominatorDegreesOfFreedom;  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  /  d  +  denominatorDegreesOfFreedom;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  ret  /  d  +  denominatorDegreesOfFreedom;	  return    ret    /    d;    	compilable	  [FE]  IllegalArgumentException  	9	1	replace
104	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  /  d  +  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	add	return  ret  /  d  +  1;	  return    ret    /    d;    	compilable	  [FE]  IllegalArgumentException  	9	1	replace
105	[BUG]  [BUGGY]  return  ret  /  d  +  1;  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  /  d  +  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  ret  /  d  +  1;	  return    ret    /    d;    	compilable	  [FE]  IllegalArgumentException  	9	1	replace
106	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  *  p;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	add	return  ret  *  p;	  return    ret    /    p;    	compilable	  [FE]  IllegalArgumentException  	7	1	replace
107	[BUG]  [BUGGY]  return  ret  *  p;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  *  p;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  ret  *  p;	  return    ret    /    p;    	compilable	  [FE]  IllegalArgumentException  	7	1	replace
108	[BUG]  [BUGGY]  ret  /  p;  [CE]  not  a  statement  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  /  p;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  /  p;	  return    ret    -    p;    ret    /    p;    	non-compiled	[CE]  not  a  statement	27	None	replace
109	[BUG]  [BUGGY]  return  p  -  ret;  ret  /  p;  [CE]  not  a  statement  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  p  -  ret;  ret  /  p;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  p  -  ret;  ret  /  p;	  return    ret    -    p;    ret    /    p;    	non-compiled	[CE]  not  a  statement	27	None	replace
110	[BUG]  [BUGGY]  return  ret  -  d;  ret  /  p;  [CE]  not  a  statement  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  -  d;  ret  /  p;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  ret  -  d;  ret  /  p;	  return    ret    -    p;    ret    /    p;    	non-compiled	[CE]  not  a  statement	27	None	replace
111	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  -  d  +  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	add	return  ret  -  d  +  1;	  return    ret    -    d;    	compilable	  [FE]  IllegalArgumentException  	23	3	replace
112	[BUG]  [BUGGY]  return  ret  -  d  +  1;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  -  d  +  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  ret  -  d  +  1;	  return    ret    -    d;    	compilable	  [FE]  IllegalArgumentException  	23	3	replace
113	[BUG]  [BUGGY]  ret  -=  p;  ret  =  getNumberDenominatorDegreesOfFreedom()  +  p;  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  -=  p;  ret  =  getNumberDenominatorDegreesOfFreedom()  +  p;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  -=  p;  ret  =  getNumberDenominatorDegreesOfFreedom()  +  p;	  return    ret    -    p;    ret    =    getNumberDenominatorDegreesOfFreedom()    +    p;    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
114	[BUG]  [BUGGY]  ret  =  getNumberDenominatorDegreesOfFreedom()  +  p;  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  =  getNumberDenominatorDegreesOfFreedom()  +  p;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  =  getNumberDenominatorDegreesOfFreedom()  +  p;	  return    ret    -    p;    ret    =    getNumberDenominatorDegreesOfFreedom()    +    p;    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
115	[BUG]  [BUGGY]  return  p  -  ret;  ret  =  getNumberDenominatorDegreesOfFreedom()  +  p;  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  p  -  ret;  ret  =  getNumberDenominatorDegreesOfFreedom()  +  p;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  p  -  ret;  ret  =  getNumberDenominatorDegreesOfFreedom()  +  p;	  return    ret    -    p;    ret    =    getNumberDenominatorDegreesOfFreedom()    +    p;    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
116	[BUG]  [BUGGY]  return  d  /  m;  [CE]  cannot  find  symbol  m  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  d  /  m;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  d  /  m;	  return    d    /    denominatorDegrees_OfFreedom;    	non-compiled	[CE]  cannot  find  symbol  m	10	None	replace
117	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  d  *  ret;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	add	return  d  *  ret;	  return    d    /    denominatorDegrees_OfFreedom;    	compilable	  [FE]  IllegalArgumentException  	10	1	replace
118	[BUG]  [BUGGY]  return  d  *  ret;  [FE]  IllegalArgumentException  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  d  *  ret;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  d  *  ret;	  return    d    /    denominatorDegrees_OfFreedom;    	compilable	  [FE]  IllegalArgumentException  	10	1	replace
119	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  p  -  ret  +  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	add	return  p  -  ret  +  1;	  return    p    -    ret;    	compilable	  [FE]  IllegalArgumentException  	21	2	replace
120	[BUG]  [BUGGY]  return  p  -  ret  +  1;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  p  -  ret  +  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  p  -  ret  +  1;	  return    p    -    ret;    	compilable	  [FE]  IllegalArgumentException  	21	2	replace
121	[BUG]  [BUGGY]  ret  =  getNumeratorDegreesOfFreedom().doubleValue()  *  p;  [CE]  double  cannot  be  dereferenced  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  =  getNumeratorDegreesOfFreedom().doubleValue()  *  p;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  =  getNumeratorDegreesOfFreedom().doubleValue()  *  p;	  ret    =    getDenominatorDegreesOfFreedom().doubleValue()    *    p;    	non-compiled	[CE]  double  cannot  be  dereferenced	47	None	replace
122	[BUG]  [BUGGY]  return  p  /  denominatorDegreesOfFreedom;  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom();  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  p  /  denominatorDegreesOfFreedom;  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  p  /  denominatorDegreesOfFreedom;  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom();	  return    ret    /    denominatorDegreesOfFreedom;    double    denominatorDegreesOfFreedom    =    getNumberDenominatorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
123	[BUG]  [BUGGY]  return  ret  *  denominatorDegreesOfFreedom;  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom();  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  *  denominatorDegreesOfFreedom;  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  ret  *  denominatorDegreesOfFreedom;  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom();	  return    ret    /    denominatorDegreesOfFreedom;    double    denominatorDegreesOfFreedom    =    getNumberDenominatorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
124	[BUG]  [BUGGY]  ret  /  denominatorDegreesOfFreedom;  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom();  [CE]  not  a  statement  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  /  denominatorDegreesOfFreedom;  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  /  denominatorDegreesOfFreedom;  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom();	  return    ret    /    denominatorDegreesOfFreedom;    double    denominatorDegreesOfFreedom    =    getNumberDenominatorDegreesOfFreedom();    	non-compiled	[CE]  not  a  statement	18	None	replace
125	[BUG]  [BUGGY]  ret  -  d;  double  p  =  getNumberDenominatorDegreesOfFreedom();  [CE]  not  a  statement  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  -  d;  double  p  =  getNumberDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  -  d;  double  p  =  getNumberDenominatorDegreesOfFreedom();	  return    ret    -    p;    double    p    =    getNumberDenominatorDegreesOfFreedom();    	non-compiled	[CE]  not  a  statement	40	None	replace
126	[BUG]  [BUGGY]  return  ret  -  d;  double  p  =  getNumberDenominatorDegreesOfFreedom();  [CE]  variable  p  is  already  defined  in  method  getInitialDomain(double)  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  -  d;  double  p  =  getNumberDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  ret  -  d;  double  p  =  getNumberDenominatorDegreesOfFreedom();	  return    ret    -    p;    double    p    =    getNumberDenominatorDegreesOfFreedom();    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getInitialDomain(double)	40	None	replace
127	[BUG]  [BUGGY]  ret  -  p;  double  p  =  getNumberDenominatorDegreesOfFreedom();  [CE]  not  a  statement  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  -  p;  double  p  =  getNumberDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  -  p;  double  p  =  getNumberDenominatorDegreesOfFreedom();	  return    ret    -    p;    double    p    =    getNumberDenominatorDegreesOfFreedom();    	non-compiled	[CE]  not  a  statement	40	None	replace
128	[BUG]  [BUGGY]  ret  -  p;  [CE]  not  a  statement  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  -  p;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  -  p;	  return    ret    -    p;    ret    -    p;    	non-compiled	[CE]  not  a  statement	24	None	replace
129	[BUG]  [BUGGY]  return  p  -  ret;  p  -  p;  [CE]  not  a  statement  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  p  -  ret;  p  -  p;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  p  -  ret;  p  -  p;	  return    ret    -    p;    ret    -    p;    	non-compiled	[CE]  not  a  statement	24	None	replace
130	[BUG]  [BUGGY]  return  ret  /  p;  ret  -  p;  [CE]  not  a  statement  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  /  p;  ret  -  p;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  ret  /  p;  ret  -  p;	  return    ret    -    p;    ret    -    p;    	non-compiled	[CE]  not  a  statement	24	None	replace
131	[BUG]  [BUGGY]  return  ret  -  d;  ret  -  p;  [CE]  not  a  statement  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  -  d;  ret  -  p;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  ret  -  d;  ret  -  p;	  return    ret    -    p;    ret    -    p;    	non-compiled	[CE]  not  a  statement	24	None	replace
132	[BUG]  [BUGGY]  ret  =  Math.max(ret,  1.0);  [CE]  missing  return  statement  [FE]                        IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  =  Math.max(ret,  1.0);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  =  Math.max(ret,  1.0);	  ret    =    Math.max(ret,    p);    	non-compiled	[CE]  missing  return  statement	32	None	replace
133	[BUG]  [BUGGY]  return  ret  *  denominatorDegreesOfFreedom;  ret  =  getNumeratorDegreesOfFreedom();  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  *  denominatorDegreesOfFreedom;  ret  =  getNumeratorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return    ret    *    denominatorDegreesOfFreedom;    ret  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  unreachable  statement	14	None	add
134	[BUG]  [BUGGY]  return  ret  *  denominatorDegreesOfFreedom;  ret  =  getDenominatorDegreesOfFreedom();  [CE]  unreachable  statement  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  *  denominatorDegreesOfFreedom;  ret  =  getDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return    ret    *    denominatorDegreesOfFreedom;    ret  =  getDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  unreachable  statement	14	None	add
135	[BUG]  [BUGGY]  return  ret  *  denominatorDegreesOfFreedom;  ret  =  getNumberDenominatorDegreesOfFreedom();  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  *  denominatorDegreesOfFreedom;  ret  =  getNumberDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return    ret    *    denominatorDegreesOfFreedom;    ret  =  getNumberDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  cannot  find  symbol	14	None	add
136	[BUG]  [BUGGY]  return  ret  *  denominatorDegreesOfFreedom;  ret  =  getNumeratorDegreesOfFreedom().doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  *  denominatorDegreesOfFreedom;  ret  =  getNumeratorDegreesOfFreedom().doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return    ret    *    denominatorDegreesOfFreedom;    ret  =  getNumeratorDegreesOfFreedom().doubleValue();	  	non-compiled	[CE]  double  cannot  be  dereferenced	14	None	add
137	[BUG]  [BUGGY]  return  ret  /  d;  double  d  =  getNumeratorDegreesOfFreedom();  [CE]  variable  d  is  already  defined  in  method  getInitialDomain(double)  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  /  d;  double  d  =  getNumeratorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return    ret    /    d;    double  d  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  variable  d  is  already  defined  in  method  getInitialDomain(double)	8	None	add
138	[BUG]  [BUGGY]  return  ret  /  d;  double  ret  =  getNumeratorDegreesOfFreedom();  [CE]  variable  ret  is  already  defined  in  method  getInitialDomain(double)  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  /  d;  double  ret  =  getNumeratorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return    ret    /    d;    double  ret  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  variable  ret  is  already  defined  in  method  getInitialDomain(double)	8	None	add
139	[BUG]  [BUGGY]  return  d  /  numeratorDegrees_OfFreedom;  [CE]  cannot  find  symbol  numeratorDegrees_OfFreedom  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  d  /  numeratorDegrees_OfFreedom;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  d  /  numeratorDegrees_OfFreedom;	  return    d    /    denominatorDegrees_OfFreedom;    	non-compiled	[CE]  cannot  find  symbol  numeratorDegrees_OfFreedom	10	None	replace
140	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  d  /  numeratorDegreesOfFreedom;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	add	return  d  /  numeratorDegreesOfFreedom;	  return    d    /    denominatorDegrees_OfFreedom;    	compilable	  [FE]  AssertionFailedError  	10	1	replace
141	[BUG]  [BUGGY]  return  d  /  numeratorDegreesOfFreedom;  [FE]  AssertionFailedError  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  d  /  numeratorDegreesOfFreedom;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  d  /  numeratorDegreesOfFreedom;	  return    d    /    denominatorDegrees_OfFreedom;    	compilable	  [FE]  AssertionFailedError  	10	1	replace
142	[BUG]  [BUGGY]  ret  =  getNumeratorDegreesOfFreedom()  /  denominatorDegreesOfFreedom;  [CE]  missing  return  statement  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  =  getNumeratorDegreesOfFreedom()  /  denominatorDegreesOfFreedom;  [BUGGY]      return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  =  getNumeratorDegreesOfFreedom()  /  denominatorDegreesOfFreedom;	  ret    =    getNemeratorDegreesOfFreedom()    /    denominatorDegreesOfFreedom;    	non-compiled	[CE]  missing  return  statement	13	None	replace
143	[BUG]  [BUGGY]  return  ret  -  d;  ret  =  getNumeratorDegreesOfFreedom();  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  -  d;  ret  =  getNumeratorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return    ret    -    d;    ret  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  unreachable  statement	22	None	add
144	[BUG]  [BUGGY]  return  ret  -  d;  double  d  =  getNumeratorDegreesOfFreedom();  [CE]  variable  d  is  already  defined  in  method  getInitialDomain(double)  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  -  d;  double  d  =  getNumeratorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return    ret    -    d;    double  d  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  variable  d  is  already  defined  in  method  getInitialDomain(double)	22	None	add
145	[BUG]  [BUGGY]  return  ret  -  d;  ret  =  getNumberDenominatorDegreesOfFreedom();  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  -  d;  ret  =  getNumberDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return    ret    -    d;    ret  =  getNumberDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  cannot  find  symbol	22	None	add
146	[BUG]  [BUGGY]  return  p  /  denominatorDegreesOfFreedom;  ret  =  getNumberDenominatorDegreesOfFreedom();  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  p  /  denominatorDegreesOfFreedom;  ret  =  getNumberDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  p  /  denominatorDegreesOfFreedom;  ret  =  getNumberDenominatorDegreesOfFreedom();	  return    ret    /    denominatorDegreesOfFreedom;    ret    =    getNumberDenominatorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
147	[BUG]  [BUGGY]  return  ret  /  denominatorDegreesOfFreedom  +  p;  ret  /  denominatorDegreesOfFreedom;  [CE]  not  a  statement  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  /  denominatorDegreesOfFreedom  +  p;  ret  /  denominatorDegreesOfFreedom;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  ret  /  denominatorDegreesOfFreedom  +  p;  ret  /  denominatorDegreesOfFreedom;	  return    ret    /    denominatorDegreesOfFreedom;    ret    /    denominatorDegreesOfFreedom;    	non-compiled	[CE]  not  a  statement	16	None	replace
148	[BUG]  [BUGGY]  return  p  -  ret;  p  =  getNumeratorDegreesOfFreedom();  [CE]  unreachable  statement  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  p  -  ret;  p  =  getNumeratorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  p  -  ret;  p  =  getNumeratorDegreesOfFreedom();	  return    ret    -    p;    p    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  unreachable  statement	43	None	replace
149	[BUG]  [BUGGY]  return  ret  -  d;  ret  =  getNumberDenominatorDegreesOfFreedom().doubleValue();  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  -  d;  ret  =  getNumberDenominatorDegreesOfFreedom().doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  ret  -  d;  ret  =  getNumberDenominatorDegreesOfFreedom().doubleValue();	  return    ret    -    p;    ret    =    getNumberDenominatorDegreesOfFreedom().doubleValue();    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
150	[BUG]  [BUGGY]  ret  /  denominatorDegreesOfFreedom;  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  not  a  statement  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  /  denominatorDegreesOfFreedom;  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  /  denominatorDegreesOfFreedom;  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	  return    ret    /    denominatorDegreesOfFreedom;    double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    	non-compiled	[CE]  not  a  statement	41	None	replace
151	[BUG]  [BUGGY]  double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  missing  return  statement  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  return    ret    /    denominatorDegreesOfFreedom;    double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    	non-compiled	[CE]  missing  return  statement	41	None	replace
152	[BUG]  [BUGGY]  ret  /  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  unexpected  type  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  /  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  /  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  return    ret    /    denominatorDegreesOfFreedom;    double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  unexpected  type	17	None	replace
153	[BUG]  [BUGGY]  ret  /  denominatorDegreesOfFreedom;  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  not  a  statement  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  /  denominatorDegreesOfFreedom;  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  /  denominatorDegreesOfFreedom;  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  return    ret    /    denominatorDegreesOfFreedom;    double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  not  a  statement	17	None	replace
154	[BUG]  [BUGGY]  return  ret  -  d;  ret  =  getNumeratorDegreesOfFreedom().doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  -  d;  ret  =  getNumeratorDegreesOfFreedom().doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  ret  -  d;  ret  =  getNumeratorDegreesOfFreedom().doubleValue();	  return    ret    -    p;    ret    =    getNumeratorDegreesOfFreedom().doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	39	None	replace
155	[BUG]  [BUGGY]  return  p  -  ret;  ret  =  getNumberDenominatorDegreesOfFreedom()  +  denominatorDegreesOfFreedom;  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  p  -  ret;  ret  =  getNumberDenominatorDegreesOfFreedom()  +  denominatorDegreesOfFreedom;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  p  -  ret;  ret  =  getNumberDenominatorDegreesOfFreedom()  +  denominatorDegreesOfFreedom;	  return    ret    -    p;    ret    =    getNumberDenominatorDegreesOfFreedom()    +    p;    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
156	[BUG]  [BUGGY]  return  ret  -  d;  ret  =  getNumberDenominatorDegreesOfFreedom()  +  p;  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  -  d;  ret  =  getNumberDenominatorDegreesOfFreedom()  +  p;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  ret  -  d;  ret  =  getNumberDenominatorDegreesOfFreedom()  +  p;	  return    ret    -    p;    ret    =    getNumberDenominatorDegreesOfFreedom()    +    p;    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
157	[BUG]  [BUGGY]  return  p  -  ret;  ret  =  getNemeratorDegreesOfFreedom();  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  p  -  ret;  ret  =  getNemeratorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return    p    -    ret;    ret  =  getNemeratorDegreesOfFreedom();	  	non-compiled	[CE]  cannot  find  symbol	20	None	add
158	[BUG]  [BUGGY]  return  ret  /  p;  double  p  =  getNumeratorDegreesOfFreedom();  [CE]  variable  p  is  already  defined  in  method  getInitialDomain(double)  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  /  p;  double  p  =  getNumeratorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return    ret    /    p;    double  p  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getInitialDomain(double)	6	None	add
159	[BUG]  [BUGGY]  return  ret  /  p;  ret  =  getNumeratorDegreesOfFreedom();  [CE]  unreachable  statement  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  /  p;  ret  =  getNumeratorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return    ret    /    p;    ret  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  unreachable  statement	6	None	add
160	[BUG]  [BUGGY]  return  ret  /  p;  double  p  =  getNumberDenominatorDegreesOfFreedom();  [CE]  variable  p  is  already  defined  in  method  getInitialDomain(double)  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  /  p;  double  p  =  getNumberDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return    ret    /    p;    double  p  =  getNumberDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getInitialDomain(double)	6	None	add
161	[BUG]  [BUGGY]  return  ret  /  p;  double  p  =  getNumeratorDegreesOfFreedom().doubleValue();  [CE]  variable  p  is  already  defined  in  method  getInitialDomain(double)  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  /  p;  double  p  =  getNumeratorDegreesOfFreedom().doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return    ret    /    p;    double  p  =  getNumeratorDegreesOfFreedom().doubleValue();	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getInitialDomain(double)	6	None	add
162	[BUG]  [BUGGY]  return  p  -  ret;  double  p  =  getDenominatorDegreesOfFreedom();  [CE]  variable  p  is  already  defined  in  method  getInitialDomain(double)  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  p  -  ret;  double  p  =  getDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  p  -  ret;  double  p  =  getDenominatorDegreesOfFreedom();	  return    ret    -    p;    double    p    =    getDenominatorDegreesOfFreedom();    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getInitialDomain(double)	42	None	replace
163	[BUG]  [BUGGY]  ret  -  p;  double  p  =  getDenominatorDegreesOfFreedom();  [CE]  not  a  statement  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  -  p;  double  p  =  getDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  -  p;  double  p  =  getDenominatorDegreesOfFreedom();	  return    ret    -    p;    double    p    =    getDenominatorDegreesOfFreedom();    	non-compiled	[CE]  not  a  statement	42	None	replace
164	[BUG]  [BUGGY]  ret  =  getDenominatorDegreesOfFreedom().doubleValue()  +  1;  [CE]  double  cannot  be  dereferenced  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  =  getDenominatorDegreesOfFreedom().doubleValue()  +  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  =  getDenominatorDegreesOfFreedom().doubleValue()  +  1;	  ret    =    getDenominatorDegreesOfFreedom().doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	30	None	replace
165	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  p  /  numeratorDegreesOfFreedom;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	add	return  p  /  numeratorDegreesOfFreedom;	  return    p    /    denominatorDegrees_OfFreedom;    	compilable	  [FE]  AssertionFailedError  	11	1	replace
166	[BUG]  [BUGGY]  return  p  /  numeratorDegreesOfFreedom;  [FE]  AssertionFailedError  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  p  /  numeratorDegreesOfFreedom;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  p  /  numeratorDegreesOfFreedom;	  return    p    /    denominatorDegrees_OfFreedom;    	compilable	  [FE]  AssertionFailedError  	11	1	replace
167	[BUG]  [BUGGY]  return  ret  -  denominatorDegreesOfFreedom;  double  p  =  getNumeratorDegreesOfFreedom();  [CE]  variable  p  is  already  defined  in  method  getInitialDomain(double)  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  -  denominatorDegreesOfFreedom;  double  p  =  getNumeratorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  ret  -  denominatorDegreesOfFreedom;  double  p  =  getNumeratorDegreesOfFreedom();	  return    ret    -    p;    double    p    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getInitialDomain(double)	38	None	replace
168	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  -  denominatorDegreesOfFreedom;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	add	return  ret  -  denominatorDegreesOfFreedom;	  return    ret    -    p;    double    p    =    getNumeratorDegreesOfFreedom();    	compilable	  [FE]  IllegalArgumentException  	38	3	replace
169	[BUG]  [BUGGY]  return  ret  -  denominatorDegreesOfFreedom;  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  -  denominatorDegreesOfFreedom;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  ret  -  denominatorDegreesOfFreedom;	  return    ret    -    p;    double    p    =    getNumeratorDegreesOfFreedom();    	compilable	  [FE]  IllegalArgumentException  	38	3	replace
170	[BUG]  [BUGGY]  return  p  -  ret;  double  p  =  getNumeratorDegreesOfFreedom().doubleValue();  [CE]  variable  p  is  already  defined  in  method  getInitialDomain(double)  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  p  -  ret;  double  p  =  getNumeratorDegreesOfFreedom().doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  p  -  ret;  double  p  =  getNumeratorDegreesOfFreedom().doubleValue();	  return    ret    -    p;    double    p    =    getNumeratorDegreesOfFreedom().doubleValue();    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getInitialDomain(double)	44	None	replace
171	[BUG]  [BUGGY]  ret  -  p;  double  p  =  getNumeratorDegreesOfFreedom().doubleValue();  [CE]  not  a  statement  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  -  p;  double  p  =  getNumeratorDegreesOfFreedom().doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  -  p;  double  p  =  getNumeratorDegreesOfFreedom().doubleValue();	  return    ret    -    p;    double    p    =    getNumeratorDegreesOfFreedom().doubleValue();    	non-compiled	[CE]  not  a  statement	44	None	replace
172	[BUG]  [BUGGY]  return  p  -  ret;  double  p  =  getNumeratorDegreesOfFreedom();  [CE]  variable  p  is  already  defined  in  method  getInitialDomain(double)  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  p  -  ret;  double  p  =  getNumeratorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  p  -  ret;  double  p  =  getNumeratorDegreesOfFreedom();	  return    ret    -    p;    double    p    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getInitialDomain(double)	38	None	replace
173	[BUG]  [BUGGY]  return  ret  /  p;  ret  =  getNumberDenominatorDegreesOfFreedom();  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  /  p;  ret  =  getNumberDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  ret  /  p;  ret  =  getNumberDenominatorDegreesOfFreedom();	  return    ret    /    denominatorDegreesOfFreedom;    ret    =    getNumberDenominatorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
174	[BUG]  [BUGGY]  return  ret  -  d;  double  d  =  getDenominatorDegreesOfFreedom();  [CE]  variable  d  is  already  defined  in  method  getInitialDomain(double)  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  -  d;  double  d  =  getDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return    ret    -    d;    double  d  =  getDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  variable  d  is  already  defined  in  method  getInitialDomain(double)	22	None	add
175	[BUG]  [BUGGY]  ret  =  getNumeratorDegreesOfFreedom().doubleValue()  +  m;  [CE]  double  cannot  be  dereferenced  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  =  getNumeratorDegreesOfFreedom().doubleValue()  +  m;  [BUGGY]      return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  =  getNumeratorDegreesOfFreedom().doubleValue()  +  m;	  ret    =    getNumeratorDegreesOfFreedom().doubleValue()    +    denominatorDegreesOfFreedom;    	non-compiled	[CE]  double  cannot  be  dereferenced	46	None	replace
176	[BUG]  [BUGGY]  ret  -  d;  ret  =  getNumberDenominatorDegreesOfFreedom().doubleValue();  [CE]  not  a  statement  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  -  d;  ret  =  getNumberDenominatorDegreesOfFreedom().doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  -  d;  ret  =  getNumberDenominatorDegreesOfFreedom().doubleValue();	  return    ret    -    p;    ret    =    getNumberDenominatorDegreesOfFreedom().doubleValue();    	non-compiled	[CE]  not  a  statement	26	None	replace
177	[BUG]  [BUGGY]  return  p  -  ret;  ret  -  p;  [CE]  not  a  statement  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  p  -  ret;  ret  -  p;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  p  -  ret;  ret  -  p;	  return    ret    -    p;    ret    -    p;    	non-compiled	[CE]  not  a  statement	24	None	replace
178	[BUG]  [BUGGY]  p  -  ret;  [CE]  not  a  statement  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  p  -  ret;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	p  -  ret;	  return    ret    -    p;    p    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  not  a  statement	43	None	replace
179	[BUG]  [BUGGY]  double  ret  =  ret  /  denominatorDegreesOfFreedom;  ret  /  denominatorDegreesOfFreedom;  [CE]  not  a  statement  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  double  ret  =  ret  /  denominatorDegreesOfFreedom;  ret  /  denominatorDegreesOfFreedom;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	double  ret  =  ret  /  denominatorDegreesOfFreedom;  ret  /  denominatorDegreesOfFreedom;	  return    ret    /    denominatorDegreesOfFreedom;    ret    /    denominatorDegreesOfFreedom;    	non-compiled	[CE]  not  a  statement	16	None	replace
180	[BUG]  [BUGGY]  return  ret  /  p;  ret  /  denominatorDegreesOfFreedom;  [CE]  not  a  statement  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  /  p;  ret  /  denominatorDegreesOfFreedom;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  ret  /  p;  ret  /  denominatorDegreesOfFreedom;	  return    ret    /    denominatorDegreesOfFreedom;    ret    /    denominatorDegreesOfFreedom;    	non-compiled	[CE]  not  a  statement	16	None	replace
181	[BUG]  [BUGGY]  ret  =  getDenominatorDegreesOfFreedom().doubleValue()  *  p  +  denominatorDegreesOfFreedom;  [CE]  double  cannot  be  dereferenced  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  =  getDenominatorDegreesOfFreedom().doubleValue()  *  p  +  denominatorDegreesOfFreedom;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  =  getDenominatorDegreesOfFreedom().doubleValue()  *  p  +  denominatorDegreesOfFreedom;	  ret    =    getDenominatorDegreesOfFreedom().doubleValue()    *    p;    	non-compiled	[CE]  double  cannot  be  dereferenced	47	None	replace
182	[BUG]  [BUGGY]  return  ret  /  p;  double  p  =  getDenominatorDegreesOfFreedom();  [CE]  variable  p  is  already  defined  in  method  getInitialDomain(double)  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  /  p;  double  p  =  getDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return    ret    /    p;    double  p  =  getDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getInitialDomain(double)	6	None	add
183	[BUG]  [BUGGY]  return  ret  /  p;  p  =  getNumeratorDegreesOfFreedom();  [CE]  unreachable  statement  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  /  p;  p  =  getNumeratorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return    ret    /    p;    p  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  unreachable  statement	6	None	add
184	[BUG]  [BUGGY]  ret  -  d;  ret  =  getNumeratorDegreesOfFreedom().doubleValue();  [CE]  not  a  statement  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  -  d;  ret  =  getNumeratorDegreesOfFreedom().doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  -  d;  ret  =  getNumeratorDegreesOfFreedom().doubleValue();	  return    ret    -    p;    ret    =    getNumeratorDegreesOfFreedom().doubleValue();    	non-compiled	[CE]  not  a  statement	39	None	replace
185	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  -  d  /  denominatorDegreesOfFreedom;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	add	return  ret  -  d  /  denominatorDegreesOfFreedom;	  return    ret    -    d;    	compilable	  [FE]  IllegalArgumentException  	23	1	replace
186	[BUG]  [BUGGY]  return  ret  -  d  /  denominatorDegreesOfFreedom;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  -  d  /  denominatorDegreesOfFreedom;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  ret  -  d  /  denominatorDegreesOfFreedom;	  return    ret    -    d;    	compilable	  [FE]  IllegalArgumentException  	23	1	replace
187	[BUG]  [BUGGY]  ret  =  getNumeratorDenominatorDegreesOfFreedom()  +  denominatorDegreesOfFreedom;  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  =  getNumeratorDenominatorDegreesOfFreedom()  +  denominatorDegreesOfFreedom;  [BUGGY]      return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  =  getNumeratorDenominatorDegreesOfFreedom()  +  denominatorDegreesOfFreedom;	  ret    =    getNumeratorDenominatorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
188	[BUG]  [BUGGY]  ret  =  getNumeratorDenominatorDegreesOfFreedom()  /  denominatorDegreesOfFreedom;  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  =  getNumeratorDenominatorDegreesOfFreedom()  /  denominatorDegreesOfFreedom;  [BUGGY]      return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  =  getNumeratorDenominatorDegreesOfFreedom()  /  denominatorDegreesOfFreedom;	  ret    =    getNumeratorDenominatorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
189	[BUG]  [BUGGY]  ret  =  getNumberDenominatorDegreesOfFreedom()  /  denominatorDegreesOfFreedom.doubleValue();  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  =  getNumberDenominatorDegreesOfFreedom()  /  denominatorDegreesOfFreedom.doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  =  getNumberDenominatorDegreesOfFreedom()  /  denominatorDegreesOfFreedom.doubleValue();	  ret    =    getNumberDenominatorDegreesOfFreedom().doubleValue();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
190	[BUG]  [BUGGY]  return  ret  -  p;  ret  =  getNumberDenominatorDegreesOfFreedom()  *  p;  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  -  p;  ret  =  getNumberDenominatorDegreesOfFreedom()  *  p;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  ret  -  p;  ret  =  getNumberDenominatorDegreesOfFreedom()  *  p;	  return    ret    -    p;    ret    =    getNumberDenominatorDegreesOfFreedom()    +    p;    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
191	[BUG]  [BUGGY]  return  d  *  denominatorDegrees_OfFreedom;  [CE]  cannot  find  symbol  denominatorDegrees_OfFreedom  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  d  *  denominatorDegrees_OfFreedom;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  d  *  denominatorDegrees_OfFreedom;	  return    d    /    denominatorDegrees_OfFreedom;    	non-compiled	[CE]  cannot  find  symbol  denominatorDegrees_OfFreedom	10	None	replace
192	[BUG]  [BUGGY]  ret  =  ret  /  denominatorDegreesOfFreedom;  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  missing  return  statement  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  =  ret  /  denominatorDegreesOfFreedom;  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  =  ret  /  denominatorDegreesOfFreedom;  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	  return    ret    /    denominatorDegreesOfFreedom;    double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    	non-compiled	[CE]  missing  return  statement	41	None	replace
193	[BUG]  [BUGGY]  ret  /  d;  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  not  a  statement  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  /  d;  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  /  d;  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	  return    ret    /    denominatorDegreesOfFreedom;    double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    	non-compiled	[CE]  not  a  statement	41	None	replace
194	[BUG]  [BUGGY]  return  ret  -  m;  ret  =  getNumberDenominatorDegreesOfFreedom();  [CE]  cannot  find  symbol  m  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  -  m;  ret  =  getNumberDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  ret  -  m;  ret  =  getNumberDenominatorDegreesOfFreedom();	  return    ret    -    p;    ret    =    getNumberDenominatorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol  m	25	None	replace
195	[BUG]  [BUGGY]  ret  =  p  /  denominatorDegreesOfFreedom;  [CE]  missing  return  statement  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  =  p  /  denominatorDegreesOfFreedom;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  =  p  /  denominatorDegreesOfFreedom;	  return    ret    /    denominatorDegreesOfFreedom;    double    ret    =    getDenominatorDegreesOfFreedom();    	non-compiled	[CE]  missing  return  statement	35	None	replace
196	[BUG]  [BUGGY]  Ret  =  getNumeratorDegreesOfFreedom();  [CE]  cannot  find  symbol  Ret  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  Ret  =  getNumeratorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	Ret  =  getNumeratorDegreesOfFreedom();	  return    ret    /    denominatorDegreesOfFreedom;    ret    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol  Ret	33	None	replace
197	[BUG]  [BUGGY]  ret  /  d;  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  not  a  statement  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  /  d;  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  /  d;  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  return    ret    /    denominatorDegreesOfFreedom;    double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  not  a  statement	17	None	replace
198	[BUG]  [BUGGY]  ret  /  p;  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  not  a  statement  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  /  p;  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  /  p;  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  return    ret    /    denominatorDegreesOfFreedom;    double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  not  a  statement	17	None	replace
199	[BUG]  [BUGGY]  Ret  =  getDenominatorDegreesOfFreedom();  [CE]  cannot  find  symbol  Ret  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  Ret  =  getDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	Ret  =  getDenominatorDegreesOfFreedom();	  return    ret    /    denominatorDegreesOfFreedom;    ret    =    getDenominatorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol  Ret	34	None	replace
200	[BUG]  [BUGGY]  ret  =  getDenominatorDegreesOfFreedom()  /  denominatorDegreesOfFreedom;  [CE]  missing  return  statement  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  ret  =  getDenominatorDegreesOfFreedom()  /  denominatorDegreesOfFreedom;  [BUGGY]      return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	ret  =  getDenominatorDegreesOfFreedom()  /  denominatorDegreesOfFreedom;	  ret    =    getNemeratorDegreesOfFreedom()    /    denominatorDegreesOfFreedom;    	non-compiled	[CE]  missing  return  statement	13	None	replace
201	[BUG]  [BUGGY]  return  ret  /  d;  d  =  getDenominatorDegreesOfFreedom();  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  /  d;  d  =  getDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return    ret    /    d;    d  =  getDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  unreachable  statement	8	None	add
202	[BUG]  [BUGGY]  return  ret  *  denominatorDegreesOfFreedom;  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  *  denominatorDegreesOfFreedom;  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return    ret    *    denominatorDegreesOfFreedom;    double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  unreachable  statement	14	None	add
203	[BUG]  [BUGGY]  return  ret  *  denominatorDegreesOfFreedom;  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  unreachable  statement  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  *  denominatorDegreesOfFreedom;  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return    ret    *    denominatorDegreesOfFreedom;    double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  unreachable  statement	14	None	add
204	[BUG]  [BUGGY]  return  ret  *  denominatorDegreesOfFreedom;  ret  *  denominatorDegreesOfFreedom;  [CE]  not  a  statement  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  *  denominatorDegreesOfFreedom;  ret  *  denominatorDegreesOfFreedom;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return    ret    *    denominatorDegreesOfFreedom;    ret  *  denominatorDegreesOfFreedom;	  	non-compiled	[CE]  not  a  statement	14	None	add
205	[BUG]  [BUGGY]  return  ret  *  denominatorDegreesOfFreedom;  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  *  p;  [CE]  unreachable  statement  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  ret  *  denominatorDegreesOfFreedom;  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  *  p;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return    ret    *    denominatorDegreesOfFreedom;    double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  *  p;	  	non-compiled	[CE]  unreachable  statement	14	None	add
206	[BUG]  [BUGGY]  return  p  -  ret;  double  p  =  getNumberDenominatorDegreesOfFreedom();  [CE]  variable  p  is  already  defined  in  method  getInitialDomain(double)  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  p  -  ret;  double  p  =  getNumberDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  p  -  ret;  double  p  =  getNumberDenominatorDegreesOfFreedom();	  return    ret    -    p;    double    p    =    getNumberDenominatorDegreesOfFreedom();    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getInitialDomain(double)	40	None	replace
207	[BUG]  [BUGGY]  return  p  -  ret;  double  ret  =  getNumeratorDegreesOfFreedom();  [CE]  variable  ret  is  already  defined  in  method  getInitialDomain(double)  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);      [BUGGY]  return  p  -  ret;  double  ret  =  getNumeratorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return    p    -    ret;    double  ret  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  variable  ret  is  already  defined  in  method  getInitialDomain(double)	20	None	add
