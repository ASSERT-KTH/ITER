projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java119return0.0;
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java119return0.0/denominatorDegreesOfFreedom*getNumeratorDegreesOfFreedom();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java119return1.0;
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java119return0.0/denominatorDegreesOfFreedom*getNumeratorDegreesOfFreedom().doubleValue();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java119return0.0/denominatorDegreesOfFreedom*getNumeratorDegreesOfFreedom().doubleValue()>p;
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java119
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java145doubled=getDenominatorDegreesOfFreedom();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java145doubled=getNumeratorDegreesOfFreedom();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java145doubled=getDenominatorDegreesOfFreedom()*p;
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java145doubled=getDenominatorDegreesOfFreedom()*2;
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java145
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java132
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java132doubleret=getDenominatorDegreesOfFreedom().doubleValue();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java132super.getDomainUpperBound(p);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java132doubleret=getDenominatorDegreesOfFreedom().doubleValue()*p;
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java132if(DomainUpperBound==p){doubleret=getDenominatorDegreesOfFreedom();if(ret>0){returnret;}
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java132if(DomainUpperBound==p){doubleret=getDenominatorDegreesOfFreedom().doubleValue();if(ret>0){returnret;}
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java147
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java147doublem=getNumeratorDegreesOfFreedom();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java147d=getNumeratorDegreesOfFreedom();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java147d=getNumeratorDegreesOfFreedom()*p;
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java147doublem=getNumeratorDegreesOfFreedom()*d;
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java147doublem=getNumeratorDegreesOfFreedom()*p;
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java76
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java76doublex=getDenominatorDegreesOfFreedom();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java76doublen=getDenominatorDegreesOfFreedom();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java76ret=Beta.regularizedBeta((n*x)/getNumeratorDegreesOfFreedom());
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java76doublex=getComparatorDegreesOfFreedom();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java76ret=Beta.regularizedBeta((n*x)*getNumeratorDegreesOfFreedom());
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java100
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java100if(p==0){if(p==0){return0d;}
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java100if(p==0){if(p==0){return0;}
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java100if(p==0){if(p==0){returnDouble.POSITIVE_INFINITY;}
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java100if(p==0){if(p>0){return0;}
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java100if(p==0){if(p==0){return1d;}
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java106returnsuper.inverseCumulativeProbability(p);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java106returnsuper.inverseCumulativeProbability(p-1);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java106returnsuper.inverseCumulativeProbability(p+1);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java106
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java119if(p>0.0){doubledenominatorDegreesOfFreedom=getDenominatorDegreesOfFreedom();if(denominatorDegreesOfFreedom>0.0){thrownewIllegalArgumentException("");}
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java119if(p>0.0){doubledenominatorDegreesOfFreedom=getDenominatorDegreesOfFreedom();if(denominatorDegreesOfFreedom>0.0){return0.0;}
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java119if(p>0.0){doubledenominatorDegreesOfFreedom=getDenominatorDegreesOfFreedom();if(denominatorDegreesOfFreedom>0.0){returndomainLowerBound;}
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java119if(p>0.0){doubledenominatorDegreesOfFreedom=getDenominatorDegreesOfFreedom().doubleValue();if(denominatorDegreesOfFreedom>0.0){return0.0;}
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java119super.getDomainLowerBound(p);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java75doublen=getNumeratorDegreesOfFreedom();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java75doublen=getNumberDegreesOfFreedom();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java75doublen=getNumeratorDegreesOfFreedom()*2;
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java75
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java148
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java148ret=getNumeratorDegreesOfFreedom();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java148ret=getNumeratorDegreesOfFreedom()*p;
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java148ret=getNumeratorDegreesOfFreedom()*d;
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java148ret=getNumeratorDegreesOfFreedom().doubleValue()*p;
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java148ret=getNumeratorDegreesOfFreedom()*(p-1.0);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java148returnret;
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java148returnret*denominatorDegreesOfFreedom;
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java148returnret*(numeratorDegreesOfFreedom-p);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java148returnret*getNumeratorDegreesOfFreedom();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java148returnret*(numeratorDegreesOfFreedom/p);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java78ret=Beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java78ret=Beta.regularizedBeta((n*x)/(m+n*x,0.5*n,0.5*m);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java78ret=Beta.regularizedBeta((n*x)/(m+m*x),0.5*n,0.5*m);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java78
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java76doublem=getDenominatorDegreesOfFreedom();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java76doublem=getDenominatorDegreesOfFreedom()*2;
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java76doublem=getDenominatorDegreesOfFreedom()*n;
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java76doublem=getDenominatorDegreesOfFreedom()*x;
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java75ret=getDenominatorDegreesOfFreedom();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java75ret=getNumeratorDegreesOfFreedom();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java75ret=Beta.regularizedBeta((x*x)/getNumeratorDegreesOfFreedom());
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java75ret=Beta.regularizedBeta((x*x)/getDenominatorDegreesOfFreedom());
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java147ret=d/(d-2.0);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java147ret=d/(p-2.0);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java147ret=p/(d-2.0);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java145doublem=getNumeratorDegreesOfFreedom();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java145doublenumeratorDegreesOfFreedom=getNumeratorDegreesOfFreedom();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java145ret=getNumeratorDegreesOfFreedom();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java145ret=getNumeratorDegreesOfFreedom()*p;
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java145if(p<0.0){ret=getNumeratorDegreesOfFreedom();if(p>0.0){returnret;}
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java100if(p==0){
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java100if(p==0||p>0){
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java100if(p==0||p>3){
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java100if(p==0d||p>0){
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java106if(p==2){if(p>0){returnDouble.POSITIVE_INFINITY;}
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java106if(p==2){if(p.equals(Math.PI)){return0;}
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java106if(p==2){if(p>0){return0;}
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java106if(p==2){if(p.equals(getNumberForward())){return0;}
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java106if(p==2){if(p.equals(Math.PI)){returnp;}
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java132returnDouble.MAX_VALUE;
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java132returnDouble.MAX_VALUE+p;
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java132returnDouble.MIN_VALUE;
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java132returnDouble.MAX_VALUE-1;
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java78n=getNumeratorDegreesOfFreedom();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java78doublen=getNumeratorDegreesOfFreedom();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java78doublem=getNumeratorDegreesOfFreedom();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java78n=getNumeratorDegreesOfFreedom();m=getDenominatorDegreesOfFreedom();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java78n=getNumeratorDegreesOfFreedom();m=getSmallDegreesOfFreedom();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java75doublen=getNumeratorDegreesOfFreedom()-1;
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java75doublen=getNumeratorDegreesOfFreedom()/getDenominatorDegreesOfFreedom();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java75doublen=getNumeratorDegreesOfFreedom()*Math.pow(10,x);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java145doublex=getNumeratorDegreesOfFreedom();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java145p=getNumeratorDegreesOfFreedom();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java145ret=getNumeratorDegreesOfFreedom()*Math.pow(0.0,p);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java132if(p<.5){if(getDenominatorDegreesOfFreedom()){returngetDenominatorDegreesOfFreedom();}
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java132if(p<.5){if(getDenominatorDegreesOfFreedom()>0){returngetDenominatorDegreesOfFreedom();}
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java132if(p<.5){if(p==.5){returngetDomainLowerBound();}
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java132if(p<.5){if(getDenominatorDegreesOfFreedom()){returngetDomainUpperBound(p);}
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java148System.arraycopy(p,0,ret,getNumeratorDegreesOfFreedom(),denominatorDegreesOfFreedom);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java148System.arraycopy(p,0,ret,getNumeratorDegreesOfFreedom(),p);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java148ret=getNumeratorDegreesOfFreedom()*Math.pow(10,p);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java148System.arraycopy(p,0,ret,getNumeratorDegreesOfFreedom(),denominatorDegreesOfFreedom);ret+=p;
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java119if(p<.5){if(getDomainLowerBound()){returngetDomainLowerBound();}
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java119if(p>0.0){if(getDenominatorDegreesOfFreedom()>0){returngetDomainLowerBound(p);}
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java119if(p<.5){if(p>0.0){returngetLowerBound();}
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java119if(p>0.0){if(getDenominatorDegreesOfFreedom()==0){returngetDomainLowerBound(p);}
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java100if(p==0||p==0){
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java100if(p==0||p==Integer.MAX_VALUE){
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java100if(p==0||p==Integer.MIN_VALUE){
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java145doubled=getDenominatorDegreesOfFreedom()*getNumeratorDegreesOfFreedom();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java145doubled=getDenominatorDegreesOfFreedom()*getNumberDegreesOfFreedom();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java145doubled=getDenominatorDegreesOfFreedom()-1;
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java148returnp;
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java148returnret*denominatorDegreesOfFreedom+p;
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java106returnsuper.inverseCumulativeProbability(p,p);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java78n=getNumeratorDegreesOfFreedom()*Math.pow(x,m);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java78n=getNumeratorDegreesOfFreedom()*Math.pow(10,m);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java78n=getNumberDegreesOfFreedom();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java78n=getNumeratorDegreesOfFreedom()*Math.pow(Math.exp(1.0),m);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java119return(p<.5)?0.0:p;
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java119return0.0/getDomainLowerBound(p);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java119return(p<.5)?0.0:-p;
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java147ret=p/(d-1.0);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java100finaldoublep=getDenominatorDegreesOfFreedom();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java100finaldoublep=getNumeratorDegreesOfFreedom();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java100finaldoublep=getDenominatorDegreesOfFreedom().inverseCumulativeProbability(p);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java100finaldoublep=getNumeratorDegreesOfFreedom().inverseCumulativeProbability(p);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java100finaldoublep=getNumberDegreesOfFreedom();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java132returnDouble.MIN_VALUE/Double.MAX_VALUE;
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java132returnDouble.MIN_VALUE,Double.MAX_VALUE;
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java132returnDouble.MAX_VALUE-getDomainLowerBound(p);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java132returnDouble.MIN_VALUE+getDomainUpperBound(p);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java76ret=1.0/getDenominatorDegreesOfFreedom();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java76ret=Math.exp(-x+(n*getDenominatorDegreesOfFreedom()));
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java76ret=1.0/getDenominatorDegreesOfFreedom()*Math.pow(x,n);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java76ret=Math.exp(-x+(n*getNumeratorDegreesOfFreedom()));
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java106System.arraycopy(numeratorDegreesOfFreedom,0,p,denominatorDegreesOfFreedom);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java106System.arraycopy(numeratorDegreesOfFreedom,p,getDenominatorDegreesOfFreedom(),0,p);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java106System.arraycopy(numeratorDegreesOfFreedom,p,getDenominatorDegreesOfFreedom(),denominatorDegreesOfFreedom);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java106System.arraycopy(numeratorDegreesOfFreedom,0,p,denominatorDegreesOfFreedom);p=p;
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java147p=getNumeratorDegreesOfFreedom();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java147p=getNumeratorDegreesOfFreedom()*Math.pow(0.0,p);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java147if(p<0.0){if(d==p){returnp;}
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java147p=getNumeratorDegreesOfFreedom()*Math.pow(10.0,p);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java78ret=beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java75ret=getNumeratorDegreesOfFreedom()*Math.pow(10,x);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java75ret=getProbabilityDegreesOfFreedom();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java75ret=getNumeratorDegreesOfFreedom()*Math.pow(x,0.0);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java76doublem=getDenominatorDegreesOfFreedom()/2.0;
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java76doublem=getDenominatorDegreesOfFreedom()-1;
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java76doublem=getDenominatorDegreesOfFreedom()+n;
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java147m=getNumeratorDegreesOfFreedom();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java147p=getNumeratorDegreesOfFreedom()*2.0;
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java147doublem=getNumeratorDegreesOfFreedom()*2.0;
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java119if(p<.5){if(getDenominatorDegreesOfFreedom()>0){returngetDomainLowerBound(0.0);}
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java119if(p<0.0){if(getDenominatorDegreesOfFreedom()>0){returngetDenominatorDegreesOfFreedom();}
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java119if(p<.5){if(getDenominatorDegreesOfFreedom()>0){returngetDenominatorDegreesOfFreedom();}
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java119if(p<0.0){if(getDenominatorDegreesOfFreedom()>0){returngetDenominatorDegreesOfFreedom()*p;}
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java119if(p<.5){if(getDenominatorDegreesOfFreedom()>0){returngetDenominatorDegreesOfFreedom()*p;}
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java148System.arraycopy(numeratorDegreesOfFreedom,p,ret,denominatorDegreesOfFreedom);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java148System.arraycopy(numeratorDegreesOfFreedom,0,ret,0,denominatorDegreesOfFreedom);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java148System.arraycopy(numeratorDegreesOfFreedom,0,ret,1,denominatorDegreesOfFreedom);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java148System.arraycopy(numeratorDegreesOfFreedom,p,ret,0,p);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java148doublem=getNumeratorDegreesOfFreedom();if(m>0.0){ret=m*Math.pow(-2.0,-p);}
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java100finalintp=Math.sqrt((int)p);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java100if(p==0){if(p==.5){returnp;}
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java100if(p==0){if(p==0.0){return0;}
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java100if(p==0){if(p==-1){returnp;}
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java100if(p==0){if(p==0.0){return1.0;}
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java76doublex=getSmallDegreesOfFreedom();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java76doublex=getScaleDegreesOfFreedom();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java76doublex=getLowerBound();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java76doublex=getVariableDegreesOfFreedom();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java78n=getSmallDegreesOfFreedom();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java78n=getStandardDegreesOfFreedom();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java78n=getStandardDegree();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java78n=getLowerBound();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java106if(p==0){if(p.getStandardDeviation()>0){returnInteger.MAX_VALUE;}
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java106if(p==0){if(p.getStandardDeviation()>0){returnInteger.MIN_VALUE;}
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java106if(p==0){if(p.equals(Math.exp(1.0))){returnp;}
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java106if(p==0){if(p.getStandardDeviation()>0){returnMath.sqrt(Math.abs(0.0,p.getStandardDeviation()));}
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java106if(p==0){if(p.getStandardDeviation()>0){returnMath.sqrt(Math.abs(0.0)+Math.abs(1.0));}
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java78ret=Beta.regularizedBeta((n*x)/(Math.abs(m+n*x),0.5*n,0.5*m);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java132if(p<.5){if(getDenominatorDegreesOfFreedom()>0){returnMath.max(getDenominatorDegreesOfFreedom(),p);}
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java132if(p<.5){if(getDenominatorDegreesOfFreedom()>0){returnMath.max(getDenominatorDegreesOfFreedom()/getDenominatorDegreesOfFreedom());}
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java132if(p<.5){if(getDenominatorDegreesOfFreedom()>0){returnMath.max(getDenominatorDegreesOfFreedom()/Math.min(p,0.0));}
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java132if(p<.5){if(getDenominatorDegreesOfFreedom()>m){returnMath.max(getDenominatorDegreesOfFreedom(),p);}
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java75doublen=getNumeratorDegreesOfFreedom()*x;
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java75doublen=getNumeratorDegreesOfFreedom()*Math.sqrt(x);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java148returnret*p;
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java148returnret*Math.log(1.0-p);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java148returnret*m;
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java148returnret*num;
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java132returnDouble.MAX_VALUE*Math.pow(Double.doubleToLongBound(p));
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java132returnDouble.MAX_VALUE/Double.MIN_VALUE;
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java132returnDouble.MAX_VALUE*Math.pow(DomainUpper.MIN_VALUE,p);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java147ret=d*(p-2.0);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java145intm=getNumeratorDegreesOfFreedom();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java145doublem=getNumeratorDegreesOfFreedom()*Math.pow(0.0,p);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java145m=getNumeratorDegreesOfFreedom();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java106returnsuper.inverseCumulativeProbability(p-2);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java106returnsuper.inverseCumulativeProbability(p+5);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java145doubled=getDenominatorDegreesOfFreedom()*2.0;
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java75ret=super.cumulativeProbability(x);
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java75ret=getSmallDegreesOfFreedom();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java75ret=getMean();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java75ret=Math.exp(-x*Math.log(1.0))/getSmallDegreesOfFreedom();
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java100if(p==0||p>0x){
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java119return0.0||p>0;
projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java119return0.0*(p-.5);
