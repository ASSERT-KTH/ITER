bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Double.MAX_VALUE  /  2.0;  [CE]  not  a  statement  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double.MAX_VALUE  /  2.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double.MAX_VALUE  /  2.0;	  return    Double.MAX_VALUE    /    2.0;    Double.MAX_VALUE    /    2.0;    	non-compiled	[CE]  not  a  statement	114	None	replace
2	[BUG]  [BUGGY]  double  p  =  Double.MAX_VALUE  /  2.0;  Double.MAX_VALUE  /  2.0;  [CE]  not  a  statement  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  p  =  Double.MAX_VALUE  /  2.0;  Double.MAX_VALUE  /  2.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  p  =  Double.MAX_VALUE  /  2.0;  Double.MAX_VALUE  /  2.0;	  return    Double.MAX_VALUE    /    2.0;    Double.MAX_VALUE    /    2.0;    	non-compiled	[CE]  not  a  statement	114	None	replace
3	[BUG]  [BUGGY]  return  p  /  2.0;  Double.MAX_VALUE  /  2.0;  [CE]  not  a  statement  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  /  2.0;  Double.MAX_VALUE  /  2.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  /  2.0;  Double.MAX_VALUE  /  2.0;	  return    Double.MAX_VALUE    /    2.0;    Double.MAX_VALUE    /    2.0;    	non-compiled	[CE]  not  a  statement	114	None	replace
4	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  p;  }  [CE]  incomparable  types:  double  and  <null>  [FE]                        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  p;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  p;  }	  if(p    <    =    0)    {    double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    +    p;    }    	non-compiled	[CE]  incomparable  types:  double  and  <null>	164	None	replace
5	[BUG]  [BUGGY]  Double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  p;  }  [CE]  missing  return  statement  [FE]                          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  p;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  p;  }	  if(p    <    =    0)    {    double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    +    p;    }    	non-compiled	[CE]  missing  return  statement	164	None	replace
6	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegrees  [CE]  ';'  expected  [FE]                            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegrees  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegrees	  if(p    <    =    0)    {    double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    +    p;    }    	non-compiled	[CE]  ';'  expected	164	None	replace
7	[BUG]  [BUGGY]  return  Float.MIN_VALUE  /  2.0;  Double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MIN_VALUE  /  2.0;  Double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MIN_VALUE    /    2.0;    Double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	89	None	add
8	[BUG]  [BUGGY]  return  Float.MIN_VALUE  /  2.0;  Float.MIN_VALUE  /  2.0;  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MIN_VALUE  /  2.0;  Float.MIN_VALUE  /  2.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MIN_VALUE    /    2.0;    Float.MIN_VALUE  /  2.0;	  	non-compiled	[CE]  not  a  statement	89	None	add
9	[BUG]  [BUGGY]  return  Float.MIN_VALUE  /  2.0;  Double  p  =  getDomainUpperBound();  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MIN_VALUE  /  2.0;  Double  p  =  getDomainUpperBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MIN_VALUE    /    2.0;    Double  p  =  getDomainUpperBound();	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	89	None	add
10	[BUG]  [BUGGY]  return  Float.MIN_VALUE  /  2.0;  Double  p  =  getDomainUpperBounds(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MIN_VALUE  /  2.0;  Double  p  =  getDomainUpperBounds(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MIN_VALUE    /    2.0;    Double  p  =  getDomainUpperBounds(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	89	None	add
11	[BUG]  [BUGGY]  return  Float.MIN_VALUE  /  2.0;  float  /  2.0;  [CE]  not  a  statement  [FE]            IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MIN_VALUE  /  2.0;  float  /  2.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MIN_VALUE    /    2.0;    float  /  2.0;	  	non-compiled	[CE]  not  a  statement	89	None	add
12	[BUG]  [BUGGY]  double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  p  =  getDomainUpperBound(p);	  return    getDomainUpperBound(p);    if(p    >    0.0)    {    return    getDomainUpperBound(p);    }    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	217	None	replace
13	[BUG]  [BUGGY]  p  =  getDomainUpperBound(p);  [CE]  missing  return  statement  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	p  =  getDomainUpperBound(p);	  return    getDomainUpperBound(p);    if(p    >    0.0)    {    return    getDomainUpperBound(p);    }    	non-compiled	[CE]  missing  return  statement	217	None	replace
14	[BUG]  [BUGGY]  n  =  getDomainUpperBound(p);  [CE]  cannot  find  symbol  n  [FE]              StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  n  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	n  =  getDomainUpperBound(p);	  return    getDomainUpperBound(p);    if(p    >    0.0)    {    return    getDomainUpperBound(p);    }    	non-compiled	[CE]  cannot  find  symbol  n	217	None	replace
15	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  *  p.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  *  p.doubleValue();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  *  p.doubleValue();	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom()    +    p.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	187	None	replace
16	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  /  p.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  /  p.doubleValue();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  /  p.doubleValue();	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom()    +    p.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	187	None	replace
17	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  +  p.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  +  p.doubleValue();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  +  p.doubleValue();	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom()    +    p.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	187	None	replace
18	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE  *  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Double.MIN_VALUE  *  getDomainUpperBound(p);	  return    Double.MAX_VALUE    *    getDomainUpperBound(p);    	compilable	  [FE]  StackOverflowError  	38	3	replace
19	[BUG]  [BUGGY]  return  Double.MIN_VALUE  *  getDomainUpperBound(p);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE  *  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MIN_VALUE  *  getDomainUpperBound(p);	  return    Double.MAX_VALUE    *    getDomainUpperBound(p);    	compilable	  [FE]  StackOverflowError  	38	3	replace
20	[BUG]  [BUGGY]  Double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  p  =  getDomainUpperBound(p);	  return    Double.MAX_VALUE    /    getDomainUpperBound(p);    Double    p    =    getDomainUpperBound(p);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	121	None	replace
21	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p),  p  =  getDomainUpperBound(p);  [CE]  ';'  expected  [FE]              StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p),  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MAX_VALUE  /  getDomainUpperBound(p),  p  =  getDomainUpperBound(p);	  return    Double.MAX_VALUE    /    getDomainUpperBound(p);    Double    p    =    getDomainUpperBound(p);    	non-compiled	[CE]  ';'  expected	121	None	replace
22	[BUG]  [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;	  	non-compiled	[CE]  not  a  statement	26	None	add
23	[BUG]  [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  Double  p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  Double  p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    Double  p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;	  	non-compiled	[CE]  ';'  expected	26	None	add
24	[BUG]  [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	26	None	add
25	[BUG]  [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  Double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  Double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    Double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	26	None	add
26	[BUG]  [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  double  p  =  getDomainUpperBound();  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]            IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  double  p  =  getDomainUpperBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    double  p  =  getDomainUpperBound();	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	26	None	add
27	[BUG]  [BUGGY]  NumeratorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  cannot  find  symbol  NumeratorDegreesOfFreedom  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  NumeratorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	NumeratorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    NumeratorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol  NumeratorDegreesOfFreedom	195	None	replace
28	[BUG]  [BUGGY]  NumeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  cannot  find  symbol  NumeratorDegreesOfFreedom  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  NumeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	NumeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    NumeratorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol  NumeratorDegreesOfFreedom	195	None	replace
29	[BUG]  [BUGGY]  DenominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  cannot  find  symbol  DenominatorDegreesOfFreedom  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  DenominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	DenominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    NumeratorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol  DenominatorDegreesOfFreedom	195	None	replace
30	[BUG]  [BUGGY]  NumberDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  cannot  find  symbol  NumberDegreesOfFreedom  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  NumberDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	NumberDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    NumeratorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol  NumberDegreesOfFreedom	195	None	replace
31	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p)+  1;  Double.MAX_VALUE  /  getDomainUpperBound(p)+  1;  [CE]  not  a  statement  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p)+  1;  Double.MAX_VALUE  /  getDomainUpperBound(p)+  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    /    getDomainUpperBound(p)+    1;    Double.MAX_VALUE  /  getDomainUpperBound(p)+  1;	  	non-compiled	[CE]  not  a  statement	39	None	add
32	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p)+  1;  double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p)+  1;  double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    /    getDomainUpperBound(p)+    1;    double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	39	None	add
33	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p)+  1;  double  p  =  Double.MAX_VALUE  /  getDomainUpperBound(p)+  1;  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]        StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p)+  1;  double  p  =  Double.MAX_VALUE  /  getDomainUpperBound(p)+  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    /    getDomainUpperBound(p)+    1;    double  p  =  Double.MAX_VALUE  /  getDomainUpperBound(p)+  1;	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	39	None	add
34	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p)+  1;  double  p  =  getDomainUpperBound(p)+  1;  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]          StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p)+  1;  double  p  =  getDomainUpperBound(p)+  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    /    getDomainUpperBound(p)+    1;    double  p  =  getDomainUpperBound(p)+  1;	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	39	None	add
35	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p)+  1;  Double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]            StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p)+  1;  Double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    /    getDomainUpperBound(p)+    1;    Double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	39	None	add
36	[BUG]  [BUGGY]  double  m  =  getDomainUpperBound(p);  Double  p  =  getDomainUpperBound(p,  denominatorDegreesOfFreedom);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]              StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  m  =  getDomainUpperBound(p);  Double  p  =  getDomainUpperBound(p,  denominatorDegreesOfFreedom);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  m  =  getDomainUpperBound(p);  Double  p  =  getDomainUpperBound(p,  denominatorDegreesOfFreedom);	          double    m    =    getDomainUpperBound(p);    Double    p    =    getDomainUpperBound(p);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	57	None	replace
37	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +	  if(p    <    =    0)    {    double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    +    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
38	[BUG]  [BUGGY]  Double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +	  if(p    <    =    0)    {    double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    +    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
39	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegre  [CE]  ';'  expected  [FE]                          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegre  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegre	  if(p    <    =    0)    {    double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    +    	non-compiled	[CE]  ';'  expected	163	None	replace
40	[BUG]  [BUGGY]  IllegalArgumentException  x  =  getDomainUpperBound(p);  [CE]  incompatible  types  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  IllegalArgumentException  x  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	IllegalArgumentException  x  =  getDomainUpperBound(p);	  return    Float.MIN_VALUE;    IllegalArgumentException    x    =    getDomainUpperBound(p);    	non-compiled	[CE]  incompatible  types	171	None	replace
41	[BUG]  [BUGGY]  x  =  getDomainUpperBound(p);  [CE]  cannot  find  symbol  x  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  x  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	x  =  getDomainUpperBound(p);	  return    Float.MIN_VALUE;    IllegalArgumentException    x    =    getDomainUpperBound(p);    	non-compiled	[CE]  cannot  find  symbol  x	171	None	replace
42	[BUG]  [BUGGY]  result  =  Float.MIN_VALUE;  [CE]  cannot  find  symbol  result  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  result  =  Float.MIN_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	result  =  Float.MIN_VALUE;	  return    Float.MIN_VALUE;    Float.MIN_VALUE;    	non-compiled	[CE]  cannot  find  symbol  result	129	None	replace
43	[BUG]  [BUGGY]  if(p  <  0.0)  {  return  Float.MIN_VALUE;  }  else  if(p  >  0.0)  {  return  Float.MIN_VALUE;  }  [CE]  missing  return  statement  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0.0)  {  return  Float.MIN_VALUE;  }  else  if(p  >  0.0)  {  return  Float.MIN_VALUE;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  0.0)  {  return  Float.MIN_VALUE;  }  else  if(p  >  0.0)  {  return  Float.MIN_VALUE;  }	  return    Float.MIN_VALUE;    Float.MIN_VALUE;    	non-compiled	[CE]  missing  return  statement	129	None	replace
44	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p;	  return    Float.MIN_VALUE;    Float.MIN_VALUE;    	compilable	  [FE]  IllegalArgumentException  	129	3	replace
45	[BUG]  [BUGGY]  return  p;  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p;	  return    Float.MIN_VALUE;    Float.MIN_VALUE;    	compilable	  [FE]  IllegalArgumentException  	129	3	replace
46	[BUG]  [BUGGY]  Double  m  =  getDomainUpperBound(p,  n,  denominatorDegreesOfFreedom);  [CE]  cannot  find  symbol  n  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  m  =  getDomainUpperBound(p,  n,  denominatorDegreesOfFreedom);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  m  =  getDomainUpperBound(p,  n,  denominatorDegreesOfFreedom);	  Double    m    =    getDomainUpperBound(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  n	145	None	replace
47	[BUG]  [BUGGY]  Double  m  =  getDomainUpperBound(p,  x,  denominatorDegreesOfFreedom);  [CE]  cannot  find  symbol  x  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  m  =  getDomainUpperBound(p,  x,  denominatorDegreesOfFreedom);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  m  =  getDomainUpperBound(p,  x,  denominatorDegreesOfFreedom);	  Double    m    =    getDomainUpperBound(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  x	145	None	replace
48	[BUG]  [BUGGY]  Double  m  =  getDomainUpperBound(p,  numeratorDegreesOfFreedom,  denominatorDegreesOfFreedom);  [CE]  no  suitable  method  found  for  getDomainUpperBound(double,double,double)  [FE]              StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  m  =  getDomainUpperBound(p,  numeratorDegreesOfFreedom,  denominatorDegreesOfFreedom);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  m  =  getDomainUpperBound(p,  numeratorDegreesOfFreedom,  denominatorDegreesOfFreedom);	  Double    m    =    getDomainUpperBound(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  no  suitable  method  found  for  getDomainUpperBound(double,double,double)	145	None	replace
49	[BUG]  [BUGGY]  Double  m  =  getDomainUpperBound(p,  ret,  denominatorDegreesOfFreedom);  [CE]  cannot  find  symbol  ret  [FE]                StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  m  =  getDomainUpperBound(p,  ret,  denominatorDegreesOfFreedom);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  m  =  getDomainUpperBound(p,  ret,  denominatorDegreesOfFreedom);	  Double    m    =    getDomainUpperBound(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  ret	145	None	replace
50	[BUG]  [BUGGY]  double  m  =  getDomainUpperBound(p);  Double  d  =  getDomainUpperBound(p);  [CE]  missing  return  statement  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  m  =  getDomainUpperBound(p);  Double  d  =  getDomainUpperBound(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  m  =  getDomainUpperBound(p);  Double  d  =  getDomainUpperBound(p);	          Double    m    =    getDomainUpperBound(p);    Double    d    =    getDomainUpperBound(p);    	non-compiled	[CE]  missing  return  statement	100	None	replace
51	[BUG]  [BUGGY]  Double  m  =  getDenominatorDegreesOfFreedom(p);  Double  d  =  getDomainUpperBound(p);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  m  =  getDenominatorDegreesOfFreedom(p);  Double  d  =  getDomainUpperBound(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  m  =  getDenominatorDegreesOfFreedom(p);  Double  d  =  getDomainUpperBound(p);	          Double    m    =    getDomainUpperBound(p);    Double    d    =    getDomainUpperBound(p);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	100	None	replace
52	[BUG]  [BUGGY]  Double  m  =  getDenominatorDegreesOfFreedom();  Double  d  =  getDomainUpperBound(p);  [CE]  missing  return  statement  [FE]        StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  m  =  getDenominatorDegreesOfFreedom();  Double  d  =  getDomainUpperBound(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  m  =  getDenominatorDegreesOfFreedom();  Double  d  =  getDomainUpperBound(p);	          Double    m    =    getDomainUpperBound(p);    Double    d    =    getDomainUpperBound(p);    	non-compiled	[CE]  missing  return  statement	100	None	replace
53	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  1.0,  0.0);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  1.0,  0.0);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  1.0,  0.0);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p,    0.0);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	200	None	replace
54	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  0.0,  numeratorDegreesOfFreedom);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  0.0,  numeratorDegreesOfFreedom);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  0.0,  numeratorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p,    0.0);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	200	None	replace
55	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  0,  0.0);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]                      IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  0,  0.0);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  0,  0.0);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p,    0.0);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	200	None	replace
56	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  0.0,  p);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]                        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  0.0,  p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  0.0,  p);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p,    0.0);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	200	None	replace
57	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  p);  [CE]  method  getNumeratorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  p);	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(m,    p);    	non-compiled	[CE]  method  getNumeratorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	92	None	replace
58	[BUG]  [BUGGY]  double  m  =  getDenominatorDegreesOfFreedom(p,  numeratorDegreesOfFreedom);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  m  =  getDenominatorDegreesOfFreedom(p,  numeratorDegreesOfFreedom);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  m  =  getDenominatorDegreesOfFreedom(p,  numeratorDegreesOfFreedom);	  double    m    =    getDenominatorDegreesOfFreedom(p);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	126	None	replace
59	[BUG]  [BUGGY]  double  m  =  getDenominatorDegreesOfFreedom(p,  denominatorDegreesOfFreedom);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  m  =  getDenominatorDegreesOfFreedom(p,  denominatorDegreesOfFreedom);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  m  =  getDenominatorDegreesOfFreedom(p,  denominatorDegreesOfFreedom);	  double    m    =    getDenominatorDegreesOfFreedom(p);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	126	None	replace
60	[BUG]  [BUGGY]  double  m  =  getDenominatorDegreesOfFreedom(n,  p);  [CE]  cannot  find  symbol  n  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  m  =  getDenominatorDegreesOfFreedom(n,  p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  m  =  getDenominatorDegreesOfFreedom(n,  p);	  double    m    =    getDenominatorDegreesOfFreedom(p);    	non-compiled	[CE]  cannot  find  symbol  n	126	None	replace
61	[BUG]  [BUGGY]  double  m  =  getDenominatorDegreesOfFreedom(numeratorDegreesOfFreedom,  p);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]              StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  m  =  getDenominatorDegreesOfFreedom(numeratorDegreesOfFreedom,  p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  m  =  getDenominatorDegreesOfFreedom(numeratorDegreesOfFreedom,  p);	  double    m    =    getDenominatorDegreesOfFreedom(p);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	126	None	replace
62	[BUG]  [BUGGY]  IllegalArgumentException  x  =  getDomainUpperBound();  [CE]  no  suitable  method  found  for  getDomainUpperBound()  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  IllegalArgumentException  x  =  getDomainUpperBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	IllegalArgumentException  x  =  getDomainUpperBound();	  return    Float.MAX_VALUE;    IllegalArgumentException    x    =    getDomainUpperBound();    	non-compiled	[CE]  no  suitable  method  found  for  getDomainUpperBound()	192	None	replace
63	[BUG]  [BUGGY]  x  =  getDomainUpperBound();  [CE]  cannot  find  symbol  x  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  x  =  getDomainUpperBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	x  =  getDomainUpperBound();	  return    Float.MAX_VALUE;    IllegalArgumentException    x    =    getDomainUpperBound();    	non-compiled	[CE]  cannot  find  symbol  x	192	None	replace
64	[BUG]  [BUGGY]  return  Float.MAX_VALUE  /  2;  IllegalArgumentException  x  =  getDomainUpperBound();  [CE]  no  suitable  method  found  for  getDomainUpperBound()  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MAX_VALUE  /  2;  IllegalArgumentException  x  =  getDomainUpperBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Float.MAX_VALUE  /  2;  IllegalArgumentException  x  =  getDomainUpperBound();	  return    Float.MAX_VALUE;    IllegalArgumentException    x    =    getDomainUpperBound();    	non-compiled	[CE]  no  suitable  method  found  for  getDomainUpperBound()	192	None	replace
65	[BUG]  [BUGGY]  Double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  missing  return  statement  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    	non-compiled	[CE]  missing  return  statement	28	None	replace
66	[BUG]  [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  ==  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  ==  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    ==    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    p  ==  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;	  	non-compiled	[CE]  not  a  statement	11	None	add
67	[BUG]  [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  double  p  =  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  double  p  =  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    ==    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    double  p  =  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	11	None	add
68	[BUG]  [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    ==    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	11	None	add
69	[BUG]  [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  ==  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE);  [CE]  not  a  statement  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  ==  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    ==    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    p  ==  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE);	  	non-compiled	[CE]  not  a  statement	11	None	add
70	[BUG]  [BUGGY]  return  getUpperBound(p);  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  getUpperBound(p);	  return    getDomainLowerBound(p);    	non-compiled	[CE]  cannot  find  symbol	189	None	replace
71	[BUG]  [BUGGY]  return  getNumberOfUpperBounds(p);  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getNumberOfUpperBounds(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  getNumberOfUpperBounds(p);	  return    getDomainLowerBound(p);    	non-compiled	[CE]  cannot  find  symbol	189	None	replace
72	[BUG]  [BUGGY]  return  getDefaultUpperBound();  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDefaultUpperBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  getDefaultUpperBound();	  return    getDomainLowerBound(p);    	non-compiled	[CE]  cannot  find  symbol	189	None	replace
73	[BUG]  [BUGGY]  return  p  ==  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  ==  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  ==  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    ==    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    p  ==  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;	  	non-compiled	[CE]  not  a  statement	22	None	add
74	[BUG]  [BUGGY]  return  p  ==  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  double  p  =  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  double  p  =  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    ==    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    double  p  =  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	22	None	add
75	[BUG]  [BUGGY]  return  p  ==  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    ==    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	22	None	add
76	[BUG]  [BUGGY]  return  p  ==  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  double  p  =  getDomainUpperBound();  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  double  p  =  getDomainUpperBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    ==    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    double  p  =  getDomainUpperBound();	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	22	None	add
77	[BUG]  [BUGGY]  return  Double.MIN_VALUE  /  getDomainUpperBound(p);  p  =  getDomainUpperBound(p);  [CE]  unreachable  statement  [FE]                StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE  /  getDomainUpperBound(p);  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MIN_VALUE  /  getDomainUpperBound(p);  p  =  getDomainUpperBound(p);	  return    Double.MAX_VALUE    /    getDomainUpperBound(p);    p    =    getDomainUpperBound(p);    	non-compiled	[CE]  unreachable  statement	123	None	replace
78	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p)+  1;  p  =  getDomainUpperBound(p);  [CE]  unreachable  statement  [FE]                  StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p)+  1;  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MAX_VALUE  /  getDomainUpperBound(p)+  1;  p  =  getDomainUpperBound(p);	  return    Double.MAX_VALUE    /    getDomainUpperBound(p);    p    =    getDomainUpperBound(p);    	non-compiled	[CE]  unreachable  statement	123	None	replace
79	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p)-  1;  p  =  getDomainUpperBound(p);  [CE]  unreachable  statement  [FE]                    StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p)-  1;  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MAX_VALUE  /  getDomainUpperBound(p)-  1;  p  =  getDomainUpperBound(p);	  return    Double.MAX_VALUE    /    getDomainUpperBound(p);    p    =    getDomainUpperBound(p);    	non-compiled	[CE]  unreachable  statement	123	None	replace
80	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  *  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Double.MAX_VALUE  *  getDomainLowerBound(p);	  return    Double.MAX_VALUE    /    getDomainLowerBound(p);    	compilable	  [FE]  IllegalArgumentException  	185	3	replace
81	[BUG]  [BUGGY]  return  Double.MAX_VALUE  *  getDomainLowerBound(p);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  *  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MAX_VALUE  *  getDomainLowerBound(p);	  return    Double.MAX_VALUE    /    getDomainLowerBound(p);    	compilable	  [FE]  IllegalArgumentException  	185	3	replace
82	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  +  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Double.MAX_VALUE  +  getDomainLowerBound(p);	  return    Double.MAX_VALUE    /    getDomainLowerBound(p);    	compilable	  [FE]  IllegalArgumentException  	185	1	replace
83	[BUG]  [BUGGY]  return  Double.MAX_VALUE  +  getDomainLowerBound(p);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  +  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MAX_VALUE  +  getDomainLowerBound(p);	  return    Double.MAX_VALUE    /    getDomainLowerBound(p);    	compilable	  [FE]  IllegalArgumentException  	185	1	replace
84	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  /  1;  [CE]  missing  return  statement  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  /  1;  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  /  1;	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom()    +    1;    	non-compiled	[CE]  missing  return  statement	218	None	replace
85	[BUG]  [BUGGY]  return  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;	  	non-compiled	[CE]  not  a  statement	152	None	add
86	[BUG]  [BUGGY]  return  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  double  p  =  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  double  p  =  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    double  p  =  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	152	None	add
87	[BUG]  [BUGGY]  return  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE);  [CE]  not  a  statement  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE);	  	non-compiled	[CE]  not  a  statement	152	None	add
88	[BUG]  [BUGGY]  return  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	152	None	add
89	[BUG]  [BUGGY]  return  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  [CE]  not  a  statement  [FE]            IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;	  	non-compiled	[CE]  not  a  statement	152	None	add
90	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  n);  [CE]  cannot  find  symbol  n  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  n);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  n);	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p,    d);    	non-compiled	[CE]  cannot  find  symbol  n	166	None	replace
91	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  [CE]  missing  return  statement  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;	  return    Double.MIN_VALUE;    if(p    <    =    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Double.MIN_VALUE;    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    +    denominatorDegre    	non-compiled	[CE]  missing  return  statement	212	None	replace
92	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  ==  null)  {  return  denominatorDegreesOfFreedom  +  denominatorDegre  [CE]  ';'  expected  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  ==  null)  {  return  denominatorDegreesOfFreedom  +  denominatorDegre  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  ==  null)  {  return  denominatorDegreesOfFreedom  +  denominatorDegre	  return    Double.MIN_VALUE;    if(p    <    =    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Double.MIN_VALUE;    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    +    denominatorDegre    	non-compiled	[CE]  ';'  expected	212	None	replace
93	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  denominatorDegre  [CE]  ';'  expected  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  denominatorDegre  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  denominatorDegre	  return    Double.MIN_VALUE;    if(p    <    =    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Double.MIN_VALUE;    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    +    denominatorDegre    	non-compiled	[CE]  ';'  expected	212	None	replace
94	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  >=  null)  {  return  denominatorDegreesOfFreedom  +  denominatorDegre  [CE]  ';'  expected  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  >=  null)  {  return  denominatorDegreesOfFreedom  +  denominatorDegre  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  >=  null)  {  return  denominatorDegreesOfFreedom  +  denominatorDegre	  return    Double.MIN_VALUE;    if(p    <    =    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Double.MIN_VALUE;    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    +    denominatorDegre    	non-compiled	[CE]  ';'  expected	212	None	replace
95	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  *.doubleValue();  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  *.doubleValue();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  *.doubleValue();	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom()    /.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
96	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  /.doubleValue();  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  /.doubleValue();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  /.doubleValue();	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom()    /.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
97	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom()  /.doubleValue();  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom()  /.doubleValue();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom()  /.doubleValue();	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom()    /.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
98	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  *.doubleValue();  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  *.doubleValue();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  *.doubleValue();	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom()    /.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
99	[BUG]  [BUGGY]          Double    m    =    getDomainUpperBound(p);    m  =  getDomainUpperBound(p);  Double  m  =  getDomainUpperBound(p);  m  =  getDomainUpperBound(p);  [CE]  variable  m  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          Double    m    =    getDomainUpperBound(p);    m  =  getDomainUpperBound(p);  Double  m  =  getDomainUpperBound(p);  m  =  getDomainUpperBound(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                Double        m        =        getDomainUpperBound(p);        m    =    getDomainUpperBound(p);    Double  m  =  getDomainUpperBound(p);  m  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  m  is  already  defined  in  method  getDomainUpperBound(double)	155	None	add
100	[BUG]  [BUGGY]          Double    m    =    getDomainUpperBound(p);    m  =  getDomainUpperBound(p);  Double  p  =  getDomainUpperBound(p);  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          Double    m    =    getDomainUpperBound(p);    m  =  getDomainUpperBound(p);  Double  p  =  getDomainUpperBound(p);  p  =  getDomainUpperBound(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                Double        m        =        getDomainUpperBound(p);        m    =    getDomainUpperBound(p);    Double  p  =  getDomainUpperBound(p);  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	155	None	add
101	[BUG]  [BUGGY]          Double    m    =    getDomainUpperBound(p);    m  =  getDomainUpperBound(p);  Double  p  =  getDomainUpperBound(p);  m  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]        StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          Double    m    =    getDomainUpperBound(p);    m  =  getDomainUpperBound(p);  Double  p  =  getDomainUpperBound(p);  m  =  getDomainUpperBound(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                Double        m        =        getDomainUpperBound(p);        m    =    getDomainUpperBound(p);    Double  p  =  getDomainUpperBound(p);  m  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	155	None	add
102	[BUG]  [BUGGY]          Double    m    =    getDomainUpperBound(p);    m  =  getDomainUpperBound(p);  double  p  =  getDomainUpperBound(p);  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]          StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          Double    m    =    getDomainUpperBound(p);    m  =  getDomainUpperBound(p);  double  p  =  getDomainUpperBound(p);  p  =  getDomainUpperBound(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                Double        m        =        getDomainUpperBound(p);        m    =    getDomainUpperBound(p);    double  p  =  getDomainUpperBound(p);  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	155	None	add
103	[BUG]  [BUGGY]          Double    m    =    getDomainUpperBound(p);    m  =  getDomainUpperBound(p);  double  m  =  getDomainUpperBound(p);  m  =  getDomainUpperBound(p);  [CE]  variable  m  is  already  defined  in  method  getDomainUpperBound(double)  [FE]            StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          Double    m    =    getDomainUpperBound(p);    m  =  getDomainUpperBound(p);  double  m  =  getDomainUpperBound(p);  m  =  getDomainUpperBound(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                Double        m        =        getDomainUpperBound(p);        m    =    getDomainUpperBound(p);    double  m  =  getDomainUpperBound(p);  m  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  m  is  already  defined  in  method  getDomainUpperBound(double)	155	None	add
104	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;	  return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MIN_VALUE;    	compilable	  [FE]  IllegalArgumentException  	104	1	replace
105	[BUG]  [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;	  return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MIN_VALUE;    	compilable	  [FE]  IllegalArgumentException  	104	1	replace
106	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  [CE]  >  expected  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;	  return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MIN_VALUE;    	non-compiled	[CE]  >  expected	104	None	replace
107	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  [CE]  not  a  statement  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;	  return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MIN_VALUE;    	non-compiled	[CE]  not  a  statement	104	None	replace
108	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  [CE]  >  expected  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;	  return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MIN_VALUE;    	non-compiled	[CE]  >  expected	104	None	replace
109	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY;  Double.POSITIVE_INFINITY;  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.POSITIVE_INFINITY;  Double.POSITIVE_INFINITY;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.POSITIVE_INFINITY;    Double.POSITIVE_INFINITY;	  	non-compiled	[CE]  not  a  statement	236	None	add
110	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY;  double  m  =  getDomainUpperBound(p);  [CE]  unreachable  statement  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.POSITIVE_INFINITY;  double  m  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.POSITIVE_INFINITY;    double  m  =  getDomainUpperBound(p);	  	non-compiled	[CE]  unreachable  statement	236	None	add
111	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY;  double  m  =  getDomainUpperBound();  [CE]  no  suitable  method  found  for  getDomainUpperBound()  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.POSITIVE_INFINITY;  double  m  =  getDomainUpperBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.POSITIVE_INFINITY;    double  m  =  getDomainUpperBound();	  	non-compiled	[CE]  no  suitable  method  found  for  getDomainUpperBound()	236	None	add
112	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY;  double  m  =  getDomainUpperBounds(p);  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.POSITIVE_INFINITY;  double  m  =  getDomainUpperBounds(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.POSITIVE_INFINITY;    double  m  =  getDomainUpperBounds(p);	  	non-compiled	[CE]  cannot  find  symbol	236	None	add
113	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY;  double  m  =  getMask();  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.POSITIVE_INFINITY;  double  m  =  getMask();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.POSITIVE_INFINITY;    double  m  =  getMask();	  	non-compiled	[CE]  cannot  find  symbol	236	None	add
114	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  p  =  getDenominatorDegreesOfFreedom();  [CE]  missing  return  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  p  =  getDenominatorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  p  =  getDenominatorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    p    =    getDenominatorDegreesOfFreedom();    	non-compiled	[CE]  missing  return  statement	197	None	replace
115	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom();  p  =  getDenominatorDegreesOfFreedom();  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom();  p  =  getDenominatorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom();  p  =  getDenominatorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    p    =    getDenominatorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	197	None	replace
116	[BUG]  [BUGGY]  p  =  getDenominatorDegreesOfFreedom();  [CE]  missing  return  statement  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  p  =  getDenominatorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	p  =  getDenominatorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    p    =    getDenominatorDegreesOfFreedom();    	non-compiled	[CE]  missing  return  statement	197	None	replace
117	[BUG]  [BUGGY]  return  Float.MAX_VALUE  /  2.0;  Float.MAX_VALUE  /  2.0;  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MAX_VALUE  /  2.0;  Float.MAX_VALUE  /  2.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MAX_VALUE    /    2.0;    Float.MAX_VALUE  /  2.0;	  	non-compiled	[CE]  not  a  statement	41	None	add
118	[BUG]  [BUGGY]  return  Float.MAX_VALUE  /  2.0;  Double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MAX_VALUE  /  2.0;  Double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MAX_VALUE    /    2.0;    Double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	41	None	add
119	[BUG]  [BUGGY]  return  Float.MAX_VALUE  /  2.0;  Double  m  =  getDomainUpperBound(p);  [CE]  unreachable  statement  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MAX_VALUE  /  2.0;  Double  m  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MAX_VALUE    /    2.0;    Double  m  =  getDomainUpperBound(p);	  	non-compiled	[CE]  unreachable  statement	41	None	add
120	[BUG]  [BUGGY]  return  Float.MAX_VALUE  /  2.0;  Double  p  =  getDomainUpperBound();  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MAX_VALUE  /  2.0;  Double  p  =  getDomainUpperBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MAX_VALUE    /    2.0;    Double  p  =  getDomainUpperBound();	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	41	None	add
121	[BUG]  [BUGGY]  return  Float.MAX_VALUE  /  2.0;  Double  p  =  getDomain(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]            IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MAX_VALUE  /  2.0;  Double  p  =  getDomain(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MAX_VALUE    /    2.0;    Double  p  =  getDomain(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	41	None	add
122	[BUG]  [BUGGY]  p  =  getNumeratorDegreesOfFreedom();  [CE]  missing  return  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  p  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	p  =  getNumeratorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    p    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  missing  return  statement	178	None	replace
123	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom();  p  =  getNumeratorDegreesOfFreedom();  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom();  p  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom();  p  =  getNumeratorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    p    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	178	None	replace
124	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  p  =  getDomainUpperBound();  [CE]  no  suitable  method  found  for  getDomainUpperBound()  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  p  =  getDomainUpperBound();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  p  =  getDomainUpperBound();	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    p    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  no  suitable  method  found  for  getDomainUpperBound()	178	None	replace
125	[BUG]  [BUGGY]  Double.MAX_VALUE  =  getDomainUpperBound(p);  [CE]  cannot  assign  a  value  to  final  variable  MAX_VALUE  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double.MAX_VALUE  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double.MAX_VALUE  =  getDomainUpperBound(p);	  return    Double.MAX_VALUE    /    getDomainUpperBound(p);    Double.MAX_VALUE    =    getDomainUpperBound(p);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  MAX_VALUE	169	None	replace
126	[BUG]  [BUGGY]  return  Double.MIN_VALUE  /  getDomainUpperBound(p);  Double.MAX_VALUE  =  getDomainUpperBound(p);  [CE]  cannot  assign  a  value  to  final  variable  MAX_VALUE  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE  /  getDomainUpperBound(p);  Double.MAX_VALUE  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MIN_VALUE  /  getDomainUpperBound(p);  Double.MAX_VALUE  =  getDomainUpperBound(p);	  return    Double.MAX_VALUE    /    getDomainUpperBound(p);    Double.MAX_VALUE    =    getDomainUpperBound(p);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  MAX_VALUE	169	None	replace
127	[BUG]  [BUGGY]  return  Double.MAX_VALUE  *  getDomainUpperBound(p);  Double.MAX_VALUE  =  getDomainUpperBound(p);  [CE]  cannot  assign  a  value  to  final  variable  MAX_VALUE  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  *  getDomainUpperBound(p);  Double.MAX_VALUE  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MAX_VALUE  *  getDomainUpperBound(p);  Double.MAX_VALUE  =  getDomainUpperBound(p);	  return    Double.MAX_VALUE    /    getDomainUpperBound(p);    Double.MAX_VALUE    =    getDomainUpperBound(p);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  MAX_VALUE	169	None	replace
128	[BUG]  [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE  [CE]  not  a  statement  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE	  return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE    	non-compiled	[CE]  not  a  statement	199	None	replace
129	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE  [CE]  >  expected  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE	  return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE    	non-compiled	[CE]  >  expected	199	None	replace
130	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE  [CE]  not  a  statement  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE	  return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE    	non-compiled	[CE]  not  a  statement	199	None	replace
131	[BUG]  [BUGGY]  double  n  =  getDomainUpperBound(p  +  1);  [CE]  missing  return  statement  [FE]                      IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  n  =  getDomainUpperBound(p  +  1);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  n  =  getDomainUpperBound(p  +  1);	  double    n    =    getDomainUpperBound(p);    	non-compiled	[CE]  missing  return  statement	52	None	replace
132	[BUG]  [BUGGY]  double  n  =  getDomainUpperBound(p)-  1;  [CE]  missing  return  statement  [FE]                        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  n  =  getDomainUpperBound(p)-  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  n  =  getDomainUpperBound(p)-  1;	  double    n    =    getDomainUpperBound(p);    	non-compiled	[CE]  missing  return  statement	52	None	replace
133	[BUG]  [BUGGY]  double  n  =  getDomainLowerBound(p);  [CE]  missing  return  statement  [FE]                          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  n  =  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  n  =  getDomainLowerBound(p);	  double    n    =    getDomainUpperBound(p);    	non-compiled	[CE]  missing  return  statement	52	None	replace
134	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  m,  denominatorDegreesOfFreedom);  [CE]  cannot  find  symbol  m  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  m,  denominatorDegreesOfFreedom);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  m,  denominatorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  m	165	None	replace
135	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(m,  p,  denominatorDegreesOfFreedom);  [CE]  cannot  find  symbol  m  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(m,  p,  denominatorDegreesOfFreedom);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(m,  p,  denominatorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  m	165	None	replace
136	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  n,  denominatorDegreesOfFreedom);  [CE]  cannot  find  symbol  n  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  n,  denominatorDegreesOfFreedom);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  n,  denominatorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  n	165	None	replace
137	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  x,  denominatorDegreesOfFreedom);  [CE]  cannot  find  symbol  x  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  x,  denominatorDegreesOfFreedom);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  x,  denominatorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  x	165	None	replace
138	[BUG]  [BUGGY]  if(p  <  0.0)  {  return  Float.MIN_VALUE;  IllegalArgumentException  x  =  getDomainUpperBound();  }  [CE]  no  suitable  method  found  for  getDomainUpperBound()  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0.0)  {  return  Float.MIN_VALUE;  IllegalArgumentException  x  =  getDomainUpperBound();  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  0.0)  {  return  Float.MIN_VALUE;  IllegalArgumentException  x  =  getDomainUpperBound();  }	  return    Float.MIN_VALUE;    IllegalArgumentException    x    =    getDomainUpperBound();    	non-compiled	[CE]  no  suitable  method  found  for  getDomainUpperBound()	172	None	replace
139	[BUG]  [BUGGY]  if(p  >  0.0)  {  return  Float.MIN_VALUE;  IllegalArgumentException  x  =  getDomainUpperBound();  }  [CE]  no  suitable  method  found  for  getDomainUpperBound()  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  >  0.0)  {  return  Float.MIN_VALUE;  IllegalArgumentException  x  =  getDomainUpperBound();  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  >  0.0)  {  return  Float.MIN_VALUE;  IllegalArgumentException  x  =  getDomainUpperBound();  }	  return    Float.MIN_VALUE;    IllegalArgumentException    x    =    getDomainUpperBound();    	non-compiled	[CE]  no  suitable  method  found  for  getDomainUpperBound()	172	None	replace
140	[BUG]  [BUGGY]  IllegalArgumentException  x  =  getDomainUpperBounds(p);  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  IllegalArgumentException  x  =  getDomainUpperBounds(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	IllegalArgumentException  x  =  getDomainUpperBounds(p);	  return    Double.MIN_VALUE;    IllegalArgumentException    x    =    getDomainUpperBounds(p);    	non-compiled	[CE]  cannot  find  symbol	183	None	replace
141	[BUG]  [BUGGY]  x  =  getDomainUpperBounds(p);  [CE]  cannot  find  symbol  x  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  x  =  getDomainUpperBounds(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	x  =  getDomainUpperBounds(p);	  return    Double.MIN_VALUE;    IllegalArgumentException    x    =    getDomainUpperBounds(p);    	non-compiled	[CE]  cannot  find  symbol  x	183	None	replace
142	[BUG]  [BUGGY]  double  p  =  getDomainUpperBounds(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  p  =  getDomainUpperBounds(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  p  =  getDomainUpperBounds(p);	  return    Double.MIN_VALUE;    IllegalArgumentException    x    =    getDomainUpperBounds(p);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	183	None	replace
143	[BUG]  [BUGGY]  n  =  getDomainUpperBounds(p);  [CE]  cannot  find  symbol  n  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  n  =  getDomainUpperBounds(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	n  =  getDomainUpperBounds(p);	  return    Double.MIN_VALUE;    IllegalArgumentException    x    =    getDomainUpperBounds(p);    	non-compiled	[CE]  cannot  find  symbol  n	183	None	replace
144	[BUG]  [BUGGY]  Double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom().doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom().doubleValue();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom().doubleValue();	          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom().doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	33	None	replace
145	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom().doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom().doubleValue();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom().doubleValue();	          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom().doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	33	None	replace
146	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom().doubleValue();  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom().doubleValue();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom().doubleValue();	          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom().doubleValue();    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
147	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  *  getDomainUpperBound(p)+  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Double.MAX_VALUE  *  getDomainUpperBound(p)+  1;	  return    Double.MAX_VALUE    /    getDomainUpperBound(p)+    1;    	compilable	  [FE]  StackOverflowError  	40	3	replace
148	[BUG]  [BUGGY]  return  Double.MAX_VALUE  *  getDomainUpperBound(p)+  1;  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  *  getDomainUpperBound(p)+  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MAX_VALUE  *  getDomainUpperBound(p)+  1;	  return    Double.MAX_VALUE    /    getDomainUpperBound(p)+    1;    	compilable	  [FE]  StackOverflowError  	40	3	replace
149	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p)+  2;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Double.MAX_VALUE  /  getDomainUpperBound(p)+  2;	  return    Double.MAX_VALUE    /    getDomainUpperBound(p)+    1;    	compilable	  [FE]  StackOverflowError  	40	3	replace
150	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p)+  2;  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p)+  2;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MAX_VALUE  /  getDomainUpperBound(p)+  2;	  return    Double.MAX_VALUE    /    getDomainUpperBound(p)+    1;    	compilable	  [FE]  StackOverflowError  	40	3	replace
151	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE  /  getDomainUpperBound(p)+  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Double.MIN_VALUE  /  getDomainUpperBound(p)+  1;	  return    Double.MAX_VALUE    /    getDomainUpperBound(p)+    1;    	compilable	  [FE]  StackOverflowError  	40	3	replace
152	[BUG]  [BUGGY]  return  Double.MIN_VALUE  /  getDomainUpperBound(p)+  1;  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE  /  getDomainUpperBound(p)+  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MIN_VALUE  /  getDomainUpperBound(p)+  1;	  return    Double.MAX_VALUE    /    getDomainUpperBound(p)+    1;    	compilable	  [FE]  StackOverflowError  	40	3	replace
153	[BUG]  [BUGGY]  return  getDenominatorDegreesOfFreedom(m,  p);  [CE]  cannot  find  symbol  m  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDenominatorDegreesOfFreedom(m,  p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  getDenominatorDegreesOfFreedom(m,  p);	  return    getDenominatorDegreesOfFreedom(p);    	non-compiled	[CE]  cannot  find  symbol  m	134	None	replace
154	[BUG]  [BUGGY]  return  getDenominatorDegreesOfFreedom(p,  m);  [CE]  cannot  find  symbol  m  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDenominatorDegreesOfFreedom(p,  m);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  getDenominatorDegreesOfFreedom(p,  m);	  return    getDenominatorDegreesOfFreedom(p);    	non-compiled	[CE]  cannot  find  symbol  m	134	None	replace
155	[BUG]  [BUGGY]  return  getDenominatorDegreesOfFreedom(p,  denominatorDegreesOfFreedom);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDenominatorDegreesOfFreedom(p,  denominatorDegreesOfFreedom);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  getDenominatorDegreesOfFreedom(p,  denominatorDegreesOfFreedom);	  return    getDenominatorDegreesOfFreedom(p);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	134	None	replace
156	[BUG]  [BUGGY]  return  getDenominatorDegreesOfFreedom(p,  numeratorDegreesOfFreedom);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]              StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDenominatorDegreesOfFreedom(p,  numeratorDegreesOfFreedom);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  getDenominatorDegreesOfFreedom(p,  numeratorDegreesOfFreedom);	  return    getDenominatorDegreesOfFreedom(p);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	134	None	replace
157	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MIN_VALUE  /  2  +  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Float.MIN_VALUE  /  2  +  1;	  return    Float.MIN_VALUE    /    2;    	compilable	  [FE]  IllegalArgumentException  	149	3	replace
158	[BUG]  [BUGGY]  return  Float.MIN_VALUE  /  2  +  1;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MIN_VALUE  /  2  +  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Float.MIN_VALUE  /  2  +  1;	  return    Float.MIN_VALUE    /    2;    	compilable	  [FE]  IllegalArgumentException  	149	3	replace
159	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MIN_VALUE  /  4;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Float.MIN_VALUE  /  4;	  return    Float.MIN_VALUE    /    2;    	compilable	  [FE]  IllegalArgumentException  	149	3	replace
160	[BUG]  [BUGGY]  return  Float.MIN_VALUE  /  4;  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MIN_VALUE  /  4;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Float.MIN_VALUE  /  4;	  return    Float.MIN_VALUE    /    2;    	compilable	  [FE]  IllegalArgumentException  	149	3	replace
161	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  /  2;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p  /  2;	  return    Float.MIN_VALUE    /    2;    	compilable	  [FE]  IllegalArgumentException  	149	3	replace
162	[BUG]  [BUGGY]  return  p  /  2;  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  /  2;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  /  2;	  return    Float.MIN_VALUE    /    2;    	compilable	  [FE]  IllegalArgumentException  	149	3	replace
163	[BUG]  [BUGGY]  ||  p  <  =  0.0)  {  return  Float.MAX_VALUE;  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  ||  p  <  =  0.0)  {  return  Float.MAX_VALUE;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	||  p  <  =  0.0)  {  return  Float.MAX_VALUE;  }	  return    Float.MAX_VALUE;    if(p    <    =    0.0)    {    return    Float.MAX_VALUE;    }    	non-compiled	[CE]  illegal  start  of  expression	220	None	replace
164	[BUG]  [BUGGY]  this.numeratorDegreesOfFreedom  =  Float.MAX_VALUE;  [CE]  missing  return  statement  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  this.numeratorDegreesOfFreedom  =  Float.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	this.numeratorDegreesOfFreedom  =  Float.MAX_VALUE;	  return    Float.MAX_VALUE;    if(p    <    =    0.0)    {    return    Float.MAX_VALUE;    }    	non-compiled	[CE]  missing  return  statement	220	None	replace
165	[BUG]  [BUGGY]  double  p  =  Float.MAX_VALUE;  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  p  =  Float.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  p  =  Float.MAX_VALUE;	  return    Float.MAX_VALUE;    if(p    <    =    0.0)    {    return    Float.MAX_VALUE;    }    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	220	None	replace
166	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p  <  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;	  return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    if(p    <    Double.MIN_VALUE)    {    return    p    <    Double.MAX_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    }    	compilable	  [FE]  IllegalArgumentException  	203	1	replace
167	[BUG]  [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;	  return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    if(p    <    Double.MIN_VALUE)    {    return    p    <    Double.MAX_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    }    	compilable	  [FE]  IllegalArgumentException  	203	1	replace
168	[BUG]  [BUGGY]  return  Double.NaN;  Double.NaN;  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.NaN;  Double.NaN;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.NaN;    Double.NaN;	  	non-compiled	[CE]  not  a  statement	238	None	add
169	[BUG]  [BUGGY]  return  Double.NaN;  double  m  =  getDomainUpperBound(p);  [CE]  unreachable  statement  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.NaN;  double  m  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.NaN;    double  m  =  getDomainUpperBound(p);	  	non-compiled	[CE]  unreachable  statement	238	None	add
170	[BUG]  [BUGGY]  return  Double.NaN;  double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.NaN;  double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.NaN;    double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	238	None	add
171	[BUG]  [BUGGY]  return  Double.NaN;  double  m  =  getDomainUpperBound();  [CE]  no  suitable  method  found  for  getDomainUpperBound()  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.NaN;  double  m  =  getDomainUpperBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.NaN;    double  m  =  getDomainUpperBound();	  	non-compiled	[CE]  no  suitable  method  found  for  getDomainUpperBound()	238	None	add
172	[BUG]  [BUGGY]  return  Double.NaN;  double  p  =  getDomainUpperBound();  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]            IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.NaN;  double  p  =  getDomainUpperBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.NaN;    double  p  =  getDomainUpperBound();	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	238	None	add
173	[BUG]  [BUGGY]  double  m  =  getDomainUpperBound();  [CE]  no  suitable  method  found  for  getDomainUpperBound()  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  m  =  getDomainUpperBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  m  =  getDomainUpperBound();	  return    Double.MIN_VALUE;    double    m    =    getDomainUpperBound();    	non-compiled	[CE]  no  suitable  method  found  for  getDomainUpperBound()	110	None	replace
174	[BUG]  [BUGGY]  n  =  getDomainUpperBound();  [CE]  cannot  find  symbol  n  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  n  =  getDomainUpperBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	n  =  getDomainUpperBound();	  return    Double.MIN_VALUE;    double    m    =    getDomainUpperBound();    	non-compiled	[CE]  cannot  find  symbol  n	110	None	replace
175	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom().doubleValue()  /  1;  [CE]  double  cannot  be  dereferenced  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom().doubleValue()  /  1;  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom().doubleValue()  /  1;	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom().doubleValue()    +    1;    	non-compiled	[CE]  double  cannot  be  dereferenced	86	None	replace
176	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  /.doubleValue()  +  1;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  /.doubleValue()  +  1;  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  /.doubleValue()  +  1;	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom().doubleValue()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
177	[BUG]  [BUGGY]  return  p  >=  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  >=  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >=  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  >=  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >=    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    p  >=  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;	  	non-compiled	[CE]  not  a  statement	24	None	add
178	[BUG]  [BUGGY]  return  p  >=  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >=  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >=    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	24	None	add
179	[BUG]  [BUGGY]  return  p  >=  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  Double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >=  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  Double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >=    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    Double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	24	None	add
180	[BUG]  [BUGGY]  return  p  >=  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  double  p  =  getDomainUpperBound();  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >=  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  double  p  =  getDomainUpperBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >=    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    double  p  =  getDomainUpperBound();	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	24	None	add
181	[BUG]  [BUGGY]  return  p  >=  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  >=  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE);  [CE]  not  a  statement  [FE]            IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >=  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  >=  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >=    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    p  >=  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE);	  	non-compiled	[CE]  not  a  statement	24	None	add
182	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDomainUpperBound(p)  <  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  getDomainUpperBound(p)  <  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;	  return    p    <    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    Double    p    =    getDomainUpperBound(p);    	compilable	  [FE]  StackOverflowError  	154	3	replace
183	[BUG]  [BUGGY]  return  getDomainUpperBound(p)  <  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  [FE]  StackOverflowError  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDomainUpperBound(p)  <  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  getDomainUpperBound(p)  <  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;	  return    p    <    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    Double    p    =    getDomainUpperBound(p);    	compilable	  [FE]  StackOverflowError  	154	3	replace
184	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDomainUpperBound(p  /  1);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  getDomainUpperBound(p  /  1);	  return    getDomainUpperBound(p    -    1);    	compilable	  [FE]  StackOverflowError  	138	3	replace
185	[BUG]  [BUGGY]  return  getDomainUpperBound(p  /  1);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDomainUpperBound(p  /  1);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  getDomainUpperBound(p  /  1);	  return    getDomainUpperBound(p    -    1);    	compilable	  [FE]  StackOverflowError  	138	3	replace
186	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDomainUpperBound(p  -  2);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  getDomainUpperBound(p  -  2);	  return    getDomainUpperBound(p    -    1);    	compilable	  [FE]  StackOverflowError  	138	3	replace
187	[BUG]  [BUGGY]  return  getDomainUpperBound(p  -  2);  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDomainUpperBound(p  -  2);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  getDomainUpperBound(p  -  2);	  return    getDomainUpperBound(p    -    1);    	compilable	  [FE]  StackOverflowError  	138	3	replace
188	[BUG]  [BUGGY]  this.numeratorDegreesOfFreedom  =  Float.parseFloat(p);  [CE]  method  parseFloat  in  class  Float  cannot  be  applied  to  given  types;  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  this.numeratorDegreesOfFreedom  =  Float.parseFloat(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	this.numeratorDegreesOfFreedom  =  Float.parseFloat(p);	  return    Float.MAX_VALUE;    if(p    <    0.0    ||    p    >    1.0)    {    return    Float.MAX_VALUE;    }    	non-compiled	[CE]  method  parseFloat  in  class  Float  cannot  be  applied  to  given  types;	219	None	replace
189	[BUG]  [BUGGY]  this.numeratorDegreesOfFreedom  =  Double.parseDouble(p);  [CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  this.numeratorDegreesOfFreedom  =  Double.parseDouble(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	this.numeratorDegreesOfFreedom  =  Double.parseDouble(p);	  return    Float.MAX_VALUE;    if(p    <    0.0    ||    p    >    1.0)    {    return    Float.MAX_VALUE;    }    	non-compiled	[CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;	219	None	replace
190	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  /  2.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p  /  2.0;	  return    Float.MIN_VALUE    /    2.0;    	compilable	  [FE]  IllegalArgumentException  	90	3	replace
191	[BUG]  [BUGGY]  return  p  /  2.0;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  /  2.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  /  2.0;	  return    Float.MIN_VALUE    /    2.0;    	compilable	  [FE]  IllegalArgumentException  	90	3	replace
192	[BUG]  [BUGGY]  return  float.MIN_VALUE  /  2.0;  [CE]  class  expected  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  float.MIN_VALUE  /  2.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  float.MIN_VALUE  /  2.0;	  return    Float.MIN_VALUE    /    2.0;    	non-compiled	[CE]  class  expected	90	None	replace
193	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MIN_VALUE  *  2.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Float.MIN_VALUE  *  2.0;	  return    Float.MIN_VALUE    /    2.0;    	compilable	  [FE]  IllegalArgumentException  	90	3	replace
194	[BUG]  [BUGGY]  return  Float.MIN_VALUE  *  2.0;  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MIN_VALUE  *  2.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Float.MIN_VALUE  *  2.0;	  return    Float.MIN_VALUE    /    2.0;    	compilable	  [FE]  IllegalArgumentException  	90	3	replace
195	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  [CE]  >  expected  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.NEGATIVE_INFINITY;    p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;	  	non-compiled	[CE]  >  expected	47	None	add
196	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.NEGATIVE_INFINITY;    double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	47	None	add
197	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  Double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  Double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.NEGATIVE_INFINITY;    Double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	47	None	add
198	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY);  [CE]  >  expected  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.NEGATIVE_INFINITY;    p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY);	  	non-compiled	[CE]  >  expected	47	None	add
199	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p  ==  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;	  return    p!=    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	151	1	replace
200	[BUG]  [BUGGY]  return  p  ==  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  ==  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;	  return    p!=    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	151	1	replace
201	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p  ==  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;	  return    p!=    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	151	3	replace
202	[BUG]  [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  ==  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;	  return    p!=    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	151	3	replace
203	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom(),  p.doubleValue();  [CE]  ';'  expected  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom(),  p.doubleValue();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom(),  p.doubleValue();	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(),    p.doubleValue();    	non-compiled	[CE]  ';'  expected	84	None	replace
204	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(),  p.doubleValue();  [CE]  ';'  expected  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(),  p.doubleValue();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(),  p.doubleValue();	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(),    p.doubleValue();    	non-compiled	[CE]  ';'  expected	84	None	replace
205	[BUG]  [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;	  	non-compiled	[CE]  not  a  statement	157	None	add
206	[BUG]  [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  Double  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  Double  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    Double  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;	  	non-compiled	[CE]  ';'  expected	157	None	add
207	[BUG]  [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	157	None	add
208	[BUG]  [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE);  [CE]  not  a  statement  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE);	  	non-compiled	[CE]  not  a  statement	157	None	add
209	[BUG]  [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  Double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]            IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  Double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    Double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	157	None	add
210	[BUG]  [BUGGY]  Double.MAX_VALUE  =  getDomainUpperBounds(p);  [CE]  cannot  assign  a  value  to  final  variable  MAX_VALUE  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double.MAX_VALUE  =  getDomainUpperBounds(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double.MAX_VALUE  =  getDomainUpperBounds(p);	  return    Double.MAX_VALUE    /    2.0;    IllegalArgumentException    x    =    getDomainUpperBounds(p);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  MAX_VALUE	168	None	replace
211	[BUG]  [BUGGY]  return  p  <  Double.MAX_VALUE  &&  p  <  =  Double.MIN_VALUE;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MAX_VALUE  &&  p  <  =  Double.MIN_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  Double.MAX_VALUE  &&  p  <  =  Double.MIN_VALUE;	  return    p    >    Double.MAX_VALUE    &&    p    <    =    Double.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
212	[BUG]  [BUGGY]  return  p  ==  Double.MAX_VALUE  &&  p  <  =  Double.MIN_VALUE;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MAX_VALUE  &&  p  <  =  Double.MIN_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  ==  Double.MAX_VALUE  &&  p  <  =  Double.MIN_VALUE;	  return    p    >    Double.MAX_VALUE    &&    p    <    =    Double.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
213	[BUG]  [BUGGY]  return  p  >=  Double.MAX_VALUE  &&  p  <  =  Double.MIN_VALUE;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >=  Double.MAX_VALUE  &&  p  <  =  Double.MIN_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  >=  Double.MAX_VALUE  &&  p  <  =  Double.MIN_VALUE;	  return    p    >    Double.MAX_VALUE    &&    p    <    =    Double.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
214	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE  &&  p  >  Double.MAX_VALUE;  [CE]  incompatible  types  [FE]                            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE  &&  p  >  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  Double.MIN_VALUE  &&  p  >  Double.MAX_VALUE;	  return    p    >    Double.MAX_VALUE    &&    p    <    =    Double.MIN_VALUE;    	non-compiled	[CE]  incompatible  types	60	None	replace
215	[BUG]  [BUGGY]  return  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [CE]  incompatible  types  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;	  return    p    <    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    if(p    <    Double.MAX_VALUE)    {    return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    }    	non-compiled	[CE]  incompatible  types	233	None	replace
216	[BUG]  [BUGGY]  double  m  =  getDomainUpperBound(p,  denominatorDegreesOfFreedom);  double  p  =  getDomainUpperBound(p);  [CE]  no  suitable  method  found  for  getDomainUpperBound(double,double)  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  m  =  getDomainUpperBound(p,  denominatorDegreesOfFreedom);  double  p  =  getDomainUpperBound(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  m  =  getDomainUpperBound(p,  denominatorDegreesOfFreedom);  double  p  =  getDomainUpperBound(p);	          double    m    =    getDomainUpperBound(p);    double    p    =    getDomainUpperBound(p);    	non-compiled	[CE]  no  suitable  method  found  for  getDomainUpperBound(double,double)	55	None	replace
217	[BUG]  [BUGGY]  double  m  =  getDomainUpperBound(p)-  1;  double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  m  =  getDomainUpperBound(p)-  1;  double  p  =  getDomainUpperBound(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  m  =  getDomainUpperBound(p)-  1;  double  p  =  getDomainUpperBound(p);	          double    m    =    getDomainUpperBound(p);    double    p    =    getDomainUpperBound(p);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	55	None	replace
218	[BUG]  [BUGGY]  Double  m  =  getDenominatorDegreesOfFreedom(p,  denominatorDegreesOfFreedom);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  m  =  getDenominatorDegreesOfFreedom(p,  denominatorDegreesOfFreedom);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  m  =  getDenominatorDegreesOfFreedom(p,  denominatorDegreesOfFreedom);	  Double    m    =    getDenominatorDegreesOfFreedom(p);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	144	None	replace
219	[BUG]  [BUGGY]  Double  m  =  getDenominatorDegreesOfFreedom(p,  numeratorDegreesOfFreedom);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  m  =  getDenominatorDegreesOfFreedom(p,  numeratorDegreesOfFreedom);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  m  =  getDenominatorDegreesOfFreedom(p,  numeratorDegreesOfFreedom);	  Double    m    =    getDenominatorDegreesOfFreedom(p);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	144	None	replace
220	[BUG]  [BUGGY]  Double  m  =  getDenominatorDegreesOfFreedom(n,  p);  [CE]  cannot  find  symbol  n  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  m  =  getDenominatorDegreesOfFreedom(n,  p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  m  =  getDenominatorDegreesOfFreedom(n,  p);	  Double    m    =    getDenominatorDegreesOfFreedom(p);    	non-compiled	[CE]  cannot  find  symbol  n	144	None	replace
221	[BUG]  [BUGGY]  Double  m  =  getDenominatorDegreesOfFreedom(p,  n);  [CE]  cannot  find  symbol  n  [FE]              StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  m  =  getDenominatorDegreesOfFreedom(p,  n);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  m  =  getDenominatorDegreesOfFreedom(p,  n);	  Double    m    =    getDenominatorDegreesOfFreedom(p);    	non-compiled	[CE]  cannot  find  symbol  n	144	None	replace
222	[BUG]  [BUGGY]  int  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  possible  loss  of  precision  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  int  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	int  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    int    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  possible  loss  of  precision	5	None	replace
223	[BUG]  [BUGGY]  long  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  possible  loss  of  precision  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  long  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	long  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    int    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  possible  loss  of  precision	5	None	replace
224	[BUG]  [BUGGY]  null  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  not  a  statement  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  null  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	null  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    int    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  not  a  statement	5	None	replace
225	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  +  1.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Double.MAX_VALUE  +  1.0;	  return    Double.MAX_VALUE    +    2.0;    	compilable	  [FE]  IllegalArgumentException  	19	1	replace
226	[BUG]  [BUGGY]  return  Double.MAX_VALUE  +  1.0;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  +  1.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MAX_VALUE  +  1.0;	  return    Double.MAX_VALUE    +    2.0;    	compilable	  [FE]  IllegalArgumentException  	19	1	replace
227	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  +  0.5;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Double.MAX_VALUE  +  0.5;	  return    Double.MAX_VALUE    +    2.0;    	compilable	  [FE]  IllegalArgumentException  	19	1	replace
228	[BUG]  [BUGGY]  return  Double.MAX_VALUE  +  0.5;  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  +  0.5;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MAX_VALUE  +  0.5;	  return    Double.MAX_VALUE    +    2.0;    	compilable	  [FE]  IllegalArgumentException  	19	1	replace
229	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  +  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Double.MAX_VALUE  +  0.0;	  return    Double.MAX_VALUE    +    2.0;    	compilable	  [FE]  IllegalArgumentException  	19	1	replace
230	[BUG]  [BUGGY]  return  Double.MAX_VALUE  +  0.0;  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  +  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MAX_VALUE  +  0.0;	  return    Double.MAX_VALUE    +    2.0;    	compilable	  [FE]  IllegalArgumentException  	19	1	replace
231	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  Double.MAX_VALUE;  [CE]  missing  return  statement  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  Double.MAX_VALUE;	  return    Double.MIN_VALUE;    if(p    <    =    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Double.MIN_VALUE;    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    	non-compiled	[CE]  missing  return  statement	213	None	replace
232	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  ==  null)  {  return  denominatorDegreesOfFreedom  [CE]  ';'  expected  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  ==  null)  {  return  denominatorDegreesOfFreedom  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  ==  null)  {  return  denominatorDegreesOfFreedom	  return    Double.MIN_VALUE;    if(p    <    =    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Double.MIN_VALUE;    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    	non-compiled	[CE]  ';'  expected	213	None	replace
233	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  [CE]  ';'  expected  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom	  return    Double.MIN_VALUE;    if(p    <    =    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Double.MIN_VALUE;    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    	non-compiled	[CE]  ';'  expected	213	None	replace
234	[BUG]  [BUGGY]  return  getNumberOfDegreesOfFreedom(p);  getDomainUpperBound(p);  [CE]  cannot  find  symbol  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getNumberOfDegreesOfFreedom(p);  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  getNumberOfDegreesOfFreedom(p);  getDomainUpperBound(p);	  return    getDomainUpperBound(p);    getDomainUpperBound(p);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
235	[BUG]  [BUGGY]  return  getNumberOfDegreesOfFreedom();  getDomainUpperBound(p);  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getNumberOfDegreesOfFreedom();  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  getNumberOfDegreesOfFreedom();  getDomainUpperBound(p);	  return    getDomainUpperBound(p);    getDomainUpperBound(p);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
236	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  numerator);  [CE]  cannot  find  symbol  numerator  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  numerator);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  numerator);	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p,    m);    	non-compiled	[CE]  cannot  find  symbol  numerator	91	None	replace
237	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.MIN_VALUE  :  Double.MIN_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p  <  Double.MIN_VALUE?  Double.MIN_VALUE  :  Double.MIN_VALUE;	  return    Double.MIN_VALUE;    Double.MIN_VALUE;    	compilable	  [FE]  IllegalArgumentException  	107	3	replace
238	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.MIN_VALUE  :  Double.MIN_VALUE;  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.MIN_VALUE  :  Double.MIN_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  Double.MIN_VALUE?  Double.MIN_VALUE  :  Double.MIN_VALUE;	  return    Double.MIN_VALUE;    Double.MIN_VALUE;    	compilable	  [FE]  IllegalArgumentException  	107	3	replace
239	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p  <  Double.MIN_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;	  return    Double.MIN_VALUE;    Double.MIN_VALUE;    	compilable	  [FE]  IllegalArgumentException  	107	1	replace
240	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  Double.MIN_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;	  return    Double.MIN_VALUE;    Double.MIN_VALUE;    	compilable	  [FE]  IllegalArgumentException  	107	1	replace
241	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE  ||  p  >  Double.MIN_VALUE;  [CE]  incompatible  types  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE  ||  p  >  Double.MIN_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  Double.MIN_VALUE  ||  p  >  Double.MIN_VALUE;	  return    Double.MIN_VALUE;    Double.MIN_VALUE;    	non-compiled	[CE]  incompatible  types	107	None	replace
242	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MAX_VALUE  *  2.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Float.MAX_VALUE  *  2.0;	  return    Float.MAX_VALUE    /    2.0;    	compilable	  [FE]  IllegalArgumentException  	42	1	replace
243	[BUG]  [BUGGY]  return  Float.MAX_VALUE  *  2.0;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MAX_VALUE  *  2.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Float.MAX_VALUE  *  2.0;	  return    Float.MAX_VALUE    /    2.0;    	compilable	  [FE]  IllegalArgumentException  	42	1	replace
244	[BUG]  [BUGGY]  return  float.MAX_VALUE  /  2.0;  [CE]  class  expected  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  float.MAX_VALUE  /  2.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  float.MAX_VALUE  /  2.0;	  return    Float.MAX_VALUE    /    2.0;    	non-compiled	[CE]  class  expected	42	None	replace
245	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE  :  Double.MAX_VALUE;  [CE]  not  a  statement  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE  :  Double.MAX_VALUE;	  return    p    <    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    p    <    Double.MIN_VALUE    :    Double.MAX_VALUE;    	non-compiled	[CE]  not  a  statement	68	None	replace
246	[BUG]  [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE  :  Double.MAX_VALUE;  [CE]  not  a  statement  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE  :  Double.MAX_VALUE;	  return    p    <    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    p    <    Double.MIN_VALUE    :    Double.MAX_VALUE;    	non-compiled	[CE]  not  a  statement	68	None	replace
247	[BUG]  [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  p  <  =  Double.MAX_VALUE;  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  p  <  =  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  ==  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  p  <  =  Double.MAX_VALUE;	  return    p    <    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    p    <    Double.MIN_VALUE    :    Double.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
248	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  >  Double.MIN_VALUE  :  Double.MAX_VALUE;  [CE]  not  a  statement  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  >  Double.MIN_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  >  Double.MIN_VALUE  :  Double.MAX_VALUE;	  return    p    <    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    p    <    Double.MIN_VALUE    :    Double.MAX_VALUE;    	non-compiled	[CE]  not  a  statement	68	None	replace
249	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >=  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p  >=  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;	  return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	16	1	replace
250	[BUG]  [BUGGY]  return  p  >=  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >=  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  >=  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;	  return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	16	1	replace
251	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p!=  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p!=  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;	  return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	16	1	replace
252	[BUG]  [BUGGY]  return  p!=  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p!=  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p!=  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;	  return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	16	1	replace
253	[BUG]  [BUGGY]  double  p  =  getDomainUpperBound(p).doubleValue();  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]                StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  p  =  getDomainUpperBound(p).doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  p  =  getDomainUpperBound(p).doubleValue();	  return    getDomainUpperBound(p);    double    p    =    getDomainUpperBound(p).doubleValue();    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	83	None	replace
254	[BUG]  [BUGGY]  Double  p  =  getDomainUpperBound(p).doubleValue();  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]                  StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  p  =  getDomainUpperBound(p).doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  p  =  getDomainUpperBound(p).doubleValue();	  return    getDomainUpperBound(p);    double    p    =    getDomainUpperBound(p).doubleValue();    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	83	None	replace
255	[BUG]  [BUGGY]  p  =  getDomainUpperBound(p).doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                    StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  p  =  getDomainUpperBound(p).doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	p  =  getDomainUpperBound(p).doubleValue();	  return    getDomainUpperBound(p);    double    p    =    getDomainUpperBound(p).doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	83	None	replace
256	[BUG]  [BUGGY]          double    m    =    getDomainUpperBound(p);    m  =  getDomainUpperBound(p);  double  m  =  getDomainUpperBound(p);  m  =  getDomainUpperBound(p);  [CE]  variable  m  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    m    =    getDomainUpperBound(p);    m  =  getDomainUpperBound(p);  double  m  =  getDomainUpperBound(p);  m  =  getDomainUpperBound(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        m        =        getDomainUpperBound(p);        m    =    getDomainUpperBound(p);    double  m  =  getDomainUpperBound(p);  m  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  m  is  already  defined  in  method  getDomainUpperBound(double)	221	None	add
257	[BUG]  [BUGGY]          double    m    =    getDomainUpperBound(p);    m  =  getDomainUpperBound(p);  Double  m  =  getDomainUpperBound(p);  m  =  getDomainUpperBound(p);  [CE]  variable  m  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    m    =    getDomainUpperBound(p);    m  =  getDomainUpperBound(p);  Double  m  =  getDomainUpperBound(p);  m  =  getDomainUpperBound(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        m        =        getDomainUpperBound(p);        m    =    getDomainUpperBound(p);    Double  m  =  getDomainUpperBound(p);  m  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  m  is  already  defined  in  method  getDomainUpperBound(double)	221	None	add
258	[BUG]  [BUGGY]          double    m    =    getDomainUpperBound(p);    m  =  getDomainUpperBound(p);  double  p  =  getDomainUpperBound(p);  m  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]        StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    m    =    getDomainUpperBound(p);    m  =  getDomainUpperBound(p);  double  p  =  getDomainUpperBound(p);  m  =  getDomainUpperBound(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        m        =        getDomainUpperBound(p);        m    =    getDomainUpperBound(p);    double  p  =  getDomainUpperBound(p);  m  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	221	None	add
259	[BUG]  [BUGGY]          double    m    =    getDomainUpperBound(p);    m  =  getDomainUpperBound(p);  Double  p  =  getDomainUpperBound(p);  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]          StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    m    =    getDomainUpperBound(p);    m  =  getDomainUpperBound(p);  Double  p  =  getDomainUpperBound(p);  p  =  getDomainUpperBound(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        m        =        getDomainUpperBound(p);        m    =    getDomainUpperBound(p);    Double  p  =  getDomainUpperBound(p);  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	221	None	add
260	[BUG]  [BUGGY]          double    m    =    getDomainUpperBound(p);    m  =  getDomainUpperBound(p);  double  p  =  getDomainUpperBound(p);  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]            StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    m    =    getDomainUpperBound(p);    m  =  getDomainUpperBound(p);  double  p  =  getDomainUpperBound(p);  p  =  getDomainUpperBound(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        m        =        getDomainUpperBound(p);        m    =    getDomainUpperBound(p);    double  p  =  getDomainUpperBound(p);  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	221	None	add
261	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDomainUpperBound(p)  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  getDomainUpperBound(p)  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;	  return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    Double    p    =    getDomainUpperBound(p);    	compilable	  [FE]  StackOverflowError  	105	3	replace
262	[BUG]  [BUGGY]  return  getDomainUpperBound(p)  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [FE]  StackOverflowError  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDomainUpperBound(p)  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  getDomainUpperBound(p)  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;	  return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    Double    p    =    getDomainUpperBound(p);    	compilable	  [FE]  StackOverflowError  	105	3	replace
263	[BUG]  [BUGGY]  return  p  >=  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  p  >=  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >=  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  p  >=  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >=    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    p  >=  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;	  	non-compiled	[CE]  not  a  statement	72	None	add
264	[BUG]  [BUGGY]  return  p  >=  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >=  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >=    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	72	None	add
265	[BUG]  [BUGGY]  return  p  >=  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  Double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >=  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  Double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >=    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    Double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	72	None	add
266	[BUG]  [BUGGY]  return  p  >=  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  double  p  =  getDomainUpperBound();  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >=  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  double  p  =  getDomainUpperBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >=    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    double  p  =  getDomainUpperBound();	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	72	None	add
267	[BUG]  [BUGGY]  return  p  >=  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  double  p  =  Math.abs(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]            IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >=  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  double  p  =  Math.abs(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >=    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    double  p  =  Math.abs(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	72	None	add
268	[BUG]  [BUGGY]  int  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  possible  loss  of  precision  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  int  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	int  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    int    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    	non-compiled	[CE]  possible  loss  of  precision	32	None	replace
269	[BUG]  [BUGGY]  double  p  =  getDomainUpperBound();  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  p  =  getDomainUpperBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  p  =  getDomainUpperBound();	  return    Double.MAX_VALUE    /    2.0;    double    p    =    getDomainUpperBound();    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	118	None	replace
270	[BUG]  [BUGGY]  Double  p  =  getDomainUpperBound();  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  p  =  getDomainUpperBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  p  =  getDomainUpperBound();	  return    Double.MAX_VALUE    /    2.0;    double    p    =    getDomainUpperBound();    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	118	None	replace
271	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  -  p.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  -  p.doubleValue();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  -  p.doubleValue();	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom()    -    p.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	186	None	replace
272	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.NaN  :  Double.NaN;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p  <  Double.MIN_VALUE?  Double.NaN  :  Double.NaN;	  return    Double.NaN;    	compilable	  [FE]  IllegalArgumentException  	239	3	replace
273	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.NaN  :  Double.NaN;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.NaN  :  Double.NaN;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  Double.MIN_VALUE?  Double.NaN  :  Double.NaN;	  return    Double.NaN;    	compilable	  [FE]  IllegalArgumentException  	239	3	replace
274	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  0.0?  Double.NaN  :  Double.POSITIVE_INFINITY;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p  <  0.0?  Double.NaN  :  Double.POSITIVE_INFINITY;	  return    Double.NaN;    	compilable	  [FE]  IllegalArgumentException  	239	1	replace
275	[BUG]  [BUGGY]  return  p  <  0.0?  Double.NaN  :  Double.POSITIVE_INFINITY;  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  0.0?  Double.NaN  :  Double.POSITIVE_INFINITY;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  0.0?  Double.NaN  :  Double.POSITIVE_INFINITY;	  return    Double.NaN;    	compilable	  [FE]  IllegalArgumentException  	239	1	replace
276	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.NaN  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p  <  Double.MIN_VALUE?  Double.NaN  :  Double.MAX_VALUE;	  return    Double.NaN;    	compilable	  [FE]  IllegalArgumentException  	239	1	replace
277	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.NaN  :  Double.MAX_VALUE;  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.NaN  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  Double.MIN_VALUE?  Double.NaN  :  Double.MAX_VALUE;	  return    Double.NaN;    	compilable	  [FE]  IllegalArgumentException  	239	1	replace
278	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p  ==  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;	  return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.NEGATIVE_INFINITY;    	compilable	  [FE]  IllegalArgumentException  	48	3	replace
279	[BUG]  [BUGGY]  return  p  ==  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  ==  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;	  return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.NEGATIVE_INFINITY;    	compilable	  [FE]  IllegalArgumentException  	48	3	replace
280	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >=  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p  >=  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;	  return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.NEGATIVE_INFINITY;    	compilable	  [FE]  IllegalArgumentException  	48	1	replace
281	[BUG]  [BUGGY]  return  p  >=  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >=  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  >=  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;	  return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.NEGATIVE_INFINITY;    	compilable	  [FE]  IllegalArgumentException  	48	1	replace
282	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p!=  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p!=  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;	  return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.NEGATIVE_INFINITY;    	compilable	  [FE]  IllegalArgumentException  	48	1	replace
283	[BUG]  [BUGGY]  return  p!=  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p!=  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p!=  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;	  return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.NEGATIVE_INFINITY;    	compilable	  [FE]  IllegalArgumentException  	48	1	replace
284	[BUG]  [BUGGY]  return  Double.MIN_VALUE  *  getDomainUpperBound();  [CE]  no  suitable  method  found  for  getDomainUpperBound()  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE  *  getDomainUpperBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MIN_VALUE  *  getDomainUpperBound();	  return    Double.MAX_VALUE    *    getDomainUpperBound();    	non-compiled	[CE]  no  suitable  method  found  for  getDomainUpperBound()	112	None	replace
285	[BUG]  [BUGGY]  return  Double.MAX_VALUE  +  getDomainUpperBound();  [CE]  no  suitable  method  found  for  getDomainUpperBound()  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  +  getDomainUpperBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MAX_VALUE  +  getDomainUpperBound();	  return    Double.MAX_VALUE    *    getDomainUpperBound();    	non-compiled	[CE]  no  suitable  method  found  for  getDomainUpperBound()	112	None	replace
286	[BUG]  [BUGGY]  double  m  =  getDomainUpperBound(p,  denominatorDegreesOfFreedom);  [CE]  no  suitable  method  found  for  getDomainUpperBound(double,double)  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  m  =  getDomainUpperBound(p,  denominatorDegreesOfFreedom);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  m  =  getDomainUpperBound(p,  denominatorDegreesOfFreedom);	          double    m    =    getDomainUpperBound(p);    double    m    =    getDomainUpperBound(p);    	non-compiled	[CE]  no  suitable  method  found  for  getDomainUpperBound(double,double)	54	None	replace
287	[BUG]  [BUGGY]  double  m  =  getDomainUpperBound(p)+  1;  [CE]  missing  return  statement  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  m  =  getDomainUpperBound(p)+  1;  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  m  =  getDomainUpperBound(p)+  1;	          double    m    =    getDomainUpperBound(p);    double    m    =    getDomainUpperBound(p);    	non-compiled	[CE]  missing  return  statement	54	None	replace
288	[BUG]  [BUGGY]  return  Double.MAX_VALUE  *  2.0;  Double.MAX_VALUE  *  2.0;  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  *  2.0;  Double.MAX_VALUE  *  2.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    *    2.0;    Double.MAX_VALUE  *  2.0;	  	non-compiled	[CE]  not  a  statement	20	None	add
289	[BUG]  [BUGGY]  return  Double.MAX_VALUE  *  2.0;  double  m  =  getDomainUpperBound(p);  [CE]  unreachable  statement  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  *  2.0;  double  m  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    *    2.0;    double  m  =  getDomainUpperBound(p);	  	non-compiled	[CE]  unreachable  statement	20	None	add
290	[BUG]  [BUGGY]  return  Double.MAX_VALUE  *  2.0;  double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  *  2.0;  double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    *    2.0;    double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	20	None	add
291	[BUG]  [BUGGY]  return  Double.MAX_VALUE  *  2.0;  double  m  =  getDomainUpperBound();  [CE]  no  suitable  method  found  for  getDomainUpperBound()  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  *  2.0;  double  m  =  getDomainUpperBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    *    2.0;    double  m  =  getDomainUpperBound();	  	non-compiled	[CE]  no  suitable  method  found  for  getDomainUpperBound()	20	None	add
292	[BUG]  [BUGGY]  return  Double.MAX_VALUE  *  2.0;  double  p  =  getDomainUpperBound();  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]            IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  *  2.0;  double  p  =  getDomainUpperBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    *    2.0;    double  p  =  getDomainUpperBound();	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	20	None	add
293	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDomainUpperBound(p  +  2);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  getDomainUpperBound(p  +  2);	  return    getDomainUpperBound(p    +    1);    	compilable	  [FE]  StackOverflowError  	136	3	replace
294	[BUG]  [BUGGY]  return  getDomainUpperBound(p  +  2);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDomainUpperBound(p  +  2);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  getDomainUpperBound(p  +  2);	  return    getDomainUpperBound(p    +    1);    	compilable	  [FE]  StackOverflowError  	136	3	replace
295	[BUG]  [BUGGY]  n  =  getNumberOfDenominator();  [CE]  cannot  find  symbol  n  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  n  =  getNumberOfDenominator();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	n  =  getNumberOfDenominator();	  return    Double.MIN_VALUE;    double    m    =    getDomainUpperBound(p);    	non-compiled	[CE]  cannot  find  symbol  n	108	None	replace
296	[BUG]  [BUGGY]  return  Float.MIN_VALUE  -  1;  Float.MIN_VALUE  -  1;  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MIN_VALUE  -  1;  Float.MIN_VALUE  -  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MIN_VALUE    -    1;    Float.MIN_VALUE  -  1;	  	non-compiled	[CE]  not  a  statement	87	None	add
297	[BUG]  [BUGGY]  return  Float.MIN_VALUE  -  1;  Double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MIN_VALUE  -  1;  Double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MIN_VALUE    -    1;    Double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	87	None	add
298	[BUG]  [BUGGY]  return  Float.MIN_VALUE  -  1;  Double  m  =  getDomainUpperBound(p);  [CE]  unreachable  statement  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MIN_VALUE  -  1;  Double  m  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MIN_VALUE    -    1;    Double  m  =  getDomainUpperBound(p);	  	non-compiled	[CE]  unreachable  statement	87	None	add
299	[BUG]  [BUGGY]  return  Float.MIN_VALUE  -  1;  Double  p  =  getDomainUpperBound();  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MIN_VALUE  -  1;  Double  p  =  getDomainUpperBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MIN_VALUE    -    1;    Double  p  =  getDomainUpperBound();	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	87	None	add
300	[BUG]  [BUGGY]  return  Float.MIN_VALUE  -  1;  Double  p  =  getDomainUpperBounds(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]            IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MIN_VALUE  -  1;  Double  p  =  getDomainUpperBounds(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MIN_VALUE    -    1;    Double  p  =  getDomainUpperBounds(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	87	None	add
301	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MAX_VALUE  *(float)p;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Float.MAX_VALUE  *(float)p;	  return    Float.MAX_VALUE    /(float)p;    	compilable	  [FE]  IllegalArgumentException  	180	1	replace
302	[BUG]  [BUGGY]  return  Float.MAX_VALUE  *(float)p;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MAX_VALUE  *(float)p;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Float.MAX_VALUE  *(float)p;	  return    Float.MAX_VALUE    /(float)p;    	compilable	  [FE]  IllegalArgumentException  	180	1	replace
303	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MAX_VALUE  /(double)p;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Float.MAX_VALUE  /(double)p;	  return    Float.MAX_VALUE    /(float)p;    	compilable	  [FE]  IllegalArgumentException  	180	1	replace
304	[BUG]  [BUGGY]  return  Float.MAX_VALUE  /(double)p;  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MAX_VALUE  /(double)p;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Float.MAX_VALUE  /(double)p;	  return    Float.MAX_VALUE    /(float)p;    	compilable	  [FE]  IllegalArgumentException  	180	1	replace
305	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  /(float)Float.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p  /(float)Float.MAX_VALUE;	  return    Float.MAX_VALUE    /(float)p;    	compilable	  [FE]  IllegalArgumentException  	180	3	replace
306	[BUG]  [BUGGY]  return  p  /(float)Float.MAX_VALUE;  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  /(float)Float.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  /(float)Float.MAX_VALUE;	  return    Float.MAX_VALUE    /(float)p;    	compilable	  [FE]  IllegalArgumentException  	180	3	replace
307	[BUG]  [BUGGY]  Double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  missing  return  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double    desnominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  missing  return  statement	4	None	replace
308	[BUG]  [BUGGY]  Double  m  =  getDomainUpperBound(p)/  1;  [CE]  missing  return  statement  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  m  =  getDomainUpperBound(p)/  1;  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  m  =  getDomainUpperBound(p)/  1;	  Double    m    =    getDomainUpperBound(p)+    1;    	non-compiled	[CE]  missing  return  statement	10	None	replace
309	[BUG]  [BUGGY]  Double  m  =  getDomainUpperBound(p)+  2;  [CE]  missing  return  statement  [FE]              StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  m  =  getDomainUpperBound(p)+  2;  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  m  =  getDomainUpperBound(p)+  2;	  Double    m    =    getDomainUpperBound(p)+    1;    	non-compiled	[CE]  missing  return  statement	10	None	replace
310	[BUG]  [BUGGY]  Double  m  =  getDomainUpperBound(p)+  3;  [CE]  missing  return  statement  [FE]                StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  m  =  getDomainUpperBound(p)+  3;  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  m  =  getDomainUpperBound(p)+  3;	  Double    m    =    getDomainUpperBound(p)+    1;    	non-compiled	[CE]  missing  return  statement	10	None	replace
311	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p  ==  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;	  return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.MIN_VALUE;    	compilable	  [FE]  IllegalArgumentException  	46	3	replace
312	[BUG]  [BUGGY]  return  p  ==  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  ==  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;	  return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.MIN_VALUE;    	compilable	  [FE]  IllegalArgumentException  	46	3	replace
313	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >=  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p  >=  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;	  return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.MIN_VALUE;    	compilable	  [FE]  IllegalArgumentException  	46	1	replace
314	[BUG]  [BUGGY]  return  p  >=  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >=  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  >=  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;	  return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.MIN_VALUE;    	compilable	  [FE]  IllegalArgumentException  	46	1	replace
315	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  m,  numeratorDegreesOfFreedom);  [CE]  cannot  find  symbol  m  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  m,  numeratorDegreesOfFreedom);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  m,  numeratorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p,    numeratorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  m	93	None	replace
316	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(m,  p,  numeratorDegreesOfFreedom);  [CE]  cannot  find  symbol  m  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(m,  p,  numeratorDegreesOfFreedom);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(m,  p,  numeratorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p,    numeratorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  m	93	None	replace
317	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  n,  numeratorDegreesOfFreedom);  [CE]  cannot  find  symbol  n  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  n,  numeratorDegreesOfFreedom);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  n,  numeratorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p,    numeratorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  n	93	None	replace
318	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  x,  numeratorDegreesOfFreedom);  [CE]  cannot  find  symbol  x  [FE]                      IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  x,  numeratorDegreesOfFreedom);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  x,  numeratorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p,    numeratorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  x	93	None	replace
319	[BUG]  [BUGGY]  return  getDomainUpperBound()  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [CE]  no  suitable  method  found  for  getDomainUpperBound()  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDomainUpperBound()  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  getDomainUpperBound()  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;	  return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    double    p    =    getDomainUpperBound();    	non-compiled	[CE]  no  suitable  method  found  for  getDomainUpperBound()	142	None	replace
320	[BUG]  [BUGGY]  p  =  getUpperBound(p);  [CE]  cannot  find  symbol  [FE]              StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  p  =  getUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	p  =  getUpperBound(p);	  return    getDomainUpperBound(p);    p    =    getDomainUpperBound(p);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
321	[BUG]  [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [CE]  not  a  statement  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;	  return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    	non-compiled	[CE]  not  a  statement	101	None	replace
322	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [CE]  not  a  statement  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;	  return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    	non-compiled	[CE]  not  a  statement	101	None	replace
323	[BUG]  [BUGGY]  double  m  =  getDomainUpperBound(p  +  2);  [CE]  missing  return  statement  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  m  =  getDomainUpperBound(p  +  2);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  m  =  getDomainUpperBound(p  +  2);	  double    m    =    getDomainUpperBound(p    +    1);    	non-compiled	[CE]  missing  return  statement	127	None	replace
324	[BUG]  [BUGGY]  double  m  =  getDomainUpperBound(p  +  3);  [CE]  missing  return  statement  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  m  =  getDomainUpperBound(p  +  3);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  m  =  getDomainUpperBound(p  +  3);	  double    m    =    getDomainUpperBound(p    +    1);    	non-compiled	[CE]  missing  return  statement	127	None	replace
325	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom  ==  null)  {  return  denominatorDegreesOfFreedom  +  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom  ==  null)  {  return  denominatorDegreesOfFreedom  +  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom  ==  null)  {  return  denominatorDegreesOfFreedom  +	  if(p    <    =    0)    {    double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    if(denominatorDegreesOfFreedom    ==    null)    {    return    denominatorDegreesOfFreedom    +    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
326	[BUG]  [BUGGY]  Double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom  ==  null)  {  return  denominatorDegreesOfFreedom  +  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom  ==  null)  {  return  denominatorDegreesOfFreedom  +  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom  ==  null)  {  return  denominatorDegreesOfFreedom  +	  if(p    <    =    0)    {    double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    if(denominatorDegreesOfFreedom    ==    null)    {    return    denominatorDegreesOfFreedom    +    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
327	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom  ==  null)  {  return  denominatorDegre  [CE]  ';'  expected  [FE]                        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom  ==  null)  {  return  denominatorDegre  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom  ==  null)  {  return  denominatorDegre	  if(p    <    =    0)    {    double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    if(denominatorDegreesOfFreedom    ==    null)    {    return    denominatorDegreesOfFreedom    +    	non-compiled	[CE]  ';'  expected	162	None	replace
328	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [CE]  >  expected  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;	  	non-compiled	[CE]  >  expected	15	None	add
329	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	15	None	add
330	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE);  [CE]  >  expected  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE);	  	non-compiled	[CE]  >  expected	15	None	add
331	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  Double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  Double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    Double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	15	None	add
332	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  double  p  =  getDomainUpperBound();  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]            IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  double  p  =  getDomainUpperBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    double  p  =  getDomainUpperBound();	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	15	None	add
333	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    p  =  getNumeratorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  p  =  getNumeratorDegreesOfFreedom();  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    p  =  getNumeratorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  p  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        p    =    getNumeratorDegreesOfFreedom();    double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  p  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)	177	None	add
334	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    p  =  getNumeratorDegreesOfFreedom();  Double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  p  =  getNumeratorDegreesOfFreedom();  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    p  =  getNumeratorDegreesOfFreedom();  Double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  p  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        p    =    getNumeratorDegreesOfFreedom();    Double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  p  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)	177	None	add
335	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    p  =  getNumeratorDegreesOfFreedom();  double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  p  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        p    =    getNumeratorDegreesOfFreedom();    double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  p  =  getNumeratorDegreesOfFreedom();	  	compilable	  [FE]  IllegalArgumentException  	177	1	add
336	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    p  =  getNumeratorDegreesOfFreedom();  double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  p  =  getNumeratorDegreesOfFreedom();  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    p  =  getNumeratorDegreesOfFreedom();  double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  p  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        p    =    getNumeratorDegreesOfFreedom();    double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  p  =  getNumeratorDegreesOfFreedom();	  	compilable	  [FE]  IllegalArgumentException  	177	1	add
337	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    p  =  getNumeratorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getNumberDegreesOfFreedom();  p  =  getNumeratorDegreesOfFreedom();  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    p  =  getNumeratorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getNumberDegreesOfFreedom();  p  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        p    =    getNumeratorDegreesOfFreedom();    double  denominatorDegreesOfFreedom  =  getNumberDegreesOfFreedom();  p  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)	177	None	add
338	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    p  =  getNumeratorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  p  =  getNumberDegreesOfFreedom();  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)  [FE]            IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    p  =  getNumeratorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  p  =  getNumberDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        p    =    getNumeratorDegreesOfFreedom();    double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  p  =  getNumberDegreesOfFreedom();	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)	177	None	add
339	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p  ==  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN;	  return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.NaN;    	compilable	  [FE]  IllegalArgumentException  	50	3	replace
340	[BUG]  [BUGGY]  return  p  ==  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  ==  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN;	  return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.NaN;    	compilable	  [FE]  IllegalArgumentException  	50	3	replace
341	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >=  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p  >=  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN;	  return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.NaN;    	compilable	  [FE]  IllegalArgumentException  	50	1	replace
342	[BUG]  [BUGGY]  return  p  >=  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN;  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >=  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  >=  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN;	  return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.NaN;    	compilable	  [FE]  IllegalArgumentException  	50	1	replace
343	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p!=  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p!=  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN;	  return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.NaN;    	compilable	  [FE]  IllegalArgumentException  	50	1	replace
344	[BUG]  [BUGGY]  return  p!=  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN;  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p!=  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p!=  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN;	  return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.NaN;    	compilable	  [FE]  IllegalArgumentException  	50	1	replace
345	[BUG]  [BUGGY]  return  Double.MIN_VALUE  /  getDomainUpperBound(p);  Double.MAX_VALUE  /  getDomainUpperBound(p);  [CE]  not  a  statement  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE  /  getDomainUpperBound(p);  Double.MAX_VALUE  /  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MIN_VALUE  /  getDomainUpperBound(p);  Double.MAX_VALUE  /  getDomainUpperBound(p);	  return    Double.MAX_VALUE    /    getDomainUpperBound(p);    Double.MAX_VALUE    /    getDomainUpperBound(p);    	non-compiled	[CE]  not  a  statement	119	None	replace
346	[BUG]  [BUGGY]  Double.MAX_VALUE  /  getDomainUpperBound(p);  [CE]  not  a  statement  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double.MAX_VALUE  /  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double.MAX_VALUE  /  getDomainUpperBound(p);	  return    Double.MAX_VALUE    /    getDomainUpperBound(p);    Double.MAX_VALUE    /    getDomainUpperBound(p);    	non-compiled	[CE]  not  a  statement	119	None	replace
347	[BUG]  [BUGGY]  double  p  =  getDomainUpperBound(p);  Double.MAX_VALUE  /  getDomainUpperBound(p);  [CE]  not  a  statement  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  p  =  getDomainUpperBound(p);  Double.MAX_VALUE  /  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  p  =  getDomainUpperBound(p);  Double.MAX_VALUE  /  getDomainUpperBound(p);	  return    Double.MAX_VALUE    /    getDomainUpperBound(p);    Double.MAX_VALUE    /    getDomainUpperBound(p);    	non-compiled	[CE]  not  a  statement	119	None	replace
348	[BUG]  [BUGGY]  int  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  possible  loss  of  precision  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  int  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	int  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    int    numeratorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  possible  loss  of  precision	209	None	replace
349	[BUG]  [BUGGY]  long  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  long  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  possible  loss  of  precision  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  long  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  long  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	long  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  long  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    int    numeratorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  possible  loss  of  precision	209	None	replace
350	[BUG]  [BUGGY]  return  Float.MIN_VALUE  /  2;  Float.MIN_VALUE  /  2;  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MIN_VALUE  /  2;  Float.MIN_VALUE  /  2;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MIN_VALUE    /    2;    Float.MIN_VALUE  /  2;	  	non-compiled	[CE]  not  a  statement	148	None	add
351	[BUG]  [BUGGY]  return  Float.MIN_VALUE  /  2;  Double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MIN_VALUE  /  2;  Double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MIN_VALUE    /    2;    Double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	148	None	add
352	[BUG]  [BUGGY]  return  Float.MIN_VALUE  /  2;  Double  p  =  getDomainUpperBound();  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MIN_VALUE  /  2;  Double  p  =  getDomainUpperBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MIN_VALUE    /    2;    Double  p  =  getDomainUpperBound();	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	148	None	add
353	[BUG]  [BUGGY]  return  Float.MIN_VALUE  /  2;  double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MIN_VALUE  /  2;  double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MIN_VALUE    /    2;    double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	148	None	add
354	[BUG]  [BUGGY]  return  Float.MIN_VALUE  /  2;  double  p  =  getDomainUpperBound();  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]            IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MIN_VALUE  /  2;  double  p  =  getDomainUpperBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MIN_VALUE    /    2;    double  p  =  getDomainUpperBound();	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	148	None	add
355	[BUG]  [BUGGY]  return  p  <  Double.MAX_VALUE  &&  p  <  =  Double.MAX_VALUE;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MAX_VALUE  &&  p  <  =  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  Double.MAX_VALUE  &&  p  <  =  Double.MAX_VALUE;	  return    p    >    Double.MAX_VALUE    &&    p    <    =    Double.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	206	None	replace
356	[BUG]  [BUGGY]  return  p  ==  Double.MAX_VALUE  &&  p  <  =  Double.MAX_VALUE;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MAX_VALUE  &&  p  <  =  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  ==  Double.MAX_VALUE  &&  p  <  =  Double.MAX_VALUE;	  return    p    >    Double.MAX_VALUE    &&    p    <    =    Double.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	206	None	replace
357	[BUG]  [BUGGY]  return  p  >=  Double.MAX_VALUE  &&  p  <  =  Double.MAX_VALUE;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >=  Double.MAX_VALUE  &&  p  <  =  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  >=  Double.MAX_VALUE  &&  p  <  =  Double.MAX_VALUE;	  return    p    >    Double.MAX_VALUE    &&    p    <    =    Double.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	206	None	replace
358	[BUG]  [BUGGY]  return  p!=  Double.MAX_VALUE  &&  p  <  =  Double.MAX_VALUE;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p!=  Double.MAX_VALUE  &&  p  <  =  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p!=  Double.MAX_VALUE  &&  p  <  =  Double.MAX_VALUE;	  return    p    >    Double.MAX_VALUE    &&    p    <    =    Double.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	206	None	replace
359	[BUG]  [BUGGY]  Double.MAX_VALUE  =  Float.MAX_VALUE;  [CE]  cannot  assign  a  value  to  final  variable  MAX_VALUE  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double.MAX_VALUE  =  Float.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double.MAX_VALUE  =  Float.MAX_VALUE;	  return    Float.MAX_VALUE;    Float.MAX_VALUE    =    Float.MAX_VALUE;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  MAX_VALUE	190	None	replace
360	[BUG]  [BUGGY]  double  MAX_VALUE  =  Float.MAX_VALUE;  [CE]  missing  return  statement  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  MAX_VALUE  =  Float.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  MAX_VALUE  =  Float.MAX_VALUE;	  return    Float.MAX_VALUE;    Float.MAX_VALUE    =    Float.MAX_VALUE;    	non-compiled	[CE]  missing  return  statement	190	None	replace
361	[BUG]  [BUGGY]  p  =  Float.MAX_VALUE;  [CE]  missing  return  statement  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  p  =  Float.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	p  =  Float.MAX_VALUE;	  return    Float.MAX_VALUE;    Float.MAX_VALUE    =    Float.MAX_VALUE;    	non-compiled	[CE]  missing  return  statement	190	None	replace
362	[BUG]  [BUGGY]  n  =  Float.MIN_VALUE;  n  =  Float.MAX_VALUE;  [CE]  cannot  find  symbol  n  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  n  =  Float.MIN_VALUE;  n  =  Float.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	n  =  Float.MIN_VALUE;  n  =  Float.MAX_VALUE;	  return    Float.MAX_VALUE;    Float.MAX_VALUE    =    Float.MAX_VALUE;    	non-compiled	[CE]  cannot  find  symbol  n	190	None	replace
363	[BUG]  [BUGGY]  return  p  >  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    p  >  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;	  	non-compiled	[CE]  not  a  statement	224	None	add
364	[BUG]  [BUGGY]  return  p  >  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;	  	non-compiled	[CE]  not  a  statement	224	None	add
365	[BUG]  [BUGGY]  return  p  >  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	224	None	add
366	[BUG]  [BUGGY]  return  p  >  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  Double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  Double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    Double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	224	None	add
367	[BUG]  [BUGGY]  null  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  null  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	null  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double    desnominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    	non-compiled	[CE]  not  a  statement	31	None	replace
368	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p),  p  =  getDomainUpperBound(p).doubleValue();  [CE]  ';'  expected  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p),  p  =  getDomainUpperBound(p).doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MAX_VALUE  /  getDomainUpperBound(p),  p  =  getDomainUpperBound(p).doubleValue();	  return    Double.MAX_VALUE    /    getDomainUpperBound(p);    double    p    =    getDomainUpperBound(p).doubleValue();    	non-compiled	[CE]  ';'  expected	210	None	replace
369	[BUG]  [BUGGY]  Double  m  =  getDomainLowerBound(p);  m  =  getDomainLowerBound(p);  [CE]  missing  return  statement  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  m  =  getDomainLowerBound(p);  m  =  getDomainLowerBound(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  m  =  getDomainLowerBound(p);  m  =  getDomainLowerBound(p);	          Double    m    =    getDomainUpperBound(p);    m    =    getDomainUpperBound(p);    	non-compiled	[CE]  missing  return  statement	156	None	replace
370	[BUG]  [BUGGY]  Double  m  =  getDenominatorDegreesOfFreedom(p);  m  =  getDomainUpperBound(p);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  m  =  getDenominatorDegreesOfFreedom(p);  m  =  getDomainUpperBound(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  m  =  getDenominatorDegreesOfFreedom(p);  m  =  getDomainUpperBound(p);	          Double    m    =    getDomainUpperBound(p);    m    =    getDomainUpperBound(p);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	156	None	replace
371	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        double    desnominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)	3	None	add
372	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        double    desnominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)	3	None	add
373	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  variable  desnominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        double    desnominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  variable  desnominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)	3	None	add
374	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  variable  desnominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        double    desnominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  variable  desnominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)	3	None	add
375	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  variable  desnominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)  [FE]            IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        double    desnominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  variable  desnominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)	3	None	add
376	[BUG]  [BUGGY]  return  p  <  0.0?  Float.MAX_VALUE  :  Float.MAX_VALUE;  IllegalArgumentException  x  =  getDomainUpperBound(p);  [CE]  incompatible  types  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  0.0?  Float.MAX_VALUE  :  Float.MAX_VALUE;  IllegalArgumentException  x  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  0.0?  Float.MAX_VALUE  :  Float.MAX_VALUE;  IllegalArgumentException  x  =  getDomainUpperBound(p);	  return    Float.MAX_VALUE;    IllegalArgumentException    x    =    getDomainUpperBound(p);    	non-compiled	[CE]  incompatible  types	191	None	replace
377	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE  +  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p  ==  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE  +  1;	  return    p    ==    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	23	1	replace
378	[BUG]  [BUGGY]  return  p  ==  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE  +  1;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE  +  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  ==  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE  +  1;	  return    p    ==    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	23	1	replace
379	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p!=  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p!=  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;	  return    p    ==    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	23	1	replace
380	[BUG]  [BUGGY]  return  p!=  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p!=  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p!=  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;	  return    p    ==    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	23	1	replace
381	[BUG]  [BUGGY]  return  p  ==  Double.MIN_VALUE  |  Double.MAX_VALUE  :  Double.MAX_VALUE;  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MIN_VALUE  |  Double.MAX_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  ==  Double.MIN_VALUE  |  Double.MAX_VALUE  :  Double.MAX_VALUE;	  return    p    ==    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    	non-compiled	[CE]  ';'  expected	23	None	replace
382	[BUG]  [BUGGY]  return  Float.MAX_VALUE  /(float)p;  Float.MAX_VALUE  /(float)p;  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MAX_VALUE  /(float)p;  Float.MAX_VALUE  /(float)p;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MAX_VALUE    /(float)p;    Float.MAX_VALUE  /(float)p;	  	non-compiled	[CE]  not  a  statement	179	None	add
383	[BUG]  [BUGGY]  return  Float.MAX_VALUE  /(float)p;  Double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MAX_VALUE  /(float)p;  Double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MAX_VALUE    /(float)p;    Double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	179	None	add
384	[BUG]  [BUGGY]  return  Float.MAX_VALUE  /(float)p;  float  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MAX_VALUE  /(float)p;  float  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MAX_VALUE    /(float)p;    float  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	179	None	add
385	[BUG]  [BUGGY]  return  Float.MAX_VALUE  /(float)p;  Double  p  =  getDomainUpperBound();  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MAX_VALUE  /(float)p;  Double  p  =  getDomainUpperBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MAX_VALUE    /(float)p;    Double  p  =  getDomainUpperBound();	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	179	None	add
386	[BUG]  [BUGGY]  return  Float.MAX_VALUE  /(float)p;  float  p  =  getDomainUpperBound();  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]            IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MAX_VALUE  /(float)p;  float  p  =  getDomainUpperBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MAX_VALUE    /(float)p;    float  p  =  getDomainUpperBound();	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	179	None	add
387	[BUG]  [BUGGY]  return  getDomainLowerBound(p);  getDomainLowerBound(p);  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDomainLowerBound(p);  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    getDomainLowerBound(p);    getDomainLowerBound(p);	  	non-compiled	[CE]  unreachable  statement	188	None	add
388	[BUG]  [BUGGY]  return  getDomainLowerBound(p);  Double  p  =  getDomainLowerBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDomainLowerBound(p);  Double  p  =  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    getDomainLowerBound(p);    Double  p  =  getDomainLowerBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	188	None	add
389	[BUG]  [BUGGY]  return  getDomainLowerBound(p);  double  p  =  getDomainLowerBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDomainLowerBound(p);  double  p  =  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    getDomainLowerBound(p);    double  p  =  getDomainLowerBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	188	None	add
390	[BUG]  [BUGGY]  return  getDomainLowerBound(p);  double  m  =  getDomainLowerBound(p);  [CE]  unreachable  statement  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDomainLowerBound(p);  double  m  =  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    getDomainLowerBound(p);    double  m  =  getDomainLowerBound(p);	  	non-compiled	[CE]  unreachable  statement	188	None	add
391	[BUG]  [BUGGY]  return  getDomainLowerBound(p);  Double  p  =  getDomainLowerBound(p).doubleValue();  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]            IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDomainLowerBound(p);  Double  p  =  getDomainLowerBound(p).doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    getDomainLowerBound(p);    Double  p  =  getDomainLowerBound(p).doubleValue();	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	188	None	add
392	[BUG]  [BUGGY]  Double  m  =  getDomainUpperBound(p  +  2);  [CE]  missing  return  statement  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  m  =  getDomainUpperBound(p  +  2);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  m  =  getDomainUpperBound(p  +  2);	  Double    m    =    getDomainUpperBound(p    +    1);    	non-compiled	[CE]  missing  return  statement	8	None	replace
393	[BUG]  [BUGGY]  Double  m  =  getDomainUpperBound(p  +  3);  [CE]  missing  return  statement  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  m  =  getDomainUpperBound(p  +  3);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  m  =  getDomainUpperBound(p  +  3);	  Double    m    =    getDomainUpperBound(p    +    1);    	non-compiled	[CE]  missing  return  statement	8	None	replace
394	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  p);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  p);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(m,    p);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	63	None	replace
395	[BUG]  [BUGGY]          Double    m    =    getDomainUpperBound(p);    Double  d  =  getDomainUpperBound(p);  Double  p  =  getDomainUpperBound(p);  Double  d  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          Double    m    =    getDomainUpperBound(p);    Double  d  =  getDomainUpperBound(p);  Double  p  =  getDomainUpperBound(p);  Double  d  =  getDomainUpperBound(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                Double        m        =        getDomainUpperBound(p);        Double    d    =    getDomainUpperBound(p);    Double  p  =  getDomainUpperBound(p);  Double  d  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	99	None	add
396	[BUG]  [BUGGY]          Double    m    =    getDomainUpperBound(p);    Double  d  =  getDomainUpperBound(p);  Double  m  =  getDomainUpperBound(p);  Double  d  =  getDomainUpperBound(p);  [CE]  variable  m  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          Double    m    =    getDomainUpperBound(p);    Double  d  =  getDomainUpperBound(p);  Double  m  =  getDomainUpperBound(p);  Double  d  =  getDomainUpperBound(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                Double        m        =        getDomainUpperBound(p);        Double    d    =    getDomainUpperBound(p);    Double  m  =  getDomainUpperBound(p);  Double  d  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  m  is  already  defined  in  method  getDomainUpperBound(double)	99	None	add
397	[BUG]  [BUGGY]          Double    m    =    getDomainUpperBound(p);    Double  d  =  getDomainUpperBound(p);  double  p  =  getDomainUpperBound(p);  Double  d  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]        StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          Double    m    =    getDomainUpperBound(p);    Double  d  =  getDomainUpperBound(p);  double  p  =  getDomainUpperBound(p);  Double  d  =  getDomainUpperBound(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                Double        m        =        getDomainUpperBound(p);        Double    d    =    getDomainUpperBound(p);    double  p  =  getDomainUpperBound(p);  Double  d  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	99	None	add
398	[BUG]  [BUGGY]          Double    m    =    getDomainUpperBound(p);    Double  d  =  getDomainUpperBound(p);  double  m  =  getDomainUpperBound(p);  Double  d  =  getDomainUpperBound(p);  [CE]  variable  m  is  already  defined  in  method  getDomainUpperBound(double)  [FE]          StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          Double    m    =    getDomainUpperBound(p);    Double  d  =  getDomainUpperBound(p);  double  m  =  getDomainUpperBound(p);  Double  d  =  getDomainUpperBound(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                Double        m        =        getDomainUpperBound(p);        Double    d    =    getDomainUpperBound(p);    double  m  =  getDomainUpperBound(p);  Double  d  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  m  is  already  defined  in  method  getDomainUpperBound(double)	99	None	add
399	[BUG]  [BUGGY]          Double    m    =    getDomainUpperBound(p);    Double  d  =  getDomainUpperBound(p);  Double  d  =  getDomainUpperBound(p);  Double  d  =  getDomainUpperBound(p);  [CE]  variable  d  is  already  defined  in  method  getDomainUpperBound(double)  [FE]            StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          Double    m    =    getDomainUpperBound(p);    Double  d  =  getDomainUpperBound(p);  Double  d  =  getDomainUpperBound(p);  Double  d  =  getDomainUpperBound(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                Double        m        =        getDomainUpperBound(p);        Double    d    =    getDomainUpperBound(p);    Double  d  =  getDomainUpperBound(p);  Double  d  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  d  is  already  defined  in  method  getDomainUpperBound(double)	99	None	add
400	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MAX_VALUE  /  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Float.MAX_VALUE  /  1;	  return    Float.MAX_VALUE    -    1;    	compilable	  [FE]  IllegalArgumentException  	44	1	replace
401	[BUG]  [BUGGY]  return  Float.MAX_VALUE  /  1;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MAX_VALUE  /  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Float.MAX_VALUE  /  1;	  return    Float.MAX_VALUE    -    1;    	compilable	  [FE]  IllegalArgumentException  	44	1	replace
402	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MAX_VALUE  +  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Float.MAX_VALUE  +  1;	  return    Float.MAX_VALUE    -    1;    	compilable	  [FE]  IllegalArgumentException  	44	1	replace
403	[BUG]  [BUGGY]  return  Float.MAX_VALUE  +  1;  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MAX_VALUE  +  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Float.MAX_VALUE  +  1;	  return    Float.MAX_VALUE    -    1;    	compilable	  [FE]  IllegalArgumentException  	44	1	replace
404	[BUG]  [BUGGY]  double  m  =  p.getDomainUpperBound(p);  [CE]  double  cannot  be  dereferenced  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  m  =  p.getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  m  =  p.getDomainUpperBound(p);	  m.getDomainUpperBound(p);    	non-compiled	[CE]  double  cannot  be  dereferenced	51	None	replace
405	[BUG]  [BUGGY]  n.getDomainUpperBound(p);  [CE]  cannot  find  symbol  n  [FE]                      IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  n.getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	n.getDomainUpperBound(p);	  m.getDomainUpperBound(p);    	non-compiled	[CE]  cannot  find  symbol  n	51	None	replace
406	[BUG]  [BUGGY]  p.getDomainUpperBound(p);  [CE]  double  cannot  be  dereferenced  [FE]                        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  p.getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	p.getDomainUpperBound(p);	  m.getDomainUpperBound(p);    	non-compiled	[CE]  double  cannot  be  dereferenced	51	None	replace
407	[BUG]  [BUGGY]  float  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  float  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	float  p  =  getDomainUpperBound(p);	  return    Float.MIN_VALUE;    float    p    =    getDomainUpperBound(p);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	170	None	replace
408	[BUG]  [BUGGY]  null  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  not  a  statement  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  null  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	null  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    Double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    	non-compiled	[CE]  not  a  statement	29	None	replace
409	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDegreesOfFreedom(p);  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDegreesOfFreedom(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumberDegreesOfFreedom(p);	  double    denominatorDegreesOfFreedom    =    getNumberDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	193	None	replace
410	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDegreesOfFreedom()  +  1;  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDegreesOfFreedom()  +  1;  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumberDegreesOfFreedom()  +  1;	  double    denominatorDegreesOfFreedom    =    getNumberDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	193	None	replace
411	[BUG]  [BUGGY]  return  Double.MIN_VALUE  |  Double.MIN_VALUE  /  2.0;  [CE]  bad  operand  types  for  binary  operator  '|'  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE  |  Double.MIN_VALUE  /  2.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MIN_VALUE  |  Double.MIN_VALUE  /  2.0;	  return    Double.MIN_VALUE    /    2.0;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '|'	147	None	replace
412	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE  *  2.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Double.MIN_VALUE  *  2.0;	  return    Double.MIN_VALUE    /    2.0;    	compilable	  [FE]  IllegalArgumentException  	147	3	replace
413	[BUG]  [BUGGY]  return  Double.MIN_VALUE  *  2.0;  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE  *  2.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MIN_VALUE  *  2.0;	  return    Double.MIN_VALUE    /    2.0;    	compilable	  [FE]  IllegalArgumentException  	147	3	replace
414	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE  +  2.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Double.MIN_VALUE  +  2.0;	  return    Double.MIN_VALUE    /    2.0;    	compilable	  [FE]  IllegalArgumentException  	147	2	replace
415	[BUG]  [BUGGY]  return  Double.MIN_VALUE  +  2.0;  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE  +  2.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MIN_VALUE  +  2.0;	  return    Double.MIN_VALUE    /    2.0;    	compilable	  [FE]  IllegalArgumentException  	147	2	replace
416	[BUG]  [BUGGY]  if(p  <  =  0.0)  {  return  Float.MAX_VALUE;  }  else  if(p  >  0.0)  {  return  0.0;  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  =  0.0)  {  return  Float.MAX_VALUE;  }  else  if(p  >  0.0)  {  return  0.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  =  0.0)  {  return  Float.MAX_VALUE;  }  else  if(p  >  0.0)  {  return  0.0;  }	  return    Float.MAX_VALUE;    Float.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
417	[BUG]  [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE);  [CE]  not  a  statement  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE);	  return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE);    	non-compiled	[CE]  not  a  statement	102	None	replace
418	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE);  [CE]  not  a  statement  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE);	  return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE);    	non-compiled	[CE]  not  a  statement	102	None	replace
419	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE);  [CE]  >  expected  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE);	  return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE);    	non-compiled	[CE]  >  expected	102	None	replace
420	[BUG]  [BUGGY]  return  p  ==  Double.MAX_VALUE  |  Double.MIN_VALUE  :  Double.MAX_VALUE;  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MAX_VALUE  |  Double.MIN_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  ==  Double.MAX_VALUE  |  Double.MIN_VALUE  :  Double.MAX_VALUE;	  return    p    ==    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    	non-compiled	[CE]  ';'  expected	71	None	replace
421	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  p);  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  p);	  double    denominatorDegreesOfFreedom    =    getDestinatorDegreesOfFreedom(p,    numeratorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
422	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  this.numeratorDegreesOfFreedom);  [CE]  cannot  find  symbol  [FE]                      IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  this.numeratorDegreesOfFreedom);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  this.numeratorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getDestinatorDegreesOfFreedom(p,    numeratorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
423	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  n);  [CE]  cannot  find  symbol  n  [FE]                        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  n);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  n);	  double    denominatorDegreesOfFreedom    =    getDestinatorDegreesOfFreedom(p,    numeratorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  n	124	None	replace
424	[BUG]  [BUGGY]  return  Double.MIN_VALUE  /  getDomainUpperBound()  /  denominatorDegreesOfFreedom;  [CE]  no  suitable  method  found  for  getDomainUpperBound()  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE  /  getDomainUpperBound()  /  denominatorDegreesOfFreedom;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MIN_VALUE  /  getDomainUpperBound()  /  denominatorDegreesOfFreedom;	  return    Double.MIN_VALUE    /    getDomainUpperBound();    	non-compiled	[CE]  no  suitable  method  found  for  getDomainUpperBound()	113	None	replace
425	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p  +  1,  numeratorDegreesOfFreedom);  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p  +  1,  numeratorDegreesOfFreedom);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p  +  1,  numeratorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getDestinatorDegreesOfFreedom(p    +    1);    	non-compiled	[CE]  cannot  find  symbol	234	None	replace
426	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p  /  1);  [CE]  cannot  find  symbol  [FE]                      IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p  /  1);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p  /  1);	  double    denominatorDegreesOfFreedom    =    getDestinatorDegreesOfFreedom(p    +    1);    	non-compiled	[CE]  cannot  find  symbol	234	None	replace
427	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p  +  1,  p);  [CE]  cannot  find  symbol  [FE]                        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p  +  1,  p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p  +  1,  p);	  double    denominatorDegreesOfFreedom    =    getDestinatorDegreesOfFreedom(p    +    1);    	non-compiled	[CE]  cannot  find  symbol	234	None	replace
428	[BUG]  [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.MIN_VALUE;    p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;	  	non-compiled	[CE]  not  a  statement	159	None	add
429	[BUG]  [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  Double  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  Double  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.MIN_VALUE;    Double  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;	  	non-compiled	[CE]  ';'  expected	159	None	add
430	[BUG]  [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.MIN_VALUE;    double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	159	None	add
431	[BUG]  [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  Double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  Double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.MIN_VALUE;    Double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	159	None	add
432	[BUG]  [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE);  [CE]  not  a  statement  [FE]            IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.MIN_VALUE;    p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE);	  	non-compiled	[CE]  not  a  statement	159	None	add
433	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  x);  [CE]  cannot  find  symbol  x  [FE]                        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  x);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  x);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p,    n);    	non-compiled	[CE]  cannot  find  symbol  x	65	None	replace
434	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  ret);  [CE]  cannot  find  symbol  ret  [FE]                          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  ret);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  ret);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p,    n);    	non-compiled	[CE]  cannot  find  symbol  ret	65	None	replace
435	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  numerator);  [CE]  cannot  find  symbol  numerator  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  numerator);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  numerator);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p,    m);    	non-compiled	[CE]  cannot  find  symbol  numerator	62	None	replace
436	[BUG]  [BUGGY]  double  p  =  getDomainUpper(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  p  =  getDomainUpper(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  p  =  getDomainUpper(p);	  return    Double.MAX_VALUE    /    getDomainUpperBound(p);    double    p    =    getDomainUpper(p);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	211	None	replace
437	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p),  p  =  getDomainUpper(p);  [CE]  ';'  expected  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p),  p  =  getDomainUpper(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MAX_VALUE  /  getDomainUpperBound(p),  p  =  getDomainUpper(p);	  return    Double.MAX_VALUE    /    getDomainUpperBound(p);    double    p    =    getDomainUpper(p);    	non-compiled	[CE]  ';'  expected	211	None	replace
438	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  ret);  [CE]  cannot  find  symbol  ret  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  ret);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  ret);	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p,    x);    	non-compiled	[CE]  cannot  find  symbol  ret	94	None	replace
439	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MIN_VALUE  /  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Float.MIN_VALUE  /  1;	  return    Float.MIN_VALUE    -    1;    	compilable	  [FE]  IllegalArgumentException  	88	3	replace
440	[BUG]  [BUGGY]  return  Float.MIN_VALUE  /  1;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MIN_VALUE  /  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Float.MIN_VALUE  /  1;	  return    Float.MIN_VALUE    -    1;    	compilable	  [FE]  IllegalArgumentException  	88	3	replace
441	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  -  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p  -  1;	  return    Float.MIN_VALUE    -    1;    	compilable	  [FE]  IllegalArgumentException  	88	3	replace
442	[BUG]  [BUGGY]  return  p  -  1;  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  -  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  -  1;	  return    Float.MIN_VALUE    -    1;    	compilable	  [FE]  IllegalArgumentException  	88	3	replace
443	[BUG]  [BUGGY]  return  Double.MIN_VALUE  /  2.0;  Double.MIN_VALUE  /  2.0;  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE  /  2.0;  Double.MIN_VALUE  /  2.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MIN_VALUE    /    2.0;    Double.MIN_VALUE  /  2.0;	  	non-compiled	[CE]  not  a  statement	146	None	add
444	[BUG]  [BUGGY]  return  Double.MIN_VALUE  /  2.0;  double  p  =  Double.MIN_VALUE  /  2.0;  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE  /  2.0;  double  p  =  Double.MIN_VALUE  /  2.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MIN_VALUE    /    2.0;    double  p  =  Double.MIN_VALUE  /  2.0;	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	146	None	add
445	[BUG]  [BUGGY]  return  Double.MIN_VALUE  /  2.0;  double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE  /  2.0;  double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MIN_VALUE    /    2.0;    double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	146	None	add
446	[BUG]  [BUGGY]  return  Double.MIN_VALUE  /  2.0;  double  m  =  getDomainUpperBound(p);  [CE]  unreachable  statement  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE  /  2.0;  double  m  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MIN_VALUE    /    2.0;    double  m  =  getDomainUpperBound(p);	  	non-compiled	[CE]  unreachable  statement	146	None	add
447	[BUG]  [BUGGY]  return  Double.MIN_VALUE  /  2.0;  double  p  =  getDomainUpperBound();  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]            IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE  /  2.0;  double  p  =  getDomainUpperBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MIN_VALUE    /    2.0;    double  p  =  getDomainUpperBound();	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	146	None	add
448	[BUG]  [BUGGY]  Math.min(numeratorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  [CE]  missing  return  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Math.min(numeratorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Math.min(numeratorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,    getNumeratorDegreesOfFreedom());    	non-compiled	[CE]  missing  return  statement	7	None	replace
449	[BUG]  [BUGGY]  Math.min(numeratorDegreesOfFreedom,  getDomainUpperBound());  [CE]  no  suitable  method  found  for  getDomainUpperBound()  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Math.min(numeratorDegreesOfFreedom,  getDomainUpperBound());  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Math.min(numeratorDegreesOfFreedom,  getDomainUpperBound());	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,    getNumeratorDegreesOfFreedom());    	non-compiled	[CE]  no  suitable  method  found  for  getDomainUpperBound()	7	None	replace
450	[BUG]  [BUGGY]  Math.min(denominatorDegreesOfFreedom,  getNumberDegreesOfFreedom());  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Math.min(denominatorDegreesOfFreedom,  getNumberDegreesOfFreedom());  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Math.min(denominatorDegreesOfFreedom,  getNumberDegreesOfFreedom());	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,    getNumeratorDegreesOfFreedom());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
451	[BUG]  [BUGGY]  Math.min(denominatorDegreesOfFreedom,  getDenominatorDegreesOfFreedom());  [CE]  missing  return  statement  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Math.min(denominatorDegreesOfFreedom,  getDenominatorDegreesOfFreedom());  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Math.min(denominatorDegreesOfFreedom,  getDenominatorDegreesOfFreedom());	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,    getNumeratorDegreesOfFreedom());    	non-compiled	[CE]  missing  return  statement	7	None	replace
452	[BUG]  [BUGGY]  return  Float.MAX_VALUE  -  1;  Float.MAX_VALUE  -  1;  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MAX_VALUE  -  1;  Float.MAX_VALUE  -  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MAX_VALUE    -    1;    Float.MAX_VALUE  -  1;	  	non-compiled	[CE]  not  a  statement	43	None	add
453	[BUG]  [BUGGY]  return  Float.MAX_VALUE  -  1;  Double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MAX_VALUE  -  1;  Double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MAX_VALUE    -    1;    Double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	43	None	add
454	[BUG]  [BUGGY]  return  Float.MAX_VALUE  -  1;  Double  p  =  getDomainUpperBound();  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MAX_VALUE  -  1;  Double  p  =  getDomainUpperBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MAX_VALUE    -    1;    Double  p  =  getDomainUpperBound();	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	43	None	add
455	[BUG]  [BUGGY]  return  Float.MAX_VALUE  -  1;  Double  p  =  getDomainUpperBounds(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MAX_VALUE  -  1;  Double  p  =  getDomainUpperBounds(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MAX_VALUE    -    1;    Double  p  =  getDomainUpperBounds(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	43	None	add
456	[BUG]  [BUGGY]  return  Float.MAX_VALUE  -  1;  Double  p  =  getDomainUpper(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]            IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MAX_VALUE  -  1;  Double  p  =  getDomainUpper(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MAX_VALUE    -    1;    Double  p  =  getDomainUpper(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	43	None	add
457	[BUG]  [BUGGY]  null  =  Float.MAX_VALUE;  Double  p  =  getDomainUpperBound();  [CE]  unexpected  type  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  null  =  Float.MAX_VALUE;  Double  p  =  getDomainUpperBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	null  =  Float.MAX_VALUE;  Double  p  =  getDomainUpperBound();	  return    Float.MAX_VALUE;    Double    p    =    getDomainUpperBound();    	non-compiled	[CE]  unexpected  type	78	None	replace
458	[BUG]  [BUGGY]  Double  m  =  getUpperBound(p);  [CE]  cannot  find  symbol  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  m  =  getUpperBound(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  m  =  getUpperBound(p);	  Double    m    =    getDomainLowerBound(p);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
459	[BUG]  [BUGGY]  Double  m  =  getNumberOfUpperBound(p);  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  m  =  getNumberOfUpperBound(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  m  =  getNumberOfUpperBound(p);	  Double    m    =    getDomainLowerBound(p);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
460	[BUG]  [BUGGY]  Double  m  =  getDenominatorUpperBound(p);  [CE]  cannot  find  symbol  [FE]              StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  m  =  getDenominatorUpperBound(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  m  =  getDenominatorUpperBound(p);	  Double    m    =    getDomainLowerBound(p);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
461	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE  ||  p  >  Double.MAX_VALUE;  [CE]  incompatible  types  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE  ||  p  >  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  Double.MIN_VALUE  ||  p  >  Double.MAX_VALUE;	  return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    if(p    <    Double.MIN_VALUE    ||    p    >    Double.MAX_VALUE)    {    return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    }    	non-compiled	[CE]  incompatible  types	202	None	replace
462	[BUG]  [BUGGY]  Double  p  =  getDomainUpperBounds(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  p  =  getDomainUpperBounds(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  p  =  getDomainUpperBounds(p);	  return    Double.MAX_VALUE    /    2.0;    double    p    =    getDomainUpperBounds(p);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	223	None	replace
463	[BUG]  [BUGGY]  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [CE]  >  expected  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;	  return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    =    Double.MAX_VALUE    :    Double.MAX_VALUE;    	non-compiled	[CE]  >  expected	194	None	replace
464	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Double.MAX_VALUE  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;	  return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    =    Double.MAX_VALUE    :    Double.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	194	1	replace
465	[BUG]  [BUGGY]  return  Double.MAX_VALUE  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MAX_VALUE  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;	  return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    =    Double.MAX_VALUE    :    Double.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	194	1	replace
466	[BUG]  [BUGGY]  NumeratorDegreesOfFreedom  =  getNumberDegreesOfFreedom();  [CE]  cannot  find  symbol  NumeratorDegreesOfFreedom  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  NumeratorDegreesOfFreedom  =  getNumberDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	NumeratorDegreesOfFreedom  =  getNumberDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    NumeratorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol  NumeratorDegreesOfFreedom	176	None	replace
467	[BUG]  [BUGGY]  NumberDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  cannot  find  symbol  NumberDegreesOfFreedom  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  NumberDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	NumberDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    NumeratorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol  NumberDegreesOfFreedom	176	None	replace
468	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        denominatorDegreesOfFreedom        =        getDenominatorDegreesOfFreedom();        double    desnominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)	30	None	add
469	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  Double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  Double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        denominatorDegreesOfFreedom        =        getDenominatorDegreesOfFreedom();        double    desnominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    Double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)	30	None	add
470	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        denominatorDegreesOfFreedom        =        getDenominatorDegreesOfFreedom();        double    desnominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)	30	None	add
471	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  variable  desnominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        denominatorDegreesOfFreedom        =        getDenominatorDegreesOfFreedom();        double    desnominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  variable  desnominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)	30	None	add
472	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorsOfFreedom();  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)  [FE]            IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorsOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        denominatorDegreesOfFreedom        =        getDenominatorDegreesOfFreedom();        double    desnominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorsOfFreedom();	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)	30	None	add
473	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  /  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Double.MAX_VALUE  /  Double.MAX_VALUE;	  return    Double.MAX_VALUE    |    Double.MAX_VALUE    /    2.0;    	compilable	  [FE]  IllegalArgumentException  	17	3	replace
474	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  Double.MAX_VALUE;  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  /  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MAX_VALUE  /  Double.MAX_VALUE;	  return    Double.MAX_VALUE    |    Double.MAX_VALUE    /    2.0;    	compilable	  [FE]  IllegalArgumentException  	17	3	replace
475	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  -  Double.MAX_VALUE  /  2.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Double.MAX_VALUE  -  Double.MAX_VALUE  /  2.0;	  return    Double.MAX_VALUE    |    Double.MAX_VALUE    /    2.0;    	compilable	  [FE]  IllegalArgumentException  	17	1	replace
476	[BUG]  [BUGGY]  return  Double.MAX_VALUE  -  Double.MAX_VALUE  /  2.0;  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  -  Double.MAX_VALUE  /  2.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MAX_VALUE  -  Double.MAX_VALUE  /  2.0;	  return    Double.MAX_VALUE    |    Double.MAX_VALUE    /    2.0;    	compilable	  [FE]  IllegalArgumentException  	17	1	replace
477	[BUG]  [BUGGY]  return  Double.MAX_VALUE  &  Double.MAX_VALUE  /  2.0;  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  &  Double.MAX_VALUE  /  2.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MAX_VALUE  &  Double.MAX_VALUE  /  2.0;	  return    Double.MAX_VALUE    |    Double.MAX_VALUE    /    2.0;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	17	None	replace
478	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        double    deseratorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)	207	None	add
479	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        double    deseratorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)	207	None	add
480	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  variable  deseratorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        double    deseratorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  variable  deseratorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)	207	None	add
481	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  variable  deseratorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        double    deseratorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  variable  deseratorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)	207	None	add
482	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  variable  deseratorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)  [FE]            IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        double    deseratorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  variable  deseratorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)	207	None	add
483	[BUG]  [BUGGY]  Double.MIN_VALUE;  if(p  <  =  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  [CE]  not  a  statement  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double.MIN_VALUE;  if(p  <  =  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double.MIN_VALUE;  if(p  <  =  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return	  return    Double.MIN_VALUE;    if(p    <    =    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Double.MIN_VALUE;    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    +    	non-compiled	[CE]  not  a  statement	214	None	replace
484	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  ==  null)  {  return  denominatorDegreesOfFreedom  +  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  ==  null)  {  return  denominatorDegreesOfFreedom  +  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  ==  null)  {  return  denominatorDegreesOfFreedom  +	  return    Double.MIN_VALUE;    if(p    <    =    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Double.MIN_VALUE;    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    +    	non-compiled	[CE]  illegal  start  of  expression	214	None	replace
485	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +	  return    Double.MIN_VALUE;    if(p    <    =    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Double.MIN_VALUE;    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    +    	non-compiled	[CE]  illegal  start  of  expression	214	None	replace
486	[BUG]  [BUGGY]  if(p  <  0)  {  if(p  <  0)  {  return  getDomainUpperBound(p);  }  [CE]  illegal  start  of  expression  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0)  {  if(p  <  0)  {  return  getDomainUpperBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  0)  {  if(p  <  0)  {  return  getDomainUpperBound(p);  }	  return    getDomainUpperBound(p);    if(p    >    0)    {    if(p    <    0)    {    return    getDomainUpperBound(p);    }    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
487	[BUG]  [BUGGY]  if(p  <  0)  {  return  getDomainUpperBound(p);  }  [CE]  missing  return  statement  [FE]              StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0)  {  return  getDomainUpperBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  0)  {  return  getDomainUpperBound(p);  }	  return    getDomainUpperBound(p);    if(p    >    0)    {    if(p    <    0)    {    return    getDomainUpperBound(p);    }    	non-compiled	[CE]  missing  return  statement	175	None	replace
488	[BUG]  [BUGGY]  if(p  <  0)  {  if(p  >  0)  {  return  getDomainUpperBound(p);  }  [CE]  illegal  start  of  expression  [FE]                StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0)  {  if(p  >  0)  {  return  getDomainUpperBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  0)  {  if(p  >  0)  {  return  getDomainUpperBound(p);  }	  return    getDomainUpperBound(p);    if(p    >    0)    {    if(p    <    0)    {    return    getDomainUpperBound(p);    }    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
489	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  [CE]  >  expected  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.MIN_VALUE;    p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;	  	non-compiled	[CE]  >  expected	45	None	add
490	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.MIN_VALUE;    double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	45	None	add
491	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  Double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  Double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.MIN_VALUE;    Double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	45	None	add
492	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE);  [CE]  >  expected  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.MIN_VALUE;    p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE);	  	non-compiled	[CE]  >  expected	45	None	add
493	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [CE]  >  expected  [FE]            IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.MIN_VALUE;    p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;	  	non-compiled	[CE]  >  expected	45	None	add
494	[BUG]  [BUGGY]  if(p  <  0.0)  {  return  getDomainUpperBound(p);  }  [CE]  missing  return  statement  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0.0)  {  return  getDomainUpperBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  0.0)  {  return  getDomainUpperBound(p);  }	  return    getDomainUpperBound(p);    if(p    >    0.0)    {    if(p    <    0.0)    {    return    getDomainUpperBound(p);    }    	non-compiled	[CE]  missing  return  statement	174	None	replace
495	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0.0)  {  return  getDomainUpperBound(p);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	if(p  <  0.0)  {  return  getDomainUpperBound(p);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    getDomainUpperBound(p);    if(p    >    0.0)    {    if(p    <    0.0)    {    return    getDomainUpperBound(p);    }    	compilable	  [FE]  IllegalArgumentException  	174	3	replace
496	[BUG]  [BUGGY]  if(p  <  0.0)  {  return  getDomainUpperBound(p);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0.0)  {  return  getDomainUpperBound(p);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  0.0)  {  return  getDomainUpperBound(p);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    getDomainUpperBound(p);    if(p    >    0.0)    {    if(p    <    0.0)    {    return    getDomainUpperBound(p);    }    	compilable	  [FE]  IllegalArgumentException  	174	3	replace
497	[BUG]  [BUGGY]  p  =  getDomainUpperBound(p);  if(p  <  0.0)  {  return  getDomainUpperBound(p);  }  [CE]  missing  return  statement  [FE]              StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  p  =  getDomainUpperBound(p);  if(p  <  0.0)  {  return  getDomainUpperBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	p  =  getDomainUpperBound(p);  if(p  <  0.0)  {  return  getDomainUpperBound(p);  }	  return    getDomainUpperBound(p);    if(p    >    0.0)    {    if(p    <    0.0)    {    return    getDomainUpperBound(p);    }    	non-compiled	[CE]  missing  return  statement	174	None	replace
498	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p,  m,  denominatorDegreesOfFreedom);  [CE]  cannot  find  symbol  m  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p,  m,  denominatorDegreesOfFreedom);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MAX_VALUE  /  getDomainUpperBound(p,  m,  denominatorDegreesOfFreedom);	  return    Double.MAX_VALUE    /    getDomainUpperBound(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  m	201	None	replace
499	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(m,  p,  denominatorDegreesOfFreedom);  [CE]  cannot  find  symbol  m  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(m,  p,  denominatorDegreesOfFreedom);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MAX_VALUE  /  getDomainUpperBound(m,  p,  denominatorDegreesOfFreedom);	  return    Double.MAX_VALUE    /    getDomainUpperBound(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  m	201	None	replace
500	[BUG]  [BUGGY]  return  getDomainUpperBound(p,  m,  denominatorDegreesOfFreedom);  [CE]  cannot  find  symbol  m  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDomainUpperBound(p,  m,  denominatorDegreesOfFreedom);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  getDomainUpperBound(p,  m,  denominatorDegreesOfFreedom);	  return    Double.MAX_VALUE    /    getDomainUpperBound(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  m	201	None	replace
501	[BUG]  [BUGGY]  return  Double.MAX_VALUE  *  getDomainUpperBound(p,  denominatorDegreesOfFreedom);  [CE]  no  suitable  method  found  for  getDomainUpperBound(double,double)  [FE]              StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  *  getDomainUpperBound(p,  denominatorDegreesOfFreedom);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MAX_VALUE  *  getDomainUpperBound(p,  denominatorDegreesOfFreedom);	  return    Double.MAX_VALUE    /    getDomainUpperBound(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  no  suitable  method  found  for  getDomainUpperBound(double,double)	201	None	replace
502	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    p  =  getDenominatorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  p  =  getDenominatorDegreesOfFreedom();  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    p  =  getDenominatorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  p  =  getDenominatorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        denominatorDegreesOfFreedom        =        getDenominatorDegreesOfFreedom();        p    =    getDenominatorDegreesOfFreedom();    double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  p  =  getDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)	196	None	add
503	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    p  =  getDenominatorDegreesOfFreedom();  Double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  p  =  getDenominatorDegreesOfFreedom();  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    p  =  getDenominatorDegreesOfFreedom();  Double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  p  =  getDenominatorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        denominatorDegreesOfFreedom        =        getDenominatorDegreesOfFreedom();        p    =    getDenominatorDegreesOfFreedom();    Double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  p  =  getDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)	196	None	add
504	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    p  =  getDenominatorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  p  =  getDenominatorDegreesOfFreedom();  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    p  =  getDenominatorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  p  =  getDenominatorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        denominatorDegreesOfFreedom        =        getDenominatorDegreesOfFreedom();        p    =    getDenominatorDegreesOfFreedom();    double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  p  =  getDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)	196	None	add
505	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    p  =  getDenominatorDegreesOfFreedom();  double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  p  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	                double        denominatorDegreesOfFreedom        =        getDenominatorDegreesOfFreedom();        p    =    getDenominatorDegreesOfFreedom();    double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  p  =  getNumeratorDegreesOfFreedom();	  	compilable	  [FE]  IllegalArgumentException  	196	1	add
506	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    p  =  getDenominatorDegreesOfFreedom();  double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  p  =  getNumeratorDegreesOfFreedom();  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    p  =  getDenominatorDegreesOfFreedom();  double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  p  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        denominatorDegreesOfFreedom        =        getDenominatorDegreesOfFreedom();        p    =    getDenominatorDegreesOfFreedom();    double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  p  =  getNumeratorDegreesOfFreedom();	  	compilable	  [FE]  IllegalArgumentException  	196	1	add
507	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    p  =  getDenominatorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  p  =  getNumeratorDegreesOfFreedom();  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)  [FE]            IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    p  =  getDenominatorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  p  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        denominatorDegreesOfFreedom        =        getDenominatorDegreesOfFreedom();        p    =    getDenominatorDegreesOfFreedom();    double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  p  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)	196	None	add
508	[BUG]  [BUGGY]  double  p  =  Double.MAX_VALUE  /  2.0;  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  p  =  Double.MAX_VALUE  /  2.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  p  =  Double.MAX_VALUE  /  2.0;	  return    Double.MAX_VALUE    /    2.0;    double    p    =    Double.MAX_VALUE    /    2.0;    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	115	None	replace
509	[BUG]  [BUGGY]  Double  p  =  Double.MAX_VALUE  /  2.0;  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  p  =  Double.MAX_VALUE  /  2.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  p  =  Double.MAX_VALUE  /  2.0;	  return    Double.MAX_VALUE    /    2.0;    double    p    =    Double.MAX_VALUE    /    2.0;    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	115	None	replace
510	[BUG]  [BUGGY]  Double  p  =  Double.MAX_VALUE;  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  p  =  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  p  =  Double.MAX_VALUE;	  return    Double.MAX_VALUE    /    2.0;    double    p    =    Double.MAX_VALUE    /    2.0;    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	115	None	replace
511	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  getDomainLowerBound(p);  Double.MAX_VALUE  /  getDomainLowerBound(p);  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  /  getDomainLowerBound(p);  Double.MAX_VALUE  /  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    /    getDomainLowerBound(p);    Double.MAX_VALUE  /  getDomainLowerBound(p);	  	non-compiled	[CE]  not  a  statement	184	None	add
512	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  getDomainLowerBound(p);  double  p  =  getDomainLowerBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  /  getDomainLowerBound(p);  double  p  =  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    /    getDomainLowerBound(p);    double  p  =  getDomainLowerBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	184	None	add
513	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  getDomainLowerBound(p);  Double.MIN_VALUE  /  getDomainLowerBound(p);  [CE]  not  a  statement  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  /  getDomainLowerBound(p);  Double.MIN_VALUE  /  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    /    getDomainLowerBound(p);    Double.MIN_VALUE  /  getDomainLowerBound(p);	  	non-compiled	[CE]  not  a  statement	184	None	add
514	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  getDomainLowerBound(p);  double  m  =  getDomainLowerBound(p);  [CE]  unreachable  statement  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  /  getDomainLowerBound(p);  double  m  =  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    /    getDomainLowerBound(p);    double  m  =  getDomainLowerBound(p);	  	non-compiled	[CE]  unreachable  statement	184	None	add
515	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  getDomainLowerBound(p);  double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]            IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  /  getDomainLowerBound(p);  double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    /    getDomainLowerBound(p);    double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	184	None	add
516	[BUG]  [BUGGY]  return  Double.MIN_VALUE  /  getDomainUpperBound(p).doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE  /  getDomainUpperBound(p).doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MIN_VALUE  /  getDomainUpperBound(p).doubleValue();	  return    Double.MIN_VALUE    /    getDomainUpperBound(p);    	non-compiled	[CE]  double  cannot  be  dereferenced	36	None	replace
517	[BUG]  [BUGGY]  p  =  getDomainPosition(p);  [CE]  cannot  find  symbol  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  p  =  getDomainPosition(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	p  =  getDomainPosition(p);	  return    getDomainUpperBound(p);    if(p    >    0.0)    {    return    getDomainUpperBound(p);    }    else    {    return    getDomainUpperBound(p);    }    	non-compiled	[CE]  cannot  find  symbol	216	None	replace
518	[BUG]  [BUGGY]  return  getDomainUpperBound(p  -  1);  double  p  =  getDomainUpperBound(p  -  1);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDomainUpperBound(p  -  1);  double  p  =  getDomainUpperBound(p  -  1);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    getDomainUpperBound(p    -    1);    double  p  =  getDomainUpperBound(p  -  1);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	137	None	add
519	[BUG]  [BUGGY]  return  getDomainUpperBound(p  -  1);  Double  p  =  getDomainUpperBound(p  -  1);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDomainUpperBound(p  -  1);  Double  p  =  getDomainUpperBound(p  -  1);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    getDomainUpperBound(p    -    1);    Double  p  =  getDomainUpperBound(p  -  1);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	137	None	add
520	[BUG]  [BUGGY]  return  getDomainUpperBound(p  -  1);  getDomainUpperBound(p  -  1);  [CE]  unreachable  statement  [FE]        StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDomainUpperBound(p  -  1);  getDomainUpperBound(p  -  1);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    getDomainUpperBound(p    -    1);    getDomainUpperBound(p  -  1);	  	non-compiled	[CE]  unreachable  statement	137	None	add
521	[BUG]  [BUGGY]  return  getDomainUpperBound(p  -  1);  if(p  >  0)  {  if(p  <  =  0)  {  return  getDomainUpperBound(p  -  1);  }  [CE]  illegal  start  of  expression  [FE]          StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDomainUpperBound(p  -  1);  if(p  >  0)  {  if(p  <  =  0)  {  return  getDomainUpperBound(p  -  1);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    getDomainUpperBound(p    -    1);    if(p  >  0)  {  if(p  <  =  0)  {  return  getDomainUpperBound(p  -  1);  }	  	non-compiled	[CE]  illegal  start  of  expression	137	None	add
522	[BUG]  [BUGGY]  return  getDomainUpperBound(p  -  1);  if(p  >  0)  {  if(p  <  0)  {  return  getDomainUpperBound(p  -  1);  }  [CE]  illegal  start  of  expression  [FE]            StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDomainUpperBound(p  -  1);  if(p  >  0)  {  if(p  <  0)  {  return  getDomainUpperBound(p  -  1);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    getDomainUpperBound(p    -    1);    if(p  >  0)  {  if(p  <  0)  {  return  getDomainUpperBound(p  -  1);  }	  	non-compiled	[CE]  illegal  start  of  expression	137	None	add
523	[BUG]  [BUGGY]  return  Double.MAX_VALUE  *  getDomainUpperBound(p);  Double.MAX_VALUE  *  getDomainUpperBound(p);  [CE]  not  a  statement  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  *  getDomainUpperBound(p);  Double.MAX_VALUE  *  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    *    getDomainUpperBound(p);    Double.MAX_VALUE  *  getDomainUpperBound(p);	  	non-compiled	[CE]  not  a  statement	37	None	add
524	[BUG]  [BUGGY]  return  Double.MAX_VALUE  *  getDomainUpperBound(p);  double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  *  getDomainUpperBound(p);  double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    *    getDomainUpperBound(p);    double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	37	None	add
525	[BUG]  [BUGGY]  return  Double.MAX_VALUE  *  getDomainUpperBound(p);  Double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]        StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  *  getDomainUpperBound(p);  Double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    *    getDomainUpperBound(p);    Double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	37	None	add
526	[BUG]  [BUGGY]  return  Double.MAX_VALUE  *  getDomainUpperBound(p);  Double.MIN_VALUE  *  getDomainUpperBound(p);  [CE]  not  a  statement  [FE]          StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  *  getDomainUpperBound(p);  Double.MIN_VALUE  *  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    *    getDomainUpperBound(p);    Double.MIN_VALUE  *  getDomainUpperBound(p);	  	non-compiled	[CE]  not  a  statement	37	None	add
527	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE  :  Double.MAX_VALUE);  [CE]  not  a  statement  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE  :  Double.MAX_VALUE);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE  :  Double.MAX_VALUE);	  return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE);    	non-compiled	[CE]  not  a  statement	143	None	replace
528	[BUG]  [BUGGY]  return  p  ==  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  <  =  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  <  =  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  ==  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  <  =  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE);	  return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
529	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumMeanorDegreesOfFreedom();  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumMeanorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumMeanorDegreesOfFreedom();	  double    denominatorDegreesOfFreedom    =    getMeanorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
530	[BUG]  [BUGGY]  return  getDenominatorBound(p);  [CE]  cannot  find  symbol  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDenominatorBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  getDenominatorBound(p);	  return    getDomainUpperBound(p);    return    getDomainUpperBound(p);    	non-compiled	[CE]  cannot  find  symbol	173	None	replace
531	[BUG]  [BUGGY]  return  getNumberOfDegreesOfFreedom(p);  [CE]  cannot  find  symbol  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getNumberOfDegreesOfFreedom(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  getNumberOfDegreesOfFreedom(p);	  return    getDomainUpperBound(p);    return    getDomainUpperBound(p);    	non-compiled	[CE]  cannot  find  symbol	173	None	replace
532	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  m,  denominatorDegreesOfFreedom);  [CE]  cannot  find  symbol  m  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  m,  denominatorDegreesOfFreedom);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  m,  denominatorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  m	231	None	replace
533	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(m,  p,  denominatorDegreesOfFreedom);  [CE]  cannot  find  symbol  m  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(m,  p,  denominatorDegreesOfFreedom);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(m,  p,  denominatorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  m	231	None	replace
534	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  n,  denominatorDegreesOfFreedom);  [CE]  cannot  find  symbol  n  [FE]                      IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  n,  denominatorDegreesOfFreedom);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  n,  denominatorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  n	231	None	replace
535	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  numeratorDegreesOfFreedom,  denominatorDegreesOfFreedom);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]                        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  numeratorDegreesOfFreedom,  denominatorDegreesOfFreedom);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  numeratorDegreesOfFreedom,  denominatorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	231	None	replace
536	[BUG]  [BUGGY]  int  numeratorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  possible  loss  of  precision  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  int  numeratorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	int  numeratorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    int    numeratorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    	non-compiled	[CE]  possible  loss  of  precision	226	None	replace
537	[BUG]  [BUGGY]  long  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  long  numeratorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  possible  loss  of  precision  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  long  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  long  numeratorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	long  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  long  numeratorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    int    numeratorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    	non-compiled	[CE]  possible  loss  of  precision	226	None	replace
538	[BUG]  [BUGGY]  double  m  =  getDomainLowerBound(p);  m  =  getDomainLowerBound(p);  [CE]  missing  return  statement  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  m  =  getDomainLowerBound(p);  m  =  getDomainLowerBound(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  m  =  getDomainLowerBound(p);  m  =  getDomainLowerBound(p);	          double    m    =    getDomainUpperBound(p);    m    =    getDomainUpperBound(p);    	non-compiled	[CE]  missing  return  statement	222	None	replace
539	[BUG]  [BUGGY]  double  m  =  getDenominatorDegreesOfFreedom(p);  m  =  getDomainUpperBound(p);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  m  =  getDenominatorDegreesOfFreedom(p);  m  =  getDomainUpperBound(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  m  =  getDenominatorDegreesOfFreedom(p);  m  =  getDomainUpperBound(p);	          double    m    =    getDomainUpperBound(p);    m    =    getDomainUpperBound(p);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	222	None	replace
540	[BUG]  [BUGGY]  double  m  =  getDenominatorDegreesOfFreedom(p);  m  =  getDenominatorDegreesOfFreedom(p);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]        StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  m  =  getDenominatorDegreesOfFreedom(p);  m  =  getDenominatorDegreesOfFreedom(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  m  =  getDenominatorDegreesOfFreedom(p);  m  =  getDenominatorDegreesOfFreedom(p);	          double    m    =    getDomainUpperBound(p);    m    =    getDomainUpperBound(p);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	222	None	replace
541	[BUG]  [BUGGY]  null  =  Double.MIN_VALUE;  IllegalArgumentException.printStackTrace();  [CE]  unexpected  type  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  null  =  Double.MIN_VALUE;  IllegalArgumentException.printStackTrace();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	null  =  Double.MIN_VALUE;  IllegalArgumentException.printStackTrace();	  return    Double.MIN_VALUE;    IllegalArgumentException.printStackTrace();    	non-compiled	[CE]  unexpected  type	182	None	replace
542	[BUG]  [BUGGY]  return  Double.MIN_VALUE  /  2.0;  IllegalArgumentException.printStackTrace();  [CE]  non-static  method  printStackTrace()  cannot  be  referenced  from  a  static  context  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE  /  2.0;  IllegalArgumentException.printStackTrace();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MIN_VALUE  /  2.0;  IllegalArgumentException.printStackTrace();	  return    Double.MIN_VALUE;    IllegalArgumentException.printStackTrace();    	non-compiled	[CE]  non-static  method  printStackTrace()  cannot  be  referenced  from  a  static  context	182	None	replace
543	[BUG]  [BUGGY]  return  Double.MIN_VALUE  -  1;  IllegalArgumentException.printStackTrace();  [CE]  non-static  method  printStackTrace()  cannot  be  referenced  from  a  static  context  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE  -  1;  IllegalArgumentException.printStackTrace();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MIN_VALUE  -  1;  IllegalArgumentException.printStackTrace();	  return    Double.MIN_VALUE;    IllegalArgumentException.printStackTrace();    	non-compiled	[CE]  non-static  method  printStackTrace()  cannot  be  referenced  from  a  static  context	182	None	replace
544	[BUG]  [BUGGY]  double  numeratorDegreesOfFreedom  =  Math.abs(p);  [CE]  missing  return  statement  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  numeratorDegreesOfFreedom  =  Math.abs(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  numeratorDegreesOfFreedom  =  Math.abs(p);	  return    Float.MIN_VALUE;    if(p    <    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Math.abs(p);    if(denominatorDegreesOfFreedom    >=    0.0)    {    return    Float.MIN_VALUE;    }    	non-compiled	[CE]  missing  return  statement	242	None	replace
545	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  Math.abs(p);  if(denominatorDegreesOfFreedom  >=  0.0)  {  return  Float.MIN_VALUE;  }  [CE]  missing  return  statement  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  Math.abs(p);  if(denominatorDegreesOfFreedom  >=  0.0)  {  return  Float.MIN_VALUE;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  Math.abs(p);  if(denominatorDegreesOfFreedom  >=  0.0)  {  return  Float.MIN_VALUE;  }	  return    Float.MIN_VALUE;    if(p    <    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Math.abs(p);    if(denominatorDegreesOfFreedom    >=    0.0)    {    return    Float.MIN_VALUE;    }    	non-compiled	[CE]  missing  return  statement	242	None	replace
546	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  Math.abs(p);  [CE]  missing  return  statement  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  Math.abs(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  Math.abs(p);	  return    Float.MIN_VALUE;    if(p    <    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Math.abs(p);    if(denominatorDegreesOfFreedom    >=    0.0)    {    return    Float.MIN_VALUE;    }    	non-compiled	[CE]  missing  return  statement	242	None	replace
547	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  Math.abs(p);  if(denominatorDegreesOfFreedom  <  0.0)  {  return  Float.MIN_VALUE;  }  [CE]  missing  return  statement  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  Math.abs(p);  if(denominatorDegreesOfFreedom  <  0.0)  {  return  Float.MIN_VALUE;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  Math.abs(p);  if(denominatorDegreesOfFreedom  <  0.0)  {  return  Float.MIN_VALUE;  }	  return    Float.MIN_VALUE;    if(p    <    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Math.abs(p);    if(denominatorDegreesOfFreedom    >=    0.0)    {    return    Float.MIN_VALUE;    }    	non-compiled	[CE]  missing  return  statement	242	None	replace
548	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE  +  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p  ==  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE  +  1;	  return    p    ==    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	12	1	replace
549	[BUG]  [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE  +  1;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE  +  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  ==  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE  +  1;	  return    p    ==    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	12	1	replace
550	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        Math.min(denominatorDegreesOfFreedom,    getNumeratorDegreesOfFreedom());    double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)	6	None	add
551	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  Double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  Double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        Math.min(denominatorDegreesOfFreedom,    getNumeratorDegreesOfFreedom());    Double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)	6	None	add
552	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  Math.min(numeratorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        Math.min(denominatorDegreesOfFreedom,    getNumeratorDegreesOfFreedom());    Math.min(numeratorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());	  	compilable	  [FE]  IllegalArgumentException  	6	1	add
553	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  Math.min(numeratorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  Math.min(numeratorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        Math.min(denominatorDegreesOfFreedom,    getNumeratorDegreesOfFreedom());    Math.min(numeratorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());	  	compilable	  [FE]  IllegalArgumentException  	6	1	add
554	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        Math.min(denominatorDegreesOfFreedom,    getNumeratorDegreesOfFreedom());    Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());	  	compilable	  [FE]  IllegalArgumentException  	6	1	add
555	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        Math.min(denominatorDegreesOfFreedom,    getNumeratorDegreesOfFreedom());    Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());	  	compilable	  [FE]  IllegalArgumentException  	6	1	add
556	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Math.min(denominatorDegreesOfFreedom,  getNumberDegreesOfFreedom());  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)  [FE]            IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Math.min(denominatorDegreesOfFreedom,  getNumberDegreesOfFreedom());  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        Math.min(denominatorDegreesOfFreedom,    getNumeratorDegreesOfFreedom());    double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Math.min(denominatorDegreesOfFreedom,  getNumberDegreesOfFreedom());	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)	6	None	add
557	[BUG]  [BUGGY]  return  getDomainUpperBound(p  +  1);  double  p  =  getDomainUpperBound(p  +  1);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDomainUpperBound(p  +  1);  double  p  =  getDomainUpperBound(p  +  1);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    getDomainUpperBound(p    +    1);    double  p  =  getDomainUpperBound(p  +  1);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	135	None	add
558	[BUG]  [BUGGY]  return  getDomainUpperBound(p  +  1);  Double  p  =  getDomainUpperBound(p  +  1);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDomainUpperBound(p  +  1);  Double  p  =  getDomainUpperBound(p  +  1);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    getDomainUpperBound(p    +    1);    Double  p  =  getDomainUpperBound(p  +  1);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	135	None	add
559	[BUG]  [BUGGY]  return  getDomainUpperBound(p  +  1);  getDomainUpperBound(p  +  1);  [CE]  unreachable  statement  [FE]        StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDomainUpperBound(p  +  1);  getDomainUpperBound(p  +  1);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    getDomainUpperBound(p    +    1);    getDomainUpperBound(p  +  1);	  	non-compiled	[CE]  unreachable  statement	135	None	add
560	[BUG]  [BUGGY]  return  getDomainUpperBound(p  +  1);  if(p  >  0)  {  if(p  <  =  0)  {  return  getDomainUpperBound(p  +  1);  }  [CE]  illegal  start  of  expression  [FE]          StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDomainUpperBound(p  +  1);  if(p  >  0)  {  if(p  <  =  0)  {  return  getDomainUpperBound(p  +  1);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    getDomainUpperBound(p    +    1);    if(p  >  0)  {  if(p  <  =  0)  {  return  getDomainUpperBound(p  +  1);  }	  	non-compiled	[CE]  illegal  start  of  expression	135	None	add
561	[BUG]  [BUGGY]  return  getDomainUpperBound(p  +  1);  double  p  =  getDomainUpperBound(p  +  1);  return  getDomainUpperBound(p  +  1);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]            StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDomainUpperBound(p  +  1);  double  p  =  getDomainUpperBound(p  +  1);  return  getDomainUpperBound(p  +  1);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    getDomainUpperBound(p    +    1);    double  p  =  getDomainUpperBound(p  +  1);  return  getDomainUpperBound(p  +  1);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	135	None	add
562	[BUG]  [BUGGY]  return  Double.MAX_VALUE  +  2.0;  Double.MAX_VALUE  +  2.0;  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  +  2.0;  Double.MAX_VALUE  +  2.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    +    2.0;    Double.MAX_VALUE  +  2.0;	  	non-compiled	[CE]  not  a  statement	18	None	add
563	[BUG]  [BUGGY]  return  Double.MAX_VALUE  +  2.0;  double  m  =  getDomainUpperBound(p);  [CE]  unreachable  statement  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  +  2.0;  double  m  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    +    2.0;    double  m  =  getDomainUpperBound(p);	  	non-compiled	[CE]  unreachable  statement	18	None	add
564	[BUG]  [BUGGY]  return  Double.MAX_VALUE  +  2.0;  Double.MAX_VALUE  /  2.0;  [CE]  not  a  statement  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  +  2.0;  Double.MAX_VALUE  /  2.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    +    2.0;    Double.MAX_VALUE  /  2.0;	  	non-compiled	[CE]  not  a  statement	18	None	add
565	[BUG]  [BUGGY]  return  Double.MAX_VALUE  +  2.0;  Double.MAX_VALUE  +  1.0;  [CE]  not  a  statement  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  +  2.0;  Double.MAX_VALUE  +  1.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    +    2.0;    Double.MAX_VALUE  +  1.0;	  	non-compiled	[CE]  not  a  statement	18	None	add
566	[BUG]  [BUGGY]  return  Double.MAX_VALUE  +  2.0;  double  m  =  getDomainUpperBound();  [CE]  no  suitable  method  found  for  getDomainUpperBound()  [FE]            IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  +  2.0;  double  m  =  getDomainUpperBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    +    2.0;    double  m  =  getDomainUpperBound();	  	non-compiled	[CE]  no  suitable  method  found  for  getDomainUpperBound()	18	None	add
567	[BUG]  [BUGGY]  return  p  <  =  Double.MAX_VALUE;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  =  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  =  Double.MAX_VALUE;	  return    p    >=    Double.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
568	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  +  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p  +  Double.MAX_VALUE;	  return    p    >=    Double.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	61	1	replace
569	[BUG]  [BUGGY]  return  p  +  Double.MAX_VALUE;  [FE]  IllegalArgumentException  [FE]                          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  +  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  +  Double.MAX_VALUE;	  return    p    >=    Double.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	61	1	replace
570	[BUG]  [BUGGY]  return  p  <  Double.MAX_VALUE  ||  p  >  Double.MAX_VALUE;  [CE]  incompatible  types  [FE]                            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MAX_VALUE  ||  p  >  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  Double.MAX_VALUE  ||  p  >  Double.MAX_VALUE;	  return    p    >=    Double.MAX_VALUE;    	non-compiled	[CE]  incompatible  types	61	None	replace
571	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  m,  numeratorDegreesOfFreedom);  [CE]  cannot  find  symbol  m  [FE]                      IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  m,  numeratorDegreesOfFreedom);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  m,  numeratorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p,    numeratorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  m	64	None	replace
572	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(m,  p,  numeratorDegreesOfFreedom);  [CE]  cannot  find  symbol  m  [FE]                        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(m,  p,  numeratorDegreesOfFreedom);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(m,  p,  numeratorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p,    numeratorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  m	64	None	replace
573	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  n,  numeratorDegreesOfFreedom);  [CE]  cannot  find  symbol  n  [FE]                          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  n,  numeratorDegreesOfFreedom);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  n,  numeratorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p,    numeratorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  n	64	None	replace
574	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  x,  numeratorDegreesOfFreedom);  [CE]  cannot  find  symbol  x  [FE]                            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  x,  numeratorDegreesOfFreedom);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  x,  numeratorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p,    numeratorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  x	64	None	replace
575	[BUG]  [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  p  ==  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  p  ==  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    ==    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    p  ==  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;	  	non-compiled	[CE]  not  a  statement	70	None	add
576	[BUG]  [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  p  ==  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  p  ==  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    ==    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    p  ==  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;	  	non-compiled	[CE]  not  a  statement	70	None	add
577	[BUG]  [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  double  p  =  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  double  p  =  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    ==    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    double  p  =  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	70	None	add
578	[BUG]  [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  double  p  =  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  double  p  =  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    ==    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    double  p  =  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	70	None	add
579	[BUG]  [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]            IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    ==    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	70	None	add
580	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  getDenominatorDegreesOfFreedom(p);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]              StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  /  getDenominatorDegreesOfFreedom(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MAX_VALUE  /  getDenominatorDegreesOfFreedom(p);	  return    Double.MAX_VALUE    /    getDomainUpperBound(p);    double    m    =    getDomainUpperBound(p);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	122	None	replace
581	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.POSITIVE_INFINITY  /  Double.MIN_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Double.POSITIVE_INFINITY  /  Double.MIN_VALUE;	  return    Double.POSITIVE_INFINITY;    	compilable	  [FE]  IllegalArgumentException  	237	1	replace
582	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY  /  Double.MIN_VALUE;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.POSITIVE_INFINITY  /  Double.MIN_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.POSITIVE_INFINITY  /  Double.MIN_VALUE;	  return    Double.POSITIVE_INFINITY;    	compilable	  [FE]  IllegalArgumentException  	237	1	replace
583	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.POSITIVE_INFINITY  /  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Double.POSITIVE_INFINITY  /  Double.MAX_VALUE;	  return    Double.POSITIVE_INFINITY;    	compilable	  [FE]  IllegalArgumentException  	237	1	replace
584	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY  /  Double.MAX_VALUE;  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.POSITIVE_INFINITY  /  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.POSITIVE_INFINITY  /  Double.MAX_VALUE;	  return    Double.POSITIVE_INFINITY;    	compilable	  [FE]  IllegalArgumentException  	237	1	replace
585	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.POSITIVE_INFINITY  /  2.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Double.POSITIVE_INFINITY  /  2.0;	  return    Double.POSITIVE_INFINITY;    	compilable	  [FE]  IllegalArgumentException  	237	1	replace
586	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY  /  2.0;  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.POSITIVE_INFINITY  /  2.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.POSITIVE_INFINITY  /  2.0;	  return    Double.POSITIVE_INFINITY;    	compilable	  [FE]  IllegalArgumentException  	237	1	replace
587	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  numeratorDegreesOfFreedom;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  numeratorDegreesOfFreedom;	  return    Double.POSITIVE_INFINITY;    	compilable	  [FE]  IllegalArgumentException  	237	2	replace
588	[BUG]  [BUGGY]  return  numeratorDegreesOfFreedom;  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  numeratorDegreesOfFreedom;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  numeratorDegreesOfFreedom;	  return    Double.POSITIVE_INFINITY;    	compilable	  [FE]  IllegalArgumentException  	237	2	replace
589	[BUG]  [BUGGY]  double  m  =  getUpperBound(p);  [CE]  cannot  find  symbol  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  m  =  getUpperBound(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  m  =  getUpperBound(p);	  double    m    =    getDomainLowerBound(p);    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
590	[BUG]  [BUGGY]  double  m  =  getDenominatorUpperBound(p);  [CE]  cannot  find  symbol  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  m  =  getDenominatorUpperBound(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  m  =  getDenominatorUpperBound(p);	  double    m    =    getDomainLowerBound(p);    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
591	[BUG]  [BUGGY]  double  m  =  getNumberOfUpperBound(p);  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  m  =  getNumberOfUpperBound(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  m  =  getNumberOfUpperBound(p);	  double    m    =    getDomainLowerBound(p);    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
592	[BUG]  [BUGGY]  return  p!=  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  >=  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p!=  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  >=  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p!=    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    p  >=  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;	  	non-compiled	[CE]  not  a  statement	150	None	add
593	[BUG]  [BUGGY]  return  p!=  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  >>  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p!=  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  >>  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p!=    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    p  >>  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;	  	non-compiled	[CE]  not  a  statement	150	None	add
594	[BUG]  [BUGGY]  return  p!=  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p!=  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p!=    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	150	None	add
595	[BUG]  [BUGGY]  int  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom  >  0.0)  {  return  denominatorDegreesOfFreedom  +  p;  }  [CE]  possible  loss  of  precision  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  int  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom  >  0.0)  {  return  denominatorDegreesOfFreedom  +  p;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	int  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom  >  0.0)  {  return  denominatorDegreesOfFreedom  +  p;  }	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    if(denominatorDegreesOfFreedom    >    0.0)    {    return    denominatorDegreesOfFreedom    +    p;    }    	non-compiled	[CE]  possible  loss  of  precision	235	None	replace
596	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom  <  0.0)  {  return  denominatorDegreesOfFreedom  +  p;  }  [CE]  missing  return  statement  [FE]                      IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom  <  0.0)  {  return  denominatorDegreesOfFreedom  +  p;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom  <  0.0)  {  return  denominatorDegreesOfFreedom  +  p;  }	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    if(denominatorDegreesOfFreedom    >    0.0)    {    return    denominatorDegreesOfFreedom    +    p;    }    	non-compiled	[CE]  missing  return  statement	235	None	replace
597	[BUG]  [BUGGY]  Double.MIN_VALUE;  if(p  <  =  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  ==  null)  {  return  [CE]  not  a  statement  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double.MIN_VALUE;  if(p  <  =  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  ==  null)  {  return  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double.MIN_VALUE;  if(p  <  =  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  ==  null)  {  return	  return    Double.MIN_VALUE;    if(p    <    =    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Double.MIN_VALUE;    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    +    super.getDomainUpperBound    	non-compiled	[CE]  not  a  statement	215	None	replace
598	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  ==  null)  {  return  denominatorDegreesOfFreedom  +  super.getDomainUpperBound  [CE]  ';'  expected  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  ==  null)  {  return  denominatorDegreesOfFreedom  +  super.getDomainUpperBound  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  ==  null)  {  return  denominatorDegreesOfFreedom  +  super.getDomainUpperBound	  return    Double.MIN_VALUE;    if(p    <    =    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Double.MIN_VALUE;    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    +    super.getDomainUpperBound    	non-compiled	[CE]  ';'  expected	215	None	replace
599	[BUG]  [BUGGY]  return  Double.MIN_VALUE  /  getDomainUpperBound(p);  Double.MIN_VALUE  /  getDomainUpperBound(p);  [CE]  not  a  statement  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE  /  getDomainUpperBound(p);  Double.MIN_VALUE  /  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MIN_VALUE    /    getDomainUpperBound(p);    Double.MIN_VALUE  /  getDomainUpperBound(p);	  	non-compiled	[CE]  not  a  statement	35	None	add
600	[BUG]  [BUGGY]  return  Double.MIN_VALUE  /  getDomainUpperBound(p);  double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE  /  getDomainUpperBound(p);  double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MIN_VALUE    /    getDomainUpperBound(p);    double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	35	None	add
601	[BUG]  [BUGGY]  return  Double.MIN_VALUE  /  getDomainUpperBound(p);  Double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]        StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE  /  getDomainUpperBound(p);  Double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MIN_VALUE    /    getDomainUpperBound(p);    Double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	35	None	add
602	[BUG]  [BUGGY]  return  Double.MIN_VALUE  /  getDomainUpperBound(p);  double  p  =  Double.MIN_VALUE  /  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]          StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE  /  getDomainUpperBound(p);  double  p  =  Double.MIN_VALUE  /  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MIN_VALUE    /    getDomainUpperBound(p);    double  p  =  Double.MIN_VALUE  /  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	35	None	add
603	[BUG]  [BUGGY]  return  Double.MIN_VALUE  /  getDomainUpperBound(p);  Double.MIN_VALUE  =  getDomainUpperBound(p);  [CE]  cannot  assign  a  value  to  final  variable  MIN_VALUE  [FE]            StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE  /  getDomainUpperBound(p);  Double.MIN_VALUE  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MIN_VALUE    /    getDomainUpperBound(p);    Double.MIN_VALUE  =  getDomainUpperBound(p);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  MIN_VALUE	35	None	add
604	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN;  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN;  [CE]  >  expected  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN;  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.NaN;    p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN;	  	non-compiled	[CE]  >  expected	49	None	add
605	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN;  double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN;  double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.NaN;    double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	49	None	add
606	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN;  Double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN;  Double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.NaN;    Double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	49	None	add
607	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN;  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN);  [CE]  >  expected  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN;  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.NaN;    p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN);	  	non-compiled	[CE]  >  expected	49	None	add
608	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN;  double  p  =  getDomainUpperBound();  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]            IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN;  double  p  =  getDomainUpperBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.NaN;    double  p  =  getDomainUpperBound();	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	49	None	add
609	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom()  +  1;  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom()  +  1;  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom()  +  1;	  double    denominatorDegreesOfFreedom    =    getNumberDenominatorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
610	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom(p);  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom(p);	  double    denominatorDegreesOfFreedom    =    getNumberDenominatorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
611	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom()  /  2;  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom()  /  2;  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom()  /  2;	  double    denominatorDegreesOfFreedom    =    getNumberDenominatorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
612	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  0,  denominatorDegreesOfFreedom);  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  0,  denominatorDegreesOfFreedom);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  0,  denominatorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getDestinatorDegreesOfFreedom(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol	198	None	replace
613	[BUG]  [BUGGY]  double  numeratorDegreesOfFreedom  =  Float.MIN_VALUE;  [CE]  missing  return  statement  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  numeratorDegreesOfFreedom  =  Float.MIN_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  numeratorDegreesOfFreedom  =  Float.MIN_VALUE;	  return    Float.MIN_VALUE;    if(p    <    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Math.abs(p);    if(denominatorDegreesOfFreedom    ==    0.0)    {    return    denominatorDegreesOfFreedom;    }    	non-compiled	[CE]  missing  return  statement	241	None	replace
614	[BUG]  [BUGGY]  double  numeratorDegreesOfFreedom  =  Float.parseFloat(p);  [CE]  method  parseFloat  in  class  Float  cannot  be  applied  to  given  types;  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  numeratorDegreesOfFreedom  =  Float.parseFloat(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  numeratorDegreesOfFreedom  =  Float.parseFloat(p);	  return    Float.MIN_VALUE;    if(p    <    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Math.abs(p);    if(denominatorDegreesOfFreedom    ==    0.0)    {    return    denominatorDegreesOfFreedom;    }    	non-compiled	[CE]  method  parseFloat  in  class  Float  cannot  be  applied  to  given  types;	241	None	replace
615	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  x);  [CE]  cannot  find  symbol  x  [FE]                      IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  x);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  x);	  double    denominatorDegreesOfFreedom    =    getDestinatorDegreesOfFreedom(p,    m);    	non-compiled	[CE]  cannot  find  symbol  x	125	None	replace
616	[BUG]  [BUGGY]  double  deseratorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  n);  [CE]  cannot  find  symbol  n  [FE]                        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  deseratorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  n);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  deseratorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  n);	  double    denominatorDegreesOfFreedom    =    getDestinatorDegreesOfFreedom(p,    m);    	non-compiled	[CE]  cannot  find  symbol  n	125	None	replace
617	[BUG]  [BUGGY]  p.getDomainUpperBound();  [CE]  double  cannot  be  dereferenced  [FE]                        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  p.getDomainUpperBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	p.getDomainUpperBound();	  m.getDomainUpperBound();    	non-compiled	[CE]  double  cannot  be  dereferenced	53	None	replace
618	[BUG]  [BUGGY]  n.getDomainUpperBound();  [CE]  cannot  find  symbol  n  [FE]                          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  n.getDomainUpperBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	n.getDomainUpperBound();	  m.getDomainUpperBound();    	non-compiled	[CE]  cannot  find  symbol  n	53	None	replace
619	[BUG]  [BUGGY]  super.getDomainUpperBound();  [CE]  method  getDomainUpperBound  in  class  AbstractContinuousDistribution  cannot  be  applied  to  given  types;  [FE]                            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  super.getDomainUpperBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	super.getDomainUpperBound();	  m.getDomainUpperBound();    	non-compiled	[CE]  method  getDomainUpperBound  in  class  AbstractContinuousDistribution  cannot  be  applied  to  given  types;	53	None	replace
620	[BUG]  [BUGGY]  return  p  >=  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  >=  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >=  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  >=  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >=    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    p  >=  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;	  	non-compiled	[CE]  not  a  statement	13	None	add
621	[BUG]  [BUGGY]  return  p  >=  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >=  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >=    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	13	None	add
622	[BUG]  [BUGGY]  return  p  >=  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  >=  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE);  [CE]  not  a  statement  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >=  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  >=  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >=    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    p  >=  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE);	  	non-compiled	[CE]  not  a  statement	13	None	add
623	[BUG]  [BUGGY]  return  p  >=  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  Double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >=  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  Double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >=    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    Double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	13	None	add
624	[BUG]  [BUGGY]  Double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom();  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
625	[BUG]  [BUGGY]  double  m  =  getDomainUpperBound(p)/  1;  [CE]  missing  return  statement  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  m  =  getDomainUpperBound(p)/  1;  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  m  =  getDomainUpperBound(p)/  1;	  double    m    =    getDomainUpperBound(p)-    1;    	non-compiled	[CE]  missing  return  statement	128	None	replace
626	[BUG]  [BUGGY]  double  m  =  getDomainUpperBound(p)-  2;  [CE]  missing  return  statement  [FE]              StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  m  =  getDomainUpperBound(p)-  2;  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  m  =  getDomainUpperBound(p)-  2;	  double    m    =    getDomainUpperBound(p)-    1;    	non-compiled	[CE]  missing  return  statement	128	None	replace
627	[BUG]  [BUGGY]  double  m  =  getDenominatorDegreesOfFreedom(p)-  1;  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]                StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  m  =  getDenominatorDegreesOfFreedom(p)-  1;  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  m  =  getDenominatorDegreesOfFreedom(p)-  1;	  double    m    =    getDomainUpperBound(p)-    1;    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	128	None	replace
628	[BUG]  [BUGGY]  return  Float.MAX_VALUE  /  2.0;  Double  p  =  getDomainUpperBounds(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MAX_VALUE  /  2.0;  Double  p  =  getDomainUpperBounds(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MAX_VALUE    /    2.0;    Double  p  =  getDomainUpperBounds(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	41	None	add
629	[BUG]  [BUGGY]  return  Float.MAX_VALUE  /  2.0;  IllegalArgumentException  f  =  getNegativeValue();  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MAX_VALUE  /  2.0;  IllegalArgumentException  f  =  getNegativeValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MAX_VALUE    /    2.0;    IllegalArgumentException  f  =  getNegativeValue();	  	non-compiled	[CE]  cannot  find  symbol	41	None	add
630	[BUG]  [BUGGY]  return  Double.MIN_VALUE  /  2;  IllegalArgumentException.printStackTrace();  [CE]  non-static  method  printStackTrace()  cannot  be  referenced  from  a  static  context  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE  /  2;  IllegalArgumentException.printStackTrace();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MIN_VALUE  /  2;  IllegalArgumentException.printStackTrace();	  return    Double.MIN_VALUE;    IllegalArgumentException.printStackTrace();    	non-compiled	[CE]  non-static  method  printStackTrace()  cannot  be  referenced  from  a  static  context	182	None	replace
631	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE;  [CE]  incompatible  types  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  Double.MIN_VALUE;	  return    p    <    Double.MAX_VALUE;    	non-compiled	[CE]  incompatible  types	58	None	replace
632	[BUG]  [BUGGY]  p  =  Float.MIN_VALUE;  p  =  Float.MIN_VALUE;  [CE]  missing  return  statement  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  p  =  Float.MIN_VALUE;  p  =  Float.MIN_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	p  =  Float.MIN_VALUE;  p  =  Float.MIN_VALUE;	  return    Float.MIN_VALUE;    Float.MIN_VALUE;    	non-compiled	[CE]  missing  return  statement	129	None	replace
633	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        double    deseratorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)	207	None	add
634	[BUG]  [BUGGY]  return  p  >=  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  p  >=  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >=  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  p  >=  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >=    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    p  >=  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;	  	non-compiled	[CE]  not  a  statement	72	None	add
635	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumDenominatorDegreesOfFreedom().doubleValue();  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumDenominatorDegreesOfFreedom().doubleValue();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumDenominatorDegreesOfFreedom().doubleValue();	          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom().doubleValue();    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
636	[BUG]  [BUGGY]  n  =  getDenominatorDegreesOfFreedom(p);  [CE]  cannot  find  symbol  n  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  n  =  getDenominatorDegreesOfFreedom(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	n  =  getDenominatorDegreesOfFreedom(p);	  return    Float.MAX_VALUE;    double    m    =    getDomainUpperBound(p);    	non-compiled	[CE]  cannot  find  symbol  n	77	None	replace
637	[BUG]  [BUGGY]  Double.MIN_VALUE;  if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  denomin  [CE]  not  a  statement  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double.MIN_VALUE;  if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  denomin  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double.MIN_VALUE;  if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  denomin	  return    Double.MIN_VALUE;    if(p    <    =    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Double.MIN_VALUE;    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    +    	non-compiled	[CE]  not  a  statement	214	None	replace
638	[BUG]  [BUGGY]  Double.MIN_VALUE;  if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  [CE]  not  a  statement  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double.MIN_VALUE;  if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double.MIN_VALUE;  if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return	  return    Double.MIN_VALUE;    if(p    <    =    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Double.MIN_VALUE;    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    +    	non-compiled	[CE]  not  a  statement	214	None	replace
639	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  <  0.0)  {  return  denominatorDegreesOfFreedom  +  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  <  0.0)  {  return  denominatorDegreesOfFreedom  +  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  <  0.0)  {  return  denominatorDegreesOfFreedom  +	  return    Double.MIN_VALUE;    if(p    <    =    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Double.MIN_VALUE;    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    +    	non-compiled	[CE]  illegal  start  of  expression	214	None	replace
640	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE  [CE]  >  expected  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE	  	non-compiled	[CE]  >  expected	15	None	add
641	[BUG]  [BUGGY]  return  Double.MIN_VALUE  /  getDomainUpperBound()  +  1;  [CE]  no  suitable  method  found  for  getDomainUpperBound()  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE  /  getDomainUpperBound()  +  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MIN_VALUE  /  getDomainUpperBound()  +  1;	  return    Double.MIN_VALUE    /    getDomainUpperBound();    	non-compiled	[CE]  no  suitable  method  found  for  getDomainUpperBound()	113	None	replace
642	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p  >  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;	  return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    if(p    <    Double.MIN_VALUE)    {    return    p    <    Double.MAX_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    }    else    {    return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    }    	compilable	  [FE]  IllegalArgumentException  	204	1	replace
643	[BUG]  [BUGGY]  return  p  >  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  >  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;	  return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    if(p    <    Double.MIN_VALUE)    {    return    p    <    Double.MAX_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    }    else    {    return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    }    	compilable	  [FE]  IllegalArgumentException  	204	1	replace
644	[BUG]  [BUGGY]  return  Double.MIN_VALUE;  Double.MIN_VALUE  =  0.0;  [CE]  cannot  assign  a  value  to  final  variable  MIN_VALUE  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE;  Double.MIN_VALUE  =  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MIN_VALUE;  Double.MIN_VALUE  =  0.0;	  return    Double.MIN_VALUE;    Double.MIN_VALUE;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  MIN_VALUE	107	None	replace
645	[BUG]  [BUGGY]  return  Double.MIN_VALUE;  Double.MIN_VALUE  =  p;  [CE]  cannot  assign  a  value  to  final  variable  MIN_VALUE  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE;  Double.MIN_VALUE  =  p;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MIN_VALUE;  Double.MIN_VALUE  =  p;	  return    Double.MIN_VALUE;    Double.MIN_VALUE;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  MIN_VALUE	107	None	replace
646	[BUG]  [BUGGY]  return  Double.NEGATIVE_INFINITY;  Double.MIN_VALUE;  [CE]  not  a  statement  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.NEGATIVE_INFINITY;  Double.MIN_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.NEGATIVE_INFINITY;  Double.MIN_VALUE;	  return    Double.MIN_VALUE;    Double.MIN_VALUE;    	non-compiled	[CE]  not  a  statement	107	None	replace
647	[BUG]  [BUGGY]  pom.getDomainUpperBound(p);  [CE]  cannot  find  symbol  pom  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  pom.getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	pom.getDomainUpperBound(p);	  m.getDomainUpperBound(p);    	non-compiled	[CE]  cannot  find  symbol  pom	51	None	replace
648	[BUG]  [BUGGY]  super.getDomainUpperBound(p);  [CE]  abstract  method  getDomainUpperBound(double)  in  AbstractContinuousDistribution  cannot  be  accessed  directly  [FE]                      IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  super.getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	super.getDomainUpperBound(p);	  m.getDomainUpperBound(p);    	non-compiled	[CE]  abstract  method  getDomainUpperBound(double)  in  AbstractContinuousDistribution  cannot  be  accessed  directly	51	None	replace
649	[BUG]  [BUGGY]  return  Double.MAX_VALUE  *  2.0;  IllegalArgumentException.printStackTrace();  [CE]  non-static  method  printStackTrace()  cannot  be  referenced  from  a  static  context  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  *  2.0;  IllegalArgumentException.printStackTrace();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    *    2.0;    IllegalArgumentException.printStackTrace();	  	non-compiled	[CE]  non-static  method  printStackTrace()  cannot  be  referenced  from  a  static  context	20	None	add
650	[BUG]  [BUGGY]  return  Double.MAX_VALUE  *  2.0;  Double.MAX_VALUE  =  0.0;  [CE]  cannot  assign  a  value  to  final  variable  MAX_VALUE  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  *  2.0;  Double.MAX_VALUE  =  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    *    2.0;    Double.MAX_VALUE  =  0.0;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  MAX_VALUE	20	None	add
651	[BUG]  [BUGGY]  return  Double.MAX_VALUE  *  2.0;  Double.MAX_VALUE  =  1.0;  [CE]  cannot  assign  a  value  to  final  variable  MAX_VALUE  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  *  2.0;  Double.MAX_VALUE  =  1.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    *    2.0;    Double.MAX_VALUE  =  1.0;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  MAX_VALUE	20	None	add
652	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  p,  numeratorDegreesOfFreedom);  [CE]  method  getNumeratorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  p,  numeratorDegreesOfFreedom);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  p,  numeratorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p,    numeratorDegreesOfFreedom);    	non-compiled	[CE]  method  getNumeratorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	93	None	replace
653	[BUG]  [BUGGY]  return  Double.MAX_VALUE  *  getDomainUpperBound(p);  Double.MAX_VALUE  +  getDomainUpperBound(p);  [CE]  not  a  statement  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  *  getDomainUpperBound(p);  Double.MAX_VALUE  +  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    *    getDomainUpperBound(p);    Double.MAX_VALUE  +  getDomainUpperBound(p);	  	non-compiled	[CE]  not  a  statement	37	None	add
654	[BUG]  [BUGGY]  return  Float.MAX_VALUE  /(float)p;  IllegalArgumentException  f  =  getNegativeValue();  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MAX_VALUE  /(float)p;  IllegalArgumentException  f  =  getNegativeValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MAX_VALUE    /(float)p;    IllegalArgumentException  f  =  getNegativeValue();	  	non-compiled	[CE]  cannot  find  symbol	179	None	add
655	[BUG]  [BUGGY]  return  Float.MIN_VALUE;  Float.MAX_VALUE  =  Float.MAX_VALUE;  [CE]  cannot  assign  a  value  to  final  variable  MAX_VALUE  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MIN_VALUE;  Float.MAX_VALUE  =  Float.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Float.MIN_VALUE;  Float.MAX_VALUE  =  Float.MAX_VALUE;	  return    Float.MAX_VALUE;    Float.MAX_VALUE    =    Float.MAX_VALUE;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  MAX_VALUE	190	None	replace
656	[BUG]  [BUGGY]  p  =  Float.MAX_VALUE;  p  =  Float.MAX_VALUE;  [CE]  missing  return  statement  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  p  =  Float.MAX_VALUE;  p  =  Float.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	p  =  Float.MAX_VALUE;  p  =  Float.MAX_VALUE;	  return    Float.MAX_VALUE;    Float.MAX_VALUE    =    Float.MAX_VALUE;    	non-compiled	[CE]  missing  return  statement	190	None	replace
657	[BUG]  [BUGGY]  p  =  Float.MIN_VALUE;  p  =  Float.MAX_VALUE;  [CE]  missing  return  statement  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  p  =  Float.MIN_VALUE;  p  =  Float.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	p  =  Float.MIN_VALUE;  p  =  Float.MAX_VALUE;	  return    Float.MAX_VALUE;    Float.MAX_VALUE    =    Float.MAX_VALUE;    	non-compiled	[CE]  missing  return  statement	190	None	replace
658	[BUG]  [BUGGY]  return  getDomainUpperBound(p  -  1);  p  =  getDomainUpperBound(p  -  1);  [CE]  unreachable  statement  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDomainUpperBound(p  -  1);  p  =  getDomainUpperBound(p  -  1);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    getDomainUpperBound(p    -    1);    p  =  getDomainUpperBound(p  -  1);	  	non-compiled	[CE]  unreachable  statement	137	None	add
659	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  desominatorDegreesOfFreedom  +  p;  }  [CE]  incomparable  types:  double  and  <null>  [FE]                        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  desominatorDegreesOfFreedom  +  p;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  desominatorDegreesOfFreedom  +  p;  }	  if(p    <    =    0)    {    double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    +    p;    }    	non-compiled	[CE]  incomparable  types:  double  and  <null>	164	None	replace
660	[BUG]  [BUGGY]  return  Float.MIN_VALUE  /  2;  Double  p  =  getDomainUpperBounds(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MIN_VALUE  /  2;  Double  p  =  getDomainUpperBounds(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MIN_VALUE    /    2;    Double  p  =  getDomainUpperBounds(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	148	None	add
661	[BUG]  [BUGGY]  return  Float.MIN_VALUE  /  2;  IllegalArgumentException  e  =  getNullValue();  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MIN_VALUE  /  2;  IllegalArgumentException  e  =  getNullValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MIN_VALUE    /    2;    IllegalArgumentException  e  =  getNullValue();	  	non-compiled	[CE]  cannot  find  symbol	148	None	add
662	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom  ==  null)  {  return  denominatorDegrees  [CE]  ';'  expected  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom  ==  null)  {  return  denominatorDegrees  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom  ==  null)  {  return  denominatorDegrees	  if(p    <    =    0)    {    double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    if(denominatorDegreesOfFreedom    ==    null)    {    return    denominatorDegreesOfFreedom    +    	non-compiled	[CE]  ';'  expected	162	None	replace
663	[BUG]  [BUGGY]  return  Float.MAX_VALUE  -  1;  IllegalArgumentException  x  =  getDomainUpperBound();  [CE]  no  suitable  method  found  for  getDomainUpperBound()  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MAX_VALUE  -  1;  IllegalArgumentException  x  =  getDomainUpperBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Float.MAX_VALUE  -  1;  IllegalArgumentException  x  =  getDomainUpperBound();	  return    Float.MAX_VALUE;    IllegalArgumentException    x    =    getDomainUpperBound();    	non-compiled	[CE]  no  suitable  method  found  for  getDomainUpperBound()	192	None	replace
664	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        double    desnominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)	3	None	add
665	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  getDomainLowerBound(p);  Double.MAX_VALUE  =  getDomainLowerBound(p);  [CE]  cannot  assign  a  value  to  final  variable  MAX_VALUE  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  /  getDomainLowerBound(p);  Double.MAX_VALUE  =  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    /    getDomainLowerBound(p);    Double.MAX_VALUE  =  getDomainLowerBound(p);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  MAX_VALUE	184	None	add
666	[BUG]  [BUGGY]  p  =  getDomainLowerBound(p);  [CE]  missing  return  statement  [FE]              StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  p  =  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	p  =  getDomainLowerBound(p);	  return    getDomainUpperBound(p);    p    =    getDomainUpperBound(p);    	non-compiled	[CE]  missing  return  statement	82	None	replace
667	[BUG]  [BUGGY]  p  =  getDomainOpt(p);  [CE]  cannot  find  symbol  [FE]                StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  p  =  getDomainOpt(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	p  =  getDomainOpt(p);	  return    getDomainUpperBound(p);    p    =    getDomainUpperBound(p);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
668	[BUG]  [BUGGY]  Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  [CE]  missing  return  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,    getNumeratorDegreesOfFreedom());    	non-compiled	[CE]  missing  return  statement	7	None	replace
669	[BUG]  [BUGGY]  Math.min(p,  getNumeratorDegreesOfFreedom());  [CE]  missing  return  statement  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Math.min(p,  getNumeratorDegreesOfFreedom());  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Math.min(p,  getNumeratorDegreesOfFreedom());	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,    getNumeratorDegreesOfFreedom());    	non-compiled	[CE]  missing  return  statement	7	None	replace
670	[BUG]  [BUGGY]  double  m  =  getDenominatorBound(p);  [CE]  cannot  find  symbol  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  m  =  getDenominatorBound(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  m  =  getDenominatorBound(p);	  double    m    =    getDomainLowerBound(p);    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
671	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [CE]  >  expected  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;	  return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    	non-compiled	[CE]  >  expected	101	None	replace
672	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p!=  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p!=  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;	  return    p    >    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.MIN_VALUE;    	compilable	  [FE]  IllegalArgumentException  	160	1	replace
673	[BUG]  [BUGGY]  return  p!=  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p!=  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p!=  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;	  return    p    >    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.MIN_VALUE;    	compilable	  [FE]  IllegalArgumentException  	160	1	replace
674	[BUG]  [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  Double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  Double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    ==    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    Double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	70	None	add
675	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDomainDegreesOfFreedom(p);  [CE]  cannot  find  symbol  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDomainDegreesOfFreedom(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDomainDegreesOfFreedom(p);	  return    getDomainUpperBound(p);    if(p    >    0.0)    {    if(p    <    0.0)    {    return    getDomainUpperBound(p);    }    	non-compiled	[CE]  cannot  find  symbol	174	None	replace
676	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  this.numeratorDegreesOfFreedom;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  this.numeratorDegreesOfFreedom;	  return    Double.NaN;    	compilable	  [FE]  IllegalArgumentException  	239	2	replace
677	[BUG]  [BUGGY]  return  this.numeratorDegreesOfFreedom;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  this.numeratorDegreesOfFreedom;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  this.numeratorDegreesOfFreedom;	  return    Double.NaN;    	compilable	  [FE]  IllegalArgumentException  	239	2	replace
678	[BUG]  [BUGGY]  return  this.domainUpperBound;  [CE]  cannot  find  symbol  domainUpperBound  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  this.domainUpperBound;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  this.domainUpperBound;	  return    Double.NaN;    	non-compiled	[CE]  cannot  find  symbol  domainUpperBound	239	None	replace
679	[BUG]  [BUGGY]  return  this.domainUpperBounds.get(p);  [CE]  cannot  find  symbol  domainUpperBounds  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  this.domainUpperBounds.get(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  this.domainUpperBounds.get(p);	  return    Double.NaN;    	non-compiled	[CE]  cannot  find  symbol  domainUpperBounds	239	None	replace
680	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  Math.max(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        Math.min(denominatorDegreesOfFreedom,    getNumeratorDegreesOfFreedom());    Math.max(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());	  	compilable	  [FE]  IllegalArgumentException  	6	1	add
681	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  Math.max(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  Math.max(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        Math.min(denominatorDegreesOfFreedom,    getNumeratorDegreesOfFreedom());    Math.max(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());	  	compilable	  [FE]  IllegalArgumentException  	6	1	add
682	[BUG]  [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [CE]  not  a  statement  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;	  return    p    <    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    	non-compiled	[CE]  not  a  statement	67	None	replace
683	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [CE]  not  a  statement  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;	  return    p    <    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    	non-compiled	[CE]  not  a  statement	67	None	replace
684	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [CE]  not  a  statement  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;	  return    p    <    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    	non-compiled	[CE]  not  a  statement	67	None	replace
685	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  0.0?  Float.MIN_VALUE  :  p;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p  <  0.0?  Float.MIN_VALUE  :  p;	  return    Float.MIN_VALUE;    IllegalArgumentException    x    =    getDomainUpperBound(p);    	compilable	  [FE]  IllegalArgumentException  	171	3	replace
686	[BUG]  [BUGGY]  return  p  <  0.0?  Float.MIN_VALUE  :  p;  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  0.0?  Float.MIN_VALUE  :  p;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  0.0?  Float.MIN_VALUE  :  p;	  return    Float.MIN_VALUE;    IllegalArgumentException    x    =    getDomainUpperBound(p);    	compilable	  [FE]  IllegalArgumentException  	171	3	replace
687	[BUG]  [BUGGY]  return  p  <  =  0.0?  Float.MIN_VALUE  :  p;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  =  0.0?  Float.MIN_VALUE  :  p;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  =  0.0?  Float.MIN_VALUE  :  p;	  return    Float.MIN_VALUE;    IllegalArgumentException    x    =    getDomainUpperBound(p);    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
688	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE);  [CE]  not  a  statement  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE);	  return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE);    	non-compiled	[CE]  not  a  statement	143	None	replace
689	[BUG]  [BUGGY]  return  p  ==  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  >=  Double.MAX_VALUE  :  Double.MAX_VALUE;  [CE]  not  a  statement  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  >=  Double.MAX_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  ==  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  >=  Double.MAX_VALUE  :  Double.MAX_VALUE;	  return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE);    	non-compiled	[CE]  not  a  statement	143	None	replace
690	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  p,  denominatorDegreesOfFreedom);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  p,  denominatorDegreesOfFreedom);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  p,  denominatorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	231	None	replace
691	[BUG]  [BUGGY]  return  getDefaultUpperBound(p);  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDefaultUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  getDefaultUpperBound(p);	  return    getDomainLowerBound(p);    	non-compiled	[CE]  cannot  find  symbol	189	None	replace
692	[BUG]  [BUGGY]  return  p  ==  Double.MIN_VALUE;  [CE]  incompatible  types  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MIN_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  ==  Double.MIN_VALUE;	  return    p    ==    Double.MAX_VALUE;    	non-compiled	[CE]  incompatible  types	59	None	replace
693	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE  &&  p  <  =  Double.MAX_VALUE;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE  &&  p  <  =  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  Double.MIN_VALUE  &&  p  <  =  Double.MAX_VALUE;	  return    p    >    Double.MAX_VALUE    &&    p    <    =    Double.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
694	[BUG]  [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE	  	non-compiled	[CE]  not  a  statement	157	None	add
695	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  <  0.0)  {  return  denominatorDegreesOfFreedom  +  denominatorDegre  [CE]  ';'  expected  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  <  0.0)  {  return  denominatorDegreesOfFreedom  +  denominatorDegre  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  <  0.0)  {  return  denominatorDegreesOfFreedom  +  denominatorDegre	  return    Double.MIN_VALUE;    if(p    <    =    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Double.MIN_VALUE;    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    +    denominatorDegre    	non-compiled	[CE]  ';'  expected	212	None	replace
696	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  >  1.0)  {  return  denominatorDegreesOfFreedom  +  denominatorDegre  [CE]  ';'  expected  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  >  1.0)  {  return  denominatorDegreesOfFreedom  +  denominatorDegre  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  >  1.0)  {  return  denominatorDegreesOfFreedom  +  denominatorDegre	  return    Double.MIN_VALUE;    if(p    <    =    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Double.MIN_VALUE;    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    +    denominatorDegre    	non-compiled	[CE]  ';'  expected	212	None	replace
697	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  >  0.0)  {  return  denominatorDegreesOfFreedom  +  denominatorDegre  [CE]  ';'  expected  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  >  0.0)  {  return  denominatorDegreesOfFreedom  +  denominatorDegre  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  >  0.0)  {  return  denominatorDegreesOfFreedom  +  denominatorDegre	  return    Double.MIN_VALUE;    if(p    <    =    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Double.MIN_VALUE;    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    +    denominatorDegre    	non-compiled	[CE]  ';'  expected	212	None	replace
698	[BUG]  [BUGGY]  double  m  =  getDenominatorDegreesOfFreedom(p,  n);  [CE]  cannot  find  symbol  n  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  m  =  getDenominatorDegreesOfFreedom(p,  n);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  m  =  getDenominatorDegreesOfFreedom(p,  n);	  double    m    =    getDenominatorDegreesOfFreedom(p);    	non-compiled	[CE]  cannot  find  symbol  n	126	None	replace
699	[BUG]  [BUGGY]  m  =  getDomainUpperBound(p);  [CE]  cannot  find  symbol  m  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  m  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	m  =  getDomainUpperBound(p);	  return    Double.MAX_VALUE    /    2.0;    double    m    =    getDomainUpperBound(p);    	non-compiled	[CE]  cannot  find  symbol  m	116	None	replace
700	[BUG]  [BUGGY]  return  p  >  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  p  <  Double.MIN_VALUE  :  Double.MAX_VALUE;  [CE]  >  expected  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  p  <  Double.MIN_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  >  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  p  <  Double.MIN_VALUE  :  Double.MAX_VALUE;	  return    p    <    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    p    <    Double.MIN_VALUE    :    Double.MAX_VALUE;    	non-compiled	[CE]  >  expected	68	None	replace
701	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE  :  Double.MAX_VALUE;  [CE]  not  a  statement  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  Double.MIN_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE  :  Double.MAX_VALUE;	  return    p    <    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    p    <    Double.MIN_VALUE    :    Double.MAX_VALUE;    	non-compiled	[CE]  not  a  statement	68	None	replace
702	[BUG]  [BUGGY]  double  m  =  getDenominatorDegreesOfFreedom(p  +  1);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  m  =  getDenominatorDegreesOfFreedom(p  +  1);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  m  =  getDenominatorDegreesOfFreedom(p  +  1);	  double    m    =    getDomainUpperBound(p    +    1);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	127	None	replace
703	[BUG]  [BUGGY]  double  m  =  getDomainLowerBound(p  +  1);  [CE]  missing  return  statement  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  m  =  getDomainLowerBound(p  +  1);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  m  =  getDomainLowerBound(p  +  1);	  double    m    =    getDomainUpperBound(p    +    1);    	non-compiled	[CE]  missing  return  statement	127	None	replace
704	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p)+  1;  double  p  =  Double.MAX_VALUE  /  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p)+  1;  double  p  =  Double.MAX_VALUE  /  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    /    getDomainUpperBound(p)+    1;    double  p  =  Double.MAX_VALUE  /  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	39	None	add
705	[BUG]  [BUGGY]  return  Double.NaN;  IllegalArgumentException.printStackTrace();  [CE]  non-static  method  printStackTrace()  cannot  be  referenced  from  a  static  context  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.NaN;  IllegalArgumentException.printStackTrace();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.NaN;    IllegalArgumentException.printStackTrace();	  	non-compiled	[CE]  non-static  method  printStackTrace()  cannot  be  referenced  from  a  static  context	238	None	add
706	[BUG]  [BUGGY]  return  Double.NaN;  IllegalArgumentException.println( "NaN: "  +  p);  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.NaN;  IllegalArgumentException.println( "NaN: "  +  p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.NaN;    IllegalArgumentException.println( "NaN: "  +  p);	  	non-compiled	[CE]  cannot  find  symbol	238	None	add
707	[BUG]  [BUGGY]  return  Double.NaN;  IllegalArgumentException.println(p);  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.NaN;  IllegalArgumentException.println(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.NaN;    IllegalArgumentException.println(p);	  	non-compiled	[CE]  cannot  find  symbol	238	None	add
708	[BUG]  [BUGGY]  return  Float.MIN_VALUE  -  1;  IllegalArgumentException  x  =  getDomainUpperBound();  [CE]  no  suitable  method  found  for  getDomainUpperBound()  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MIN_VALUE  -  1;  IllegalArgumentException  x  =  getDomainUpperBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Float.MIN_VALUE  -  1;  IllegalArgumentException  x  =  getDomainUpperBound();	  return    Float.MIN_VALUE;    IllegalArgumentException    x    =    getDomainUpperBound();    	non-compiled	[CE]  no  suitable  method  found  for  getDomainUpperBound()	172	None	replace
709	[BUG]  [BUGGY]  return  Float.MIN_VALUE  /  2;  IllegalArgumentException  x  =  getDomainUpperBound();  [CE]  no  suitable  method  found  for  getDomainUpperBound()  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MIN_VALUE  /  2;  IllegalArgumentException  x  =  getDomainUpperBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Float.MIN_VALUE  /  2;  IllegalArgumentException  x  =  getDomainUpperBound();	  return    Float.MIN_VALUE;    IllegalArgumentException    x    =    getDomainUpperBound();    	non-compiled	[CE]  no  suitable  method  found  for  getDomainUpperBound()	172	None	replace
710	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  0);  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  0);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  0);	  double    denominatorDegreesOfFreedom    =    getDestinatorDegreesOfFreedom(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol	198	None	replace
711	[BUG]  [BUGGY]  return  p  /  getDomainUpperBound(p);  p  =  getDomainUpperBound(p);  [CE]  unreachable  statement  [FE]                StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  /  getDomainUpperBound(p);  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  /  getDomainUpperBound(p);  p  =  getDomainUpperBound(p);	  return    Double.MAX_VALUE    /    getDomainUpperBound(p);    p    =    getDomainUpperBound(p);    	non-compiled	[CE]  unreachable  statement	123	None	replace
712	[BUG]  [BUGGY]  return  p  <  =  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  =  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  =  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;	  return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    if(p    <    Double.MIN_VALUE    ||    p    >    Double.MAX_VALUE)    {    return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    }    	non-compiled	[CE]  illegal  start  of  expression	202	None	replace
713	[BUG]  [BUGGY]  p  =  getDomainUpperBound();  [CE]  no  suitable  method  found  for  getDomainUpperBound()  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  p  =  getDomainUpperBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	p  =  getDomainUpperBound();	  return    Float.MIN_VALUE;    Double    p    =    getDomainUpperBound();    	non-compiled	[CE]  no  suitable  method  found  for  getDomainUpperBound()	132	None	replace
714	[BUG]  [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  return  Float.MAX_VALUE;  }  [CE]  missing  return  statement  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  return  Float.MAX_VALUE;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  0.0  ||  p  >  1.0)  {  return  Float.MAX_VALUE;  }	  return    Float.MAX_VALUE;    if(p    <    0.0    ||    p    >    1.0)    {    return    Float.MAX_VALUE;    }    	non-compiled	[CE]  missing  return  statement	219	None	replace
715	[BUG]  [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  return  Float.MIN_VALUE;  }  [CE]  missing  return  statement  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  return  Float.MIN_VALUE;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  0.0  ||  p  >  1.0)  {  return  Float.MIN_VALUE;  }	  return    Float.MAX_VALUE;    if(p    <    0.0    ||    p    >    1.0)    {    return    Float.MAX_VALUE;    }    	non-compiled	[CE]  missing  return  statement	219	None	replace
716	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDomainLowerBound(p  +  1);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  getDomainLowerBound(p  +  1);	  return    getDomainUpperBound(p    +    1);    	compilable	  [FE]  IllegalArgumentException  	136	3	replace
717	[BUG]  [BUGGY]  return  getDomainLowerBound(p  +  1);  [FE]  IllegalArgumentException  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDomainLowerBound(p  +  1);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  getDomainLowerBound(p  +  1);	  return    getDomainUpperBound(p    +    1);    	compilable	  [FE]  IllegalArgumentException  	136	3	replace
718	[BUG]  [BUGGY]  return  getDenominatorDegreesOfFreedom(p  +  1);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDenominatorDegreesOfFreedom(p  +  1);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  getDenominatorDegreesOfFreedom(p  +  1);	  return    getDomainUpperBound(p    +    1);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	136	None	replace
719	[BUG]  [BUGGY]  Double.MIN_VALUE;  IllegalArgumentException  x  =  getDomainUpperBounds(p);  [CE]  not  a  statement  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double.MIN_VALUE;  IllegalArgumentException  x  =  getDomainUpperBounds(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double.MIN_VALUE;  IllegalArgumentException  x  =  getDomainUpperBounds(p);	  return    Double.MIN_VALUE;    IllegalArgumentException    x    =    getDomainUpperBounds(p);    	non-compiled	[CE]  not  a  statement	183	None	replace
720	[BUG]  [BUGGY]  return  Double.MIN_VALUE  -  1;  double  m  =  getDomainUpperBound();  [CE]  no  suitable  method  found  for  getDomainUpperBound()  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE  -  1;  double  m  =  getDomainUpperBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MIN_VALUE  -  1;  double  m  =  getDomainUpperBound();	  return    Double.MIN_VALUE;    double    m    =    getDomainUpperBound();    	non-compiled	[CE]  no  suitable  method  found  for  getDomainUpperBound()	110	None	replace
721	[BUG]  [BUGGY]  Double  m  =  getDomainUpperBound();  [CE]  no  suitable  method  found  for  getDomainUpperBound()  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  m  =  getDomainUpperBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  m  =  getDomainUpperBound();	  return    Double.MIN_VALUE;    double    m    =    getDomainUpperBound();    	non-compiled	[CE]  no  suitable  method  found  for  getDomainUpperBound()	110	None	replace
722	[BUG]  [BUGGY]  return  Float.MAX_VALUE  -  1;  IllegalArgumentException  e  =  getNullValue();  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MAX_VALUE  -  1;  IllegalArgumentException  e  =  getNullValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MAX_VALUE    -    1;    IllegalArgumentException  e  =  getNullValue();	  	non-compiled	[CE]  cannot  find  symbol	43	None	add
723	[BUG]  [BUGGY]  return  p  ==  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  Double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  Double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    ==    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    Double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	22	None	add
724	[BUG]  [BUGGY]  return  p  ==  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  ==  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE);  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  ==  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    ==    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    p  ==  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE);	  	non-compiled	[CE]  not  a  statement	22	None	add
725	[BUG]  [BUGGY]  return  p  ==  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  <  =  Double.MAX_VALUE  :  Double.MAX_VALUE;  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  <  =  Double.MAX_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  ==  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  <  =  Double.MAX_VALUE  :  Double.MAX_VALUE;	  return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
726	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  [CE]  not  a  statement  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;	  return    p    <    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    p    <    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    	non-compiled	[CE]  not  a  statement	66	None	replace
727	[BUG]  [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  [CE]  not  a  statement  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;	  return    p    <    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    p    <    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    	non-compiled	[CE]  not  a  statement	66	None	replace
728	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  [CE]  not  a  statement  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  Double.MIN_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;	  return    p    <    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    p    <    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    	non-compiled	[CE]  not  a  statement	66	None	replace
729	[BUG]  [BUGGY]  return  p  >  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  p  <  Double.MAX_VALUE  :  Double.MAX_VALUE;  [CE]  >  expected  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  p  <  Double.MAX_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  >  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  p  <  Double.MAX_VALUE  :  Double.MAX_VALUE;	  return    p    <    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    p    <    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    	non-compiled	[CE]  >  expected	66	None	replace
730	[BUG]  [BUGGY]  if(p  <  =  0.0)  {  return  Float.MAX_VALUE;  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  =  0.0)  {  return  Float.MAX_VALUE;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  =  0.0)  {  return  Float.MAX_VALUE;  }	  return    Float.MAX_VALUE;    if(p    <    =    0.0)    {    return    Float.MAX_VALUE;    }    	non-compiled	[CE]  illegal  start  of  expression	220	None	replace
731	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  Double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  variable  desnominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  Double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        denominatorDegreesOfFreedom        =        getDenominatorDegreesOfFreedom();        double    desnominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    Double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  variable  desnominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)	30	None	add
732	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  variable  desnominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        denominatorDegreesOfFreedom        =        getDenominatorDegreesOfFreedom();        double    desnominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  variable  desnominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)	30	None	add
733	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MAX_VALUE  *  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Float.MAX_VALUE  *  1;	  return    Float.MAX_VALUE    -    1;    	compilable	  [FE]  IllegalArgumentException  	44	1	replace
734	[BUG]  [BUGGY]  return  Float.MAX_VALUE  *  1;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MAX_VALUE  *  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Float.MAX_VALUE  *  1;	  return    Float.MAX_VALUE    -    1;    	compilable	  [FE]  IllegalArgumentException  	44	1	replace
735	[BUG]  [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  Double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  Double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    ==    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    Double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	11	None	add
736	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  Float.parseFloat(p);  [CE]  method  parseFloat  in  class  Float  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  Float.parseFloat(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  Float.parseFloat(p);	  return    Float.MIN_VALUE;    if(p    <    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Math.abs(p);    if(denominatorDegreesOfFreedom    ==    0.0)    {    return    denominatorDegreesOfFreedom;    }    	non-compiled	[CE]  method  parseFloat  in  class  Float  cannot  be  applied  to  given  types;	241	None	replace
737	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    p  =  getNumeratorDegreesOfFreedom();  int  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  p  =  getNumeratorDegreesOfFreedom();  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    p  =  getNumeratorDegreesOfFreedom();  int  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  p  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        p    =    getNumeratorDegreesOfFreedom();    int  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  p  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)	177	None	add
738	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    p  =  getNumeratorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    p  =  getNumeratorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        p    =    getNumeratorDegreesOfFreedom();    double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)	177	None	add
739	[BUG]  [BUGGY]  return  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  Double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  Double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    Double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	152	None	add
740	[BUG]  [BUGGY]  return  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE	  	non-compiled	[CE]  not  a  statement	152	None	add
741	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  c);  [CE]  cannot  find  symbol  c  [FE]                        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  c);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  c);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p,    n);    	non-compiled	[CE]  cannot  find  symbol  c	65	None	replace
742	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  p  =  getDomainUpperBoundsOfFreedom();  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  p  =  getDomainUpperBoundsOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  p  =  getDomainUpperBoundsOfFreedom();	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    p    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	178	None	replace
743	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDegreesOfFreedom();  p  =  getNumeratorDegreesOfFreedom();  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDegreesOfFreedom();  p  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumberDegreesOfFreedom();  p  =  getNumeratorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    p    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	178	None	replace
744	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDomainLowerBound(p  -  1);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  getDomainLowerBound(p  -  1);	  return    getDomainUpperBound(p    -    1);    	compilable	  [FE]  IllegalArgumentException  	138	3	replace
745	[BUG]  [BUGGY]  return  getDomainLowerBound(p  -  1);  [FE]  IllegalArgumentException  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDomainLowerBound(p  -  1);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  getDomainLowerBound(p  -  1);	  return    getDomainUpperBound(p    -    1);    	compilable	  [FE]  IllegalArgumentException  	138	3	replace
746	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE  /  2.0  +  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Double.MIN_VALUE  /  2.0  +  1;	  return    Double.MIN_VALUE    /    2.0;    	compilable	  [FE]  IllegalArgumentException  	147	3	replace
747	[BUG]  [BUGGY]  return  Double.MIN_VALUE  /  2.0  +  1;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE  /  2.0  +  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MIN_VALUE  /  2.0  +  1;	  return    Double.MIN_VALUE    /    2.0;    	compilable	  [FE]  IllegalArgumentException  	147	3	replace
748	[BUG]  [BUGGY]  NumeratorDegreesOfFreedom  p  =  getNumeratorDegreesOfFreedom();  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  NumeratorDegreesOfFreedom  p  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	NumeratorDegreesOfFreedom  p  =  getNumeratorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
749	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0.0)  {  return  getDomainUpperBound(p);  }  else  {  return  getDomainUpperBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	if(p  <  0.0)  {  return  getDomainUpperBound(p);  }  else  {  return  getDomainUpperBound(p);  }	  return    getDomainUpperBound(p);    if(p    >    0.0)    {    return    getDomainUpperBound(p);    }    else    {    return    getDomainUpperBound(p);    }    	compilable	  [FE]  StackOverflowError  	216	3	replace
750	[BUG]  [BUGGY]  if(p  <  0.0)  {  return  getDomainUpperBound(p);  }  else  {  return  getDomainUpperBound(p);  }  [FE]  StackOverflowError  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0.0)  {  return  getDomainUpperBound(p);  }  else  {  return  getDomainUpperBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  0.0)  {  return  getDomainUpperBound(p);  }  else  {  return  getDomainUpperBound(p);  }	  return    getDomainUpperBound(p);    if(p    >    0.0)    {    return    getDomainUpperBound(p);    }    else    {    return    getDomainUpperBound(p);    }    	compilable	  [FE]  StackOverflowError  	216	3	replace
751	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0.0)  {  return  getDomainLowerBound(p);  }  else  {  return  getDomainLowerBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	if(p  <  0.0)  {  return  getDomainLowerBound(p);  }  else  {  return  getDomainLowerBound(p);  }	  return    getDomainUpperBound(p);    if(p    >    0.0)    {    return    getDomainUpperBound(p);    }    else    {    return    getDomainUpperBound(p);    }    	compilable	  [FE]  IllegalArgumentException  	216	3	replace
752	[BUG]  [BUGGY]  if(p  <  0.0)  {  return  getDomainLowerBound(p);  }  else  {  return  getDomainLowerBound(p);  }  [FE]  IllegalArgumentException  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0.0)  {  return  getDomainLowerBound(p);  }  else  {  return  getDomainLowerBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  0.0)  {  return  getDomainLowerBound(p);  }  else  {  return  getDomainLowerBound(p);  }	  return    getDomainUpperBound(p);    if(p    >    0.0)    {    return    getDomainUpperBound(p);    }    else    {    return    getDomainUpperBound(p);    }    	compilable	  [FE]  IllegalArgumentException  	216	3	replace
753	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0.0)  {  return  getDomainUpperBound(p);  }  else  {  return  getDomainLowerBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	if(p  <  0.0)  {  return  getDomainUpperBound(p);  }  else  {  return  getDomainLowerBound(p);  }	  return    getDomainUpperBound(p);    if(p    >    0.0)    {    return    getDomainUpperBound(p);    }    else    {    return    getDomainUpperBound(p);    }    	compilable	  [FE]  IllegalArgumentException  	216	3	replace
754	[BUG]  [BUGGY]  if(p  <  0.0)  {  return  getDomainUpperBound(p);  }  else  {  return  getDomainLowerBound(p);  }  [FE]  IllegalArgumentException  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0.0)  {  return  getDomainUpperBound(p);  }  else  {  return  getDomainLowerBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  0.0)  {  return  getDomainUpperBound(p);  }  else  {  return  getDomainLowerBound(p);  }	  return    getDomainUpperBound(p);    if(p    >    0.0)    {    return    getDomainUpperBound(p);    }    else    {    return    getDomainUpperBound(p);    }    	compilable	  [FE]  IllegalArgumentException  	216	3	replace
755	[BUG]  [BUGGY]  n  =  getDenominatorDegreesOfFreedom();  [CE]  cannot  find  symbol  n  [FE]              StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  n  =  getDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	n  =  getDenominatorDegreesOfFreedom();	  return    getDomainUpperBound(p);    if(p    >    0.0)    {    return    getDomainUpperBound(p);    }    else    {    return    getDomainUpperBound(p);    }    	non-compiled	[CE]  cannot  find  symbol  n	216	None	replace
756	[BUG]  [BUGGY]  double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  missing  return  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double    desnominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  missing  return  statement	4	None	replace
757	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumDenominatorDegreesOfFreedom();  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumDenominatorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumDenominatorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
758	[BUG]  [BUGGY]  Double  m  =  getDenominatorBound(p);  [CE]  cannot  find  symbol  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  m  =  getDenominatorBound(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  m  =  getDenominatorBound(p);	  Double    m    =    getDomainLowerBound(p);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
759	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY;  IllegalArgumentException.printStackTrace();  [CE]  non-static  method  printStackTrace()  cannot  be  referenced  from  a  static  context  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.POSITIVE_INFINITY;  IllegalArgumentException.printStackTrace();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.POSITIVE_INFINITY;    IllegalArgumentException.printStackTrace();	  	non-compiled	[CE]  non-static  method  printStackTrace()  cannot  be  referenced  from  a  static  context	236	None	add
760	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY;  IllegalArgumentException.println(p);  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.POSITIVE_INFINITY;  IllegalArgumentException.println(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.POSITIVE_INFINITY;    IllegalArgumentException.println(p);	  	non-compiled	[CE]  cannot  find  symbol	236	None	add
761	[BUG]  [BUGGY]  return  Float.MIN_VALUE;  Float.MAX_VALUE;  [CE]  not  a  statement  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MIN_VALUE;  Float.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Float.MIN_VALUE;  Float.MAX_VALUE;	  return    Float.MAX_VALUE;    Float.MAX_VALUE;    	non-compiled	[CE]  not  a  statement	74	None	replace
762	[BUG]  [BUGGY]  return  Float.MAX_VALUE;  Float.MAX_VALUE  =  0.0;  [CE]  cannot  assign  a  value  to  final  variable  MAX_VALUE  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MAX_VALUE;  Float.MAX_VALUE  =  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Float.MAX_VALUE;  Float.MAX_VALUE  =  0.0;	  return    Float.MAX_VALUE;    Float.MAX_VALUE;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  MAX_VALUE	74	None	replace
763	[BUG]  [BUGGY]  return  Double.MIN_VALUE  /  2.0;  Double.MAX_VALUE  /  2.0;  [CE]  not  a  statement  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE  /  2.0;  Double.MAX_VALUE  /  2.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MIN_VALUE  /  2.0;  Double.MAX_VALUE  /  2.0;	  return    Double.MAX_VALUE    /    2.0;    Double.MAX_VALUE    /    2.0;    	non-compiled	[CE]  not  a  statement	114	None	replace
764	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MIN_VALUE  +  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Float.MIN_VALUE  +  1;	  return    Float.MIN_VALUE    -    1;    	compilable	  [FE]  IllegalArgumentException  	88	3	replace
765	[BUG]  [BUGGY]  return  Float.MIN_VALUE  +  1;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MIN_VALUE  +  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Float.MIN_VALUE  +  1;	  return    Float.MIN_VALUE    -    1;    	compilable	  [FE]  IllegalArgumentException  	88	3	replace
766	[BUG]  [BUGGY]  Integer  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  incompatible  types  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Integer  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Integer  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    int    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  incompatible  types	5	None	replace
767	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  0,  0);  [CE]  cannot  find  symbol  [FE]                      IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  0,  0);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  0,  0);	  double    denominatorDegreesOfFreedom    =    getDestinatorDegreesOfFreedom(p,    m);    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
768	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  numeratorDegrees);  [CE]  cannot  find  symbol  numeratorDegrees  [FE]                        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  numeratorDegrees);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  numeratorDegrees);	  double    denominatorDegreesOfFreedom    =    getDestinatorDegreesOfFreedom(p,    m);    	non-compiled	[CE]  cannot  find  symbol  numeratorDegrees	125	None	replace
769	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  *  1.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Double.MAX_VALUE  *  1.0;	  return    Double.MAX_VALUE    *    2.0;    	compilable	  [FE]  IllegalArgumentException  	21	1	replace
770	[BUG]  [BUGGY]  return  Double.MAX_VALUE  *  1.0;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  *  1.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MAX_VALUE  *  1.0;	  return    Double.MAX_VALUE    *    2.0;    	compilable	  [FE]  IllegalArgumentException  	21	1	replace
771	[BUG]  [BUGGY]  return  Double.MIN_VALUE  /  getDomainUpperBound(p,  denominatorDegreesOfFreedom);  [CE]  no  suitable  method  found  for  getDomainUpperBound(double,double)  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE  /  getDomainUpperBound(p,  denominatorDegreesOfFreedom);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MIN_VALUE  /  getDomainUpperBound(p,  denominatorDegreesOfFreedom);	  return    Double.MIN_VALUE    /    getDomainUpperBound(p);    	non-compiled	[CE]  no  suitable  method  found  for  getDomainUpperBound(double,double)	36	None	replace
772	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE  /  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Double.MIN_VALUE  /  getDomainLowerBound(p);	  return    Double.MIN_VALUE    /    getDomainUpperBound(p);    	compilable	  [FE]  IllegalArgumentException  	36	1	replace
773	[BUG]  [BUGGY]  return  Double.MIN_VALUE  /  getDomainLowerBound(p);  [FE]  IllegalArgumentException  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE  /  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MIN_VALUE  /  getDomainLowerBound(p);	  return    Double.MIN_VALUE    /    getDomainUpperBound(p);    	compilable	  [FE]  IllegalArgumentException  	36	1	replace
774	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  /  0.doubleValue()  +  1;  [CE]  ';'  expected  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  /  0.doubleValue()  +  1;  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  /  0.doubleValue()  +  1;	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom().doubleValue()    +    1;    	non-compiled	[CE]  ';'  expected	86	None	replace
775	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom().doubleValue()  *  1;  [CE]  double  cannot  be  dereferenced  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom().doubleValue()  *  1;  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom().doubleValue()  *  1;	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom().doubleValue()    +    1;    	non-compiled	[CE]  double  cannot  be  dereferenced	86	None	replace
776	[BUG]  [BUGGY]  double  m  =  getDenominatorDegreesOfFreedom();  m  =  getDomainUpperBound(p);  [CE]  missing  return  statement  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  m  =  getDenominatorDegreesOfFreedom();  m  =  getDomainUpperBound(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  m  =  getDenominatorDegreesOfFreedom();  m  =  getDomainUpperBound(p);	          double    m    =    getDomainUpperBound(p);    m    =    getDomainUpperBound(p);    	non-compiled	[CE]  missing  return  statement	222	None	replace
777	[BUG]  [BUGGY]  double  m  =  getDenominatorDegreesOfFreedom(p);  m  =  getDomainLowerBound(p);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  m  =  getDenominatorDegreesOfFreedom(p);  m  =  getDomainLowerBound(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  m  =  getDenominatorDegreesOfFreedom(p);  m  =  getDomainLowerBound(p);	          double    m    =    getDomainUpperBound(p);    m    =    getDomainUpperBound(p);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	222	None	replace
778	[BUG]  [BUGGY]  return  Double.MAX_VALUE  +  2.0;  Double.MAX_VALUE  =  1.0;  [CE]  cannot  assign  a  value  to  final  variable  MAX_VALUE  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  +  2.0;  Double.MAX_VALUE  =  1.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    +    2.0;    Double.MAX_VALUE  =  1.0;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  MAX_VALUE	18	None	add
779	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  *  1;  [CE]  missing  return  statement  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  *  1;  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  *  1;	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom()    +    1;    	non-compiled	[CE]  missing  return  statement	218	None	replace
780	[BUG]  [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.MIN_VALUE;    p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;	  	non-compiled	[CE]  not  a  statement	159	None	add
781	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  =  Double.NEGATIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  [CE]  >  expected  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  =  Double.NEGATIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.NEGATIVE_INFINITY;    p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  =  Double.NEGATIVE_INFINITY  :  Double.NEGATIVE_INFINITY;	  	non-compiled	[CE]  >  expected	47	None	add
782	[BUG]  [BUGGY]  return  getDomainLowerBound(p);  if(p  >  0)  {  if(p  <  getDomainLowerBound())  {  return  getDomainLowerBound(p);  }  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDomainLowerBound(p);  if(p  >  0)  {  if(p  <  getDomainLowerBound())  {  return  getDomainLowerBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    getDomainLowerBound(p);    if(p  >  0)  {  if(p  <  getDomainLowerBound())  {  return  getDomainLowerBound(p);  }	  	non-compiled	[CE]  illegal  start  of  expression	188	None	add
783	[BUG]  [BUGGY]  return  getDomainLowerBound(p);  if(p  >  0)  {  if(getDomainLowerBound(p)!=  0.0)  {  return  getDomainLowerBound(p);  }  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDomainLowerBound(p);  if(p  >  0)  {  if(getDomainLowerBound(p)!=  0.0)  {  return  getDomainLowerBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    getDomainLowerBound(p);    if(p  >  0)  {  if(getDomainLowerBound(p)!=  0.0)  {  return  getDomainLowerBound(p);  }	  	non-compiled	[CE]  illegal  start  of  expression	188	None	add
784	[BUG]  [BUGGY]  return  p!=  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  ==  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p!=  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  ==  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p!=    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    p  ==  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;	  	non-compiled	[CE]  not  a  statement	150	None	add
785	[BUG]  [BUGGY]  return  p!=  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  Double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p!=  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  Double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p!=    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    Double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	150	None	add
786	[BUG]  [BUGGY]  double  m  =  getDomainMotatorBound(p);  [CE]  cannot  find  symbol  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  m  =  getDomainMotatorBound(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  m  =  getDomainMotatorBound(p);	          double    m    =    getDomainUpperBound(p);    double    p    =    getDomainUpperBound(p);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
787	[BUG]  [BUGGY]  DenominatorDegreesOfFreedom  p  =  getDenominatorDegreesOfFreedom();  NumeratorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  DenominatorDegreesOfFreedom  p  =  getDenominatorDegreesOfFreedom();  NumeratorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	DenominatorDegreesOfFreedom  p  =  getDenominatorDegreesOfFreedom();  NumeratorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    NumeratorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	195	None	replace
788	[BUG]  [BUGGY]  Double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  NumeratorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  cannot  find  symbol  NumeratorDegreesOfFreedom  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  NumeratorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  NumeratorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    NumeratorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol  NumeratorDegreesOfFreedom	195	None	replace
789	[BUG]  [BUGGY]  long  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  int  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  possible  loss  of  precision  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  long  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  int  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	long  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  int  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    int    numeratorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  possible  loss  of  precision	209	None	replace
790	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    p  =  getDenominatorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    p  =  getDenominatorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        denominatorDegreesOfFreedom        =        getDenominatorDegreesOfFreedom();        p    =    getDenominatorDegreesOfFreedom();    double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)	196	None	add
791	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    p  =  getDenominatorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getDenominatorsOfFreedom();  p  =  getDenominatorDegreesOfFreedom();  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    p  =  getDenominatorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getDenominatorsOfFreedom();  p  =  getDenominatorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        denominatorDegreesOfFreedom        =        getDenominatorDegreesOfFreedom();        p    =    getDenominatorDegreesOfFreedom();    double  denominatorDegreesOfFreedom  =  getDenominatorsOfFreedom();  p  =  getDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)	196	None	add
792	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    p  =  getDenominatorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  p  =  getDenominatorDegreesOfFreedom()  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    p  =  getDenominatorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  p  =  getDenominatorDegreesOfFreedom()  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        denominatorDegreesOfFreedom        =        getDenominatorDegreesOfFreedom();        p    =    getDenominatorDegreesOfFreedom();    double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  p  =  getDenominatorDegreesOfFreedom()	  	non-compiled	[CE]  ';'  expected	196	None	add
793	[BUG]  [BUGGY]  p  =  getDomainPositiveDegreesOfFreedom(p);  [CE]  cannot  find  symbol  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  p  =  getDomainPositiveDegreesOfFreedom(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	p  =  getDomainPositiveDegreesOfFreedom(p);	  return    getDomainUpperBound(p);    if(p    >    0.0)    {    return    getDomainUpperBound(p);    }    	non-compiled	[CE]  cannot  find  symbol	217	None	replace
794	[BUG]  [BUGGY]  double  n  =  getDenominatorDegreesOfFreedom(p);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]                      IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  n  =  getDenominatorDegreesOfFreedom(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  n  =  getDenominatorDegreesOfFreedom(p);	  double    n    =    getDomainUpperBound(p);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	52	None	replace
795	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  p,  denominatorDegreesOfFreedom);  [CE]  method  getNumeratorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  p,  denominatorDegreesOfFreedom);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  p,  denominatorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  method  getNumeratorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	165	None	replace
796	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.POSITIVE_INFINITY  -  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Double.POSITIVE_INFINITY  -  1;	  return    Double.POSITIVE_INFINITY;    	compilable	  [FE]  IllegalArgumentException  	237	1	replace
797	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY  -  1;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.POSITIVE_INFINITY  -  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.POSITIVE_INFINITY  -  1;	  return    Double.POSITIVE_INFINITY;    	compilable	  [FE]  IllegalArgumentException  	237	1	replace
798	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.POSITIVE_INFINITY  /(double)p;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Double.POSITIVE_INFINITY  /(double)p;	  return    Double.POSITIVE_INFINITY;    	compilable	  [FE]  IllegalArgumentException  	237	1	replace
799	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY  /(double)p;  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.POSITIVE_INFINITY  /(double)p;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.POSITIVE_INFINITY  /(double)p;	  return    Double.POSITIVE_INFINITY;    	compilable	  [FE]  IllegalArgumentException  	237	1	replace
800	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.POSITIVE_INFINITY  +  p;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Double.POSITIVE_INFINITY  +  p;	  return    Double.POSITIVE_INFINITY;    	compilable	  [FE]  IllegalArgumentException  	237	1	replace
801	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY  +  p;  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.POSITIVE_INFINITY  +  p;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.POSITIVE_INFINITY  +  p;	  return    Double.POSITIVE_INFINITY;    	compilable	  [FE]  IllegalArgumentException  	237	1	replace
802	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  getDenominatorDegreesOfFreedom();	  return    getDomainUpperBound(p);    return    getDomainUpperBound(p);    	compilable	  [FE]  IllegalArgumentException  	173	2	replace
803	[BUG]  [BUGGY]  return  getDenominatorDegreesOfFreedom();  [FE]  IllegalArgumentException  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDenominatorDegreesOfFreedom();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  getDenominatorDegreesOfFreedom();	  return    getDomainUpperBound(p);    return    getDomainUpperBound(p);    	compilable	  [FE]  IllegalArgumentException  	173	2	replace
804	[BUG]  [BUGGY]  Double  m  =  getDomainUpperBound(p,  n);  [CE]  cannot  find  symbol  n  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  m  =  getDomainUpperBound(p,  n);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  m  =  getDomainUpperBound(p,  n);	  Double    m    =    getDomainUpperBound(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  n	145	None	replace
805	[BUG]  [BUGGY]  Double  m  =  getDenominatorDegreesOfFreedom(p  +  1);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  m  =  getDenominatorDegreesOfFreedom(p  +  1);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  m  =  getDenominatorDegreesOfFreedom(p  +  1);	  Double    m    =    getDomainUpperBound(p    +    1);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	8	None	replace
806	[BUG]  [BUGGY]  Double  m  =  getDomainLowerBound(p  +  1);  [CE]  missing  return  statement  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  m  =  getDomainLowerBound(p  +  1);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  m  =  getDomainLowerBound(p  +  1);	  Double    m    =    getDomainUpperBound(p    +    1);    	non-compiled	[CE]  missing  return  statement	8	None	replace
807	[BUG]  [BUGGY]  return  p  >=  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  >>  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >=  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  >>  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >=    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    p  >>  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;	  	non-compiled	[CE]  not  a  statement	13	None	add
808	[BUG]  [BUGGY]  Double.MIN_VALUE  =  getDomainUpperBound(p);  [CE]  cannot  assign  a  value  to  final  variable  MIN_VALUE  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double.MIN_VALUE  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double.MIN_VALUE  =  getDomainUpperBound(p);	  return    Double.MAX_VALUE    /    getDomainUpperBound(p);    Double.MAX_VALUE    =    getDomainUpperBound(p);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  MIN_VALUE	169	None	replace
809	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  numeratorDegrees);  [CE]  cannot  find  symbol  numeratorDegrees  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  numeratorDegrees);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  numeratorDegrees);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p,    m);    	non-compiled	[CE]  cannot  find  symbol  numeratorDegrees	62	None	replace
810	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(),  p.doubleValue()  +  1;  [CE]  ';'  expected  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(),  p.doubleValue()  +  1;  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(),  p.doubleValue()  +  1;	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(),    p.doubleValue();    	non-compiled	[CE]  ';'  expected	84	None	replace
811	[BUG]  [BUGGY]  double  m  =  getDomainLowerBound(p)-  1;  [CE]  missing  return  statement  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  m  =  getDomainLowerBound(p)-  1;  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  m  =  getDomainLowerBound(p)-  1;	  double    m    =    getDomainUpperBound(p)-    1;    	non-compiled	[CE]  missing  return  statement	128	None	replace
812	[BUG]  [BUGGY]  return  getDenominatorDegreesOfFreedom(p);  getDomainUpperBound(p);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDenominatorDegreesOfFreedom(p);  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  getDenominatorDegreesOfFreedom(p);  getDomainUpperBound(p);	  return    getDomainUpperBound(p);    getDomainUpperBound(p);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	80	None	replace
813	[BUG]  [BUGGY]  if(p  <  0)  {  return  getDomainUpperBound(p);  }  else  {  getDomainUpperBound(p);  }  [CE]  missing  return  statement  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0)  {  return  getDomainUpperBound(p);  }  else  {  getDomainUpperBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  0)  {  return  getDomainUpperBound(p);  }  else  {  getDomainUpperBound(p);  }	  return    getDomainUpperBound(p);    getDomainUpperBound(p);    	non-compiled	[CE]  missing  return  statement	80	None	replace
814	[BUG]  [BUGGY]  return  getDenominatorDegreesOfFreedom();  getDomainUpperBound(p);  [CE]  unreachable  statement  [FE]              StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDenominatorDegreesOfFreedom();  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  getDenominatorDegreesOfFreedom();  getDomainUpperBound(p);	  return    getDomainUpperBound(p);    getDomainUpperBound(p);    	non-compiled	[CE]  unreachable  statement	80	None	replace
815	[BUG]  [BUGGY]  Double  m  =  getDenominatorDegreesOfFreedom(p)+  1;  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  m  =  getDenominatorDegreesOfFreedom(p)+  1;  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  m  =  getDenominatorDegreesOfFreedom(p)+  1;	  Double    m    =    getDomainUpperBound(p)+    1;    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	10	None	replace
816	[BUG]  [BUGGY]          Double    m    =    getDomainUpperBound(p);    Double  d  =  getDomainUpperBound(p);  Double  m  =  getDomainUpperBound(p);  [CE]  variable  m  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          Double    m    =    getDomainUpperBound(p);    Double  d  =  getDomainUpperBound(p);  Double  m  =  getDomainUpperBound(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                Double        m        =        getDomainUpperBound(p);        Double    d    =    getDomainUpperBound(p);    Double  m  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  m  is  already  defined  in  method  getDomainUpperBound(double)	99	None	add
817	[BUG]  [BUGGY]  return  Float.MIN_VALUE  -  1;  IllegalArgumentException  e  =  getNullValue();  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MIN_VALUE  -  1;  IllegalArgumentException  e  =  getNullValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MIN_VALUE    -    1;    IllegalArgumentException  e  =  getNullValue();	  	non-compiled	[CE]  cannot  find  symbol	87	None	add
818	[BUG]  [BUGGY]  return  Float.MIN_VALUE  -  1;  float  -  1;  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MIN_VALUE  -  1;  float  -  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MIN_VALUE    -    1;    float  -  1;	  	non-compiled	[CE]  not  a  statement	87	None	add
819	[BUG]  [BUGGY]  return  Double.MIN_VALUE  -  1;  IllegalArgumentException  x  =  getDomainUpperBound(p);  [CE]  incompatible  types  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE  -  1;  IllegalArgumentException  x  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MIN_VALUE  -  1;  IllegalArgumentException  x  =  getDomainUpperBound(p);	  return    Double.MIN_VALUE;    IllegalArgumentException    x    =    getDomainUpperBound(p);    	non-compiled	[CE]  incompatible  types	181	None	replace
820	[BUG]  [BUGGY]  denominatorDegreesOfFreedom.getDomainUpperBound();  [CE]  double  cannot  be  dereferenced  [FE]                        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  denominatorDegreesOfFreedom.getDomainUpperBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	denominatorDegreesOfFreedom.getDomainUpperBound();	  m.getDomainUpperBound();    	non-compiled	[CE]  double  cannot  be  dereferenced	53	None	replace
821	[BUG]  [BUGGY]  pom.getDomainUpperBound();  [CE]  cannot  find  symbol  pom  [FE]                          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  pom.getDomainUpperBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	pom.getDomainUpperBound();	  m.getDomainUpperBound();    	non-compiled	[CE]  cannot  find  symbol  pom	53	None	replace
822	[BUG]  [BUGGY]          Double    m    =    getDomainUpperBound(p);    m  =  getDomainUpperBound(p);  Double  m  =  getDomainUpperBound(p);  p  =  getDomainUpperBound(p);  [CE]  variable  m  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          Double    m    =    getDomainUpperBound(p);    m  =  getDomainUpperBound(p);  Double  m  =  getDomainUpperBound(p);  p  =  getDomainUpperBound(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                Double        m        =        getDomainUpperBound(p);        m    =    getDomainUpperBound(p);    Double  m  =  getDomainUpperBound(p);  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  m  is  already  defined  in  method  getDomainUpperBound(double)	155	None	add
823	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  *  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p  *  Double.MAX_VALUE;	  return    p    >=    Double.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	61	1	replace
824	[BUG]  [BUGGY]  return  p  *  Double.MAX_VALUE;  [FE]  IllegalArgumentException  [FE]                        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  *  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  *  Double.MAX_VALUE;	  return    p    >=    Double.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	61	1	replace
825	[BUG]  [BUGGY]  return  Double.MIN_VALUE  /  2.0;  IllegalArgumentException  x  =  getDomainUpperBound(p);  [CE]  incompatible  types  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE  /  2.0;  IllegalArgumentException  x  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MIN_VALUE    /    2.0;    IllegalArgumentException  x  =  getDomainUpperBound(p);	  	non-compiled	[CE]  incompatible  types	146	None	add
826	[BUG]  [BUGGY]  return  Double.MIN_VALUE  /  2.0;  IllegalArgumentException  x  =  getDomainUpperBounds(p);  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE  /  2.0;  IllegalArgumentException  x  =  getDomainUpperBounds(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MIN_VALUE    /    2.0;    IllegalArgumentException  x  =  getDomainUpperBounds(p);	  	non-compiled	[CE]  cannot  find  symbol	146	None	add
827	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MIN_VALUE  /  2  +  3;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Float.MIN_VALUE  /  2  +  3;	  return    Float.MIN_VALUE    /    2;    	compilable	  [FE]  IllegalArgumentException  	149	2	replace
828	[BUG]  [BUGGY]  return  Float.MIN_VALUE  /  2  +  3;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MIN_VALUE  /  2  +  3;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Float.MIN_VALUE  /  2  +  3;	  return    Float.MIN_VALUE    /    2;    	compilable	  [FE]  IllegalArgumentException  	149	2	replace
829	[BUG]  [BUGGY]  return  Float.MIN_VALUE  /  2.0;  IllegalArgumentException  e  =  getNullValue();  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MIN_VALUE  /  2.0;  IllegalArgumentException  e  =  getNullValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MIN_VALUE    /    2.0;    IllegalArgumentException  e  =  getNullValue();	  	non-compiled	[CE]  cannot  find  symbol	89	None	add
830	[BUG]  [BUGGY]  if(p  >  0)  {  if(p  <  0)  {  return  getDomainUpperBound(p);  }  [CE]  illegal  start  of  expression  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  >  0)  {  if(p  <  0)  {  return  getDomainUpperBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  >  0)  {  if(p  <  0)  {  return  getDomainUpperBound(p);  }	  return    getDomainUpperBound(p);    if(p    >    0)    {    if(p    <    0)    {    return    getDomainUpperBound(p);    }    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
831	[BUG]  [BUGGY]  if(p  >  0)  {  if(p  <  0)  {  return  getDomainLowerBound(p);  }  [CE]  illegal  start  of  expression  [FE]              StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  >  0)  {  if(p  <  0)  {  return  getDomainLowerBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  >  0)  {  if(p  <  0)  {  return  getDomainLowerBound(p);  }	  return    getDomainUpperBound(p);    if(p    >    0)    {    if(p    <    0)    {    return    getDomainUpperBound(p);    }    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
832	[BUG]  [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  [CE]  not  a  statement  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;	  return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MIN_VALUE;    	non-compiled	[CE]  not  a  statement	104	None	replace
833	[BUG]  [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  [CE]  not  a  statement  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;	  return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MIN_VALUE;    	non-compiled	[CE]  not  a  statement	104	None	replace
834	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  0.5,  0.0);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  0.5,  0.0);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  0.5,  0.0);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p,    0.0);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	200	None	replace
835	[BUG]  [BUGGY]          double    m    =    getDomainUpperBound(p);    m  =  getDomainUpperBound(p);  double  m  =  getDomainUpperBound(p);  p  =  getDomainUpperBound(p);  [CE]  variable  m  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    m    =    getDomainUpperBound(p);    m  =  getDomainUpperBound(p);  double  m  =  getDomainUpperBound(p);  p  =  getDomainUpperBound(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        m        =        getDomainUpperBound(p);        m    =    getDomainUpperBound(p);    double  m  =  getDomainUpperBound(p);  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  m  is  already  defined  in  method  getDomainUpperBound(double)	221	None	add
836	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    m    =    getDomainUpperBound(p);    m  =  getDomainUpperBound(p);  p  =  getDomainUpperBound(p);  p  =  getDomainUpperBound(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	                double        m        =        getDomainUpperBound(p);        m    =    getDomainUpperBound(p);    p  =  getDomainUpperBound(p);  p  =  getDomainUpperBound(p);	  	compilable	  [FE]  StackOverflowError  	221	3	add
837	[BUG]  [BUGGY]          double    m    =    getDomainUpperBound(p);    m  =  getDomainUpperBound(p);  p  =  getDomainUpperBound(p);  p  =  getDomainUpperBound(p);  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    m    =    getDomainUpperBound(p);    m  =  getDomainUpperBound(p);  p  =  getDomainUpperBound(p);  p  =  getDomainUpperBound(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        m        =        getDomainUpperBound(p);        m    =    getDomainUpperBound(p);    p  =  getDomainUpperBound(p);  p  =  getDomainUpperBound(p);	  	compilable	  [FE]  StackOverflowError  	221	3	add
838	[BUG]  [BUGGY]  return  getDomainUpperBound(p  +  1);  p  =  getDomainUpperBound(p  +  1);  [CE]  unreachable  statement  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDomainUpperBound(p  +  1);  p  =  getDomainUpperBound(p  +  1);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    getDomainUpperBound(p    +    1);    p  =  getDomainUpperBound(p  +  1);	  	non-compiled	[CE]  unreachable  statement	135	None	add
839	[BUG]  [BUGGY]  return  getDomainUpperBound(p  +  1);  double  p  =  getDomainUpperBound(p  +  2);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDomainUpperBound(p  +  1);  double  p  =  getDomainUpperBound(p  +  2);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    getDomainUpperBound(p    +    1);    double  p  =  getDomainUpperBound(p  +  2);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	135	None	add
840	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  0,  0);  [CE]  method  getNumeratorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  0,  0);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  0,  0);	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p,    m);    	non-compiled	[CE]  method  getNumeratorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	91	None	replace
841	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  numeratorDegrees);  [CE]  cannot  find  symbol  numeratorDegrees  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  numeratorDegrees);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  numeratorDegrees);	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p,    m);    	non-compiled	[CE]  cannot  find  symbol  numeratorDegrees	91	None	replace
842	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(p  <  =  0.0  ||  p  >  1.0)  {  return  denominatorDegreesOfFreedom  +  denominatorDegreesOfFreedom;  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(p  <  =  0.0  ||  p  >  1.0)  {  return  denominatorDegreesOfFreedom  +  denominatorDegreesOfFreedom;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(p  <  =  0.0  ||  p  >  1.0)  {  return  denominatorDegreesOfFreedom  +  denominatorDegreesOfFreedom;  }	  return    Double.MIN_VALUE;    if(p    <    =    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Double.MIN_VALUE;    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    	non-compiled	[CE]  illegal  start  of  expression	213	None	replace
843	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(p  <  =  0.0  ||  p  >  1.0)  {  return  denominatorDegreesOfFreedom  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(p  <  =  0.0  ||  p  >  1.0)  {  return  denominatorDegreesOfFreedom  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(p  <  =  0.0  ||  p  >  1.0)  {  return  denominatorDegreesOfFreedom	  return    Double.MIN_VALUE;    if(p    <    =    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Double.MIN_VALUE;    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    	non-compiled	[CE]  illegal  start  of  expression	213	None	replace
844	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  <  0.0)  {  return  denominatorDegreesOfFreedom  +  p;  }  [CE]  missing  return  statement  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  <  0.0)  {  return  denominatorDegreesOfFreedom  +  p;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  <  0.0)  {  return  denominatorDegreesOfFreedom  +  p;  }	  return    Double.MIN_VALUE;    if(p    <    =    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Double.MIN_VALUE;    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    	non-compiled	[CE]  missing  return  statement	213	None	replace
845	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p,  0,  denominatorDegreesOfFreedom);  [CE]  no  suitable  method  found  for  getDomainUpperBound(double,int,double)  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p,  0,  denominatorDegreesOfFreedom);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MAX_VALUE  /  getDomainUpperBound(p,  0,  denominatorDegreesOfFreedom);	  return    Double.MAX_VALUE    /    getDomainUpperBound(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  no  suitable  method  found  for  getDomainUpperBound(double,int,double)	201	None	replace
846	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p,  m);  [CE]  cannot  find  symbol  m  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p,  m);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MAX_VALUE  /  getDomainUpperBound(p,  m);	  return    Double.MAX_VALUE    /    getDomainUpperBound(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  m	201	None	replace
847	[BUG]  [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE);  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE);	  	non-compiled	[CE]  not  a  statement	26	None	add
848	[BUG]  [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE	  	non-compiled	[CE]  not  a  statement	26	None	add
849	[BUG]  [BUGGY]  if(p  ==  Double.MIN_VALUE)  {  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MA  [CE]  ';'  expected  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  ==  Double.MIN_VALUE)  {  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MA  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  ==  Double.MIN_VALUE)  {  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MA	  return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    if(p    <    Double.MAX_VALUE)    {    return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    }    else    {    return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    }    	non-compiled	[CE]  ';'  expected	230	None	replace
850	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  ==  Double.MIN_VALUE)  {  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	if(p  ==  Double.MIN_VALUE)  {  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }	  return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    if(p    <    Double.MAX_VALUE)    {    return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    }    else    {    return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    }    	compilable	  [FE]  IllegalArgumentException  	230	1	replace
851	[BUG]  [BUGGY]  if(p  ==  Double.MIN_VALUE)  {  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  ==  Double.MIN_VALUE)  {  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  ==  Double.MIN_VALUE)  {  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }	  return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    if(p    <    Double.MAX_VALUE)    {    return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    }    else    {    return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    }    	compilable	  [FE]  IllegalArgumentException  	230	1	replace
852	[BUG]  [BUGGY]  return  Float.MIN_VALUE;  double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MIN_VALUE;  double  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Float.MIN_VALUE;  double  p  =  getDomainUpperBound(p);	  return    Float.MIN_VALUE;    float    p    =    getDomainUpperBound(p);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	170	None	replace
853	[BUG]  [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE);  [CE]  not  a  statement  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE);	  return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE);    	non-compiled	[CE]  not  a  statement	102	None	replace
854	[BUG]  [BUGGY]  return  p  >=  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  >>  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >=  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  >>  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >=    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    p  >>  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;	  	non-compiled	[CE]  not  a  statement	24	None	add
855	[BUG]  [BUGGY]  Double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  NumeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  cannot  find  symbol  NumeratorDegreesOfFreedom  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  NumeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  NumeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    NumeratorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol  NumeratorDegreesOfFreedom	176	None	replace
856	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(p  <  =  0.0  ||  p  >  1.0)  {  return  denominatorDegreesOfFreedom  +  super.getDomainUpperBound  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(p  <  =  0.0  ||  p  >  1.0)  {  return  denominatorDegreesOfFreedom  +  super.getDomainUpperBound  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(p  <  =  0.0  ||  p  >  1.0)  {  return  denominatorDegreesOfFreedom  +  super.getDomainUpperBound	  return    Double.MIN_VALUE;    if(p    <    =    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Double.MIN_VALUE;    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    +    super.getDomainUpperBound    	non-compiled	[CE]  illegal  start  of  expression	215	None	replace
857	[BUG]  [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  super.  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  super.  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  super.	  return    Double.MIN_VALUE;    if(p    <    =    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Double.MIN_VALUE;    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    +    super.getDomainUpperBound    	non-compiled	[CE]  <identifier>  expected	215	None	replace
858	[BUG]  [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  super.get  [CE]  ';'  expected  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  super.get  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  super.get	  return    Double.MIN_VALUE;    if(p    <    =    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Double.MIN_VALUE;    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    +    super.getDomainUpperBound    	non-compiled	[CE]  ';'  expected	215	None	replace
859	[BUG]  [BUGGY]  return  Double.MIN_VALUE  /  getDomainUpperBound(p);  double  p  =  getDomainUpperBounds(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE  /  getDomainUpperBound(p);  double  p  =  getDomainUpperBounds(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MIN_VALUE    /    getDomainUpperBound(p);    double  p  =  getDomainUpperBounds(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	35	None	add
860	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  numeratorDegreesOfFreedom,  m);  [CE]  cannot  find  symbol  m  [FE]                      IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  numeratorDegreesOfFreedom,  m);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  numeratorDegreesOfFreedom,  m);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p,    numeratorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  m	64	None	replace
861	[BUG]  [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE  [CE]  >  expected  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  ==  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE	  return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE    	non-compiled	[CE]  >  expected	199	None	replace
862	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  0,  denominatorDegreesOfFreedom);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  0,  denominatorDegreesOfFreedom);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  0,  denominatorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	231	None	replace
863	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDomainUpperBound(p  *  1);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  getDomainUpperBound(p  *  1);	  return    getDomainUpperBound(p    -    1);    	compilable	  [FE]  StackOverflowError  	138	3	replace
864	[BUG]  [BUGGY]  return  getDomainUpperBound(p  *  1);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDomainUpperBound(p  *  1);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  getDomainUpperBound(p  *  1);	  return    getDomainUpperBound(p    -    1);    	compilable	  [FE]  StackOverflowError  	138	3	replace
865	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  d);  [CE]  cannot  find  symbol  d  [FE]                        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  d);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  d);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p,    n);    	non-compiled	[CE]  cannot  find  symbol  d	65	None	replace
866	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDenominatorDegreesOfFreedom();  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDenominatorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDenominatorDegreesOfFreedom();	  double    denominatorDegreesOfFreedom    =    getNumberDenominatorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
867	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom()  -  1;  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom()  -  1;  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom()  -  1;	  double    denominatorDegreesOfFreedom    =    getNumberDenominatorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
868	[BUG]  [BUGGY]  if(p  <  =  0.0  ||  p  >  1.0)  {  return  Float.MAX_VALUE;  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  =  0.0  ||  p  >  1.0)  {  return  Float.MAX_VALUE;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  =  0.0  ||  p  >  1.0)  {  return  Float.MAX_VALUE;  }	  return    Float.MAX_VALUE;    if(p    <    =    0.0)    {    return    Float.MAX_VALUE;    }    	non-compiled	[CE]  illegal  start  of  expression	220	None	replace
869	[BUG]  [BUGGY]  if(p  <  0.0)  {  return  Float.MAX_VALUE;  }  [CE]  missing  return  statement  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0.0)  {  return  Float.MAX_VALUE;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  0.0)  {  return  Float.MAX_VALUE;  }	  return    Float.MAX_VALUE;    if(p    <    =    0.0)    {    return    Float.MAX_VALUE;    }    	non-compiled	[CE]  missing  return  statement	220	None	replace
870	[BUG]  [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  return  float.MAX_VALUE;  }  [CE]  class  expected  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  return  float.MAX_VALUE;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  0.0  ||  p  >  1.0)  {  return  float.MAX_VALUE;  }	  return    Float.MAX_VALUE;    if(p    <    0.0    ||    p    >    1.0)    {    return    Float.MAX_VALUE;    }    	non-compiled	[CE]  class  expected	219	None	replace
871	[BUG]  [BUGGY]  double  m  =  getDomainLowerBound(p);  m  =  getDomainUpperBound(p);  [CE]  missing  return  statement  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  m  =  getDomainLowerBound(p);  m  =  getDomainUpperBound(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  m  =  getDomainLowerBound(p);  m  =  getDomainUpperBound(p);	          double    m    =    getDomainUpperBound(p);    m    =    getDomainUpperBound(p);    	non-compiled	[CE]  missing  return  statement	222	None	replace
872	[BUG]  [BUGGY]  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  p);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  p);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(m,    p);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	63	None	replace
873	[BUG]  [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  if(p  >  Double.MIN_VALUE)  {  return  p  >  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  if(p  >  Double.MIN_VALUE)  {  return  p  >  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    if(p  >  Double.MIN_VALUE)  {  return  p  >  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }	  	non-compiled	[CE]  unreachable  statement	26	None	add
874	[BUG]  [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  if(p  >  Double.MIN_VALUE)  {  if(p  <  =  Double.MAX_VALUE)  {  return  p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  if(p  >  Double.MIN_VALUE)  {  if(p  <  =  Double.MAX_VALUE)  {  return  p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    if(p  >  Double.MIN_VALUE)  {  if(p  <  =  Double.MAX_VALUE)  {  return  p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
875	[BUG]  [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  return  p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [CE]  not  a  statement  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  return  p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  return  p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;	  	non-compiled	[CE]  not  a  statement	26	None	add
876	[BUG]  [BUGGY]  if(p  <  Double.MIN_VALUE)  {  return  p  <  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  }  [CE]  missing  return  statement  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  Double.MIN_VALUE)  {  return  p  <  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  Double.MIN_VALUE)  {  return  p  <  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  }	  return    p    <    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    if(p    <    Double.MIN_VALUE)    {    return    p    <    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    }    	non-compiled	[CE]  missing  return  statement	232	None	replace
877	[BUG]  [BUGGY]  return  Double.MAX_VALUE  *  2.0;  double  m  =  getDomainMask();  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  *  2.0;  double  m  =  getDomainMask();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    *    2.0;    double  m  =  getDomainMask();	  	non-compiled	[CE]  cannot  find  symbol	20	None	add
878	[BUG]  [BUGGY]  return  Double.MAX_VALUE  +  2.0;  Double.MAX_VALUE  -  2.0;  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  +  2.0;  Double.MAX_VALUE  -  2.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    +    2.0;    Double.MAX_VALUE  -  2.0;	  	non-compiled	[CE]  not  a  statement	18	None	add
879	[BUG]  [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  return  Double.MIN_VALUE;  IllegalArgumentException  x  =  getDomainUpperBound(p);  }  [CE]  incompatible  types  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  return  Double.MIN_VALUE;  IllegalArgumentException  x  =  getDomainUpperBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  0.0  ||  p  >  1.0)  {  return  Double.MIN_VALUE;  IllegalArgumentException  x  =  getDomainUpperBound(p);  }	  return    Double.MIN_VALUE;    IllegalArgumentException    x    =    getDomainUpperBound(p);    	non-compiled	[CE]  incompatible  types	181	None	replace
880	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  if(p  <  Double.MIN_VALUE  ||  p  >  Double.MAX_VALUE)  {  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  if(p  <  Double.MIN_VALUE  ||  p  >  Double.MAX_VALUE)  {  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    if(p  <  Double.MIN_VALUE  ||  p  >  Double.MAX_VALUE)  {  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }	  	non-compiled	[CE]  unreachable  statement	15	None	add
881	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  if(p  <  Double.MIN_VALUE)  {  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }  [CE]  unreachable  statement  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  if(p  <  Double.MIN_VALUE)  {  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    if(p  <  Double.MIN_VALUE)  {  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }	  	non-compiled	[CE]  unreachable  statement	15	None	add
882	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  if(p  <  Double.MIN_VALUE)  {  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }  [CE]  unreachable  statement  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  if(p  <  Double.MIN_VALUE)  {  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    if(p  <  Double.MIN_VALUE)  {  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }	  	non-compiled	[CE]  unreachable  statement	15	None	add
883	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  if(p  <  Double.MIN_VALUE)  {  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  if(p  <  Double.MIN_VALUE)  {  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    if(p  <  Double.MIN_VALUE)  {  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE	  	non-compiled	[CE]  ';'  expected	15	None	add
884	[BUG]  [BUGGY]  return  p  >  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE);  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  p  >  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    p  >  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE);	  	non-compiled	[CE]  not  a  statement	224	None	add
885	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  _denominatorDegreesOfFreedom);  [CE]  cannot  find  symbol  _denominatorDegreesOfFreedom  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  _denominatorDegreesOfFreedom);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  _denominatorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getDestinatorDegreesOfFreedom(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  _denominatorDegreesOfFreedom	198	None	replace
886	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  if(p  <  Double.MIN_VALUE  ||  p  >  Double.POSITIVE_INFINITY)  {  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  }  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  if(p  <  Double.MIN_VALUE  ||  p  >  Double.POSITIVE_INFINITY)  {  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.MIN_VALUE;    if(p  <  Double.MIN_VALUE  ||  p  >  Double.POSITIVE_INFINITY)  {  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  }	  	non-compiled	[CE]  unreachable  statement	45	None	add
887	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  if(p  <  Double.MIN_VALUE)  {  return  p  <  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  }  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  if(p  <  Double.MIN_VALUE)  {  return  p  <  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.MIN_VALUE;    if(p  <  Double.MIN_VALUE)  {  return  p  <  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  }	  	non-compiled	[CE]  ';'  expected	45	None	add
888	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  if(p  <  Double.MIN_VALUE)  {  return  p  <  Double.POSITIVE_INFINITY?  Double.MIN_VALUE  :  Double.MIN_VALUE;  }  [CE]  unreachable  statement  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  if(p  <  Double.MIN_VALUE)  {  return  p  <  Double.POSITIVE_INFINITY?  Double.MIN_VALUE  :  Double.MIN_VALUE;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.MIN_VALUE;    if(p  <  Double.MIN_VALUE)  {  return  p  <  Double.POSITIVE_INFINITY?  Double.MIN_VALUE  :  Double.MIN_VALUE;  }	  	non-compiled	[CE]  unreachable  statement	45	None	add
889	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  if(p  <  Double.MIN_VALUE)  {  return  p  <  Double.POSITIVE_INFINITY?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  }  [CE]  unreachable  statement  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  if(p  <  Double.MIN_VALUE)  {  return  p  <  Double.POSITIVE_INFINITY?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.MIN_VALUE;    if(p  <  Double.MIN_VALUE)  {  return  p  <  Double.POSITIVE_INFINITY?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  }	  	non-compiled	[CE]  unreachable  statement	45	None	add
890	[BUG]  [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  Double  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE);  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  Double  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    Double  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE);	  	non-compiled	[CE]  ';'  expected	157	None	add
891	[BUG]  [BUGGY]  if(p  <  =  0.0)  {  return  Float.MAX_VALUE;  }  else  {  return  Float.MAX_VALUE;  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  =  0.0)  {  return  Float.MAX_VALUE;  }  else  {  return  Float.MAX_VALUE;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  =  0.0)  {  return  Float.MAX_VALUE;  }  else  {  return  Float.MAX_VALUE;  }	  return    Float.MAX_VALUE;    Float.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
892	[BUG]  [BUGGY]  if(p  >  0.0)  {  return  Float.MAX_VALUE;  }  [CE]  missing  return  statement  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  >  0.0)  {  return  Float.MAX_VALUE;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  >  0.0)  {  return  Float.MAX_VALUE;  }	  return    Float.MAX_VALUE;    Float.MAX_VALUE;    	non-compiled	[CE]  missing  return  statement	74	None	replace
893	[BUG]  [BUGGY]  Double  m  =  getDomainLowerBound(p)+  1;  [CE]  missing  return  statement  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  m  =  getDomainLowerBound(p)+  1;  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  m  =  getDomainLowerBound(p)+  1;	  Double    m    =    getDomainUpperBound(p)+    1;    	non-compiled	[CE]  missing  return  statement	10	None	replace
894	[BUG]  [BUGGY]  p  =  getDomainUpperBounds(p);  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  p  =  getDomainUpperBounds(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	p  =  getDomainUpperBounds(p);	  return    Double.MAX_VALUE    /    2.0;    double    p    =    getDomainUpperBounds(p);    	non-compiled	[CE]  cannot  find  symbol	223	None	replace
895	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  getUpperBound(p);  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  /  getUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MAX_VALUE  /  getUpperBound(p);	  return    Double.MAX_VALUE    /    getDomainLowerBound(p);    	non-compiled	[CE]  cannot  find  symbol	185	None	replace
896	[BUG]  [BUGGY]  double  x  =  getDomainUpperBounds(p);  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  x  =  getDomainUpperBounds(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  x  =  getDomainUpperBounds(p);	  return    Double.MIN_VALUE;    IllegalArgumentException    x    =    getDomainUpperBounds(p);    	non-compiled	[CE]  cannot  find  symbol	183	None	replace
897	[BUG]  [BUGGY]  return  Float.MAX_VALUE  /(float)p;  Double  p  =(Double.MAX_VALUE  /(float)p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MAX_VALUE  /(float)p;  Double  p  =(Double.MAX_VALUE  /(float)p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MAX_VALUE    /(float)p;    Double  p  =(Double.MAX_VALUE  /(float)p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	179	None	add
898	[BUG]  [BUGGY]  return  Float.MAX_VALUE  /(float)p;  Double  p  =(Double.MAX_VALUE  /(double)p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MAX_VALUE  /(float)p;  Double  p  =(Double.MAX_VALUE  /(double)p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MAX_VALUE    /(float)p;    Double  p  =(Double.MAX_VALUE  /(double)p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	179	None	add
899	[BUG]  [BUGGY]  return  Float.MAX_VALUE  /(float)p;  float  p  =(float)getMask();  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MAX_VALUE  /(float)p;  float  p  =(float)getMask();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MAX_VALUE    /(float)p;    float  p  =(float)getMask();	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	179	None	add
900	[BUG]  [BUGGY]  return  Float.MAX_VALUE  /(float)p;  float  p  =(float)m.getValue();  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]          IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MAX_VALUE  /(float)p;  float  p  =(float)m.getValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MAX_VALUE    /(float)p;    float  p  =(float)m.getValue();	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	179	None	add
901	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0.0)  {  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	if(p  <  0.0)  {  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }	  return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    if(p    <    Double.MIN_VALUE)    {    return    p    <    Double.MAX_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    }    else    {    return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    }    	compilable	  [FE]  IllegalArgumentException  	204	1	replace
902	[BUG]  [BUGGY]  if(p  <  0.0)  {  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0.0)  {  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  0.0)  {  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }	  return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    if(p    <    Double.MIN_VALUE)    {    return    p    <    Double.MAX_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    }    else    {    return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    }    	compilable	  [FE]  IllegalArgumentException  	204	1	replace
903	[BUG]  [BUGGY]  if(p  <  Double.MIN_VALUE)  {  return  p  <  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  [CE]  incompatible  types  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  Double.MIN_VALUE)  {  return  p  <  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  Double.MIN_VALUE)  {  return  p  <  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }	  return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    if(p    <    Double.MIN_VALUE)    {    return    p    <    Double.MAX_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    }    else    {    return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    }    	non-compiled	[CE]  incompatible  types	204	None	replace
904	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  Double.MIN_VALUE)  {  return  p  <  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	if(p  <  Double.MIN_VALUE)  {  return  p  <  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }	  return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    if(p    <    Double.MIN_VALUE)    {    return    p    <    Double.MAX_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    }    else    {    return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    }    	compilable	  [FE]  IllegalArgumentException  	204	1	replace
905	[BUG]  [BUGGY]  if(p  <  Double.MIN_VALUE)  {  return  p  <  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  Double.MIN_VALUE)  {  return  p  <  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  Double.MIN_VALUE)  {  return  p  <  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }	  return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    if(p    <    Double.MIN_VALUE)    {    return    p    <    Double.MAX_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    }    else    {    return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    }    	compilable	  [FE]  IllegalArgumentException  	204	1	replace
906	[BUG]  [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +	  return    Double.MIN_VALUE;    if(p    <    =    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Double.MIN_VALUE;    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    +    denominatorDegre    	non-compiled	[CE]  illegal  start  of  expression	212	None	replace
907	[BUG]  [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegre  [CE]  ';'  expected  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegre  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegre	  return    Double.MIN_VALUE;    if(p    <    =    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Double.MIN_VALUE;    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    +    denominatorDegre    	non-compiled	[CE]  ';'  expected	212	None	replace
908	[BUG]  [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  ==  null)  {  return  denominatorDegreesOfFreedom  +  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  ==  null)  {  return  denominatorDegreesOfFreedom  +  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  ==  null)  {  return  denominatorDegreesOfFreedom  +	  return    Double.MIN_VALUE;    if(p    <    =    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Double.MIN_VALUE;    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    +    denominatorDegre    	non-compiled	[CE]  illegal  start  of  expression	212	None	replace
909	[BUG]  [BUGGY]  return  Float.MAX_VALUE  -  1;  Double  p  =  getDomainLowerBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MAX_VALUE  -  1;  Double  p  =  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MAX_VALUE    -    1;    Double  p  =  getDomainLowerBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	43	None	add
910	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  0,  p);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  0,  p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  0,  p);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p,    m);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	62	None	replace
911	[BUG]  [BUGGY]  Double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  p);  [CE]  method  getNumeratorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  p);	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(m,    p);    	non-compiled	[CE]  method  getNumeratorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	92	None	replace
912	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    p  =  getDenominatorDegreesOfFreedom();  double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  p  =  getDenominatorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	                double        denominatorDegreesOfFreedom        =        getDenominatorDegreesOfFreedom();        p    =    getDenominatorDegreesOfFreedom();    double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  p  =  getDenominatorDegreesOfFreedom();	  	compilable	  [FE]  IllegalArgumentException  	196	1	add
913	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    p  =  getDenominatorDegreesOfFreedom();  double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  p  =  getDenominatorDegreesOfFreedom();  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    p  =  getDenominatorDegreesOfFreedom();  double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  p  =  getDenominatorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        denominatorDegreesOfFreedom        =        getDenominatorDegreesOfFreedom();        p    =    getDenominatorDegreesOfFreedom();    double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  p  =  getDenominatorDegreesOfFreedom();	  	compilable	  [FE]  IllegalArgumentException  	196	1	add
914	[BUG]  [BUGGY]  if(Double.isNaN(p)||  Double.isNaN(p)||  Double.isNaN(p))  {  return  Double.MIN_VALUE;  }  [CE]  missing  return  statement  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(Double.isNaN(p)||  Double.isNaN(p)||  Double.isNaN(p))  {  return  Double.MIN_VALUE;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(Double.isNaN(p)||  Double.isNaN(p)||  Double.isNaN(p))  {  return  Double.MIN_VALUE;  }	  return    Double.MIN_VALUE;    Double.MIN_VALUE;    	non-compiled	[CE]  missing  return  statement	107	None	replace
915	[BUG]  [BUGGY]  if(Double.isNaN(p)||  Double.isNaN(p))  {  return  Double.MIN_VALUE;  }  [CE]  missing  return  statement  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(Double.isNaN(p)||  Double.isNaN(p))  {  return  Double.MIN_VALUE;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(Double.isNaN(p)||  Double.isNaN(p))  {  return  Double.MIN_VALUE;  }	  return    Double.MIN_VALUE;    Double.MIN_VALUE;    	non-compiled	[CE]  missing  return  statement	107	None	replace
916	[BUG]  [BUGGY]  if(Double.isNaN(p)||  Double.isNaN(p)||  Double.isNaN(p)||  Double.isNaN(p))  {  return  Double.MIN_VALUE;  }  [CE]  missing  return  statement  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(Double.isNaN(p)||  Double.isNaN(p)||  Double.isNaN(p)||  Double.isNaN(p))  {  return  Double.MIN_VALUE;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(Double.isNaN(p)||  Double.isNaN(p)||  Double.isNaN(p)||  Double.isNaN(p))  {  return  Double.MIN_VALUE;  }	  return    Double.MIN_VALUE;    Double.MIN_VALUE;    	non-compiled	[CE]  missing  return  statement	107	None	replace
917	[BUG]  [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  [CE]  ';'  expected  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom	  return    Double.MIN_VALUE;    if(p    <    =    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Double.MIN_VALUE;    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    	non-compiled	[CE]  ';'  expected	213	None	replace
918	[BUG]  [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  ==  null)  {  return  denominatorDegreesOfFreedom  [CE]  ';'  expected  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  ==  null)  {  return  denominatorDegreesOfFreedom  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  ==  null)  {  return  denominatorDegreesOfFreedom	  return    Double.MIN_VALUE;    if(p    <    =    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Double.MIN_VALUE;    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    	non-compiled	[CE]  ';'  expected	213	None	replace
919	[BUG]  [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  >=  null)  {  return  denominatorDegreesOfFreedom  [CE]  ';'  expected  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  >=  null)  {  return  denominatorDegreesOfFreedom  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  >=  null)  {  return  denominatorDegreesOfFreedom	  return    Double.MIN_VALUE;    if(p    <    =    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Double.MIN_VALUE;    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    	non-compiled	[CE]  ';'  expected	213	None	replace
920	[BUG]  [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  desominatorDegreesOfFreedom  [CE]  ';'  expected  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  desominatorDegreesOfFreedom  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  desominatorDegreesOfFreedom	  return    Double.MIN_VALUE;    if(p    <    =    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Double.MIN_VALUE;    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    	non-compiled	[CE]  ';'  expected	213	None	replace
921	[BUG]  [BUGGY]  if(p  <  Double.MIN_VALUE  ||  p  >  Double.MAX_VALUE)  {  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  [CE]  missing  return  statement  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  Double.MIN_VALUE  ||  p  >  Double.MAX_VALUE)  {  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  Double.MIN_VALUE  ||  p  >  Double.MAX_VALUE)  {  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }	  return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    if(p    <    Double.MIN_VALUE    ||    p    >    Double.MAX_VALUE)    {    return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    }    	non-compiled	[CE]  missing  return  statement	202	None	replace
922	[BUG]  [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  if(p  ==  Double.MAX_VALUE)  {  return  p  ==  Double.POSITIVE_INFINITY?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  if(p  ==  Double.MAX_VALUE)  {  return  p  ==  Double.POSITIVE_INFINITY?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    ==    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    if(p  ==  Double.MAX_VALUE)  {  return  p  ==  Double.POSITIVE_INFINITY?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }	  	non-compiled	[CE]  unreachable  statement	11	None	add
923	[BUG]  [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  ==  Double.POSITIVE_INFINITY?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  ==  Double.POSITIVE_INFINITY?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    ==    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    p  ==  Double.POSITIVE_INFINITY?  Double.MAX_VALUE  :  Double.MAX_VALUE;	  	non-compiled	[CE]  not  a  statement	11	None	add
924	[BUG]  [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  ==  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [CE]  not  a  statement  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  ==  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    ==    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    p  ==  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;	  	non-compiled	[CE]  not  a  statement	11	None	add
925	[BUG]  [BUGGY]  return  Float.MAX_VALUE  /  2.0;  if(p  <  Float.MAX_VALUE  ||  p  >  Float.MAX_VALUE)  {  return  Float.MAX_VALUE  /  2.0;  }  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MAX_VALUE  /  2.0;  if(p  <  Float.MAX_VALUE  ||  p  >  Float.MAX_VALUE)  {  return  Float.MAX_VALUE  /  2.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MAX_VALUE    /    2.0;    if(p  <  Float.MAX_VALUE  ||  p  >  Float.MAX_VALUE)  {  return  Float.MAX_VALUE  /  2.0;  }	  	non-compiled	[CE]  unreachable  statement	41	None	add
926	[BUG]  [BUGGY]  return  Float.MAX_VALUE  /  2.0;  if(p  <  Float.MAX_VALUE)  {  if(p  >  Float.MAX_VALUE)  {  return  Float.MAX_VALUE  /  2.0;  }  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MAX_VALUE  /  2.0;  if(p  <  Float.MAX_VALUE)  {  if(p  >  Float.MAX_VALUE)  {  return  Float.MAX_VALUE  /  2.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MAX_VALUE    /    2.0;    if(p  <  Float.MAX_VALUE)  {  if(p  >  Float.MAX_VALUE)  {  return  Float.MAX_VALUE  /  2.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
927	[BUG]  [BUGGY]  return  Float.MAX_VALUE  /  2.0;  if(p  <  Float.MAX_VALUE)  {  return  Float.MAX_VALUE  /  2.0;  }  else  {  return  Float.MAX_VALUE  /  2.0;  }  [CE]  unreachable  statement  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MAX_VALUE  /  2.0;  if(p  <  Float.MAX_VALUE)  {  return  Float.MAX_VALUE  /  2.0;  }  else  {  return  Float.MAX_VALUE  /  2.0;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MAX_VALUE    /    2.0;    if(p  <  Float.MAX_VALUE)  {  return  Float.MAX_VALUE  /  2.0;  }  else  {  return  Float.MAX_VALUE  /  2.0;  }	  	non-compiled	[CE]  unreachable  statement	41	None	add
928	[BUG]  [BUGGY]  if(p  <  Double.MAX_VALUE)  {  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MA  [CE]  ';'  expected  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  Double.MAX_VALUE)  {  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MA  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  Double.MAX_VALUE)  {  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MA	  return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    if(p    <    Double.MAX_VALUE)    {    return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    }    else    {    return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    }    	non-compiled	[CE]  ';'  expected	230	None	replace
929	[BUG]  [BUGGY]  if(p  <  Double.MAX_VALUE)  {  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }  [CE]  missing  return  statement  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  Double.MAX_VALUE)  {  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  Double.MAX_VALUE)  {  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }	  return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    if(p    <    Double.MAX_VALUE)    {    return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    }    else    {    return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    }    	non-compiled	[CE]  missing  return  statement	230	None	replace
930	[BUG]  [BUGGY]  if(p  <  Double.MAX_VALUE)  {  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MAX_VALUE  [CE]  ';'  expected  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  Double.MAX_VALUE)  {  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MAX_VALUE  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  Double.MAX_VALUE)  {  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MAX_VALUE	  return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    if(p    <    Double.MAX_VALUE)    {    return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    }    else    {    return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    }    	non-compiled	[CE]  ';'  expected	230	None	replace
931	[BUG]  [BUGGY]  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  missing  return  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double    deseratorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  missing  return  statement	208	None	replace
932	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p)+  1;  double  p  =  Double.MAX_VALUE  /  getDomainUpperBound(p)+  2;  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p)+  1;  double  p  =  Double.MAX_VALUE  /  getDomainUpperBound(p)+  2;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    /    getDomainUpperBound(p)+    1;    double  p  =  Double.MAX_VALUE  /  getDomainUpperBound(p)+  2;	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	39	None	add
933	[BUG]  [BUGGY]  return  p!=  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p!=  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p!=  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p!=  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p!=    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    p!=  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;	  	non-compiled	[CE]  not  a  statement	150	None	add
934	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  if(p  <  Double.MIN_VALUE  ||  p  >  Double.NEGATIVE_INFINITY)  {  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  }  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  if(p  <  Double.MIN_VALUE  ||  p  >  Double.NEGATIVE_INFINITY)  {  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.NEGATIVE_INFINITY;    if(p  <  Double.MIN_VALUE  ||  p  >  Double.NEGATIVE_INFINITY)  {  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  }	  	non-compiled	[CE]  unreachable  statement	47	None	add
935	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  if(p  <  Double.MIN_VALUE  ||  p  >  Double.NEGATIVE_INFINITY)  {  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  }  else  {  return  p  <  Double.  [CE]  <identifier>  expected  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  if(p  <  Double.MIN_VALUE  ||  p  >  Double.NEGATIVE_INFINITY)  {  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  }  else  {  return  p  <  Double.  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.NEGATIVE_INFINITY;    if(p  <  Double.MIN_VALUE  ||  p  >  Double.NEGATIVE_INFINITY)  {  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  }  else  {  return  p  <  Double.	  	non-compiled	[CE]  <identifier>  expected	47	None	add
936	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  if(p  <  Double.MIN_VALUE  ||  p  >  Double.NEGATIVE_INFINITY)  {  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominator  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  if(p  <  Double.MIN_VALUE  ||  p  >  Double.NEGATIVE_INFINITY)  {  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominator  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.NEGATIVE_INFINITY;    if(p  <  Double.MIN_VALUE  ||  p  >  Double.NEGATIVE_INFINITY)  {  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominator	  	non-compiled	[CE]  ';'  expected	47	None	add
937	[BUG]  [BUGGY]  if(p  <  0.0)  {  return  Float.MIN_VALUE;  Double  p  =  getDomainUpperBound();  }  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0.0)  {  return  Float.MIN_VALUE;  Double  p  =  getDomainUpperBound();  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  0.0)  {  return  Float.MIN_VALUE;  Double  p  =  getDomainUpperBound();  }	  return    Float.MIN_VALUE;    Double    p    =    getDomainUpperBound();    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	132	None	replace
938	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  getDomainLowerBound(p);  double  m  =  getDomainUpperBound(p);  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  /  getDomainLowerBound(p);  double  m  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    /    getDomainLowerBound(p);    double  m  =  getDomainUpperBound(p);	  	non-compiled	[CE]  unreachable  statement	184	None	add
939	[BUG]  [BUGGY]  return  getDomainUpperBound(p  +  1);  return  getDomainUpperBound(p  +  1);  [CE]  unreachable  statement  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDomainUpperBound(p  +  1);  return  getDomainUpperBound(p  +  1);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    getDomainUpperBound(p    +    1);    return  getDomainUpperBound(p  +  1);	  	non-compiled	[CE]  unreachable  statement	135	None	add
940	[BUG]  [BUGGY]  if(p  >  0.0)  {  return  Float.MAX_VALUE;  double  m  =  getDomainUpperBound(p);  }  [CE]  unreachable  statement  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  >  0.0)  {  return  Float.MAX_VALUE;  double  m  =  getDomainUpperBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  >  0.0)  {  return  Float.MAX_VALUE;  double  m  =  getDomainUpperBound(p);  }	  return    Float.MAX_VALUE;    Double    m    =    getDomainUpperBound(p);    	non-compiled	[CE]  unreachable  statement	76	None	replace
941	[BUG]  [BUGGY]  if(p  >  0.0)  {  return  Float.MAX_VALUE;  Double  m  =  getDomainUpperBound(p);  }  [CE]  unreachable  statement  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  >  0.0)  {  return  Float.MAX_VALUE;  Double  m  =  getDomainUpperBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  >  0.0)  {  return  Float.MAX_VALUE;  Double  m  =  getDomainUpperBound(p);  }	  return    Float.MAX_VALUE;    Double    m    =    getDomainUpperBound(p);    	non-compiled	[CE]  unreachable  statement	76	None	replace
942	[BUG]  [BUGGY]  if(p  >  0.0)  {  return  Float.MAX_VALUE;  Double  m  =  getDomainUpperBound(p);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  >  0.0)  {  return  Float.MAX_VALUE;  Double  m  =  getDomainUpperBound(p);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  >  0.0)  {  return  Float.MAX_VALUE;  Double  m  =  getDomainUpperBound(p);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    Float.MAX_VALUE;    Double    m    =    getDomainUpperBound(p);    	non-compiled	[CE]  unreachable  statement	76	None	replace
943	[BUG]  [BUGGY]  return  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  [CE]  incompatible  types  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;	  return    p    <    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    p    <    Double.MIN_VALUE    :    Double.MAX_VALUE;    	non-compiled	[CE]  incompatible  types	68	None	replace
944	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY;  if(p  <  =  0.0)  {  return  Double.POSITIVE_INFINITY;  }  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.POSITIVE_INFINITY;  if(p  <  =  0.0)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.POSITIVE_INFINITY;    if(p  <  =  0.0)  {  return  Double.POSITIVE_INFINITY;  }	  	non-compiled	[CE]  illegal  start  of  expression	236	None	add
945	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY;  if(p  ==  0.0)  {  return  Double.POSITIVE_INFINITY;  }  [CE]  unreachable  statement  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.POSITIVE_INFINITY;  if(p  ==  0.0)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.POSITIVE_INFINITY;    if(p  ==  0.0)  {  return  Double.POSITIVE_INFINITY;  }	  	non-compiled	[CE]  unreachable  statement	236	None	add
946	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY;  if(p  <  =  0)  {  return  Double.POSITIVE_INFINITY;  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.POSITIVE_INFINITY;  if(p  <  =  0)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.POSITIVE_INFINITY;    if(p  <  =  0)  {  return  Double.POSITIVE_INFINITY;  }	  	non-compiled	[CE]  illegal  start  of  expression	236	None	add
947	[BUG]  [BUGGY]  if(p  <  Double.MIN_VALUE  ||  p  >  Double.MAX_VALUE)  {  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MAX_VALUE  [CE]  ';'  expected  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  Double.MIN_VALUE  ||  p  >  Double.MAX_VALUE)  {  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MAX_VALUE  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  Double.MIN_VALUE  ||  p  >  Double.MAX_VALUE)  {  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MAX_VALUE	  return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    if(p    <    Double.MIN_VALUE    ||    p    >    Double.MAX_VALUE)    {    return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    }    else    {    return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    }    	non-compiled	[CE]  ';'  expected	205	None	replace
948	[BUG]  [BUGGY]  if(p  <  Double.MIN_VALUE  ||  p  >  Double.MAX_VALUE)  {  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MAX_VALUE;  }  [CE]  incompatible  types  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  Double.MIN_VALUE  ||  p  >  Double.MAX_VALUE)  {  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MAX_VALUE;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  Double.MIN_VALUE  ||  p  >  Double.MAX_VALUE)  {  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MAX_VALUE;  }	  return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    if(p    <    Double.MIN_VALUE    ||    p    >    Double.MAX_VALUE)    {    return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    }    else    {    return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    }    	non-compiled	[CE]  incompatible  types	205	None	replace
949	[BUG]  [BUGGY]  if(p  <  Double.MIN_VALUE  ||  p  >  Double.MAX_VALUE)  {  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MAX_VALUE  :  Double.MA  [CE]  ';'  expected  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  Double.MIN_VALUE  ||  p  >  Double.MAX_VALUE)  {  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MAX_VALUE  :  Double.MA  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  Double.MIN_VALUE  ||  p  >  Double.MAX_VALUE)  {  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MAX_VALUE  :  Double.MA	  return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    if(p    <    Double.MIN_VALUE    ||    p    >    Double.MAX_VALUE)    {    return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    }    else    {    return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    }    	non-compiled	[CE]  ';'  expected	205	None	replace
950	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.NEGATIVE_INFINITY;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Double.NEGATIVE_INFINITY;	  return    Double.NaN;    	compilable	  [FE]  IllegalArgumentException  	239	3	replace
951	[BUG]  [BUGGY]  return  Double.NEGATIVE_INFINITY;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.NEGATIVE_INFINITY;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.NEGATIVE_INFINITY;	  return    Double.NaN;    	compilable	  [FE]  IllegalArgumentException  	239	3	replace
952	[BUG]  [BUGGY]  if(p  >  Double.MIN_VALUE)  {  return  Double.MIN_VALUE;  double  m  =  getDomainUpperBound();  }  [CE]  no  suitable  method  found  for  getDomainUpperBound()  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  >  Double.MIN_VALUE)  {  return  Double.MIN_VALUE;  double  m  =  getDomainUpperBound();  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  >  Double.MIN_VALUE)  {  return  Double.MIN_VALUE;  double  m  =  getDomainUpperBound();  }	  return    Double.MIN_VALUE;    double    m    =    getDomainUpperBound();    	non-compiled	[CE]  no  suitable  method  found  for  getDomainUpperBound()	110	None	replace
953	[BUG]  [BUGGY]  if(p  >  Double.MIN_VALUE)  {  return  Double.MIN_VALUE;  double  m  =  getDomainUpperBound();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  no  suitable  method  found  for  getDomainUpperBound()  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  >  Double.MIN_VALUE)  {  return  Double.MIN_VALUE;  double  m  =  getDomainUpperBound();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  >  Double.MIN_VALUE)  {  return  Double.MIN_VALUE;  double  m  =  getDomainUpperBound();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    Double.MIN_VALUE;    double    m    =    getDomainUpperBound();    	non-compiled	[CE]  no  suitable  method  found  for  getDomainUpperBound()	110	None	replace
954	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p  ==  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN;	  return    p    ==    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	12	3	replace
955	[BUG]  [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  ==  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN;	  return    p    ==    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	12	3	replace
956	[BUG]  [BUGGY]  double  p  =  Double.MAX_VALUE;  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  p  =  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  p  =  Double.MAX_VALUE;	  return    Double.MAX_VALUE    /    2.0;    double    p    =    Double.MAX_VALUE    /    2.0;    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	115	None	replace
957	[BUG]  [BUGGY]  Double  m  =  getDomainOpt(p);  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  m  =  getDomainOpt(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  m  =  getDomainOpt(p);	          Double    m    =    getDomainUpperBound(p);    Double    d    =    getDomainUpperBound(p);    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
958	[BUG]  [BUGGY]  Double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom().doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom().doubleValue();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom().doubleValue();	          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom().doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	33	None	replace
959	[BUG]  [BUGGY]  if(p  >  0.0)  {  if(p  <  0.0)  {  return  getDomainUpperBound(p);  }  [CE]  illegal  start  of  expression  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  >  0.0)  {  if(p  <  0.0)  {  return  getDomainUpperBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  >  0.0)  {  if(p  <  0.0)  {  return  getDomainUpperBound(p);  }	  return    getDomainUpperBound(p);    if(p    >    0.0)    {    if(p    <    0.0)    {    return    getDomainUpperBound(p);    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
960	[BUG]  [BUGGY]  if(p  <  0.0)  {  if(p  <  0.0)  {  return  getDomainUpperBound(p);  }  [CE]  illegal  start  of  expression  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0.0)  {  if(p  <  0.0)  {  return  getDomainUpperBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  0.0)  {  if(p  <  0.0)  {  return  getDomainUpperBound(p);  }	  return    getDomainUpperBound(p);    if(p    >    0.0)    {    if(p    <    0.0)    {    return    getDomainUpperBound(p);    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
961	[BUG]  [BUGGY]  if(p  >  0.0)  {  if(p  <  0.0)  {  return  getDomainLowerBound(p);  }  [CE]  illegal  start  of  expression  [FE]              StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  >  0.0)  {  if(p  <  0.0)  {  return  getDomainLowerBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  >  0.0)  {  if(p  <  0.0)  {  return  getDomainLowerBound(p);  }	  return    getDomainUpperBound(p);    if(p    >    0.0)    {    if(p    <    0.0)    {    return    getDomainUpperBound(p);    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
962	[BUG]  [BUGGY]          Double    m    =    getDomainUpperBound(p);    m  =  getDomainUpperBound(p);  double  p  =  getDomainUpperBound(p);  m  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          Double    m    =    getDomainUpperBound(p);    m  =  getDomainUpperBound(p);  double  p  =  getDomainUpperBound(p);  m  =  getDomainUpperBound(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                Double        m        =        getDomainUpperBound(p);        m    =    getDomainUpperBound(p);    double  p  =  getDomainUpperBound(p);  m  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	155	None	add
963	[BUG]  [BUGGY]  if(p  >  0.0)  {  return  getDomainUpperBound(p);  }  [CE]  missing  return  statement  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  >  0.0)  {  return  getDomainUpperBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  >  0.0)  {  return  getDomainUpperBound(p);  }	  return    getDomainUpperBound(p);    if(p    >    0.0)    {    return    getDomainUpperBound(p);    }    	non-compiled	[CE]  missing  return  statement	217	None	replace
964	[BUG]  [BUGGY]  if(p  <  =  0.0)  {  return  getDomainUpperBound(p);  }  [CE]  illegal  start  of  expression  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  =  0.0)  {  return  getDomainUpperBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  =  0.0)  {  return  getDomainUpperBound(p);  }	  return    getDomainUpperBound(p);    if(p    >    0.0)    {    return    getDomainUpperBound(p);    }    	non-compiled	[CE]  illegal  start  of  expression	217	None	replace
965	[BUG]  [BUGGY]  if(p  >  0.0)  {  return  getDomainLowerBound(p);  }  [CE]  missing  return  statement  [FE]              StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  >  0.0)  {  return  getDomainLowerBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  >  0.0)  {  return  getDomainLowerBound(p);  }	  return    getDomainUpperBound(p);    if(p    >    0.0)    {    return    getDomainUpperBound(p);    }    	non-compiled	[CE]  missing  return  statement	217	None	replace
966	[BUG]  [BUGGY]  return  p  <  =  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  <  =  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  =  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  <  =  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  =  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  <  =  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE);	  return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
967	[BUG]  [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Math.abs(p);  if(denominatorDegreesOfFreedom  ==  0.0)  {  return  denominatorDegreesOfFreedom;  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Math.abs(p);  if(denominatorDegreesOfFreedom  ==  0.0)  {  return  denominatorDegreesOfFreedom;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Math.abs(p);  if(denominatorDegreesOfFreedom  ==  0.0)  {  return  denominatorDegreesOfFreedom;  }	  return    Float.MIN_VALUE;    if(p    <    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Math.abs(p);    if(denominatorDegreesOfFreedom    ==    0.0)    {    return    denominatorDegreesOfFreedom;    }    	non-compiled	[CE]  illegal  start  of  expression	241	None	replace
968	[BUG]  [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  double  numeratorDegreesOfFreedom  =  Math.abs(p);  if(denominatorDegreesOfFreedom  ==  0.0)  {  return  numeratorDegreesOfFreedom;  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  double  numeratorDegreesOfFreedom  =  Math.abs(p);  if(denominatorDegreesOfFreedom  ==  0.0)  {  return  numeratorDegreesOfFreedom;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  0.0  ||  p  >  1.0)  {  double  numeratorDegreesOfFreedom  =  Math.abs(p);  if(denominatorDegreesOfFreedom  ==  0.0)  {  return  numeratorDegreesOfFreedom;  }	  return    Float.MIN_VALUE;    if(p    <    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Math.abs(p);    if(denominatorDegreesOfFreedom    ==    0.0)    {    return    denominatorDegreesOfFreedom;    }    	non-compiled	[CE]  illegal  start  of  expression	241	None	replace
969	[BUG]  [BUGGY]          Double    m    =    getDomainUpperBound(p);    Double  d  =  getDomainUpperBound(p);  Double  m  =  getDomainUpperBound(p);  double  d  =  getDomainUpperBound(p);  [CE]  variable  m  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          Double    m    =    getDomainUpperBound(p);    Double  d  =  getDomainUpperBound(p);  Double  m  =  getDomainUpperBound(p);  double  d  =  getDomainUpperBound(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                Double        m        =        getDomainUpperBound(p);        Double    d    =    getDomainUpperBound(p);    Double  m  =  getDomainUpperBound(p);  double  d  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  m  is  already  defined  in  method  getDomainUpperBound(double)	99	None	add
970	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  if(denominatorDegreesOfFreedom  >  0.0)  {  return  denominatorDegreesOfFreedom  +  p;  }  [CE]  missing  return  statement  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  if(denominatorDegreesOfFreedom  >  0.0)  {  return  denominatorDegreesOfFreedom  +  p;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  if(denominatorDegreesOfFreedom  >  0.0)  {  return  denominatorDegreesOfFreedom  +  p;  }	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    if(denominatorDegreesOfFreedom    >    0.0)    {    return    denominatorDegreesOfFreedom    +    p;    }    	non-compiled	[CE]  missing  return  statement	235	None	replace
971	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE  /  2;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Double.MIN_VALUE  /  2;	  return    Double.MIN_VALUE    /    2.0;    	compilable	  [FE]  IllegalArgumentException  	147	3	replace
972	[BUG]  [BUGGY]  return  Double.MIN_VALUE  /  2;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE  /  2;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MIN_VALUE  /  2;	  return    Double.MIN_VALUE    /    2.0;    	compilable	  [FE]  IllegalArgumentException  	147	3	replace
973	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  0,  denominatorDegreesOfFreedom);  [CE]  method  getNumeratorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  0,  denominatorDegreesOfFreedom);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  0,  denominatorDegreesOfFreedom);	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  method  getNumeratorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	165	None	replace
974	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumDenominatorDegreesOfFreedom();  p  =  getDenominatorDegreesOfFreedom();  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumDenominatorDegreesOfFreedom();  p  =  getDenominatorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumDenominatorDegreesOfFreedom();  p  =  getDenominatorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    p    =    getDenominatorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	197	None	replace
975	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p!=  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p!=  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;	  return    p    >    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	225	3	replace
976	[BUG]  [BUGGY]  return  p!=  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p!=  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p!=  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;	  return    p    >    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	225	3	replace
977	[BUG]  [BUGGY]  return  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  Double  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  Double  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    Double  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;	  	non-compiled	[CE]  ';'  expected	152	None	add
978	[BUG]  [BUGGY]  return  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  if(p  >  Double.MAX_VALUE)  {  return  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }  [CE]  unreachable  statement  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  if(p  >  Double.MAX_VALUE)  {  return  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    if(p  >  Double.MAX_VALUE)  {  return  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }	  	non-compiled	[CE]  unreachable  statement	152	None	add
979	[BUG]  [BUGGY]  return  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  if(p  >  Double.MAX_VALUE)  {  return  p  >  Double.POSITIVE_INFINITY?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  [CE]  unreachable  statement  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  if(p  >  Double.MAX_VALUE)  {  return  p  >  Double.POSITIVE_INFINITY?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    if(p  >  Double.MAX_VALUE)  {  return  p  >  Double.POSITIVE_INFINITY?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }	  	non-compiled	[CE]  unreachable  statement	152	None	add
980	[BUG]  [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  if(p  ==  Double.MIN_VALUE)  {  return  p  ==  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  }  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  if(p  ==  Double.MIN_VALUE)  {  return  p  ==  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    ==    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    if(p  ==  Double.MIN_VALUE)  {  return  p  ==  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  }	  	non-compiled	[CE]  unreachable  statement	70	None	add
981	[BUG]  [BUGGY]  Double  m  =  getDenominatorDegreesOfFreedom(numeratorDegreesOfFreedom,  p);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  m  =  getDenominatorDegreesOfFreedom(numeratorDegreesOfFreedom,  p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  m  =  getDenominatorDegreesOfFreedom(numeratorDegreesOfFreedom,  p);	  Double    m    =    getDenominatorDegreesOfFreedom(p);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	144	None	replace
982	[BUG]  [BUGGY]  return  Float.MIN_VALUE  /  2.0;  Double  p  =  getDomainLowerBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MIN_VALUE  /  2.0;  Double  p  =  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MIN_VALUE    /    2.0;    Double  p  =  getDomainLowerBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	89	None	add
983	[BUG]  [BUGGY]  return  Double.MIN_VALUE  /  2.0;  double  p  =  getDomainUpperBounds(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE  /  2.0;  double  p  =  getDomainUpperBounds(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MIN_VALUE    /    2.0;    double  p  =  getDomainUpperBounds(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	146	None	add
984	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(numeratorDegreesOfFreedom,  p);  [CE]  method  getNumeratorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(numeratorDegreesOfFreedom,  p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(numeratorDegreesOfFreedom,  p);	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p,    numeratorDegreesOfFreedom);    	non-compiled	[CE]  method  getNumeratorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	93	None	replace
985	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(null,  p);  [CE]  method  getNumeratorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(null,  p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(null,  p);	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p,    numeratorDegreesOfFreedom);    	non-compiled	[CE]  method  getNumeratorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	93	None	replace
986	[BUG]  [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  Double  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE);  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  Double  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    >    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.MIN_VALUE;    Double  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE);	  	non-compiled	[CE]  ';'  expected	159	None	add
987	[BUG]  [BUGGY]  return  Double.MAX_VALUE;  IllegalArgumentException  x  =  getDomainUpperBound(p);  [CE]  incompatible  types  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE;  IllegalArgumentException  x  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MAX_VALUE;  IllegalArgumentException  x  =  getDomainUpperBound(p);	  return    Float.MAX_VALUE;    IllegalArgumentException    x    =    getDomainUpperBound(p);    	non-compiled	[CE]  incompatible  types	191	None	replace
988	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  >  0.0)  {  return  getDomainUpperBound(p);  }  else  {  return  getDomainUpperBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	if(p  >  0.0)  {  return  getDomainUpperBound(p);  }  else  {  return  getDomainUpperBound(p);  }	  return    getDomainUpperBound(p);    if(p    >    0.0)    {    return    getDomainUpperBound(p);    }    else    {    return    getDomainUpperBound(p);    }    	compilable	  [FE]  StackOverflowError  	216	3	replace
989	[BUG]  [BUGGY]  if(p  >  0.0)  {  return  getDomainUpperBound(p);  }  else  {  return  getDomainUpperBound(p);  }  [FE]  StackOverflowError  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  >  0.0)  {  return  getDomainUpperBound(p);  }  else  {  return  getDomainUpperBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  >  0.0)  {  return  getDomainUpperBound(p);  }  else  {  return  getDomainUpperBound(p);  }	  return    getDomainUpperBound(p);    if(p    >    0.0)    {    return    getDomainUpperBound(p);    }    else    {    return    getDomainUpperBound(p);    }    	compilable	  [FE]  StackOverflowError  	216	3	replace
990	[BUG]  [BUGGY]  if(p  <  =  0.0)  {  return  getDomainUpperBound(p);  }  else  {  return  getDomainUpperBound(p);  }  [CE]  illegal  start  of  expression  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  =  0.0)  {  return  getDomainUpperBound(p);  }  else  {  return  getDomainUpperBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  =  0.0)  {  return  getDomainUpperBound(p);  }  else  {  return  getDomainUpperBound(p);  }	  return    getDomainUpperBound(p);    if(p    >    0.0)    {    return    getDomainUpperBound(p);    }    else    {    return    getDomainUpperBound(p);    }    	non-compiled	[CE]  illegal  start  of  expression	216	None	replace
991	[BUG]  [BUGGY]  if(p  <  =  0.0)  {  return  getDomainLowerBound(p);  }  else  {  return  getDomainLowerBound(p);  }  [CE]  illegal  start  of  expression  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  =  0.0)  {  return  getDomainLowerBound(p);  }  else  {  return  getDomainLowerBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  =  0.0)  {  return  getDomainLowerBound(p);  }  else  {  return  getDomainLowerBound(p);  }	  return    getDomainUpperBound(p);    if(p    >    0.0)    {    return    getDomainUpperBound(p);    }    else    {    return    getDomainUpperBound(p);    }    	non-compiled	[CE]  illegal  start  of  expression	216	None	replace
992	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(null,  p);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]                      IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(null,  p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(null,  p);	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p,    numeratorDegreesOfFreedom);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	64	None	replace
993	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >  0.0?  Float.MIN_VALUE  :  p;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p  >  0.0?  Float.MIN_VALUE  :  p;	  return    Float.MIN_VALUE;    IllegalArgumentException    x    =    getDomainUpperBound(p);    	compilable	  [FE]  IllegalArgumentException  	171	3	replace
994	[BUG]  [BUGGY]  return  p  >  0.0?  Float.MIN_VALUE  :  p;  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  >  0.0?  Float.MIN_VALUE  :  p;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  >  0.0?  Float.MIN_VALUE  :  p;	  return    Float.MIN_VALUE;    IllegalArgumentException    x    =    getDomainUpperBound(p);    	compilable	  [FE]  IllegalArgumentException  	171	3	replace
995	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MAX_VALUE  /(float)p  +  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Float.MAX_VALUE  /(float)p  +  1;	  return    Float.MAX_VALUE    /(float)p;    	compilable	  [FE]  IllegalArgumentException  	180	1	replace
996	[BUG]  [BUGGY]  return  Float.MAX_VALUE  /(float)p  +  1;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MAX_VALUE  /(float)p  +  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Float.MAX_VALUE  /(float)p  +  1;	  return    Float.MAX_VALUE    /(float)p;    	compilable	  [FE]  IllegalArgumentException  	180	1	replace
997	[BUG]  [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Math.abs(p);  if(denominatorDegreesOfFreedom  >=  0.0)  {  return  Float.MIN_VALUE;  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Math.abs(p);  if(denominatorDegreesOfFreedom  >=  0.0)  {  return  Float.MIN_VALUE;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Math.abs(p);  if(denominatorDegreesOfFreedom  >=  0.0)  {  return  Float.MIN_VALUE;  }	  return    Float.MIN_VALUE;    if(p    <    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Math.abs(p);    if(denominatorDegreesOfFreedom    >=    0.0)    {    return    Float.MIN_VALUE;    }    	non-compiled	[CE]  illegal  start  of  expression	242	None	replace
998	[BUG]  [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  double  numeratorDegreesOfFreedom  =  Math.abs(p);  if(denominatorDegreesOfFreedom  >=  0.0)  {  return  Float.MIN_VALUE;  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  double  numeratorDegreesOfFreedom  =  Math.abs(p);  if(denominatorDegreesOfFreedom  >=  0.0)  {  return  Float.MIN_VALUE;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  0.0  ||  p  >  1.0)  {  double  numeratorDegreesOfFreedom  =  Math.abs(p);  if(denominatorDegreesOfFreedom  >=  0.0)  {  return  Float.MIN_VALUE;  }	  return    Float.MIN_VALUE;    if(p    <    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Math.abs(p);    if(denominatorDegreesOfFreedom    >=    0.0)    {    return    Float.MIN_VALUE;    }    	non-compiled	[CE]  illegal  start  of  expression	242	None	replace
999	[BUG]  [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Math.abs(p);  if(denominatorDegreesOfFreedom  >=  0.0)  {  return  Float.MIN_VAL  [CE]  ';'  expected  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Math.abs(p);  if(denominatorDegreesOfFreedom  >=  0.0)  {  return  Float.MIN_VAL  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Math.abs(p);  if(denominatorDegreesOfFreedom  >=  0.0)  {  return  Float.MIN_VAL	  return    Float.MIN_VALUE;    if(p    <    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Math.abs(p);    if(denominatorDegreesOfFreedom    >=    0.0)    {    return    Float.MIN_VALUE;    }    	non-compiled	[CE]  ';'  expected	242	None	replace
1000	[BUG]  [BUGGY]  double  p  =  getDomainUpperBound(p);  Double.MAX_VALUE  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  p  =  getDomainUpperBound(p);  Double.MAX_VALUE  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  p  =  getDomainUpperBound(p);  Double.MAX_VALUE  =  getDomainUpperBound(p);	  return    Double.MAX_VALUE    /    getDomainUpperBound(p);    Double.MAX_VALUE    =    getDomainUpperBound(p);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	169	None	replace
1001	[BUG]  [BUGGY]  return  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  [CE]  >  expected  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;	  return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MIN_VALUE;    	non-compiled	[CE]  >  expected	104	None	replace
1002	[BUG]  [BUGGY]  return  Double.MAX_VALUE  *  getDomainUpperBound(p);  double  p  =  getDomainUpperBound(p).doubleValue();  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  *  getDomainUpperBound(p);  double  p  =  getDomainUpperBound(p).doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    *    getDomainUpperBound(p);    double  p  =  getDomainUpperBound(p).doubleValue();	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	37	None	add
1003	[BUG]  [BUGGY]  return  Double.MAX_VALUE  *  getDomainUpperBound(p);  double  p  =  getDomainUpperBounds(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  *  getDomainUpperBound(p);  double  p  =  getDomainUpperBounds(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    *    getDomainUpperBound(p);    double  p  =  getDomainUpperBounds(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	37	None	add
1004	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN;  if(p  <  Double.MIN_VALUE  ||  p  >  Double.NaN)  {  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN;  }  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN;  if(p  <  Double.MIN_VALUE  ||  p  >  Double.NaN)  {  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.NaN;    if(p  <  Double.MIN_VALUE  ||  p  >  Double.NaN)  {  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN;  }	  	non-compiled	[CE]  unreachable  statement	49	None	add
1005	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN;  if(p  <  Double.MIN_VALUE  ||  p  >  Double.POSITIVE_INFINITY)  {  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN;  }  [CE]  unreachable  statement  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN;  if(p  <  Double.MIN_VALUE  ||  p  >  Double.POSITIVE_INFINITY)  {  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MIN_VALUE?    Double.POSITIVE_INFINITY    :    Double.NaN;    if(p  <  Double.MIN_VALUE  ||  p  >  Double.POSITIVE_INFINITY)  {  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN;  }	  	non-compiled	[CE]  unreachable  statement	49	None	add
1006	[BUG]  [BUGGY]  if(p  >  0)  {  return  getDomainUpperBound(p);  }  else  {  getDomainUpperBound(p);  }  [CE]  missing  return  statement  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  >  0)  {  return  getDomainUpperBound(p);  }  else  {  getDomainUpperBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  >  0)  {  return  getDomainUpperBound(p);  }  else  {  getDomainUpperBound(p);  }	  return    getDomainUpperBound(p);    getDomainUpperBound(p);    	non-compiled	[CE]  missing  return  statement	80	None	replace
1007	[BUG]  [BUGGY]  if(p  <  =  0)  {  return  getDomainUpperBound(p);  }  else  {  getDomainUpperBound(p);  }  [CE]  illegal  start  of  expression  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  =  0)  {  return  getDomainUpperBound(p);  }  else  {  getDomainUpperBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  =  0)  {  return  getDomainUpperBound(p);  }  else  {  getDomainUpperBound(p);  }	  return    getDomainUpperBound(p);    getDomainUpperBound(p);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
1008	[BUG]  [BUGGY]  if(p  <  =  0.0)  {  return  getDomainUpperBound(p);  }  else  {  getDomainUpperBound(p);  }  [CE]  illegal  start  of  expression  [FE]              StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  =  0.0)  {  return  getDomainUpperBound(p);  }  else  {  getDomainUpperBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  =  0.0)  {  return  getDomainUpperBound(p);  }  else  {  getDomainUpperBound(p);  }	  return    getDomainUpperBound(p);    getDomainUpperBound(p);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
1009	[BUG]  [BUGGY]  return  getDomainLowerBound(p);  return  getDomainLowerBound(p);  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDomainLowerBound(p);  return  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    getDomainLowerBound(p);    return  getDomainLowerBound(p);	  	non-compiled	[CE]  unreachable  statement	188	None	add
1010	[BUG]  [BUGGY]  return  getDomainLowerBound(p);  if(p  >  0)  {  return  getDomainLowerBound(p);  }  else  {  return  getDomainLowerBound(p);  }  [CE]  unreachable  statement  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDomainLowerBound(p);  if(p  >  0)  {  return  getDomainLowerBound(p);  }  else  {  return  getDomainLowerBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    getDomainLowerBound(p);    if(p  >  0)  {  return  getDomainLowerBound(p);  }  else  {  return  getDomainLowerBound(p);  }	  	non-compiled	[CE]  unreachable  statement	188	None	add
1011	[BUG]  [BUGGY]  return  getDomainLowerBound(p);  if(p  >  0)  {  return  getDomainLowerBound(p);  }  [CE]  unreachable  statement  [FE]        IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDomainLowerBound(p);  if(p  >  0)  {  return  getDomainLowerBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    getDomainLowerBound(p);    if(p  >  0)  {  return  getDomainLowerBound(p);  }	  	non-compiled	[CE]  unreachable  statement	188	None	add
1012	[BUG]  [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Math.abs(p);  if(denominatorDegreesOfFreedom  >=  0.0)  {  return  denominatorDegreesOfFreedom;  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Math.abs(p);  if(denominatorDegreesOfFreedom  >=  0.0)  {  return  denominatorDegreesOfFreedom;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Math.abs(p);  if(denominatorDegreesOfFreedom  >=  0.0)  {  return  denominatorDegreesOfFreedom;  }	  return    Float.MIN_VALUE;    if(p    <    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Math.abs(p);    if(denominatorDegreesOfFreedom    >=    0.0)    {    return    denominatorDegreesOfFreedom;    }    	non-compiled	[CE]  illegal  start  of  expression	240	None	replace
1013	[BUG]  [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  double  numeratorDegreesOfFreedom  =  Math.abs(p);  if(denominatorDegreesOfFreedom  >=  0.0)  {  return  numeratorDegreesOfFreedom;  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  double  numeratorDegreesOfFreedom  =  Math.abs(p);  if(denominatorDegreesOfFreedom  >=  0.0)  {  return  numeratorDegreesOfFreedom;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  0.0  ||  p  >  1.0)  {  double  numeratorDegreesOfFreedom  =  Math.abs(p);  if(denominatorDegreesOfFreedom  >=  0.0)  {  return  numeratorDegreesOfFreedom;  }	  return    Float.MIN_VALUE;    if(p    <    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Math.abs(p);    if(denominatorDegreesOfFreedom    >=    0.0)    {    return    denominatorDegreesOfFreedom;    }    	non-compiled	[CE]  illegal  start  of  expression	240	None	replace
1014	[BUG]  [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  double  numeratorDegreesOfFreedom  =  Math.abs(p);  if(denominatorDegreesOfFreedom  >=  0.0)  {  return  denominatorDegreesOfFreedom;  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  double  numeratorDegreesOfFreedom  =  Math.abs(p);  if(denominatorDegreesOfFreedom  >=  0.0)  {  return  denominatorDegreesOfFreedom;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  0.0  ||  p  >  1.0)  {  double  numeratorDegreesOfFreedom  =  Math.abs(p);  if(denominatorDegreesOfFreedom  >=  0.0)  {  return  denominatorDegreesOfFreedom;  }	  return    Float.MIN_VALUE;    if(p    <    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Math.abs(p);    if(denominatorDegreesOfFreedom    >=    0.0)    {    return    denominatorDegreesOfFreedom;    }    	non-compiled	[CE]  illegal  start  of  expression	240	None	replace
1015	[BUG]  [BUGGY]  Double  m  =  getDomainUpperBound(p,  p,  denominatorDegreesOfFreedom);  [CE]  no  suitable  method  found  for  getDomainUpperBound(double,double,double)  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  m  =  getDomainUpperBound(p,  p,  denominatorDegreesOfFreedom);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  m  =  getDomainUpperBound(p,  p,  denominatorDegreesOfFreedom);	  Double    m    =    getDomainUpperBound(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  no  suitable  method  found  for  getDomainUpperBound(double,double,double)	145	None	replace
1016	[BUG]  [BUGGY]  Double  m  =  getDomainLowerBound(p);  m  =  getDomainUpperBound(p);  [CE]  missing  return  statement  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  m  =  getDomainLowerBound(p);  m  =  getDomainUpperBound(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  m  =  getDomainLowerBound(p);  m  =  getDomainUpperBound(p);	          Double    m    =    getDomainUpperBound(p);    m    =    getDomainUpperBound(p);    	non-compiled	[CE]  missing  return  statement	156	None	replace
1017	[BUG]  [BUGGY]  int  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  int  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	int  p  =  getDomainUpperBound(p);	  return    Double.MIN_VALUE;    double    p    =    getDomainUpperBound(p);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	109	None	replace
1018	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        denominatorDegreesOfFreedom        =        getNumeratorDegreesOfFreedom();        double    deseratorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)	207	None	add
1019	[BUG]  [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  return  Float.MIN_VALUE;  Double  m  =  getDomainUpperBound(p);  }  [CE]  unreachable  statement  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  return  Float.MIN_VALUE;  Double  m  =  getDomainUpperBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  0.0  ||  p  >  1.0)  {  return  Float.MIN_VALUE;  Double  m  =  getDomainUpperBound(p);  }	  return    Float.MIN_VALUE;    Double    m    =    getDomainUpperBound(p);    	non-compiled	[CE]  unreachable  statement	131	None	replace
1020	[BUG]  [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  return  Float.MIN_VALUE;  double  m  =  getDomainUpperBound(p);  }  [CE]  unreachable  statement  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  return  Float.MIN_VALUE;  double  m  =  getDomainUpperBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  0.0  ||  p  >  1.0)  {  return  Float.MIN_VALUE;  double  m  =  getDomainUpperBound(p);  }	  return    Float.MIN_VALUE;    Double    m    =    getDomainUpperBound(p);    	non-compiled	[CE]  unreachable  statement	131	None	replace
1021	[BUG]  [BUGGY]  if(p  >  0.0)  {  return  Float.MIN_VALUE;  double  m  =  getDomainUpperBound(p);  }  [CE]  unreachable  statement  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  >  0.0)  {  return  Float.MIN_VALUE;  double  m  =  getDomainUpperBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  >  0.0)  {  return  Float.MIN_VALUE;  double  m  =  getDomainUpperBound(p);  }	  return    Float.MIN_VALUE;    Double    m    =    getDomainUpperBound(p);    	non-compiled	[CE]  unreachable  statement	131	None	replace
1022	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom  ==  null)  {  return  denominatorDegreesOfFreedom  +  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom  ==  null)  {  return  denominatorDegreesOfFreedom  +  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom  ==  null)  {  return  denominatorDegreesOfFreedom  +  }	  if(p    <    =    0)    {    double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    if(denominatorDegreesOfFreedom    ==    null)    {    return    denominatorDegreesOfFreedom    +    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
1023	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  DEMINE_DECEMBER);  [CE]  cannot  find  symbol  DEMINE_DECEMBER  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  DEMINE_DECEMBER);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  DEMINE_DECEMBER);	  double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p,    m);    	non-compiled	[CE]  cannot  find  symbol  DEMINE_DECEMBER	91	None	replace
1024	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  >  0)  {  return  getDomainUpperBound(p);  }  else  {  return  getDomainLowerBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	if(p  >  0)  {  return  getDomainUpperBound(p);  }  else  {  return  getDomainLowerBound(p);  }	  return    getDomainUpperBound(p);    return    getDomainUpperBound(p);    	compilable	  [FE]  StackOverflowError  	173	3	replace
1025	[BUG]  [BUGGY]  if(p  >  0)  {  return  getDomainUpperBound(p);  }  else  {  return  getDomainLowerBound(p);  }  [FE]  StackOverflowError  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  >  0)  {  return  getDomainUpperBound(p);  }  else  {  return  getDomainLowerBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  >  0)  {  return  getDomainUpperBound(p);  }  else  {  return  getDomainLowerBound(p);  }	  return    getDomainUpperBound(p);    return    getDomainUpperBound(p);    	compilable	  [FE]  StackOverflowError  	173	3	replace
1026	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  >  0)  {  return  getDomainUpperBound(p);  }  else  {  return  getDomainUpperBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	if(p  >  0)  {  return  getDomainUpperBound(p);  }  else  {  return  getDomainUpperBound(p);  }	  return    getDomainUpperBound(p);    return    getDomainUpperBound(p);    	compilable	  [FE]  StackOverflowError  	173	3	replace
1027	[BUG]  [BUGGY]  if(p  >  0)  {  return  getDomainUpperBound(p);  }  else  {  return  getDomainUpperBound(p);  }  [FE]  StackOverflowError  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  >  0)  {  return  getDomainUpperBound(p);  }  else  {  return  getDomainUpperBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  >  0)  {  return  getDomainUpperBound(p);  }  else  {  return  getDomainUpperBound(p);  }	  return    getDomainUpperBound(p);    return    getDomainUpperBound(p);    	compilable	  [FE]  StackOverflowError  	173	3	replace
1028	[BUG]  [BUGGY]  if(p  <  0)  {  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  p;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0)  {  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  p;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  0)  {  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  p;  }	  if(p    <    =    0)    {    double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    +    p;    }    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
1029	[BUG]  [BUGGY]  if(p  <  0)  {  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0)  {  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  0)  {  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +	  if(p    <    =    0)    {    double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    +    p;    }    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
1030	[BUG]  [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]          double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	                double        denominatorDegreesOfFreedom        =        getDenominatorDegreesOfFreedom();        double    desnominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)	30	None	add
1031	[BUG]  [BUGGY]  return  Double.MIN_VALUE  /  getDomainUpperBound(m);  [CE]  cannot  find  symbol  m  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE  /  getDomainUpperBound(m);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MIN_VALUE  /  getDomainUpperBound(m);	  return    Double.MIN_VALUE    /    getDomainUpperBound();    	non-compiled	[CE]  cannot  find  symbol  m	113	None	replace
1032	[BUG]  [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  return  Double.MIN_VALUE;  double  m  =  getDomainUpperBound(p);  }  [CE]  unreachable  statement  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  return  Double.MIN_VALUE;  double  m  =  getDomainUpperBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  0.0  ||  p  >  1.0)  {  return  Double.MIN_VALUE;  double  m  =  getDomainUpperBound(p);  }	  return    Double.MIN_VALUE;    double    m    =    getDomainUpperBound(p);    	non-compiled	[CE]  unreachable  statement	108	None	replace
1033	[BUG]  [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  return  Double.MIN_VALUE;  double  m  =  getDomainUpperBound(p);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  return  Double.MIN_VALUE;  double  m  =  getDomainUpperBound(p);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  0.0  ||  p  >  1.0)  {  return  Double.MIN_VALUE;  double  m  =  getDomainUpperBound(p);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    Double.MIN_VALUE;    double    m    =    getDomainUpperBound(p);    	non-compiled	[CE]  unreachable  statement	108	None	replace
1034	[BUG]  [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  return  Double.MIN_VALUE;  double  m  =  getDomainUpperBound(p);  }  else  {  int  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  return  denominator  [CE]  ';'  expected  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  return  Double.MIN_VALUE;  double  m  =  getDomainUpperBound(p);  }  else  {  int  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  return  denominator  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  0.0  ||  p  >  1.0)  {  return  Double.MIN_VALUE;  double  m  =  getDomainUpperBound(p);  }  else  {  int  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  return  denominator	  return    Double.MIN_VALUE;    double    m    =    getDomainUpperBound(p);    	non-compiled	[CE]  ';'  expected	108	None	replace
1035	[BUG]  [BUGGY]  if(p  <  Double.MAX_VALUE)  {  return  p  <  Double.POSITIVE_INFINITY?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  [CE]  missing  return  statement  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  Double.MAX_VALUE)  {  return  p  <  Double.POSITIVE_INFINITY?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  Double.MAX_VALUE)  {  return  p  <  Double.POSITIVE_INFINITY?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }	  return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    if(p    <    Double.MAX_VALUE)    {    return    p    <    Double.POSITIVE_INFINITY?    Double.MAX_VALUE    :    Double.MAX_VALUE;    }    	non-compiled	[CE]  missing  return  statement	229	None	replace
1036	[BUG]  [BUGGY]  return  Float.MIN_VALUE  /  2;  Double  p  =  getDomainLowerBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Float.MIN_VALUE  /  2;  Double  p  =  getDomainLowerBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MIN_VALUE    /    2;    Double  p  =  getDomainLowerBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	148	None	add
1037	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getMeanorDegreesOfFreedom(p);  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getMeanorDegreesOfFreedom(p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getMeanorDegreesOfFreedom(p);	  double    denominatorDegreesOfFreedom    =    getMeanorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
1038	[BUG]  [BUGGY]  return  getDomainUpperBound(p  -  1);  return  getDomainUpperBound(p  -  1);  [CE]  unreachable  statement  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDomainUpperBound(p  -  1);  return  getDomainUpperBound(p  -  1);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    getDomainUpperBound(p    -    1);    return  getDomainUpperBound(p  -  1);	  	non-compiled	[CE]  unreachable  statement	137	None	add
1039	[BUG]  [BUGGY]  return  getDomainUpperBound(p  -  1);  if(p  >  0)  {  if(p  <  1)  {  return  getDomainUpperBound(p  -  1);  }  [CE]  illegal  start  of  expression  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  getDomainUpperBound(p  -  1);  if(p  >  0)  {  if(p  <  1)  {  return  getDomainUpperBound(p  -  1);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    getDomainUpperBound(p    -    1);    if(p  >  0)  {  if(p  <  1)  {  return  getDomainUpperBound(p  -  1);  }	  	non-compiled	[CE]  illegal  start  of  expression	137	None	add
1040	[BUG]  [BUGGY]  Double  p  =  getDomainUpper(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]          StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Double  p  =  getDomainUpper(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  p  =  getDomainUpper(p);	  return    Double.MAX_VALUE    /    getDomainUpperBound(p);    double    p    =    getDomainUpper(p);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	211	None	replace
1041	[BUG]  [BUGGY]  return  Double.MIN_VALUE  /  getDomainUpperBound(p);  double  p  =  getDomainUpperBound(p).doubleValue();  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MIN_VALUE  /  getDomainUpperBound(p);  double  p  =  getDomainUpperBound(p).doubleValue();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MIN_VALUE    /    getDomainUpperBound(p);    double  p  =  getDomainUpperBound(p).doubleValue();	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	35	None	add
1042	[BUG]  [BUGGY]  Float.MAX_VALUE  =  Float.MAX_VALUE;  [CE]  cannot  assign  a  value  to  final  variable  MAX_VALUE  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  Float.MAX_VALUE  =  Float.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Float.MAX_VALUE  =  Float.MAX_VALUE;	  return    Float.MAX_VALUE;    Float.MAX_VALUE    =    Float.MAX_VALUE;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  MAX_VALUE	190	None	replace
1043	[BUG]  [BUGGY]  if(p  <  =  0.0)  {  return  Float.MAX_VALUE;  Float.MAX_VALUE  =  Float.MAX_VALUE;  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  =  0.0)  {  return  Float.MAX_VALUE;  Float.MAX_VALUE  =  Float.MAX_VALUE;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  =  0.0)  {  return  Float.MAX_VALUE;  Float.MAX_VALUE  =  Float.MAX_VALUE;  }	  return    Float.MAX_VALUE;    Float.MAX_VALUE    =    Float.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	190	None	replace
1044	[BUG]  [BUGGY]  float  MAX_VALUE  =  Float.MAX_VALUE;  [CE]  missing  return  statement  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  float  MAX_VALUE  =  Float.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	float  MAX_VALUE  =  Float.MAX_VALUE;	  return    Float.MAX_VALUE;    Float.MAX_VALUE    =    Float.MAX_VALUE;    	non-compiled	[CE]  missing  return  statement	190	None	replace
1045	[BUG]  [BUGGY]  return  Double.NaN;  if(p  <  =  0.0)  {  return  Double.NaN;  }  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.NaN;  if(p  <  =  0.0)  {  return  Double.NaN;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.NaN;    if(p  <  =  0.0)  {  return  Double.NaN;  }	  	non-compiled	[CE]  illegal  start  of  expression	238	None	add
1046	[BUG]  [BUGGY]  return  Double.NaN;  if(p  ==  0.0)  {  return  Double.NaN;  }  [CE]  unreachable  statement  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.NaN;  if(p  ==  0.0)  {  return  Double.NaN;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.NaN;    if(p  ==  0.0)  {  return  Double.NaN;  }	  	non-compiled	[CE]  unreachable  statement	238	None	add
1047	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  -  p,  numeratorDegreesOfFreedom.doubleValue();  [CE]  ';'  expected  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  -  p,  numeratorDegreesOfFreedom.doubleValue();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  -  p,  numeratorDegreesOfFreedom.doubleValue();	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom()    -    p.doubleValue();    	non-compiled	[CE]  ';'  expected	186	None	replace
1048	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  0,  p);  [CE]  cannot  find  symbol  [FE]                      IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  0,  p);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  0,  p);	  double    denominatorDegreesOfFreedom    =    getDestinatorDegreesOfFreedom(p,    m);    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
1049	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  numerator);  [CE]  cannot  find  symbol  numerator  [FE]                        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  numerator);  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  numerator);	  double    denominatorDegreesOfFreedom    =    getDestinatorDegreesOfFreedom(p,    m);    	non-compiled	[CE]  cannot  find  symbol  numerator	125	None	replace
1050	[BUG]  [BUGGY]  double  m  =  getDomainUpperBound(p  +  1)-  1;  [CE]  missing  return  statement  [FE]            StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  m  =  getDomainUpperBound(p  +  1)-  1;  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  m  =  getDomainUpperBound(p  +  1)-  1;	  double    m    =    getDomainUpperBound(p)-    1;    	non-compiled	[CE]  missing  return  statement	128	None	replace
1051	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p,  denominatorDegreesOfFreedom,  numeratorDegreesOfFreedom);  [CE]  no  suitable  method  found  for  getDomainUpperBound(double,double,double)  [FE]        StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p,  denominatorDegreesOfFreedom,  numeratorDegreesOfFreedom);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MAX_VALUE  /  getDomainUpperBound(p,  denominatorDegreesOfFreedom,  numeratorDegreesOfFreedom);	  return    Double.MAX_VALUE    /    getDomainUpperBound(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  no  suitable  method  found  for  getDomainUpperBound(double,double,double)	201	None	replace
1052	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p)/  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Double.MAX_VALUE  /  getDomainUpperBound(p)/  1;	  return    Double.MAX_VALUE    /    getDomainUpperBound(p)+    1;    	compilable	  [FE]  StackOverflowError  	40	3	replace
1053	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p)/  1;  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p)/  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MAX_VALUE  /  getDomainUpperBound(p)/  1;	  return    Double.MAX_VALUE    /    getDomainUpperBound(p)+    1;    	compilable	  [FE]  StackOverflowError  	40	3	replace
1054	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p)/  2  +  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Double.MAX_VALUE  /  getDomainUpperBound(p)/  2  +  1;	  return    Double.MAX_VALUE    /    getDomainUpperBound(p)+    1;    	compilable	  [FE]  StackOverflowError  	40	3	replace
1055	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p)/  2  +  1;  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p)/  2  +  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MAX_VALUE  /  getDomainUpperBound(p)/  2  +  1;	  return    Double.MAX_VALUE    /    getDomainUpperBound(p)+    1;    	compilable	  [FE]  StackOverflowError  	40	3	replace
1056	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  /  getDomainLowerBound(p)+  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Double.MAX_VALUE  /  getDomainLowerBound(p)+  1;	  return    Double.MAX_VALUE    /    getDomainUpperBound(p)+    1;    	compilable	  [FE]  IllegalArgumentException  	40	1	replace
1057	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  getDomainLowerBound(p)+  1;  [FE]  IllegalArgumentException  [FE]        StackOverflowError    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  /  getDomainLowerBound(p)+  1;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MAX_VALUE  /  getDomainLowerBound(p)+  1;	  return    Double.MAX_VALUE    /    getDomainUpperBound(p)+    1;    	compilable	  [FE]  IllegalArgumentException  	40	1	replace
1058	[BUG]  [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  super.getDomainU  [CE]  ';'  expected  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  super.getDomainU  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  super.getDomainU	  return    Double.MIN_VALUE;    if(p    <    =    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Double.MIN_VALUE;    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    +    super.getDomainUpperBound    	non-compiled	[CE]  ';'  expected	215	None	replace
1059	[BUG]  [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  super.getDomainUpperBound  [CE]  ';'  expected  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  super.getDomainUpperBound  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  super.getDomainUpperBound	  return    Double.MIN_VALUE;    if(p    <    =    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Double.MIN_VALUE;    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    +    super.getDomainUpperBound    	non-compiled	[CE]  ';'  expected	215	None	replace
1060	[BUG]  [BUGGY]  if(p  <  =  0.0)  {  return  Float.MIN_VALUE;  Float.MIN_VALUE;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  =  0.0)  {  return  Float.MIN_VALUE;  Float.MIN_VALUE;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  =  0.0)  {  return  Float.MIN_VALUE;  Float.MIN_VALUE;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    Float.MIN_VALUE;    Float.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
1061	[BUG]  [BUGGY]  if(p  <  0.0)  {  return  Float.MIN_VALUE;  Float.MIN_VALUE;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0.0)  {  return  Float.MIN_VALUE;  Float.MIN_VALUE;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  0.0)  {  return  Float.MIN_VALUE;  Float.MIN_VALUE;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    Float.MIN_VALUE;    Float.MIN_VALUE;    	non-compiled	[CE]  not  a  statement	129	None	replace
1062	[BUG]  [BUGGY]  if(p  <  0.0)  {  return  Float.MIN_VALUE;  Float.MIN_VALUE;  }  [CE]  not  a  statement  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0.0)  {  return  Float.MIN_VALUE;  Float.MIN_VALUE;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  0.0)  {  return  Float.MIN_VALUE;  Float.MIN_VALUE;  }	  return    Float.MIN_VALUE;    Float.MIN_VALUE;    	non-compiled	[CE]  not  a  statement	129	None	replace
1063	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.POSITIVE_INFINITY  /  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Double.POSITIVE_INFINITY  /  getDomainUpperBound(p);	  return    Double.POSITIVE_INFINITY;    	compilable	  [FE]  StackOverflowError  	237	3	replace
1064	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY  /  getDomainUpperBound(p);  [FE]  StackOverflowError  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.POSITIVE_INFINITY  /  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.POSITIVE_INFINITY  /  getDomainUpperBound(p);	  return    Double.POSITIVE_INFINITY;    	compilable	  [FE]  StackOverflowError  	237	3	replace
1065	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY  /  getDomainUpperBound();  [CE]  no  suitable  method  found  for  getDomainUpperBound()  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.POSITIVE_INFINITY  /  getDomainUpperBound();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.POSITIVE_INFINITY  /  getDomainUpperBound();	  return    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  no  suitable  method  found  for  getDomainUpperBound()	237	None	replace
1066	[BUG]  [BUGGY]  return  p  ==  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  if(p  ==  Double.MIN_VALUE)  {  return  p  ==  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  if(p  ==  Double.MIN_VALUE)  {  return  p  ==  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    ==    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    if(p  ==  Double.MIN_VALUE)  {  return  p  ==  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }	  	non-compiled	[CE]  unreachable  statement	22	None	add
1067	[BUG]  [BUGGY]  return  p  ==  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  if(p  ==  Double.MIN_VALUE)  {  return  p  ==  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  else  {  return  p  ==  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  [CE]  unreachable  statement  [FE]      IllegalArgumentException    [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  if(p  ==  Double.MIN_VALUE)  {  return  p  ==  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  else  {  return  p  ==  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    ==    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    if(p  ==  Double.MIN_VALUE)  {  return  p  ==  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  else  {  return  p  ==  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }	  	non-compiled	[CE]  unreachable  statement	22	None	add
1068	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  +  p  *.doubleValue();  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  +  p  *.doubleValue();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  +  p  *.doubleValue();	  double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom()    +    p.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	187	None	replace
1069	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  boolean  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  incompatible  types  [FE]          IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  boolean  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]      return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  boolean  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	          double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    int    numeratorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  incompatible  types	209	None	replace
1070	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  }	  if(p    <    =    0)    {    double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    +    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
1071	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  desominatorDegreesOfFreedom  +  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  desominatorDegreesOfFreedom  +  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  desominatorDegreesOfFreedom  +	  if(p    <    =    0)    {    double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    +    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
1072	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  getDomainLowerBound(p);  p  =  getDomainUpperBound(p);  [CE]  unreachable  statement  [FE]                StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  /  getDomainLowerBound(p);  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MAX_VALUE  /  getDomainLowerBound(p);  p  =  getDomainUpperBound(p);	  return    Double.MAX_VALUE    /    getDomainUpperBound(p);    p    =    getDomainUpperBound(p);    	non-compiled	[CE]  unreachable  statement	123	None	replace
1073	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p  +  1);  p  =  getDomainUpperBound(p);  [CE]  unreachable  statement  [FE]                  StackOverflowError      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p  +  1);  p  =  getDomainUpperBound(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MAX_VALUE  /  getDomainUpperBound(p  +  1);  p  =  getDomainUpperBound(p);	  return    Double.MAX_VALUE    /    getDomainUpperBound(p);    p    =    getDomainUpperBound(p);    	non-compiled	[CE]  unreachable  statement	123	None	replace
1074	[BUG]  [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  return  Float.MAX_VALUE;  double  m  =  getDomainUpperBound(p);  }  [CE]  unreachable  statement  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  0.0  ||  p  >  1.0)  {  return  Float.MAX_VALUE;  double  m  =  getDomainUpperBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  0.0  ||  p  >  1.0)  {  return  Float.MAX_VALUE;  double  m  =  getDomainUpperBound(p);  }	  return    Float.MAX_VALUE;    double    m    =    getDomainUpperBound(p);    	non-compiled	[CE]  unreachable  statement	77	None	replace
1075	[BUG]  [BUGGY]  if(p  <  =  0.0  ||  p  >  1.0)  {  return  Float.MAX_VALUE;  double  m  =  getDomainUpperBound(p);  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  if(p  <  =  0.0  ||  p  >  1.0)  {  return  Float.MAX_VALUE;  double  m  =  getDomainUpperBound(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  =  0.0  ||  p  >  1.0)  {  return  Float.MAX_VALUE;  double  m  =  getDomainUpperBound(p);  }	  return    Float.MAX_VALUE;    double    m    =    getDomainUpperBound(p);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
1076	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.NaN  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p  ==  Double.MAX_VALUE?  Double.NaN  :  Double.MAX_VALUE;	  return    p    ==    Double.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	59	1	replace
1077	[BUG]  [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.NaN  :  Double.MAX_VALUE;  [FE]  IllegalArgumentException  [FE]                    IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.NaN  :  Double.MAX_VALUE;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  ==  Double.MAX_VALUE?  Double.NaN  :  Double.MAX_VALUE;	  return    p    ==    Double.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	59	1	replace
1078	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  <  =  0.0  ||  p  >  1.0)  {  return  denominatorDegreesOfFreedom  +  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  <  =  0.0  ||  p  >  1.0)  {  return  denominatorDegreesOfFreedom  +  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  <  =  0.0  ||  p  >  1.0)  {  return  denominatorDegreesOfFreedom  +	  return    Double.MIN_VALUE;    if(p    <    =    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Double.MIN_VALUE;    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    +    	non-compiled	[CE]  illegal  start  of  expression	214	None	replace
1079	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  <  =  0.0)  {  return  denominatorDegreesOfFreedom  +  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  <  =  0.0)  {  return  denominatorDegreesOfFreedom  +  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  <  =  0.0)  {  return  denominatorDegreesOfFreedom  +	  return    Double.MIN_VALUE;    if(p    <    =    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Double.MIN_VALUE;    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    +    	non-compiled	[CE]  illegal  start  of  expression	214	None	replace
1080	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  >  0.0)  {  return  denominatorDegreesOfFreedom  +  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      protected  double  getDomainUpperBound(double  p)  {      [BUGGY]  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  >  0.0)  {  return  denominatorDegreesOfFreedom  +  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom  >  0.0)  {  return  denominatorDegreesOfFreedom  +	  return    Double.MIN_VALUE;    if(p    <    =    0.0    ||    p    >    1.0)    {    double    denominatorDegreesOfFreedom    =    Double.MIN_VALUE;    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    +    	non-compiled	[CE]  illegal  start  of  expression	214	None	replace
