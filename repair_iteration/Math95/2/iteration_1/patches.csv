bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]      double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]      double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	        double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)	18	None	add
2	[BUG]  [BUGGY]      double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]      double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	        double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)	18	None	add
3	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]      double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	        double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  	compilable	  [FE]  IllegalArgumentException  	18	1	add
4	[BUG]  [BUGGY]      double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]      double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	        double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  	compilable	  [FE]  IllegalArgumentException  	18	1	add
5	[BUG]  [BUGGY]      double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  int  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)  [FE]          IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]      double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  int  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	        double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    int  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)	18	None	add
6	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]      double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	        double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());	  	compilable	  [FE]  IllegalArgumentException  	18	1	add
7	[BUG]  [BUGGY]      double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]      double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	        double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    Math.min(denominatorDegreesOfFreedom,  getNumeratorDegreesOfFreedom());	  	compilable	  [FE]  IllegalArgumentException  	18	1	add
8	[BUG]  [BUGGY]  Double  m  =  getDomainUpperBound(p  +  1);  [CE]  missing  return  statement  [FE]    StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  Double  m  =  getDomainUpperBound(p  +  1);  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  m  =  getDomainUpperBound(p  +  1);	      Double    m    =    getDomainUpperBound(p);    	non-compiled	[CE]  missing  return  statement	14	None	replace
9	[BUG]  [BUGGY]  Double  m  =  getDomainLowerBound(p);  [CE]  missing  return  statement  [FE]      StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  Double  m  =  getDomainLowerBound(p);  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  m  =  getDomainLowerBound(p);	      Double    m    =    getDomainUpperBound(p);    	non-compiled	[CE]  missing  return  statement	14	None	replace
10	[BUG]  [BUGGY]  Double  m  =  getDomainUpperBound(p)+  1;  [CE]  missing  return  statement  [FE]        StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  Double  m  =  getDomainUpperBound(p)+  1;  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  m  =  getDomainUpperBound(p)+  1;	      Double    m    =    getDomainUpperBound(p);    	non-compiled	[CE]  missing  return  statement	14	None	replace
11	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p  ==  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;	  return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	2	1	replace
12	[BUG]  [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  ==  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;	  return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	2	1	replace
13	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  >=  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p  >=  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;	  return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	2	1	replace
14	[BUG]  [BUGGY]  return  p  >=  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  >=  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  >=  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;	  return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	2	1	replace
15	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;	  return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	2	1	replace
16	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;	  return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	2	1	replace
17	[BUG]  [BUGGY]  return  Double.MAX_VALUE  |  Double.MAX_VALUE  /  2.0;  [CE]  bad  operand  types  for  binary  operator  '|'  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.MAX_VALUE  |  Double.MAX_VALUE  /  2.0;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MAX_VALUE  |  Double.MAX_VALUE  /  2.0;	  return    Double.MAX_VALUE    /    2.0;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '|'	33	None	replace
18	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.MAX_VALUE  +  2.0;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Double.MAX_VALUE  +  2.0;	  return    Double.MAX_VALUE    /    2.0;    	compilable	  [FE]  IllegalArgumentException  	33	1	replace
19	[BUG]  [BUGGY]  return  Double.MAX_VALUE  +  2.0;  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.MAX_VALUE  +  2.0;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MAX_VALUE  +  2.0;	  return    Double.MAX_VALUE    /    2.0;    	compilable	  [FE]  IllegalArgumentException  	33	1	replace
20	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.MAX_VALUE  *  2.0;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Double.MAX_VALUE  *  2.0;	  return    Double.MAX_VALUE    /    2.0;    	compilable	  [FE]  IllegalArgumentException  	33	1	replace
21	[BUG]  [BUGGY]  return  Double.MAX_VALUE  *  2.0;  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.MAX_VALUE  *  2.0;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MAX_VALUE  *  2.0;	  return    Double.MAX_VALUE    /    2.0;    	compilable	  [FE]  IllegalArgumentException  	33	1	replace
22	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  ==  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p  ==  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;	  return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	4	1	replace
23	[BUG]  [BUGGY]  return  p  ==  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  ==  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  ==  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;	  return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	4	1	replace
24	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  >=  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p  >=  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;	  return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	4	1	replace
25	[BUG]  [BUGGY]  return  p  >=  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  >=  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  >=  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;	  return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	4	1	replace
26	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;	  return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	4	1	replace
27	[BUG]  [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  >  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;	  return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	4	1	replace
28	[BUG]  [BUGGY]      double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]      double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	        double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)	9	None	add
29	[BUG]  [BUGGY]      double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  Double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]      double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  Double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	        double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    Double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)	9	None	add
30	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]      double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	        double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	  	compilable	  [FE]  IllegalArgumentException  	9	1	add
31	[BUG]  [BUGGY]      double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]      double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	        double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double  desnominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	  	compilable	  [FE]  IllegalArgumentException  	9	1	add
32	[BUG]  [BUGGY]      double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  int  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)  [FE]          IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]      double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  int  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	        double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    int  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)	9	None	add
33	[BUG]  [BUGGY]      double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom().doubleValue();  [CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)  [FE]            IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]      double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom().doubleValue();  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	        double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom().doubleValue();	  	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  is  already  defined  in  method  getDomainUpperBound(double)	9	None	add
34	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom();  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom();  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom();	      double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
35	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.MIN_VALUE  /  getDomainUpperBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Double.MIN_VALUE  /  getDomainUpperBound(p);	  return    Double.MAX_VALUE    /    getDomainUpperBound(p);    	compilable	  [FE]  StackOverflowError  	30	3	replace
36	[BUG]  [BUGGY]  return  Double.MIN_VALUE  /  getDomainUpperBound(p);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.MIN_VALUE  /  getDomainUpperBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MIN_VALUE  /  getDomainUpperBound(p);	  return    Double.MAX_VALUE    /    getDomainUpperBound(p);    	compilable	  [FE]  StackOverflowError  	30	3	replace
37	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.MAX_VALUE  *  getDomainUpperBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Double.MAX_VALUE  *  getDomainUpperBound(p);	  return    Double.MAX_VALUE    /    getDomainUpperBound(p);    	compilable	  [FE]  StackOverflowError  	30	3	replace
38	[BUG]  [BUGGY]  return  Double.MAX_VALUE  *  getDomainUpperBound(p);  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.MAX_VALUE  *  getDomainUpperBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MAX_VALUE  *  getDomainUpperBound(p);	  return    Double.MAX_VALUE    /    getDomainUpperBound(p);    	compilable	  [FE]  StackOverflowError  	30	3	replace
39	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p)+  1;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Double.MAX_VALUE  /  getDomainUpperBound(p)+  1;	  return    Double.MAX_VALUE    /    getDomainUpperBound(p);    	compilable	  [FE]  StackOverflowError  	30	3	replace
40	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p)+  1;  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p)+  1;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MAX_VALUE  /  getDomainUpperBound(p)+  1;	  return    Double.MAX_VALUE    /    getDomainUpperBound(p);    	compilable	  [FE]  StackOverflowError  	30	3	replace
41	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Float.MAX_VALUE  /  2.0;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Float.MAX_VALUE  /  2.0;	  return    Float.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	25	1	replace
42	[BUG]  [BUGGY]  return  Float.MAX_VALUE  /  2.0;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Float.MAX_VALUE  /  2.0;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Float.MAX_VALUE  /  2.0;	  return    Float.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	25	1	replace
43	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Float.MAX_VALUE  -  1;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Float.MAX_VALUE  -  1;	  return    Float.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	25	1	replace
44	[BUG]  [BUGGY]  return  Float.MAX_VALUE  -  1;  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Float.MAX_VALUE  -  1;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Float.MAX_VALUE  -  1;	  return    Float.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	25	1	replace
45	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;	  return    Double.MIN_VALUE;    	compilable	  [FE]  IllegalArgumentException  	21	3	replace
46	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;	  return    Double.MIN_VALUE;    	compilable	  [FE]  IllegalArgumentException  	21	3	replace
47	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;	  return    Double.MIN_VALUE;    	compilable	  [FE]  IllegalArgumentException  	21	3	replace
48	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NEGATIVE_INFINITY;	  return    Double.MIN_VALUE;    	compilable	  [FE]  IllegalArgumentException  	21	3	replace
49	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN;	  return    Double.MIN_VALUE;    	compilable	  [FE]  IllegalArgumentException  	21	3	replace
50	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN;  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.NaN;	  return    Double.MIN_VALUE;    	compilable	  [FE]  IllegalArgumentException  	21	3	replace
51	[BUG]  [BUGGY]  m.getDomainUpperBound(p);  [CE]  cannot  find  symbol  m  [FE]                IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  m.getDomainUpperBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	m.getDomainUpperBound(p);	      	non-compiled	[CE]  cannot  find  symbol  m	8	None	replace
52	[BUG]  [BUGGY]  double  n  =  getDomainUpperBound(p);  [CE]  missing  return  statement  [FE]                  IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  double  n  =  getDomainUpperBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  n  =  getDomainUpperBound(p);	      	non-compiled	[CE]  missing  return  statement	8	None	replace
53	[BUG]  [BUGGY]  m.getDomainUpperBound();  [CE]  cannot  find  symbol  m  [FE]                    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  m.getDomainUpperBound();  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	m.getDomainUpperBound();	      	non-compiled	[CE]  cannot  find  symbol  m	8	None	replace
54	[BUG]  [BUGGY]      double  m  =  getDomainUpperBound(p);  double  m  =  getDomainUpperBound(p);  [CE]  variable  m  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]      double  m  =  getDomainUpperBound(p);  double  m  =  getDomainUpperBound(p);  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	        double    m    =    getDomainUpperBound(p);    double  m  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  m  is  already  defined  in  method  getDomainUpperBound(double)	11	None	add
55	[BUG]  [BUGGY]      double  m  =  getDomainUpperBound(p);  double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]      double  m  =  getDomainUpperBound(p);  double  p  =  getDomainUpperBound(p);  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	        double    m    =    getDomainUpperBound(p);    double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	11	None	add
56	[BUG]  [BUGGY]      double  m  =  getDomainUpperBound(p);  Double  m  =  getDomainUpperBound(p);  [CE]  variable  m  is  already  defined  in  method  getDomainUpperBound(double)  [FE]        StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]      double  m  =  getDomainUpperBound(p);  Double  m  =  getDomainUpperBound(p);  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	        double    m    =    getDomainUpperBound(p);    Double  m  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  m  is  already  defined  in  method  getDomainUpperBound(double)	11	None	add
57	[BUG]  [BUGGY]      double  m  =  getDomainUpperBound(p);  Double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]          StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]      double  m  =  getDomainUpperBound(p);  Double  p  =  getDomainUpperBound(p);  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	        double    m    =    getDomainUpperBound(p);    Double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	11	None	add
58	[BUG]  [BUGGY]  return  p  <  Double.MAX_VALUE;  [CE]  incompatible  types  [FE]              IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  <  Double.MAX_VALUE;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  <  Double.MAX_VALUE;	  return    p    >    Double.MAX_VALUE;    	non-compiled	[CE]  incompatible  types	7	None	replace
59	[BUG]  [BUGGY]  return  p  ==  Double.MAX_VALUE;  [CE]  incompatible  types  [FE]                IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  ==  Double.MAX_VALUE;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  ==  Double.MAX_VALUE;	  return    p    >    Double.MAX_VALUE;    	non-compiled	[CE]  incompatible  types	7	None	replace
60	[BUG]  [BUGGY]  return  p  >  Double.MAX_VALUE  &&  p  <  =  Double.MIN_VALUE;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  >  Double.MAX_VALUE  &&  p  <  =  Double.MIN_VALUE;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  >  Double.MAX_VALUE  &&  p  <  =  Double.MIN_VALUE;	  return    p    >    Double.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
61	[BUG]  [BUGGY]  return  p  >=  Double.MAX_VALUE;  [CE]  incompatible  types  [FE]                    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  >=  Double.MAX_VALUE;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  >=  Double.MAX_VALUE;	  return    p    >    Double.MAX_VALUE;    	non-compiled	[CE]  incompatible  types	7	None	replace
62	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  m);  [CE]  cannot  find  symbol  m  [FE]              IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  m);  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  m);	      double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p);    	non-compiled	[CE]  cannot  find  symbol  m	15	None	replace
63	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(m,  p);  [CE]  cannot  find  symbol  m  [FE]                IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(m,  p);  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(m,  p);	      double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p);    	non-compiled	[CE]  cannot  find  symbol  m	15	None	replace
64	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  numeratorDegreesOfFreedom);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  numeratorDegreesOfFreedom);  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  numeratorDegreesOfFreedom);	      double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	15	None	replace
65	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  n);  [CE]  cannot  find  symbol  n  [FE]                    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  n);  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  n);	      double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p);    	non-compiled	[CE]  cannot  find  symbol  n	15	None	replace
66	[BUG]  [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  p  <  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  [CE]  >  expected  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  p  <  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    p  <  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;	  	non-compiled	[CE]  >  expected	5	None	add
67	[BUG]  [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [CE]  >  expected  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;	  	non-compiled	[CE]  >  expected	5	None	add
68	[BUG]  [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  p  <  Double.MIN_VALUE  :  Double.MAX_VALUE;  [CE]  >  expected  [FE]        IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  p  <  Double.MIN_VALUE  :  Double.MAX_VALUE;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    p  <  Double.MIN_VALUE  :  Double.MAX_VALUE;	  	non-compiled	[CE]  >  expected	5	None	add
69	[BUG]  [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]          IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  double  p  =  getDomainUpperBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	5	None	add
70	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p  ==  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;	  return    p    <    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	6	1	replace
71	[BUG]  [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  ==  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  ==  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;	  return    p    <    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	6	1	replace
72	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  >=  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p  >=  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;	  return    p    <    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	6	1	replace
73	[BUG]  [BUGGY]  return  p  >=  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  >=  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  >=  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;	  return    p    <    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	6	1	replace
74	[BUG]  [BUGGY]  return  Float.MAX_VALUE;  Float.MAX_VALUE;  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Float.MAX_VALUE;  Float.MAX_VALUE;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MAX_VALUE;    Float.MAX_VALUE;	  	non-compiled	[CE]  not  a  statement	24	None	add
75	[BUG]  [BUGGY]  return  Float.MAX_VALUE;  Double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Float.MAX_VALUE;  Double  p  =  getDomainUpperBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MAX_VALUE;    Double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	24	None	add
76	[BUG]  [BUGGY]  return  Float.MAX_VALUE;  Double  m  =  getDomainUpperBound(p);  [CE]  unreachable  statement  [FE]        IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Float.MAX_VALUE;  Double  m  =  getDomainUpperBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MAX_VALUE;    Double  m  =  getDomainUpperBound(p);	  	non-compiled	[CE]  unreachable  statement	24	None	add
77	[BUG]  [BUGGY]  return  Float.MAX_VALUE;  double  m  =  getDomainUpperBound(p);  [CE]  unreachable  statement  [FE]          IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Float.MAX_VALUE;  double  m  =  getDomainUpperBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MAX_VALUE;    double  m  =  getDomainUpperBound(p);	  	non-compiled	[CE]  unreachable  statement	24	None	add
78	[BUG]  [BUGGY]  return  Float.MAX_VALUE;  Double  p  =  getDomainUpperBound();  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]            IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Float.MAX_VALUE;  Double  p  =  getDomainUpperBound();  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MAX_VALUE;    Double  p  =  getDomainUpperBound();	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	24	None	add
79	[BUG]  [BUGGY]  return  getDomainUpperBound(p);  double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  getDomainUpperBound(p);  double  p  =  getDomainUpperBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    getDomainUpperBound(p);    double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	22	None	add
80	[BUG]  [BUGGY]  return  getDomainUpperBound(p);  getDomainUpperBound(p);  [CE]  unreachable  statement  [FE]      StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  getDomainUpperBound(p);  getDomainUpperBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    getDomainUpperBound(p);    getDomainUpperBound(p);	  	non-compiled	[CE]  unreachable  statement	22	None	add
81	[BUG]  [BUGGY]  return  getDomainUpperBound(p);  Double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]        StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  getDomainUpperBound(p);  Double  p  =  getDomainUpperBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    getDomainUpperBound(p);    Double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	22	None	add
82	[BUG]  [BUGGY]  return  getDomainUpperBound(p);  p  =  getDomainUpperBound(p);  [CE]  unreachable  statement  [FE]          StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  getDomainUpperBound(p);  p  =  getDomainUpperBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    getDomainUpperBound(p);    p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  unreachable  statement	22	None	add
83	[BUG]  [BUGGY]  return  getDomainUpperBound(p);  double  p  =  getDomainUpperBound(p).doubleValue();  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]            StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  getDomainUpperBound(p);  double  p  =  getDomainUpperBound(p).doubleValue();  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    getDomainUpperBound(p);    double  p  =  getDomainUpperBound(p).doubleValue();	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	22	None	add
84	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(),  p.doubleValue();  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(),  p.doubleValue();  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(),  p.doubleValue();	      double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom().doubleValue();    	non-compiled	[CE]  ';'  expected	28	None	replace
85	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  /.doubleValue();  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  /.doubleValue();  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  /.doubleValue();	      double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom().doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
86	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom().doubleValue()  +  1;  [CE]  double  cannot  be  dereferenced  [FE]            IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom().doubleValue()  +  1;  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom().doubleValue()  +  1;	      double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom().doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	28	None	replace
87	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Float.MIN_VALUE  -  1;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Float.MIN_VALUE  -  1;	  return    Float.MIN_VALUE;    	compilable	  [FE]  IllegalArgumentException  	27	3	replace
88	[BUG]  [BUGGY]  return  Float.MIN_VALUE  -  1;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Float.MIN_VALUE  -  1;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Float.MIN_VALUE  -  1;	  return    Float.MIN_VALUE;    	compilable	  [FE]  IllegalArgumentException  	27	3	replace
89	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Float.MIN_VALUE  /  2.0;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Float.MIN_VALUE  /  2.0;	  return    Float.MIN_VALUE;    	compilable	  [FE]  IllegalArgumentException  	27	3	replace
90	[BUG]  [BUGGY]  return  Float.MIN_VALUE  /  2.0;  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Float.MIN_VALUE  /  2.0;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Float.MIN_VALUE  /  2.0;	  return    Float.MIN_VALUE;    	compilable	  [FE]  IllegalArgumentException  	27	3	replace
91	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  m);  [CE]  cannot  find  symbol  m  [FE]        IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  m);  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  m);	      double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p);    	non-compiled	[CE]  cannot  find  symbol  m	17	None	replace
92	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(m,  p);  [CE]  cannot  find  symbol  m  [FE]          IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(m,  p);  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(m,  p);	      double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p);    	non-compiled	[CE]  cannot  find  symbol  m	17	None	replace
93	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  numeratorDegreesOfFreedom);  [CE]  method  getNumeratorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]            IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  numeratorDegreesOfFreedom);  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  numeratorDegreesOfFreedom);	      double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p);    	non-compiled	[CE]  method  getNumeratorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	17	None	replace
94	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  x);  [CE]  cannot  find  symbol  x  [FE]              IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  x);  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  x);	      double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p);    	non-compiled	[CE]  cannot  find  symbol  x	17	None	replace
95	[BUG]  [BUGGY]      Double  m  =  getDomainUpperBound(p);  Double  m  =  getDomainUpperBound(p);  [CE]  variable  m  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]      Double  m  =  getDomainUpperBound(p);  Double  m  =  getDomainUpperBound(p);  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	        Double    m    =    getDomainUpperBound(p);    Double  m  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  m  is  already  defined  in  method  getDomainUpperBound(double)	13	None	add
96	[BUG]  [BUGGY]      Double  m  =  getDomainUpperBound(p);  Double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]      Double  m  =  getDomainUpperBound(p);  Double  p  =  getDomainUpperBound(p);  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	        Double    m    =    getDomainUpperBound(p);    Double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	13	None	add
97	[BUG]  [BUGGY]      Double  m  =  getDomainUpperBound(p);  double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]        StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]      Double  m  =  getDomainUpperBound(p);  double  p  =  getDomainUpperBound(p);  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	        Double    m    =    getDomainUpperBound(p);    double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	13	None	add
98	[BUG]  [BUGGY]      Double  m  =  getDomainUpperBound(p);  double  m  =  getDomainUpperBound(p);  [CE]  variable  m  is  already  defined  in  method  getDomainUpperBound(double)  [FE]          StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]      Double  m  =  getDomainUpperBound(p);  double  m  =  getDomainUpperBound(p);  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	        Double    m    =    getDomainUpperBound(p);    double  m  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  m  is  already  defined  in  method  getDomainUpperBound(double)	13	None	add
99	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]      Double  m  =  getDomainUpperBound(p);  Double  d  =  getDomainUpperBound(p);  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	        Double    m    =    getDomainUpperBound(p);    Double  d  =  getDomainUpperBound(p);	  	compilable	  [FE]  StackOverflowError  	13	3	add
100	[BUG]  [BUGGY]      Double  m  =  getDomainUpperBound(p);  Double  d  =  getDomainUpperBound(p);  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]      Double  m  =  getDomainUpperBound(p);  Double  d  =  getDomainUpperBound(p);  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	        Double    m    =    getDomainUpperBound(p);    Double  d  =  getDomainUpperBound(p);	  	compilable	  [FE]  StackOverflowError  	13	3	add
101	[BUG]  [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [CE]  >  expected  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;	  	non-compiled	[CE]  >  expected	1	None	add
102	[BUG]  [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE);  [CE]  >  expected  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE);	  	non-compiled	[CE]  >  expected	1	None	add
103	[BUG]  [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]        IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  double  p  =  getDomainUpperBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	1	None	add
104	[BUG]  [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  [CE]  >  expected  [FE]          IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;	  	non-compiled	[CE]  >  expected	1	None	add
105	[BUG]  [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  Double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]            IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  Double  p  =  getDomainUpperBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    Double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	1	None	add
106	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getMeanorDegreesOfFreedom();  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getMeanorDegreesOfFreedom();  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getMeanorDegreesOfFreedom();	      double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
107	[BUG]  [BUGGY]  return  Double.MIN_VALUE;  Double.MIN_VALUE;  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.MIN_VALUE;  Double.MIN_VALUE;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MIN_VALUE;    Double.MIN_VALUE;	  	non-compiled	[CE]  not  a  statement	20	None	add
108	[BUG]  [BUGGY]  return  Double.MIN_VALUE;  double  m  =  getDomainUpperBound(p);  [CE]  unreachable  statement  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.MIN_VALUE;  double  m  =  getDomainUpperBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MIN_VALUE;    double  m  =  getDomainUpperBound(p);	  	non-compiled	[CE]  unreachable  statement	20	None	add
109	[BUG]  [BUGGY]  return  Double.MIN_VALUE;  double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]        IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.MIN_VALUE;  double  p  =  getDomainUpperBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MIN_VALUE;    double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	20	None	add
110	[BUG]  [BUGGY]  return  Double.MIN_VALUE;  double  m  =  getDomainUpperBound();  [CE]  no  suitable  method  found  for  getDomainUpperBound()  [FE]          IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.MIN_VALUE;  double  m  =  getDomainUpperBound();  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MIN_VALUE;    double  m  =  getDomainUpperBound();	  	non-compiled	[CE]  no  suitable  method  found  for  getDomainUpperBound()	20	None	add
111	[BUG]  [BUGGY]  return  Double.MIN_VALUE;  double  p  =  getDomainUpperBound();  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]            IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.MIN_VALUE;  double  p  =  getDomainUpperBound();  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MIN_VALUE;    double  p  =  getDomainUpperBound();	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	20	None	add
112	[BUG]  [BUGGY]  return  Double.MAX_VALUE  *  getDomainUpperBound();  [CE]  no  suitable  method  found  for  getDomainUpperBound()  [FE]          IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.MAX_VALUE  *  getDomainUpperBound();  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MAX_VALUE  *  getDomainUpperBound();	  return    Double.MAX_VALUE    /    getDomainUpperBound();    	non-compiled	[CE]  no  suitable  method  found  for  getDomainUpperBound()	31	None	replace
113	[BUG]  [BUGGY]  return  Double.MIN_VALUE  /  getDomainUpperBound();  [CE]  no  suitable  method  found  for  getDomainUpperBound()  [FE]            IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.MIN_VALUE  /  getDomainUpperBound();  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MIN_VALUE  /  getDomainUpperBound();	  return    Double.MAX_VALUE    /    getDomainUpperBound();    	non-compiled	[CE]  no  suitable  method  found  for  getDomainUpperBound()	31	None	replace
114	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  2.0;  Double.MAX_VALUE  /  2.0;  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.MAX_VALUE  /  2.0;  Double.MAX_VALUE  /  2.0;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    /    2.0;    Double.MAX_VALUE  /  2.0;	  	non-compiled	[CE]  not  a  statement	32	None	add
115	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  2.0;  double  p  =  Double.MAX_VALUE  /  2.0;  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.MAX_VALUE  /  2.0;  double  p  =  Double.MAX_VALUE  /  2.0;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    /    2.0;    double  p  =  Double.MAX_VALUE  /  2.0;	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	32	None	add
116	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  2.0;  double  m  =  getDomainUpperBound(p);  [CE]  unreachable  statement  [FE]        IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.MAX_VALUE  /  2.0;  double  m  =  getDomainUpperBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    /    2.0;    double  m  =  getDomainUpperBound(p);	  	non-compiled	[CE]  unreachable  statement	32	None	add
117	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  2.0;  double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]          IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.MAX_VALUE  /  2.0;  double  p  =  getDomainUpperBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    /    2.0;    double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	32	None	add
118	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  2.0;  double  p  =  getDomainUpperBound();  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]            IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.MAX_VALUE  /  2.0;  double  p  =  getDomainUpperBound();  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    /    2.0;    double  p  =  getDomainUpperBound();	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	32	None	add
119	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p);  Double.MAX_VALUE  /  getDomainUpperBound(p);  [CE]  not  a  statement  [FE]    StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p);  Double.MAX_VALUE  /  getDomainUpperBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    /    getDomainUpperBound(p);    Double.MAX_VALUE  /  getDomainUpperBound(p);	  	non-compiled	[CE]  not  a  statement	29	None	add
120	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p);  double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p);  double  p  =  getDomainUpperBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    /    getDomainUpperBound(p);    double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	29	None	add
121	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p);  Double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]        StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p);  Double  p  =  getDomainUpperBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    /    getDomainUpperBound(p);    Double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	29	None	add
122	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p);  double  m  =  getDomainUpperBound(p);  [CE]  unreachable  statement  [FE]          StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p);  double  m  =  getDomainUpperBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    /    getDomainUpperBound(p);    double  m  =  getDomainUpperBound(p);	  	non-compiled	[CE]  unreachable  statement	29	None	add
123	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p);  p  =  getDomainUpperBound(p);  [CE]  unreachable  statement  [FE]            StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p);  p  =  getDomainUpperBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    /    getDomainUpperBound(p);    p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  unreachable  statement	29	None	add
124	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  numeratorDegreesOfFreedom);  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  numeratorDegreesOfFreedom);  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  numeratorDegreesOfFreedom);	      double    denominatorDegreesOfFreedom    =    getDestinatorDegreesOfFreedom(p);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
125	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  m);  [CE]  cannot  find  symbol  m  [FE]                  IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  m);  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  m);	      double    denominatorDegreesOfFreedom    =    getDestinatorDegreesOfFreedom(p);    	non-compiled	[CE]  cannot  find  symbol  m	16	None	replace
126	[BUG]  [BUGGY]  double  m  =  getDenominatorDegreesOfFreedom(p);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]    StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  double  m  =  getDenominatorDegreesOfFreedom(p);  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  m  =  getDenominatorDegreesOfFreedom(p);	      double    m    =    getDomainUpperBound(p);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	12	None	replace
127	[BUG]  [BUGGY]  double  m  =  getDomainUpperBound(p  +  1);  [CE]  missing  return  statement  [FE]      StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  double  m  =  getDomainUpperBound(p  +  1);  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  m  =  getDomainUpperBound(p  +  1);	      double    m    =    getDomainUpperBound(p);    	non-compiled	[CE]  missing  return  statement	12	None	replace
128	[BUG]  [BUGGY]  double  m  =  getDomainUpperBound(p)-  1;  [CE]  missing  return  statement  [FE]        StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  double  m  =  getDomainUpperBound(p)-  1;  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  m  =  getDomainUpperBound(p)-  1;	      double    m    =    getDomainUpperBound(p);    	non-compiled	[CE]  missing  return  statement	12	None	replace
129	[BUG]  [BUGGY]  return  Float.MIN_VALUE;  Float.MIN_VALUE;  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Float.MIN_VALUE;  Float.MIN_VALUE;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MIN_VALUE;    Float.MIN_VALUE;	  	non-compiled	[CE]  not  a  statement	26	None	add
130	[BUG]  [BUGGY]  return  Float.MIN_VALUE;  Double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Float.MIN_VALUE;  Double  p  =  getDomainUpperBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MIN_VALUE;    Double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	26	None	add
131	[BUG]  [BUGGY]  return  Float.MIN_VALUE;  Double  m  =  getDomainUpperBound(p);  [CE]  unreachable  statement  [FE]        IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Float.MIN_VALUE;  Double  m  =  getDomainUpperBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MIN_VALUE;    Double  m  =  getDomainUpperBound(p);	  	non-compiled	[CE]  unreachable  statement	26	None	add
132	[BUG]  [BUGGY]  return  Float.MIN_VALUE;  Double  p  =  getDomainUpperBound();  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]          IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Float.MIN_VALUE;  Double  p  =  getDomainUpperBound();  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MIN_VALUE;    Double  p  =  getDomainUpperBound();	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	26	None	add
133	[BUG]  [BUGGY]  return  Float.MIN_VALUE;  Double  p  =  getDomainUpper(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]            IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Float.MIN_VALUE;  Double  p  =  getDomainUpper(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MIN_VALUE;    Double  p  =  getDomainUpper(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	26	None	add
134	[BUG]  [BUGGY]  return  getDenominatorDegreesOfFreedom(p);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]    StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  getDenominatorDegreesOfFreedom(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  getDenominatorDegreesOfFreedom(p);	  return    getDomainUpperBound(p);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	23	None	replace
135	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  getDomainUpperBound(p  +  1);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  getDomainUpperBound(p  +  1);	  return    getDomainUpperBound(p);    	compilable	  [FE]  StackOverflowError  	23	3	replace
136	[BUG]  [BUGGY]  return  getDomainUpperBound(p  +  1);  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  getDomainUpperBound(p  +  1);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  getDomainUpperBound(p  +  1);	  return    getDomainUpperBound(p);    	compilable	  [FE]  StackOverflowError  	23	3	replace
137	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  getDomainUpperBound(p  -  1);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  getDomainUpperBound(p  -  1);	  return    getDomainUpperBound(p);    	compilable	  [FE]  StackOverflowError  	23	3	replace
138	[BUG]  [BUGGY]  return  getDomainUpperBound(p  -  1);  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  getDomainUpperBound(p  -  1);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  getDomainUpperBound(p  -  1);	  return    getDomainUpperBound(p);    	compilable	  [FE]  StackOverflowError  	23	3	replace
139	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [CE]  >  expected  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;	  	non-compiled	[CE]  >  expected	3	None	add
140	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  double  p  =  getDomainUpperBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	3	None	add
141	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  Double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]        IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  Double  p  =  getDomainUpperBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    Double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	3	None	add
142	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  double  p  =  getDomainUpperBound();  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]          IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  double  p  =  getDomainUpperBound();  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    double  p  =  getDomainUpperBound();	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	3	None	add
143	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE);  [CE]  >  expected  [FE]            IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE);	  	non-compiled	[CE]  >  expected	3	None	add
144	[BUG]  [BUGGY]  Double  m  =  getDenominatorDegreesOfFreedom(p);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]    StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  Double  m  =  getDenominatorDegreesOfFreedom(p);  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  m  =  getDenominatorDegreesOfFreedom(p);	      Double    m    =    getDomainUpperBound(p);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	14	None	replace
145	[BUG]  [BUGGY]  Double  m  =  getDomainUpperBound(p,  denominatorDegreesOfFreedom);  [CE]  no  suitable  method  found  for  getDomainUpperBound(double,double)  [FE]      StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  Double  m  =  getDomainUpperBound(p,  denominatorDegreesOfFreedom);  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	Double  m  =  getDomainUpperBound(p,  denominatorDegreesOfFreedom);	      Double    m    =    getDomainUpperBound(p);    	non-compiled	[CE]  no  suitable  method  found  for  getDomainUpperBound(double,double)	14	None	replace
146	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.MIN_VALUE  /  2.0;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Double.MIN_VALUE  /  2.0;	  return    Double.MAX_VALUE    /    2.0;    	compilable	  [FE]  IllegalArgumentException  	33	3	replace
147	[BUG]  [BUGGY]  return  Double.MIN_VALUE  /  2.0;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.MIN_VALUE  /  2.0;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MIN_VALUE  /  2.0;	  return    Double.MAX_VALUE    /    2.0;    	compilable	  [FE]  IllegalArgumentException  	33	3	replace
148	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Float.MIN_VALUE  /  2;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Float.MIN_VALUE  /  2;	  return    Float.MIN_VALUE;    	compilable	  [FE]  IllegalArgumentException  	27	3	replace
149	[BUG]  [BUGGY]  return  Float.MIN_VALUE  /  2;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Float.MIN_VALUE  /  2;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Float.MIN_VALUE  /  2;	  return    Float.MIN_VALUE;    	compilable	  [FE]  IllegalArgumentException  	27	3	replace
150	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p!=  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p!=  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;	  return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	2	1	replace
151	[BUG]  [BUGGY]  return  p!=  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p!=  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p!=  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;	  return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	2	1	replace
152	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;	  return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	2	1	replace
153	[BUG]  [BUGGY]  return  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  >  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;	  return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	2	1	replace
154	[BUG]  [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  Double  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  Double  p  =  getDomainUpperBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    Double  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	5	None	add
155	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]      Double  m  =  getDomainUpperBound(p);  m  =  getDomainUpperBound(p);  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	        Double    m    =    getDomainUpperBound(p);    m  =  getDomainUpperBound(p);	  	compilable	  [FE]  StackOverflowError  	13	3	add
156	[BUG]  [BUGGY]      Double  m  =  getDomainUpperBound(p);  m  =  getDomainUpperBound(p);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]      Double  m  =  getDomainUpperBound(p);  m  =  getDomainUpperBound(p);  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	        Double    m    =    getDomainUpperBound(p);    m  =  getDomainUpperBound(p);	  	compilable	  [FE]  StackOverflowError  	13	3	add
157	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;	  return    Double.MIN_VALUE;    	compilable	  [FE]  IllegalArgumentException  	21	1	replace
158	[BUG]  [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;	  return    Double.MIN_VALUE;    	compilable	  [FE]  IllegalArgumentException  	21	1	replace
159	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;	  return    Double.MIN_VALUE;    	compilable	  [FE]  IllegalArgumentException  	21	1	replace
160	[BUG]  [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  >  Double.MIN_VALUE?  Double.POSITIVE_INFINITY  :  Double.MIN_VALUE;	  return    Double.MIN_VALUE;    	compilable	  [FE]  IllegalArgumentException  	21	1	replace
161	[BUG]  [BUGGY]  double  m  =  getDomainLowerBound(p);  [CE]  missing  return  statement  [FE]    StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  double  m  =  getDomainLowerBound(p);  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  m  =  getDomainLowerBound(p);	      double    m    =    getDomainUpperBound(p);    	non-compiled	[CE]  missing  return  statement	12	None	replace
162	[BUG]  [BUGGY]  if(p  <  =  0)  {  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom  ==  null)  {  return  denominatorDegreesOfFreedom  +  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  if(p  <  =  0)  {  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom  ==  null)  {  return  denominatorDegreesOfFreedom  +  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  =  0)  {  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom  ==  null)  {  return  denominatorDegreesOfFreedom  +	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
163	[BUG]  [BUGGY]  if(p  <  =  0)  {  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  if(p  <  =  0)  {  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  =  0)  {  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
164	[BUG]  [BUGGY]  if(p  <  =  0)  {  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  p;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  if(p  <  =  0)  {  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  p;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	if(p  <  =  0)  {  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  p;  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
165	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  denominatorDegreesOfFreedom);  [CE]  method  getNumeratorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]        IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  denominatorDegreesOfFreedom);  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  denominatorDegreesOfFreedom);	      double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p);    	non-compiled	[CE]  method  getNumeratorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	17	None	replace
166	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  d);  [CE]  cannot  find  symbol  d  [FE]          IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  d);  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(p,  d);	      double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom(p);    	non-compiled	[CE]  cannot  find  symbol  d	17	None	replace
167	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  2.0;  IllegalArgumentException  x  =  getDomainUpperBound(p);  [CE]  incompatible  types  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.MAX_VALUE  /  2.0;  IllegalArgumentException  x  =  getDomainUpperBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    /    2.0;    IllegalArgumentException  x  =  getDomainUpperBound(p);	  	non-compiled	[CE]  incompatible  types	32	None	add
168	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  2.0;  IllegalArgumentException  x  =  getDomainUpperBounds(p);  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.MAX_VALUE  /  2.0;  IllegalArgumentException  x  =  getDomainUpperBounds(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    /    2.0;    IllegalArgumentException  x  =  getDomainUpperBounds(p);	  	non-compiled	[CE]  cannot  find  symbol	32	None	add
169	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p);  Double.MAX_VALUE  =  getDomainUpperBound(p);  [CE]  cannot  assign  a  value  to  final  variable  MAX_VALUE  [FE]    StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p);  Double.MAX_VALUE  =  getDomainUpperBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    /    getDomainUpperBound(p);    Double.MAX_VALUE  =  getDomainUpperBound(p);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  MAX_VALUE	29	None	add
170	[BUG]  [BUGGY]  return  Float.MIN_VALUE;  float  p  =  getDomainUpperBound(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Float.MIN_VALUE;  float  p  =  getDomainUpperBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MIN_VALUE;    float  p  =  getDomainUpperBound(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	26	None	add
171	[BUG]  [BUGGY]  return  Float.MIN_VALUE;  IllegalArgumentException  x  =  getDomainUpperBound(p);  [CE]  incompatible  types  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Float.MIN_VALUE;  IllegalArgumentException  x  =  getDomainUpperBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MIN_VALUE;    IllegalArgumentException  x  =  getDomainUpperBound(p);	  	non-compiled	[CE]  incompatible  types	26	None	add
172	[BUG]  [BUGGY]  return  Float.MIN_VALUE;  IllegalArgumentException  x  =  getDomainUpperBound();  [CE]  no  suitable  method  found  for  getDomainUpperBound()  [FE]        IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Float.MIN_VALUE;  IllegalArgumentException  x  =  getDomainUpperBound();  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MIN_VALUE;    IllegalArgumentException  x  =  getDomainUpperBound();	  	non-compiled	[CE]  no  suitable  method  found  for  getDomainUpperBound()	26	None	add
173	[BUG]  [BUGGY]  return  getDomainUpperBound(p);  return  getDomainUpperBound(p);  [CE]  unreachable  statement  [FE]    StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  getDomainUpperBound(p);  return  getDomainUpperBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    getDomainUpperBound(p);    return  getDomainUpperBound(p);	  	non-compiled	[CE]  unreachable  statement	22	None	add
174	[BUG]  [BUGGY]  return  getDomainUpperBound(p);  if(p  >  0.0)  {  if(p  <  0.0)  {  return  getDomainUpperBound(p);  }  [CE]  illegal  start  of  expression  [FE]      StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  getDomainUpperBound(p);  if(p  >  0.0)  {  if(p  <  0.0)  {  return  getDomainUpperBound(p);  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    getDomainUpperBound(p);    if(p  >  0.0)  {  if(p  <  0.0)  {  return  getDomainUpperBound(p);  }	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
175	[BUG]  [BUGGY]  return  getDomainUpperBound(p);  if(p  >  0)  {  if(p  <  0)  {  return  getDomainUpperBound(p);  }  [CE]  illegal  start  of  expression  [FE]        StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  getDomainUpperBound(p);  if(p  >  0)  {  if(p  <  0)  {  return  getDomainUpperBound(p);  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    getDomainUpperBound(p);    if(p  >  0)  {  if(p  <  0)  {  return  getDomainUpperBound(p);  }	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
176	[BUG]  [BUGGY]      double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  NumeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  cannot  find  symbol  NumeratorDegreesOfFreedom  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]      double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  NumeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	        double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    NumeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  cannot  find  symbol  NumeratorDegreesOfFreedom	18	None	add
177	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]      double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  p  =  getNumeratorDegreesOfFreedom();  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	        double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    p  =  getNumeratorDegreesOfFreedom();	  	compilable	  [FE]  IllegalArgumentException  	18	1	add
178	[BUG]  [BUGGY]      double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  p  =  getNumeratorDegreesOfFreedom();  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]      double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  p  =  getNumeratorDegreesOfFreedom();  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	        double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    p  =  getNumeratorDegreesOfFreedom();	  	compilable	  [FE]  IllegalArgumentException  	18	1	add
179	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Float.MAX_VALUE  /(float)p;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Float.MAX_VALUE  /(float)p;	  return    Float.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	25	1	replace
180	[BUG]  [BUGGY]  return  Float.MAX_VALUE  /(float)p;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Float.MAX_VALUE  /(float)p;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Float.MAX_VALUE  /(float)p;	  return    Float.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	25	1	replace
181	[BUG]  [BUGGY]  return  Double.MIN_VALUE;  IllegalArgumentException  x  =  getDomainUpperBound(p);  [CE]  incompatible  types  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.MIN_VALUE;  IllegalArgumentException  x  =  getDomainUpperBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MIN_VALUE;    IllegalArgumentException  x  =  getDomainUpperBound(p);	  	non-compiled	[CE]  incompatible  types	20	None	add
182	[BUG]  [BUGGY]  return  Double.MIN_VALUE;  IllegalArgumentException.printStackTrace();  [CE]  non-static  method  printStackTrace()  cannot  be  referenced  from  a  static  context  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.MIN_VALUE;  IllegalArgumentException.printStackTrace();  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MIN_VALUE;    IllegalArgumentException.printStackTrace();	  	non-compiled	[CE]  non-static  method  printStackTrace()  cannot  be  referenced  from  a  static  context	20	None	add
183	[BUG]  [BUGGY]  return  Double.MIN_VALUE;  IllegalArgumentException  x  =  getDomainUpperBounds(p);  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.MIN_VALUE;  IllegalArgumentException  x  =  getDomainUpperBounds(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MIN_VALUE;    IllegalArgumentException  x  =  getDomainUpperBounds(p);	  	non-compiled	[CE]  cannot  find  symbol	20	None	add
184	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.MAX_VALUE  /  getDomainLowerBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Double.MAX_VALUE  /  getDomainLowerBound(p);	  return    Double.MAX_VALUE    /    getDomainUpperBound(p);    	compilable	  [FE]  IllegalArgumentException  	30	1	replace
185	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  getDomainLowerBound(p);  [FE]  IllegalArgumentException  [FE]    StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.MAX_VALUE  /  getDomainLowerBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MAX_VALUE  /  getDomainLowerBound(p);	  return    Double.MAX_VALUE    /    getDomainUpperBound(p);    	compilable	  [FE]  IllegalArgumentException  	30	1	replace
186	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  -  p.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]        IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  -  p.doubleValue();  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  -  p.doubleValue();	      double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom().doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	28	None	replace
187	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  +  p.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]          IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  +  p.doubleValue();  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom()  +  p.doubleValue();	      double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom().doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	28	None	replace
188	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  getDomainLowerBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  getDomainLowerBound(p);	  return    getDomainUpperBound(p);    	compilable	  [FE]  IllegalArgumentException  	23	3	replace
189	[BUG]  [BUGGY]  return  getDomainLowerBound(p);  [FE]  IllegalArgumentException  [FE]    StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  getDomainLowerBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  getDomainLowerBound(p);	  return    getDomainUpperBound(p);    	compilable	  [FE]  IllegalArgumentException  	23	3	replace
190	[BUG]  [BUGGY]  return  Float.MAX_VALUE;  Float.MAX_VALUE  =  Float.MAX_VALUE;  [CE]  cannot  assign  a  value  to  final  variable  MAX_VALUE  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Float.MAX_VALUE;  Float.MAX_VALUE  =  Float.MAX_VALUE;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MAX_VALUE;    Float.MAX_VALUE  =  Float.MAX_VALUE;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  MAX_VALUE	24	None	add
191	[BUG]  [BUGGY]  return  Float.MAX_VALUE;  IllegalArgumentException  x  =  getDomainUpperBound(p);  [CE]  incompatible  types  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Float.MAX_VALUE;  IllegalArgumentException  x  =  getDomainUpperBound(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MAX_VALUE;    IllegalArgumentException  x  =  getDomainUpperBound(p);	  	non-compiled	[CE]  incompatible  types	24	None	add
192	[BUG]  [BUGGY]  return  Float.MAX_VALUE;  IllegalArgumentException  x  =  getDomainUpperBound();  [CE]  no  suitable  method  found  for  getDomainUpperBound()  [FE]        IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Float.MAX_VALUE;  IllegalArgumentException  x  =  getDomainUpperBound();  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MAX_VALUE;    IllegalArgumentException  x  =  getDomainUpperBound();	  	non-compiled	[CE]  no  suitable  method  found  for  getDomainUpperBound()	24	None	add
193	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDegreesOfFreedom();  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumberDegreesOfFreedom();  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumberDegreesOfFreedom();	      double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
194	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  =  Double.MAX_VALUE  :  Double.MAX_VALUE;  [CE]  >  expected  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  =  Double.MAX_VALUE  :  Double.MAX_VALUE;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    p  <  Double.MIN_VALUE?  Double.MAX_VALUE  =  Double.MAX_VALUE  :  Double.MAX_VALUE;	  	non-compiled	[CE]  >  expected	3	None	add
195	[BUG]  [BUGGY]      double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  NumeratorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  cannot  find  symbol  NumeratorDegreesOfFreedom  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]      double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  NumeratorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	        double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    NumeratorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  cannot  find  symbol  NumeratorDegreesOfFreedom	9	None	add
196	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]      double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  p  =  getDenominatorDegreesOfFreedom();  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	        double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    p  =  getDenominatorDegreesOfFreedom();	  	compilable	  [FE]  IllegalArgumentException  	9	1	add
197	[BUG]  [BUGGY]      double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  p  =  getDenominatorDegreesOfFreedom();  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]      double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  p  =  getDenominatorDegreesOfFreedom();  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	        double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    p  =  getDenominatorDegreesOfFreedom();	  	compilable	  [FE]  IllegalArgumentException  	9	1	add
198	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  denominatorDegreesOfFreedom);  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  denominatorDegreesOfFreedom);  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p,  denominatorDegreesOfFreedom);	      double    denominatorDegreesOfFreedom    =    getDestinatorDegreesOfFreedom(p);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
199	[BUG]  [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE  [CE]  >  expected  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE	  	non-compiled	[CE]  >  expected	1	None	add
200	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  0.0);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  0.0);  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  0.0);	      double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	15	None	replace
201	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p,  denominatorDegreesOfFreedom);  [CE]  no  suitable  method  found  for  getDomainUpperBound(double,double)  [FE]    StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p,  denominatorDegreesOfFreedom);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MAX_VALUE  /  getDomainUpperBound(p,  denominatorDegreesOfFreedom);	  return    Double.MAX_VALUE    /    getDomainUpperBound(p);    	non-compiled	[CE]  no  suitable  method  found  for  getDomainUpperBound(double,double)	30	None	replace
202	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  if(p  <  Double.MIN_VALUE  ||  p  >  Double.MAX_VALUE)  {  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  if(p  <  Double.MIN_VALUE  ||  p  >  Double.MAX_VALUE)  {  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    if(p  <  Double.MIN_VALUE  ||  p  >  Double.MAX_VALUE)  {  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }	  	non-compiled	[CE]  unreachable  statement	3	None	add
203	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  if(p  <  Double.MIN_VALUE)  {  return  p  <  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  [CE]  unreachable  statement  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  if(p  <  Double.MIN_VALUE)  {  return  p  <  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    if(p  <  Double.MIN_VALUE)  {  return  p  <  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }	  	non-compiled	[CE]  unreachable  statement	3	None	add
204	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  if(p  <  Double.MIN_VALUE)  {  return  p  <  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  [CE]  unreachable  statement  [FE]        IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  if(p  <  Double.MIN_VALUE)  {  return  p  <  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    if(p  <  Double.MIN_VALUE)  {  return  p  <  Double.MAX_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }	  	non-compiled	[CE]  unreachable  statement	3	None	add
205	[BUG]  [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  if(p  <  Double.MIN_VALUE  ||  p  >  Double.MAX_VALUE)  {  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  [CE]  unreachable  statement  [FE]          IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  if(p  <  Double.MIN_VALUE  ||  p  >  Double.MAX_VALUE)  {  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MIN_VALUE?    Double.MAX_VALUE    :    Double.MAX_VALUE;    if(p  <  Double.MIN_VALUE  ||  p  >  Double.MAX_VALUE)  {  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }	  	non-compiled	[CE]  unreachable  statement	3	None	add
206	[BUG]  [BUGGY]  return  p  >  Double.MAX_VALUE  &&  p  <  =  Double.MAX_VALUE;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  >  Double.MAX_VALUE  &&  p  <  =  Double.MAX_VALUE;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  >  Double.MAX_VALUE  &&  p  <  =  Double.MAX_VALUE;	  return    p    >    Double.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
207	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]      double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	        double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  	compilable	  [FE]  IllegalArgumentException  	18	1	add
208	[BUG]  [BUGGY]      double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]      double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	        double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    double  deseratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  	compilable	  [FE]  IllegalArgumentException  	18	1	add
209	[BUG]  [BUGGY]      double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  int  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  possible  loss  of  precision  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]      double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  int  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	        double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    int  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	  	non-compiled	[CE]  possible  loss  of  precision	18	None	add
210	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p);  double  p  =  getDomainUpperBound(p).doubleValue();  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p);  double  p  =  getDomainUpperBound(p).doubleValue();  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    /    getDomainUpperBound(p);    double  p  =  getDomainUpperBound(p).doubleValue();	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	29	None	add
211	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p);  double  p  =  getDomainUpper(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]      StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.MAX_VALUE  /  getDomainUpperBound(p);  double  p  =  getDomainUpper(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    /    getDomainUpperBound(p);    double  p  =  getDomainUpper(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	29	None	add
212	[BUG]  [BUGGY]  return  Double.MIN_VALUE;  if(p  <  =  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  denominatorDegre  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.MIN_VALUE;  if(p  <  =  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  denominatorDegre  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MIN_VALUE;    if(p  <  =  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  denominatorDegre	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
213	[BUG]  [BUGGY]  return  Double.MIN_VALUE;  if(p  <  =  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.MIN_VALUE;  if(p  <  =  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MIN_VALUE;    if(p  <  =  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
214	[BUG]  [BUGGY]  return  Double.MIN_VALUE;  if(p  <  =  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.MIN_VALUE;  if(p  <  =  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MIN_VALUE;    if(p  <  =  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
215	[BUG]  [BUGGY]  return  Double.MIN_VALUE;  if(p  <  =  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  super.getDomainUpperBound  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.MIN_VALUE;  if(p  <  =  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  super.getDomainUpperBound  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MIN_VALUE;    if(p  <  =  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Double.MIN_VALUE;  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  super.getDomainUpperBound	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
216	[BUG]  [BUGGY]  return  getDomainUpperBound(p);  if(p  >  0.0)  {  return  getDomainUpperBound(p);  }  else  {  return  getDomainUpperBound(p);  }  [CE]  unreachable  statement  [FE]    StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  getDomainUpperBound(p);  if(p  >  0.0)  {  return  getDomainUpperBound(p);  }  else  {  return  getDomainUpperBound(p);  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    getDomainUpperBound(p);    if(p  >  0.0)  {  return  getDomainUpperBound(p);  }  else  {  return  getDomainUpperBound(p);  }	  	non-compiled	[CE]  unreachable  statement	22	None	add
217	[BUG]  [BUGGY]  return  getDomainUpperBound(p);  if(p  >  0.0)  {  return  getDomainUpperBound(p);  }  [CE]  unreachable  statement  [FE]      StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  getDomainUpperBound(p);  if(p  >  0.0)  {  return  getDomainUpperBound(p);  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    getDomainUpperBound(p);    if(p  >  0.0)  {  return  getDomainUpperBound(p);  }	  	non-compiled	[CE]  unreachable  statement	22	None	add
218	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  +  1;  [CE]  missing  return  statement  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  +  1;  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom()  +  1;	      double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  missing  return  statement	19	None	replace
219	[BUG]  [BUGGY]  return  Float.MAX_VALUE;  if(p  <  0.0  ||  p  >  1.0)  {  return  Float.MAX_VALUE;  }  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Float.MAX_VALUE;  if(p  <  0.0  ||  p  >  1.0)  {  return  Float.MAX_VALUE;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MAX_VALUE;    if(p  <  0.0  ||  p  >  1.0)  {  return  Float.MAX_VALUE;  }	  	non-compiled	[CE]  unreachable  statement	24	None	add
220	[BUG]  [BUGGY]  return  Float.MAX_VALUE;  if(p  <  =  0.0)  {  return  Float.MAX_VALUE;  }  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Float.MAX_VALUE;  if(p  <  =  0.0)  {  return  Float.MAX_VALUE;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MAX_VALUE;    if(p  <  =  0.0)  {  return  Float.MAX_VALUE;  }	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
221	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]      double  m  =  getDomainUpperBound(p);  m  =  getDomainUpperBound(p);  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	        double    m    =    getDomainUpperBound(p);    m  =  getDomainUpperBound(p);	  	compilable	  [FE]  StackOverflowError  	11	3	add
222	[BUG]  [BUGGY]      double  m  =  getDomainUpperBound(p);  m  =  getDomainUpperBound(p);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]      double  m  =  getDomainUpperBound(p);  m  =  getDomainUpperBound(p);  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	        double    m    =    getDomainUpperBound(p);    m  =  getDomainUpperBound(p);	  	compilable	  [FE]  StackOverflowError  	11	3	add
223	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  2.0;  double  p  =  getDomainUpperBounds(p);  [CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.MAX_VALUE  /  2.0;  double  p  =  getDomainUpperBounds(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Double.MAX_VALUE    /    2.0;    double  p  =  getDomainUpperBounds(p);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  getDomainUpperBound(double)	32	None	add
224	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  >  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  p  >  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;	  return    p    <    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	6	1	replace
225	[BUG]  [BUGGY]  return  p  >  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  >  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  p  >  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;	  return    p    <    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException  	6	1	replace
226	[BUG]  [BUGGY]      double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  int  numeratorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [CE]  possible  loss  of  precision  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]      double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  int  numeratorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	        double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom();    int  numeratorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();	  	non-compiled	[CE]  possible  loss  of  precision	9	None	add
227	[BUG]  [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  if(p  <  Double.MAX_VALUE)  {  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  if(p  <  Double.MAX_VALUE)  {  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    if(p  <  Double.MAX_VALUE)  {  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }	  	non-compiled	[CE]  unreachable  statement	1	None	add
228	[BUG]  [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  if(p  <  Double.MAX_VALUE  ||  p  >  Double.POSITIVE_INFINITY)  {  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }  [CE]  unreachable  statement  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  if(p  <  Double.MAX_VALUE  ||  p  >  Double.POSITIVE_INFINITY)  {  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    if(p  <  Double.MAX_VALUE  ||  p  >  Double.POSITIVE_INFINITY)  {  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }	  	non-compiled	[CE]  unreachable  statement	1	None	add
229	[BUG]  [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  if(p  <  Double.MAX_VALUE)  {  return  p  <  Double.POSITIVE_INFINITY?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  [CE]  unreachable  statement  [FE]        IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  if(p  <  Double.MAX_VALUE)  {  return  p  <  Double.POSITIVE_INFINITY?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    if(p  <  Double.MAX_VALUE)  {  return  p  <  Double.POSITIVE_INFINITY?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }	  	non-compiled	[CE]  unreachable  statement	1	None	add
230	[BUG]  [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  if(p  <  Double.MAX_VALUE)  {  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }  [CE]  unreachable  statement  [FE]          IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  if(p  <  Double.MAX_VALUE)  {  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MAX_VALUE?    Double.POSITIVE_INFINITY    :    Double.MAX_VALUE;    if(p  <  Double.MAX_VALUE)  {  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }  else  {  return  p  <  Double.MAX_VALUE?  Double.POSITIVE_INFINITY  :  Double.MAX_VALUE;  }	  	non-compiled	[CE]  unreachable  statement	1	None	add
231	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  denominatorDegreesOfFreedom);  [CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  denominatorDegreesOfFreedom);  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom(p,  denominatorDegreesOfFreedom);	      double    denominatorDegreesOfFreedom    =    getDenominatorDegreesOfFreedom(p);    	non-compiled	[CE]  method  getDenominatorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	15	None	replace
232	[BUG]  [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  if(p  <  Double.MIN_VALUE)  {  return  p  <  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  }  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  if(p  <  Double.MIN_VALUE)  {  return  p  <  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    if(p  <  Double.MIN_VALUE)  {  return  p  <  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  }	  	non-compiled	[CE]  unreachable  statement	5	None	add
233	[BUG]  [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  if(p  <  Double.MAX_VALUE)  {  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  [CE]  unreachable  statement  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  p  <  Double.MAX_VALUE?  Double.MIN_VALUE  :  Double.MAX_VALUE;  if(p  <  Double.MAX_VALUE)  {  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    p    <    Double.MAX_VALUE?    Double.MIN_VALUE    :    Double.MAX_VALUE;    if(p  <  Double.MAX_VALUE)  {  return  p  <  Double.MIN_VALUE?  Double.MAX_VALUE  :  Double.MAX_VALUE;  }	  	non-compiled	[CE]  unreachable  statement	5	None	add
234	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p  +  1);  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p  +  1);  [BUGGY]    return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDestinatorDegreesOfFreedom(p  +  1);	      double    denominatorDegreesOfFreedom    =    getDestinatorDegreesOfFreedom(p);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
235	[BUG]  [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom  >  0.0)  {  return  denominatorDegreesOfFreedom  +  p;  }  [CE]  missing  return  statement  [FE]                IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom  >  0.0)  {  return  denominatorDegreesOfFreedom  +  p;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom  >  0.0)  {  return  denominatorDegreesOfFreedom  +  p;  }	      	non-compiled	[CE]  missing  return  statement	8	None	replace
236	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.POSITIVE_INFINITY;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Double.POSITIVE_INFINITY;	  return    Double.MIN_VALUE;    	compilable	  [FE]  IllegalArgumentException  	21	1	replace
237	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.POSITIVE_INFINITY;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.POSITIVE_INFINITY;	  return    Double.MIN_VALUE;    	compilable	  [FE]  IllegalArgumentException  	21	1	replace
238	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.NaN;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Double.NaN;	  return    Double.MIN_VALUE;    	compilable	  [FE]  IllegalArgumentException  	21	3	replace
239	[BUG]  [BUGGY]  return  Double.NaN;  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Double.NaN;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.NaN;	  return    Double.MIN_VALUE;    	compilable	  [FE]  IllegalArgumentException  	21	3	replace
240	[BUG]  [BUGGY]  return  Float.MIN_VALUE;  if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Math.abs(p);  if(denominatorDegreesOfFreedom  >=  0.0)  {  return  denominatorDegreesOfFreedom;  }  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Float.MIN_VALUE;  if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Math.abs(p);  if(denominatorDegreesOfFreedom  >=  0.0)  {  return  denominatorDegreesOfFreedom;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MIN_VALUE;    if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Math.abs(p);  if(denominatorDegreesOfFreedom  >=  0.0)  {  return  denominatorDegreesOfFreedom;  }	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
241	[BUG]  [BUGGY]  return  Float.MIN_VALUE;  if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Math.abs(p);  if(denominatorDegreesOfFreedom  ==  0.0)  {  return  denominatorDegreesOfFreedom;  }  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Float.MIN_VALUE;  if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Math.abs(p);  if(denominatorDegreesOfFreedom  ==  0.0)  {  return  denominatorDegreesOfFreedom;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MIN_VALUE;    if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Math.abs(p);  if(denominatorDegreesOfFreedom  ==  0.0)  {  return  denominatorDegreesOfFreedom;  }	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
242	[BUG]  [BUGGY]  return  Float.MIN_VALUE;  if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Math.abs(p);  if(denominatorDegreesOfFreedom  >=  0.0)  {  return  Float.MIN_VALUE;  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    protected  double  getDomainUpperBound(double  p)  {    [BUGGY]  return  Float.MIN_VALUE;  if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Math.abs(p);  if(denominatorDegreesOfFreedom  >=  0.0)  {  return  Float.MIN_VALUE;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return    Float.MIN_VALUE;    if(p  <  0.0  ||  p  >  1.0)  {  double  denominatorDegreesOfFreedom  =  Math.abs(p);  if(denominatorDegreesOfFreedom  >=  0.0)  {  return  Float.MIN_VALUE;  }	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
