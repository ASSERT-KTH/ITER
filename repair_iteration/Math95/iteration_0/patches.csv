bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number
this_action1	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]  return  0.0  /  denominatorDegreesOfFreedom  *  getNumeratorDegreesOfFreedom();  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	return  0.0  /  denominatorDegreesOfFreedom  *  getNumeratorDegreesOfFreedom();	return  0.0;  	compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	1	1
2	[BUG]  [BUGGY]  return  0.0  /  denominatorDegreesOfFreedom  *  getNumeratorDegreesOfFreedom();  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]  return  0.0  /  denominatorDegreesOfFreedom  *  getNumeratorDegreesOfFreedom();  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return  0.0  /  denominatorDegreesOfFreedom  *  getNumeratorDegreesOfFreedom();	return  0.0;  	compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	1	1	replace
2	[BUG]  [BUGGY]  timeout  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]  return  1.0;  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	return  1.0;	return  0.0;  	compilable	timeout	1	1
3	[BUG]  [BUGGY]  return  1.0;  timeout  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]  return  1.0;  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return  1.0;	return  0.0;  	compilable	timeout	1	1	replace
3	[BUG]  [BUGGY]  return  0.0  /  denominatorDegreesOfFreedom  *  getNumeratorDegreesOfFreedom().doubleValue();  [CE]  double  cannot  be  dereferenced  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]  return  0.0  /  denominatorDegreesOfFreedom  *  getNumeratorDegreesOfFreedom().doubleValue();  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return  0.0  /  denominatorDegreesOfFreedom  *  getNumeratorDegreesOfFreedom().doubleValue();	return  0.0;  	non-compiled	[CE]  double  cannot  be  dereferenced	1	None	replace
4	[BUG]  [BUGGY]  return  0.0  /  denominatorDegreesOfFreedom  *  getNumeratorDegreesOfFreedom().doubleValue()  >  p;  [CE]  double  cannot  be  dereferenced  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]  return  0.0  /  denominatorDegreesOfFreedom  *  getNumeratorDegreesOfFreedom().doubleValue()  >  p;  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return  0.0  /  denominatorDegreesOfFreedom  *  getNumeratorDegreesOfFreedom().doubleValue()  >  p;	return  0.0;  	non-compiled	[CE]  double  cannot  be  dereferenced	1	None	replace
5	[BUG]  [BUGGY]    [CE]  missing  return  statement  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]    [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	  	return  0.0;  	non-compiled	[CE]  missing  return  statement	1	None	replace
11	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  [BUGGY]  double  d  =  getNumeratorDegreesOfFreedom();  [BUGGY]    ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	add	double  d  =  getNumeratorDegreesOfFreedom();	double  d  =  getDenominatorDegreesOfFreedom();  	compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	5	1
12	[BUG]  [BUGGY]  double  d  =  getNumeratorDegreesOfFreedom();  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  [BUGGY]  double  d  =  getNumeratorDegreesOfFreedom();  [BUGGY]    ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	double  d  =  getNumeratorDegreesOfFreedom();	double  d  =  getDenominatorDegreesOfFreedom();  	compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	5	1	replace
15	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  d  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  [BUGGY]    [BUGGY]    ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	  	double  d  =  getDenominatorDegreesOfFreedom();  	non-compiled	[CE]  cannot  find  symbol  d	5	None	replace
21	[BUG]  [BUGGY]    double  ret  =  getDenominatorDegreesOfFreedom().doubleValue();  [CE]  double  cannot  be  dereferenced  [CONTEXT]  protected  double  getDomainUpperBound(double  p)  {  [BUGGY]    double  ret  =  getDenominatorDegreesOfFreedom().doubleValue();  [BUGGY]  return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	    double  ret  =  getDenominatorDegreesOfFreedom().doubleValue();		non-compiled	[CE]  double  cannot  be  dereferenced	4	None	add
22	[BUG]  [BUGGY]    super.getDomainUpperBound(p);  [CE]  abstract  method  getDomainUpperBound(double)  in  AbstractContinuousDistribution  cannot  be  accessed  directly  [CONTEXT]  protected  double  getDomainUpperBound(double  p)  {  [BUGGY]    super.getDomainUpperBound(p);  [BUGGY]  return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	    super.getDomainUpperBound(p);		non-compiled	[CE]  abstract  method  getDomainUpperBound(double)  in  AbstractContinuousDistribution  cannot  be  accessed  directly	4	None	add
23	[BUG]  [BUGGY]    double  ret  =  getDenominatorDegreesOfFreedom().doubleValue()  *  p;  [CE]  double  cannot  be  dereferenced  [CONTEXT]  protected  double  getDomainUpperBound(double  p)  {  [BUGGY]    double  ret  =  getDenominatorDegreesOfFreedom().doubleValue()  *  p;  [BUGGY]  return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	    double  ret  =  getDenominatorDegreesOfFreedom().doubleValue()  *  p;		non-compiled	[CE]  double  cannot  be  dereferenced	4	None	add
24	[BUG]  [BUGGY]    if(DomainUpperBound  ==  p)  {  double  ret  =  getDenominatorDegreesOfFreedom();  if(ret  >  0)  {  return  ret;  }  [CE]  illegal  start  of  expression  [CONTEXT]  protected  double  getDomainUpperBound(double  p)  {  [BUGGY]    if(DomainUpperBound  ==  p)  {  double  ret  =  getDenominatorDegreesOfFreedom();  if(ret  >  0)  {  return  ret;  }  [BUGGY]  return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	    if(DomainUpperBound  ==  p)  {  double  ret  =  getDenominatorDegreesOfFreedom();  if(ret  >  0)  {  return  ret;  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
25	[BUG]  [BUGGY]    if(DomainUpperBound  ==  p)  {  double  ret  =  getDenominatorDegreesOfFreedom().doubleValue();  if(ret  >  0)  {  return  ret;  }  [CE]  illegal  start  of  expression  [CONTEXT]  protected  double  getDomainUpperBound(double  p)  {  [BUGGY]    if(DomainUpperBound  ==  p)  {  double  ret  =  getDenominatorDegreesOfFreedom().doubleValue();  if(ret  >  0)  {  return  ret;  }  [BUGGY]  return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	    if(DomainUpperBound  ==  p)  {  double  ret  =  getDenominatorDegreesOfFreedom().doubleValue();  if(ret  >  0)  {  return  ret;  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
31	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();    [BUGGY]    double  m  =  getNumeratorDegreesOfFreedom();  [BUGGY]  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	147	147	1	add	    double  m  =  getNumeratorDegreesOfFreedom();		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	8	1
32	[BUG]  [BUGGY]    double  m  =  getNumeratorDegreesOfFreedom();  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();    [BUGGY]    double  m  =  getNumeratorDegreesOfFreedom();  [BUGGY]  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	147	147	1	replace	    double  m  =  getNumeratorDegreesOfFreedom();		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	8	1	add
32	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();    [BUGGY]    d  =  getNumeratorDegreesOfFreedom();  [BUGGY]  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	147	147	1	add	    d  =  getNumeratorDegreesOfFreedom();		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	8	1
33	[BUG]  [BUGGY]    d  =  getNumeratorDegreesOfFreedom();  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();    [BUGGY]    d  =  getNumeratorDegreesOfFreedom();  [BUGGY]  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	147	147	1	replace	    d  =  getNumeratorDegreesOfFreedom();		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	8	1	add
34	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();    [BUGGY]    double  m  =  getNumeratorDegreesOfFreedom()  *  d;  [BUGGY]  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	147	147	1	add	    double  m  =  getNumeratorDegreesOfFreedom()  *  d;		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	8	1
35	[BUG]  [BUGGY]    double  m  =  getNumeratorDegreesOfFreedom()  *  d;  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();    [BUGGY]    double  m  =  getNumeratorDegreesOfFreedom()  *  d;  [BUGGY]  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	147	147	1	replace	    double  m  =  getNumeratorDegreesOfFreedom()  *  d;		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	8	1	add
35	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();    [BUGGY]    double  m  =  getNumeratorDegreesOfFreedom()  *  p;  [BUGGY]  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	147	147	1	add	    double  m  =  getNumeratorDegreesOfFreedom()  *  p;		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	8	1
36	[BUG]  [BUGGY]    double  m  =  getNumeratorDegreesOfFreedom()  *  p;  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();    [BUGGY]    double  m  =  getNumeratorDegreesOfFreedom()  *  p;  [BUGGY]  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	147	147	1	replace	    double  m  =  getNumeratorDegreesOfFreedom()  *  p;		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	8	1	add
41	[BUG]  [BUGGY]    double  x  =  getDenominatorDegreesOfFreedom();  [CE]  variable  x  is  already  defined  in  method  cumulativeProbability(double)  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  double  n  =  getNumeratorDegreesOfFreedom();  [BUGGY]    double  x  =  getDenominatorDegreesOfFreedom();  [BUGGY]  double  m  =  getDenominatorDegreesOfFreedom();  ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	76	76	1	replace	    double  x  =  getDenominatorDegreesOfFreedom();		non-compiled	[CE]  variable  x  is  already  defined  in  method  cumulativeProbability(double)	16	None	add
42	[BUG]  [BUGGY]    double  n  =  getDenominatorDegreesOfFreedom();  [CE]  variable  n  is  already  defined  in  method  cumulativeProbability(double)  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  double  n  =  getNumeratorDegreesOfFreedom();  [BUGGY]    double  n  =  getDenominatorDegreesOfFreedom();  [BUGGY]  double  m  =  getDenominatorDegreesOfFreedom();  ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	76	76	1	replace	    double  n  =  getDenominatorDegreesOfFreedom();		non-compiled	[CE]  variable  n  is  already  defined  in  method  cumulativeProbability(double)	16	None	add
43	[BUG]  [BUGGY]    ret  =  Beta.regularizedBeta((  n  *  x)/  getNumeratorDegreesOfFreedom());  [CE]  no  suitable  method  found  for  regularizedBeta(double)  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  double  n  =  getNumeratorDegreesOfFreedom();  [BUGGY]    ret  =  Beta.regularizedBeta((  n  *  x)/  getNumeratorDegreesOfFreedom());  [BUGGY]  double  m  =  getDenominatorDegreesOfFreedom();  ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	76	76	1	replace	    ret  =  Beta.regularizedBeta((  n  *  x)/  getNumeratorDegreesOfFreedom());		non-compiled	[CE]  no  suitable  method  found  for  regularizedBeta(double)	16	None	add
44	[BUG]  [BUGGY]    double  x  =  getComparatorDegreesOfFreedom();  [CE]  variable  x  is  already  defined  in  method  cumulativeProbability(double)  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  double  n  =  getNumeratorDegreesOfFreedom();  [BUGGY]    double  x  =  getComparatorDegreesOfFreedom();  [BUGGY]  double  m  =  getDenominatorDegreesOfFreedom();  ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	76	76	1	replace	    double  x  =  getComparatorDegreesOfFreedom();		non-compiled	[CE]  variable  x  is  already  defined  in  method  cumulativeProbability(double)	16	None	add
45	[BUG]  [BUGGY]    ret  =  Beta.regularizedBeta((  n  *  x)*  getNumeratorDegreesOfFreedom());  [CE]  no  suitable  method  found  for  regularizedBeta(double)  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  double  n  =  getNumeratorDegreesOfFreedom();  [BUGGY]    ret  =  Beta.regularizedBeta((  n  *  x)*  getNumeratorDegreesOfFreedom());  [BUGGY]  double  m  =  getDenominatorDegreesOfFreedom();  ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	76	76	1	replace	    ret  =  Beta.regularizedBeta((  n  *  x)*  getNumeratorDegreesOfFreedom());		non-compiled	[CE]  no  suitable  method  found  for  regularizedBeta(double)	16	None	add
51	[BUG]  [BUGGY]    if(p  ==  0)  {  if(p  ==  0)  {  return  0d;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  [BUGGY]    if(p  ==  0)  {  if(p  ==  0)  {  return  0d;  }  [BUGGY]  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	100	100	1	replace	    if(p  ==  0)  {  if(p  ==  0)  {  return  0d;  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
52	[BUG]  [BUGGY]    if(p  ==  0)  {  if(p  ==  0)  {  return  0;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  [BUGGY]    if(p  ==  0)  {  if(p  ==  0)  {  return  0;  }  [BUGGY]  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	100	100	1	replace	    if(p  ==  0)  {  if(p  ==  0)  {  return  0;  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
53	[BUG]  [BUGGY]    if(p  ==  0)  {  if(p  ==  0)  {  return  Double.POSITIVE_INFINITY;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  [BUGGY]    if(p  ==  0)  {  if(p  ==  0)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	100	100	1	replace	    if(p  ==  0)  {  if(p  ==  0)  {  return  Double.POSITIVE_INFINITY;  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
54	[BUG]  [BUGGY]    if(p  ==  0)  {  if(p  >  0)  {  return  0;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  [BUGGY]    if(p  ==  0)  {  if(p  >  0)  {  return  0;  }  [BUGGY]  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	100	100	1	replace	    if(p  ==  0)  {  if(p  >  0)  {  return  0;  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
55	[BUG]  [BUGGY]    if(p  ==  0)  {  if(p  ==  0)  {  return  1d;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  [BUGGY]    if(p  ==  0)  {  if(p  ==  0)  {  return  1d;  }  [BUGGY]  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	100	100	1	replace	    if(p  ==  0)  {  if(p  ==  0)  {  return  1d;  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
65	[BUG]  [BUGGY]    [CE]  missing  return  statement  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]    [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	  	return  super.inverseCumulativeProbability(p);  	non-compiled	[CE]  missing  return  statement	11	None	replace
71	[BUG]  [BUGGY]    if(p  >  0.0)  {  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom  >  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]    if(p  >  0.0)  {  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom  >  0.0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	    if(p  >  0.0)  {  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom  >  0.0)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
72	[BUG]  [BUGGY]    if(p  >  0.0)  {  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom  >  0.0)  {  return  0.0;  }  [CE]  illegal  start  of  expression  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]    if(p  >  0.0)  {  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom  >  0.0)  {  return  0.0;  }  [BUGGY]  return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	    if(p  >  0.0)  {  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom  >  0.0)  {  return  0.0;  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
73	[BUG]  [BUGGY]    if(p  >  0.0)  {  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom  >  0.0)  {  return  domainLowerBound;  }  [CE]  illegal  start  of  expression  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]    if(p  >  0.0)  {  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom  >  0.0)  {  return  domainLowerBound;  }  [BUGGY]  return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	    if(p  >  0.0)  {  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom  >  0.0)  {  return  domainLowerBound;  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
74	[BUG]  [BUGGY]    if(p  >  0.0)  {  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom().doubleValue();  if(denominatorDegreesOfFreedom  >  0.0)  {  return  0.0;  }  [CE]  illegal  start  of  expression  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]    if(p  >  0.0)  {  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom().doubleValue();  if(denominatorDegreesOfFreedom  >  0.0)  {  return  0.0;  }  [BUGGY]  return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	    if(p  >  0.0)  {  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom().doubleValue();  if(denominatorDegreesOfFreedom  >  0.0)  {  return  0.0;  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
75	[BUG]  [BUGGY]    super.getDomainLowerBound(p);  [CE]  abstract  method  getDomainLowerBound(double)  in  AbstractContinuousDistribution  cannot  be  accessed  directly  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]    super.getDomainLowerBound(p);  [BUGGY]  return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	    super.getDomainLowerBound(p);		non-compiled	[CE]  abstract  method  getDomainLowerBound(double)  in  AbstractContinuousDistribution  cannot  be  accessed  directly	2	None	add
82	[BUG]  [BUGGY]  double  n  =  getNumberDegreesOfFreedom();  [CE]  cannot  find  symbol  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  [BUGGY]  double  n  =  getNumberDegreesOfFreedom();  [BUGGY]  double  m  =  getDenominatorDegreesOfFreedom();  ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	75	75	1	replace	double  n  =  getNumberDegreesOfFreedom();	double  n  =  getNumeratorDegreesOfFreedom();  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
85	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  n  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  [BUGGY]    [BUGGY]  double  m  =  getDenominatorDegreesOfFreedom();  ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	75	75	1	replace	  	double  n  =  getNumeratorDegreesOfFreedom();  	non-compiled	[CE]  cannot  find  symbol  n	13	None	replace
93	[BUG]  [BUGGY]  timeout  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  [BUGGY]    ret  =  getNumeratorDegreesOfFreedom()  *  d;  [BUGGY]  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	add	    ret  =  getNumeratorDegreesOfFreedom()  *  d;		compilable	timeout	10	1
94	[BUG]  [BUGGY]    ret  =  getNumeratorDegreesOfFreedom()  *  d;  timeout  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  [BUGGY]    ret  =  getNumeratorDegreesOfFreedom()  *  d;  [BUGGY]  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	    ret  =  getNumeratorDegreesOfFreedom()  *  d;		compilable	timeout	10	1	add
94	[BUG]  [BUGGY]    ret  =  getNumeratorDegreesOfFreedom().doubleValue()  *  p;  [CE]  double  cannot  be  dereferenced  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  [BUGGY]    ret  =  getNumeratorDegreesOfFreedom().doubleValue()  *  p;  [BUGGY]  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	    ret  =  getNumeratorDegreesOfFreedom().doubleValue()  *  p;		non-compiled	[CE]  double  cannot  be  dereferenced	10	None	add
101	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  [BUGGY]  return  ret  *  denominatorDegreesOfFreedom;  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	add	return  ret  *  denominatorDegreesOfFreedom;	return  ret;  	compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	9	1
102	[BUG]  [BUGGY]  return  ret  *  denominatorDegreesOfFreedom;  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  [BUGGY]  return  ret  *  denominatorDegreesOfFreedom;  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  ret  *  denominatorDegreesOfFreedom;	return  ret;  	compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	9	1	replace
102	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  [BUGGY]  return  ret  *(numeratorDegreesOfFreedom  -  p);  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	add	return  ret  *(numeratorDegreesOfFreedom  -  p);	return  ret;  	compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	9	1
103	[BUG]  [BUGGY]  return  ret  *(numeratorDegreesOfFreedom  -  p);  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  [BUGGY]  return  ret  *(numeratorDegreesOfFreedom  -  p);  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  ret  *(numeratorDegreesOfFreedom  -  p);	return  ret;  	compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	9	1	replace
103	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  [BUGGY]  return  ret  *  getNumeratorDegreesOfFreedom();  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	add	return  ret  *  getNumeratorDegreesOfFreedom();	return  ret;  	compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	9	1
104	[BUG]  [BUGGY]  return  ret  *  getNumeratorDegreesOfFreedom();  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  [BUGGY]  return  ret  *  getNumeratorDegreesOfFreedom();  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  ret  *  getNumeratorDegreesOfFreedom();	return  ret;  	compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	9	1	replace
104	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  [BUGGY]  return  ret  *(numeratorDegreesOfFreedom  /  p);  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	add	return  ret  *(numeratorDegreesOfFreedom  /  p);	return  ret;  	compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	9	1
105	[BUG]  [BUGGY]  return  ret  *(numeratorDegreesOfFreedom  /  p);  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  [BUGGY]  return  ret  *(numeratorDegreesOfFreedom  /  p);  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  ret  *(numeratorDegreesOfFreedom  /  p);	return  ret;  	compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	9	1	replace
113	[BUG]  [BUGGY]  ret  =  Beta.regularizedBeta((  n  *  x)/  (m  +  n  *  x,  0.5  *  n,  0.5  *  m);  [CE]  ')'  expected  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  double  n  =  getNumeratorDegreesOfFreedom();  double  m  =  getDenominatorDegreesOfFreedom();  [BUGGY]  ret  =  Beta.regularizedBeta((  n  *  x)/  (m  +  n  *  x,  0.5  *  n,  0.5  *  m);  [BUGGY]  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	78	80	1	replace	ret  =  Beta.regularizedBeta((  n  *  x)/  (m  +  n  *  x,  0.5  *  n,  0.5  *  m);	ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),  0.5  *  n,    0.5  *  m);  	non-compiled	[CE]  ')'  expected	17	None	replace
115	[BUG]  [BUGGY]    [CE]  variable  ret  might  not  have  been  initialized  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  double  n  =  getNumeratorDegreesOfFreedom();  double  m  =  getDenominatorDegreesOfFreedom();  [BUGGY]    [BUGGY]  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	78	80	1	replace	  	ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),  0.5  *  n,    0.5  *  m);  	non-compiled	[CE]  variable  ret  might  not  have  been  initialized	17	None	replace
131	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  [BUGGY]    ret  =  getDenominatorDegreesOfFreedom();  [BUGGY]  double  n  =  getNumeratorDegreesOfFreedom();  double  m  =  getDenominatorDegreesOfFreedom();  ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	75	75	1	add	    ret  =  getDenominatorDegreesOfFreedom();		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	14	1
132	[BUG]  [BUGGY]    ret  =  getDenominatorDegreesOfFreedom();  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  [BUGGY]    ret  =  getDenominatorDegreesOfFreedom();  [BUGGY]  double  n  =  getNumeratorDegreesOfFreedom();  double  m  =  getDenominatorDegreesOfFreedom();  ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	75	75	1	replace	    ret  =  getDenominatorDegreesOfFreedom();		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	14	1	add
132	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  [BUGGY]    ret  =  getNumeratorDegreesOfFreedom();  [BUGGY]  double  n  =  getNumeratorDegreesOfFreedom();  double  m  =  getDenominatorDegreesOfFreedom();  ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	75	75	1	add	    ret  =  getNumeratorDegreesOfFreedom();		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	14	1
133	[BUG]  [BUGGY]    ret  =  getNumeratorDegreesOfFreedom();  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  [BUGGY]    ret  =  getNumeratorDegreesOfFreedom();  [BUGGY]  double  n  =  getNumeratorDegreesOfFreedom();  double  m  =  getDenominatorDegreesOfFreedom();  ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	75	75	1	replace	    ret  =  getNumeratorDegreesOfFreedom();		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	14	1	add
133	[BUG]  [BUGGY]    ret  =  Beta.regularizedBeta((  x  *  x)/  getNumeratorDegreesOfFreedom());  [CE]  no  suitable  method  found  for  regularizedBeta(double)  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  [BUGGY]    ret  =  Beta.regularizedBeta((  x  *  x)/  getNumeratorDegreesOfFreedom());  [BUGGY]  double  n  =  getNumeratorDegreesOfFreedom();  double  m  =  getDenominatorDegreesOfFreedom();  ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	75	75	1	replace	    ret  =  Beta.regularizedBeta((  x  *  x)/  getNumeratorDegreesOfFreedom());		non-compiled	[CE]  no  suitable  method  found  for  regularizedBeta(double)	14	None	add
135	[BUG]  [BUGGY]    ret  =  Beta.regularizedBeta((  x  *  x)/  getDenominatorDegreesOfFreedom());  [CE]  no  suitable  method  found  for  regularizedBeta(double)  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  [BUGGY]    ret  =  Beta.regularizedBeta((  x  *  x)/  getDenominatorDegreesOfFreedom());  [BUGGY]  double  n  =  getNumeratorDegreesOfFreedom();  double  m  =  getDenominatorDegreesOfFreedom();  ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	75	75	1	replace	    ret  =  Beta.regularizedBeta((  x  *  x)/  getDenominatorDegreesOfFreedom());		non-compiled	[CE]  no  suitable  method  found  for  regularizedBeta(double)	14	None	add
142	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();    [BUGGY]  ret  =  p  /(d  -  2.0);  [BUGGY]  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	147	147	1	add	ret  =  p  /(d  -  2.0);	ret  =  d  /  (d  -  2.0);  	compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	7	1
143	[BUG]  [BUGGY]  ret  =  p  /(d  -  2.0);  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();    [BUGGY]  ret  =  p  /(d  -  2.0);  [BUGGY]  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	147	147	1	replace	ret  =  p  /(d  -  2.0);	ret  =  d  /  (d  -  2.0);  	compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	7	1	replace
151	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  [BUGGY]    double  m  =  getNumeratorDegreesOfFreedom();  [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	add	    double  m  =  getNumeratorDegreesOfFreedom();		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	6	1
152	[BUG]  [BUGGY]    double  m  =  getNumeratorDegreesOfFreedom();  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  [BUGGY]    double  m  =  getNumeratorDegreesOfFreedom();  [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	    double  m  =  getNumeratorDegreesOfFreedom();		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	6	1	add
152	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  [BUGGY]    double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	add	    double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	6	1
153	[BUG]  [BUGGY]    double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  [BUGGY]    double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	    double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	6	1	add
153	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  [BUGGY]    ret  =  getNumeratorDegreesOfFreedom();  [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	add	    ret  =  getNumeratorDegreesOfFreedom();		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	6	1
154	[BUG]  [BUGGY]    ret  =  getNumeratorDegreesOfFreedom();  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  [BUGGY]    ret  =  getNumeratorDegreesOfFreedom();  [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	    ret  =  getNumeratorDegreesOfFreedom();		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	6	1	add
154	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  [BUGGY]    ret  =  getNumeratorDegreesOfFreedom()  *  p;  [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	add	    ret  =  getNumeratorDegreesOfFreedom()  *  p;		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	6	1
155	[BUG]  [BUGGY]    ret  =  getNumeratorDegreesOfFreedom()  *  p;  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  [BUGGY]    ret  =  getNumeratorDegreesOfFreedom()  *  p;  [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	    ret  =  getNumeratorDegreesOfFreedom()  *  p;		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	6	1	add
155	[BUG]  [BUGGY]    if(p  <  0.0)  {  ret  =  getNumeratorDegreesOfFreedom();  if(p  >  0.0)  {  return  ret;  }  [CE]  illegal  start  of  expression  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  [BUGGY]    if(p  <  0.0)  {  ret  =  getNumeratorDegreesOfFreedom();  if(p  >  0.0)  {  return  ret;  }  [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	    if(p  <  0.0)  {  ret  =  getNumeratorDegreesOfFreedom();  if(p  >  0.0)  {  return  ret;  }		non-compiled	[CE]  illegal  start  of  expression	6	None	add
163	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  [BUGGY]  if(p  ==  0  ||  p  >  3)  {  [BUGGY]  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	100	100	1	add	if(p  ==  0  ||  p  >  3)  {	if  (p  ==  0)  {  	compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	19	1
164	[BUG]  [BUGGY]  if(p  ==  0  ||  p  >  3)  {  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  [BUGGY]  if(p  ==  0  ||  p  >  3)  {  [BUGGY]  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	100	100	1	replace	if(p  ==  0  ||  p  >  3)  {	if  (p  ==  0)  {  	compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	19	1	replace
171	[BUG]  [BUGGY]    if(p  ==  2)  {  if(p  >  0)  {  return  Double.POSITIVE_INFINITY;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]    if(p  ==  2)  {  if(p  >  0)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	    if(p  ==  2)  {  if(p  >  0)  {  return  Double.POSITIVE_INFINITY;  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
172	[BUG]  [BUGGY]    if(p  ==  2)  {  if(p.equals(Math.PI))  {  return  0;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]    if(p  ==  2)  {  if(p.equals(Math.PI))  {  return  0;  }  [BUGGY]  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	    if(p  ==  2)  {  if(p.equals(Math.PI))  {  return  0;  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
173	[BUG]  [BUGGY]    if(p  ==  2)  {  if(p  >  0)  {  return  0;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]    if(p  ==  2)  {  if(p  >  0)  {  return  0;  }  [BUGGY]  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	    if(p  ==  2)  {  if(p  >  0)  {  return  0;  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
174	[BUG]  [BUGGY]    if(p  ==  2)  {  if(p.equals(getNumberForward()))  {  return  0;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]    if(p  ==  2)  {  if(p.equals(getNumberForward()))  {  return  0;  }  [BUGGY]  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	    if(p  ==  2)  {  if(p.equals(getNumberForward()))  {  return  0;  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
175	[BUG]  [BUGGY]    if(p  ==  2)  {  if(p.equals(Math.PI))  {  return  p;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]    if(p  ==  2)  {  if(p.equals(Math.PI))  {  return  p;  }  [BUGGY]  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	    if(p  ==  2)  {  if(p.equals(Math.PI))  {  return  p;  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
182	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getDomainUpperBound(double  p)  {  [BUGGY]  return  Double.MAX_VALUE  +  p;  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Double.MAX_VALUE  +  p;	return  Double.MAX_VALUE;  	compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	3	1
183	[BUG]  [BUGGY]  return  Double.MAX_VALUE  +  p;  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getDomainUpperBound(double  p)  {  [BUGGY]  return  Double.MAX_VALUE  +  p;  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MAX_VALUE  +  p;	return  Double.MAX_VALUE;  	compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	3	1	replace
184	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getDomainUpperBound(double  p)  {  [BUGGY]  return  Double.MAX_VALUE  -  1;  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Double.MAX_VALUE  -  1;	return  Double.MAX_VALUE;  	compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	3	1
185	[BUG]  [BUGGY]  return  Double.MAX_VALUE  -  1;  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getDomainUpperBound(double  p)  {  [BUGGY]  return  Double.MAX_VALUE  -  1;  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MAX_VALUE  -  1;	return  Double.MAX_VALUE;  	compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	3	1	replace
191	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  double  n  =  getNumeratorDegreesOfFreedom();  double  m  =  getDenominatorDegreesOfFreedom();  [BUGGY]    n  =  getNumeratorDegreesOfFreedom();  [BUGGY]  ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),    0.5  *  n,        0.5  *  m);  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	78	80	1	add	    n  =  getNumeratorDegreesOfFreedom();		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	18	1
192	[BUG]  [BUGGY]    n  =  getNumeratorDegreesOfFreedom();  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  double  n  =  getNumeratorDegreesOfFreedom();  double  m  =  getDenominatorDegreesOfFreedom();  [BUGGY]    n  =  getNumeratorDegreesOfFreedom();  [BUGGY]  ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),    0.5  *  n,        0.5  *  m);  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	78	80	1	replace	    n  =  getNumeratorDegreesOfFreedom();		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	18	1	add
192	[BUG]  [BUGGY]    double  n  =  getNumeratorDegreesOfFreedom();  [CE]  variable  n  is  already  defined  in  method  cumulativeProbability(double)  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  double  n  =  getNumeratorDegreesOfFreedom();  double  m  =  getDenominatorDegreesOfFreedom();  [BUGGY]    double  n  =  getNumeratorDegreesOfFreedom();  [BUGGY]  ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),    0.5  *  n,        0.5  *  m);  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	78	80	1	replace	    double  n  =  getNumeratorDegreesOfFreedom();		non-compiled	[CE]  variable  n  is  already  defined  in  method  cumulativeProbability(double)	18	None	add
193	[BUG]  [BUGGY]    double  m  =  getNumeratorDegreesOfFreedom();  [CE]  variable  m  is  already  defined  in  method  cumulativeProbability(double)  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  double  n  =  getNumeratorDegreesOfFreedom();  double  m  =  getDenominatorDegreesOfFreedom();  [BUGGY]    double  m  =  getNumeratorDegreesOfFreedom();  [BUGGY]  ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),    0.5  *  n,        0.5  *  m);  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	78	80	1	replace	    double  m  =  getNumeratorDegreesOfFreedom();		non-compiled	[CE]  variable  m  is  already  defined  in  method  cumulativeProbability(double)	18	None	add
194	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  double  n  =  getNumeratorDegreesOfFreedom();  double  m  =  getDenominatorDegreesOfFreedom();  [BUGGY]    n  =  getNumeratorDegreesOfFreedom();  m  =  getDenominatorDegreesOfFreedom();  [BUGGY]  ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),    0.5  *  n,        0.5  *  m);  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	78	80	1	add	    n  =  getNumeratorDegreesOfFreedom();  m  =  getDenominatorDegreesOfFreedom();		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	18	1
195	[BUG]  [BUGGY]    n  =  getNumeratorDegreesOfFreedom();  m  =  getDenominatorDegreesOfFreedom();  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  double  n  =  getNumeratorDegreesOfFreedom();  double  m  =  getDenominatorDegreesOfFreedom();  [BUGGY]    n  =  getNumeratorDegreesOfFreedom();  m  =  getDenominatorDegreesOfFreedom();  [BUGGY]  ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),    0.5  *  n,        0.5  *  m);  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	78	80	1	replace	    n  =  getNumeratorDegreesOfFreedom();  m  =  getDenominatorDegreesOfFreedom();		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	18	1	add
195	[BUG]  [BUGGY]    n  =  getNumeratorDegreesOfFreedom();  m  =  getSmallDegreesOfFreedom();  [CE]  cannot  find  symbol  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  double  n  =  getNumeratorDegreesOfFreedom();  double  m  =  getDenominatorDegreesOfFreedom();  [BUGGY]    n  =  getNumeratorDegreesOfFreedom();  m  =  getSmallDegreesOfFreedom();  [BUGGY]  ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),    0.5  *  n,        0.5  *  m);  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	78	80	1	replace	    n  =  getNumeratorDegreesOfFreedom();  m  =  getSmallDegreesOfFreedom();		non-compiled	[CE]  cannot  find  symbol	18	None	add
22	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  [BUGGY]    double  x  =  getNumeratorDegreesOfFreedom();  [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	add	    double  x  =  getNumeratorDegreesOfFreedom();		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	6	1
23	[BUG]  [BUGGY]    double  x  =  getNumeratorDegreesOfFreedom();  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  [BUGGY]    double  x  =  getNumeratorDegreesOfFreedom();  [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	    double  x  =  getNumeratorDegreesOfFreedom();		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	6	1	add
23	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  [BUGGY]    p  =  getNumeratorDegreesOfFreedom();  [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	add	    p  =  getNumeratorDegreesOfFreedom();		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	6	1
24	[BUG]  [BUGGY]    p  =  getNumeratorDegreesOfFreedom();  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  [BUGGY]    p  =  getNumeratorDegreesOfFreedom();  [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	    p  =  getNumeratorDegreesOfFreedom();		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	6	1	add
25	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  [BUGGY]    ret  =  getNumeratorDegreesOfFreedom()  *  Math.pow(0.0,  p);  [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	add	    ret  =  getNumeratorDegreesOfFreedom()  *  Math.pow(0.0,  p);		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	6	1
26	[BUG]  [BUGGY]    ret  =  getNumeratorDegreesOfFreedom()  *  Math.pow(0.0,  p);  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  [BUGGY]    ret  =  getNumeratorDegreesOfFreedom()  *  Math.pow(0.0,  p);  [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	    ret  =  getNumeratorDegreesOfFreedom()  *  Math.pow(0.0,  p);		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	6	1	add
42	[BUG]  [BUGGY]    if(p  <.5)  {  if(getDenominatorDegreesOfFreedom())  {  return  getDenominatorDegreesOfFreedom();  }  [CE]  illegal  start  of  expression  [CONTEXT]  protected  double  getDomainUpperBound(double  p)  {  [BUGGY]    if(p  <.5)  {  if(getDenominatorDegreesOfFreedom())  {  return  getDenominatorDegreesOfFreedom();  }  [BUGGY]  return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	    if(p  <.5)  {  if(getDenominatorDegreesOfFreedom())  {  return  getDenominatorDegreesOfFreedom();  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
43	[BUG]  [BUGGY]    if(p  <.5)  {  if(getDenominatorDegreesOfFreedom()  >  0)  {  return  getDenominatorDegreesOfFreedom();  }  [CE]  illegal  start  of  expression  [CONTEXT]  protected  double  getDomainUpperBound(double  p)  {  [BUGGY]    if(p  <.5)  {  if(getDenominatorDegreesOfFreedom()  >  0)  {  return  getDenominatorDegreesOfFreedom();  }  [BUGGY]  return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	    if(p  <.5)  {  if(getDenominatorDegreesOfFreedom()  >  0)  {  return  getDenominatorDegreesOfFreedom();  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
44	[BUG]  [BUGGY]    if(p  <.5)  {  if(p  ==.5)  {  return  getDomainLowerBound();  }  [CE]  illegal  start  of  expression  [CONTEXT]  protected  double  getDomainUpperBound(double  p)  {  [BUGGY]    if(p  <.5)  {  if(p  ==.5)  {  return  getDomainLowerBound();  }  [BUGGY]  return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	    if(p  <.5)  {  if(p  ==.5)  {  return  getDomainLowerBound();  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
45	[BUG]  [BUGGY]    if(p  <.5)  {  if(getDenominatorDegreesOfFreedom())  {  return  getDomainUpperBound(p);  }  [CE]  illegal  start  of  expression  [CONTEXT]  protected  double  getDomainUpperBound(double  p)  {  [BUGGY]    if(p  <.5)  {  if(getDenominatorDegreesOfFreedom())  {  return  getDomainUpperBound(p);  }  [BUGGY]  return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	    if(p  <.5)  {  if(getDenominatorDegreesOfFreedom())  {  return  getDomainUpperBound(p);  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
61	[BUG]  [BUGGY]    System.arraycopy(p,  0,  ret,  getNumeratorDegreesOfFreedom(),  denominatorDegreesOfFreedom);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  [BUGGY]    System.arraycopy(p,  0,  ret,  getNumeratorDegreesOfFreedom(),  denominatorDegreesOfFreedom);  [BUGGY]  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	    System.arraycopy(p,  0,  ret,  getNumeratorDegreesOfFreedom(),  denominatorDegreesOfFreedom);		non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	10	None	add
62	[BUG]  [BUGGY]    System.arraycopy(p,  0,  ret,  getNumeratorDegreesOfFreedom(),  p);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  [BUGGY]    System.arraycopy(p,  0,  ret,  getNumeratorDegreesOfFreedom(),  p);  [BUGGY]  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	    System.arraycopy(p,  0,  ret,  getNumeratorDegreesOfFreedom(),  p);		non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	10	None	add
65	[BUG]  [BUGGY]    System.arraycopy(p,  0,  ret,  getNumeratorDegreesOfFreedom(),  denominatorDegreesOfFreedom);  ret  +=  p;  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  [BUGGY]    System.arraycopy(p,  0,  ret,  getNumeratorDegreesOfFreedom(),  denominatorDegreesOfFreedom);  ret  +=  p;  [BUGGY]  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	    System.arraycopy(p,  0,  ret,  getNumeratorDegreesOfFreedom(),  denominatorDegreesOfFreedom);  ret  +=  p;		non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	10	None	add
82	[BUG]  [BUGGY]    if(p  <.5)  {  if(getDomainLowerBound())  {  return  getDomainLowerBound();  }  [CE]  illegal  start  of  expression  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]    if(p  <.5)  {  if(getDomainLowerBound())  {  return  getDomainLowerBound();  }  [BUGGY]  return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	    if(p  <.5)  {  if(getDomainLowerBound())  {  return  getDomainLowerBound();  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
83	[BUG]  [BUGGY]    if(p  >  0.0)  {  if(getDenominatorDegreesOfFreedom()  >  0)  {  return  getDomainLowerBound(p);  }  [CE]  illegal  start  of  expression  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]    if(p  >  0.0)  {  if(getDenominatorDegreesOfFreedom()  >  0)  {  return  getDomainLowerBound(p);  }  [BUGGY]  return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	    if(p  >  0.0)  {  if(getDenominatorDegreesOfFreedom()  >  0)  {  return  getDomainLowerBound(p);  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
84	[BUG]  [BUGGY]    if(p  <.5)  {  if(p  >  0.0)  {  return  getLowerBound();  }  [CE]  illegal  start  of  expression  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]    if(p  <.5)  {  if(p  >  0.0)  {  return  getLowerBound();  }  [BUGGY]  return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	    if(p  <.5)  {  if(p  >  0.0)  {  return  getLowerBound();  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
85	[BUG]  [BUGGY]    if(p  >  0.0)  {  if(getDenominatorDegreesOfFreedom()  ==  0)  {  return  getDomainLowerBound(p);  }  [CE]  illegal  start  of  expression  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]    if(p  >  0.0)  {  if(getDenominatorDegreesOfFreedom()  ==  0)  {  return  getDomainLowerBound(p);  }  [BUGGY]  return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	    if(p  >  0.0)  {  if(getDenominatorDegreesOfFreedom()  ==  0)  {  return  getDomainLowerBound(p);  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
102	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  [BUGGY]  if(p  ==  0  ||  p  ==  0)  {  [BUGGY]  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	100	100	1	add	if(p  ==  0  ||  p  ==  0)  {	if  (p  ==  0)  {  	compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	19	1
103	[BUG]  [BUGGY]  if(p  ==  0  ||  p  ==  0)  {  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  [BUGGY]  if(p  ==  0  ||  p  ==  0)  {  [BUGGY]  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	100	100	1	replace	if(p  ==  0  ||  p  ==  0)  {	if  (p  ==  0)  {  	compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	19	1	replace
103	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  [BUGGY]  if(p  ==  0  ||  p  ==  Integer.MAX_VALUE)  {  [BUGGY]  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	100	100	1	add	if(p  ==  0  ||  p  ==  Integer.MAX_VALUE)  {	if  (p  ==  0)  {  	compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	19	1
104	[BUG]  [BUGGY]  if(p  ==  0  ||  p  ==  Integer.MAX_VALUE)  {  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  [BUGGY]  if(p  ==  0  ||  p  ==  Integer.MAX_VALUE)  {  [BUGGY]  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	100	100	1	replace	if(p  ==  0  ||  p  ==  Integer.MAX_VALUE)  {	if  (p  ==  0)  {  	compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	19	1	replace
104	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  [BUGGY]  if(p  ==  0  ||  p  ==  Integer.MIN_VALUE)  {  [BUGGY]  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	100	100	1	add	if(p  ==  0  ||  p  ==  Integer.MIN_VALUE)  {	if  (p  ==  0)  {  	compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	19	1
105	[BUG]  [BUGGY]  if(p  ==  0  ||  p  ==  Integer.MIN_VALUE)  {  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  [BUGGY]  if(p  ==  0  ||  p  ==  Integer.MIN_VALUE)  {  [BUGGY]  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	100	100	1	replace	if(p  ==  0  ||  p  ==  Integer.MIN_VALUE)  {	if  (p  ==  0)  {  	compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	19	1	replace
123	[BUG]  [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom()  *  getNumberDegreesOfFreedom();  [CE]  cannot  find  symbol  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom()  *  getNumberDegreesOfFreedom();  [BUGGY]    ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	double  d  =  getDenominatorDegreesOfFreedom()  *  getNumberDegreesOfFreedom();	double  d  =  getDenominatorDegreesOfFreedom();  	non-compiled	[CE]  cannot  find  symbol	5	None	replace
124	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom()  -  1;  [BUGGY]    ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	add	double  d  =  getDenominatorDegreesOfFreedom()  -  1;	double  d  =  getDenominatorDegreesOfFreedom();  	compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	5	1
125	[BUG]  [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom()  -  1;  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom()  -  1;  [BUGGY]    ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	double  d  =  getDenominatorDegreesOfFreedom()  -  1;	double  d  =  getDenominatorDegreesOfFreedom();  	compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	5	1	replace
144	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  [BUGGY]  return  ret  *  denominatorDegreesOfFreedom  +  p;  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	add	return  ret  *  denominatorDegreesOfFreedom  +  p;	return  ret;  	compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	9	1
145	[BUG]  [BUGGY]  return  ret  *  denominatorDegreesOfFreedom  +  p;  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  [BUGGY]  return  ret  *  denominatorDegreesOfFreedom  +  p;  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  ret  *  denominatorDegreesOfFreedom  +  p;	return  ret;  	compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	9	1	replace
164	[BUG]  [BUGGY]  return  super.inverseCumulativeProbability(p,  p);  [CE]  no  suitable  method  found  for  inverseCumulativeProbability(double,double)  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]  return  super.inverseCumulativeProbability(p,  p);  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	return  super.inverseCumulativeProbability(p,  p);	return  super.inverseCumulativeProbability(p);  	non-compiled	[CE]  no  suitable  method  found  for  inverseCumulativeProbability(double,double)	11	None	replace
184	[BUG]  [BUGGY]    n  =  getNumberDegreesOfFreedom();  [CE]  cannot  find  symbol  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  double  n  =  getNumeratorDegreesOfFreedom();  double  m  =  getDenominatorDegreesOfFreedom();  [BUGGY]    n  =  getNumberDegreesOfFreedom();  [BUGGY]  ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),    0.5  *  n,        0.5  *  m);  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	78	80	1	replace	    n  =  getNumberDegreesOfFreedom();		non-compiled	[CE]  cannot  find  symbol	18	None	add
201	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]  return(p  <.5)?  0.0  :  p;  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	return(p  <.5)?  0.0  :  p;	return  0.0;  	compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	1	1
202	[BUG]  [BUGGY]  return(p  <.5)?  0.0  :  p;  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]  return(p  <.5)?  0.0  :  p;  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  <.5)?  0.0  :  p;	return  0.0;  	compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	1	1	replace
204	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]  return(p  <.5)?  0.0  :  -p;  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	return(p  <.5)?  0.0  :  -p;	return  0.0;  	compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	1	1
205	[BUG]  [BUGGY]  return(p  <.5)?  0.0  :  -p;  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]  return(p  <.5)?  0.0  :  -p;  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return(p  <.5)?  0.0  :  -p;	return  0.0;  	compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	1	1	replace
241	[BUG]  [BUGGY]    final  double  p  =  getDenominatorDegreesOfFreedom();  [CE]  variable  p  is  already  defined  in  method  inverseCumulativeProbability(double)  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  [BUGGY]    final  double  p  =  getDenominatorDegreesOfFreedom();  [BUGGY]  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	100	100	1	replace	    final  double  p  =  getDenominatorDegreesOfFreedom();		non-compiled	[CE]  variable  p  is  already  defined  in  method  inverseCumulativeProbability(double)	20	None	add
242	[BUG]  [BUGGY]    final  double  p  =  getNumeratorDegreesOfFreedom();  [CE]  variable  p  is  already  defined  in  method  inverseCumulativeProbability(double)  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  [BUGGY]    final  double  p  =  getNumeratorDegreesOfFreedom();  [BUGGY]  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	100	100	1	replace	    final  double  p  =  getNumeratorDegreesOfFreedom();		non-compiled	[CE]  variable  p  is  already  defined  in  method  inverseCumulativeProbability(double)	20	None	add
243	[BUG]  [BUGGY]    final  double  p  =  getDenominatorDegreesOfFreedom().inverseCumulativeProbability(p);  [CE]  variable  p  is  already  defined  in  method  inverseCumulativeProbability(double)  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  [BUGGY]    final  double  p  =  getDenominatorDegreesOfFreedom().inverseCumulativeProbability(p);  [BUGGY]  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	100	100	1	replace	    final  double  p  =  getDenominatorDegreesOfFreedom().inverseCumulativeProbability(p);		non-compiled	[CE]  variable  p  is  already  defined  in  method  inverseCumulativeProbability(double)	20	None	add
244	[BUG]  [BUGGY]    final  double  p  =  getNumeratorDegreesOfFreedom().inverseCumulativeProbability(p);  [CE]  variable  p  is  already  defined  in  method  inverseCumulativeProbability(double)  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  [BUGGY]    final  double  p  =  getNumeratorDegreesOfFreedom().inverseCumulativeProbability(p);  [BUGGY]  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	100	100	1	replace	    final  double  p  =  getNumeratorDegreesOfFreedom().inverseCumulativeProbability(p);		non-compiled	[CE]  variable  p  is  already  defined  in  method  inverseCumulativeProbability(double)	20	None	add
245	[BUG]  [BUGGY]    final  double  p  =  getNumberDegreesOfFreedom();  [CE]  variable  p  is  already  defined  in  method  inverseCumulativeProbability(double)  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  [BUGGY]    final  double  p  =  getNumberDegreesOfFreedom();  [BUGGY]  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	100	100	1	replace	    final  double  p  =  getNumberDegreesOfFreedom();		non-compiled	[CE]  variable  p  is  already  defined  in  method  inverseCumulativeProbability(double)	20	None	add
262	[BUG]  [BUGGY]  return  Double.MIN_VALUE,  Double.MAX_VALUE;  [CE]  ';'  expected  [CONTEXT]  protected  double  getDomainUpperBound(double  p)  {  [BUGGY]  return  Double.MIN_VALUE,  Double.MAX_VALUE;  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MIN_VALUE,  Double.MAX_VALUE;	return  Double.MAX_VALUE;  	non-compiled	[CE]  ';'  expected	3	None	replace
263	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getDomainUpperBound(double  p)  {  [BUGGY]  return  Double.MAX_VALUE  -  getDomainLowerBound(p);  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Double.MAX_VALUE  -  getDomainLowerBound(p);	return  Double.MAX_VALUE;  	compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	3	1
264	[BUG]  [BUGGY]  return  Double.MAX_VALUE  -  getDomainLowerBound(p);  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getDomainUpperBound(double  p)  {  [BUGGY]  return  Double.MAX_VALUE  -  getDomainLowerBound(p);  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MAX_VALUE  -  getDomainLowerBound(p);	return  Double.MAX_VALUE;  	compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	3	1	replace
282	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  double  n  =  getNumeratorDegreesOfFreedom();  [BUGGY]    ret  =  1.0  /  getDenominatorDegreesOfFreedom();  [BUGGY]  double  m  =  getDenominatorDegreesOfFreedom();  ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	76	76	1	add	    ret  =  1.0  /  getDenominatorDegreesOfFreedom();		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	16	1
283	[BUG]  [BUGGY]    ret  =  1.0  /  getDenominatorDegreesOfFreedom();  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  double  n  =  getNumeratorDegreesOfFreedom();  [BUGGY]    ret  =  1.0  /  getDenominatorDegreesOfFreedom();  [BUGGY]  double  m  =  getDenominatorDegreesOfFreedom();  ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	76	76	1	replace	    ret  =  1.0  /  getDenominatorDegreesOfFreedom();		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	16	1	add
283	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  double  n  =  getNumeratorDegreesOfFreedom();  [BUGGY]    ret  =  Math.exp(-x  +(n  *  getDenominatorDegreesOfFreedom()));  [BUGGY]  double  m  =  getDenominatorDegreesOfFreedom();  ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	76	76	1	add	    ret  =  Math.exp(-x  +(n  *  getDenominatorDegreesOfFreedom()));		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	16	1
284	[BUG]  [BUGGY]    ret  =  Math.exp(-x  +(n  *  getDenominatorDegreesOfFreedom()));  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  double  n  =  getNumeratorDegreesOfFreedom();  [BUGGY]    ret  =  Math.exp(-x  +(n  *  getDenominatorDegreesOfFreedom()));  [BUGGY]  double  m  =  getDenominatorDegreesOfFreedom();  ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	76	76	1	replace	    ret  =  Math.exp(-x  +(n  *  getDenominatorDegreesOfFreedom()));		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	16	1	add
284	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  double  n  =  getNumeratorDegreesOfFreedom();  [BUGGY]    ret  =  1.0  /  getDenominatorDegreesOfFreedom()  *  Math.pow(x,  n);  [BUGGY]  double  m  =  getDenominatorDegreesOfFreedom();  ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	76	76	1	add	    ret  =  1.0  /  getDenominatorDegreesOfFreedom()  *  Math.pow(x,  n);		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	16	1
285	[BUG]  [BUGGY]    ret  =  1.0  /  getDenominatorDegreesOfFreedom()  *  Math.pow(x,  n);  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  double  n  =  getNumeratorDegreesOfFreedom();  [BUGGY]    ret  =  1.0  /  getDenominatorDegreesOfFreedom()  *  Math.pow(x,  n);  [BUGGY]  double  m  =  getDenominatorDegreesOfFreedom();  ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	76	76	1	replace	    ret  =  1.0  /  getDenominatorDegreesOfFreedom()  *  Math.pow(x,  n);		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	16	1	add
285	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  double  n  =  getNumeratorDegreesOfFreedom();  [BUGGY]    ret  =  Math.exp(-x  +(n  *  getNumeratorDegreesOfFreedom()));  [BUGGY]  double  m  =  getDenominatorDegreesOfFreedom();  ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	76	76	1	add	    ret  =  Math.exp(-x  +(n  *  getNumeratorDegreesOfFreedom()));		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	16	1
286	[BUG]  [BUGGY]    ret  =  Math.exp(-x  +(n  *  getNumeratorDegreesOfFreedom()));  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  double  n  =  getNumeratorDegreesOfFreedom();  [BUGGY]    ret  =  Math.exp(-x  +(n  *  getNumeratorDegreesOfFreedom()));  [BUGGY]  double  m  =  getDenominatorDegreesOfFreedom();  ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	76	76	1	replace	    ret  =  Math.exp(-x  +(n  *  getNumeratorDegreesOfFreedom()));		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	16	1	add
301	[BUG]  [BUGGY]    System.arraycopy(numeratorDegreesOfFreedom,  0,  p,  denominatorDegreesOfFreedom);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]    System.arraycopy(numeratorDegreesOfFreedom,  0,  p,  denominatorDegreesOfFreedom);  [BUGGY]  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	    System.arraycopy(numeratorDegreesOfFreedom,  0,  p,  denominatorDegreesOfFreedom);		non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	12	None	add
302	[BUG]  [BUGGY]    System.arraycopy(numeratorDegreesOfFreedom,  p,  getDenominatorDegreesOfFreedom(),  0,  p);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]    System.arraycopy(numeratorDegreesOfFreedom,  p,  getDenominatorDegreesOfFreedom(),  0,  p);  [BUGGY]  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	    System.arraycopy(numeratorDegreesOfFreedom,  p,  getDenominatorDegreesOfFreedom(),  0,  p);		non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	12	None	add
304	[BUG]  [BUGGY]    System.arraycopy(numeratorDegreesOfFreedom,  p,  getDenominatorDegreesOfFreedom(),  denominatorDegreesOfFreedom);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]    System.arraycopy(numeratorDegreesOfFreedom,  p,  getDenominatorDegreesOfFreedom(),  denominatorDegreesOfFreedom);  [BUGGY]  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	    System.arraycopy(numeratorDegreesOfFreedom,  p,  getDenominatorDegreesOfFreedom(),  denominatorDegreesOfFreedom);		non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	12	None	add
305	[BUG]  [BUGGY]    System.arraycopy(numeratorDegreesOfFreedom,  0,  p,  denominatorDegreesOfFreedom);  p  =  p;  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]    System.arraycopy(numeratorDegreesOfFreedom,  0,  p,  denominatorDegreesOfFreedom);  p  =  p;  [BUGGY]  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	    System.arraycopy(numeratorDegreesOfFreedom,  0,  p,  denominatorDegreesOfFreedom);  p  =  p;		non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	12	None	add
321	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();    [BUGGY]    p  =  getNumeratorDegreesOfFreedom();  [BUGGY]  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	147	147	1	add	    p  =  getNumeratorDegreesOfFreedom();		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	8	1
322	[BUG]  [BUGGY]    p  =  getNumeratorDegreesOfFreedom();  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();    [BUGGY]    p  =  getNumeratorDegreesOfFreedom();  [BUGGY]  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	147	147	1	replace	    p  =  getNumeratorDegreesOfFreedom();		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	8	1	add
323	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();    [BUGGY]    p  =  getNumeratorDegreesOfFreedom()  *  Math.pow(0.0,  p);  [BUGGY]  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	147	147	1	add	    p  =  getNumeratorDegreesOfFreedom()  *  Math.pow(0.0,  p);		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	8	1
324	[BUG]  [BUGGY]    p  =  getNumeratorDegreesOfFreedom()  *  Math.pow(0.0,  p);  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();    [BUGGY]    p  =  getNumeratorDegreesOfFreedom()  *  Math.pow(0.0,  p);  [BUGGY]  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	147	147	1	replace	    p  =  getNumeratorDegreesOfFreedom()  *  Math.pow(0.0,  p);		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	8	1	add
324	[BUG]  [BUGGY]    if(p  <  0.0)  {  if(d  ==  p)  {  return  p;  }  [CE]  illegal  start  of  expression  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();    [BUGGY]    if(p  <  0.0)  {  if(d  ==  p)  {  return  p;  }  [BUGGY]  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	147	147	1	replace	    if(p  <  0.0)  {  if(d  ==  p)  {  return  p;  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
325	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();    [BUGGY]    p  =  getNumeratorDegreesOfFreedom()  *  Math.pow(10.0,  p);  [BUGGY]  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	147	147	1	add	    p  =  getNumeratorDegreesOfFreedom()  *  Math.pow(10.0,  p);		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	8	1
326	[BUG]  [BUGGY]    p  =  getNumeratorDegreesOfFreedom()  *  Math.pow(10.0,  p);  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();    [BUGGY]    p  =  getNumeratorDegreesOfFreedom()  *  Math.pow(10.0,  p);  [BUGGY]  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	147	147	1	replace	    p  =  getNumeratorDegreesOfFreedom()  *  Math.pow(10.0,  p);		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	8	1	add
343	[BUG]  [BUGGY]  ret  =  beta.regularizedBeta((  n  *  x)/(m  +  n  *  x),  0.5  *  n,  0.5  *  m);  [CE]  cannot  find  symbol  beta  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  double  n  =  getNumeratorDegreesOfFreedom();  double  m  =  getDenominatorDegreesOfFreedom();  [BUGGY]  ret  =  beta.regularizedBeta((  n  *  x)/(m  +  n  *  x),  0.5  *  n,  0.5  *  m);  [BUGGY]  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	78	80	1	replace	ret  =  beta.regularizedBeta((  n  *  x)/(m  +  n  *  x),  0.5  *  n,  0.5  *  m);	ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),  0.5  *  n,    0.5  *  m);  	non-compiled	[CE]  cannot  find  symbol  beta	17	None	replace
362	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  [BUGGY]    ret  =  getNumeratorDegreesOfFreedom()  *  Math.pow(10,  x);  [BUGGY]  double  n  =  getNumeratorDegreesOfFreedom();  double  m  =  getDenominatorDegreesOfFreedom();  ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	75	75	1	add	    ret  =  getNumeratorDegreesOfFreedom()  *  Math.pow(10,  x);		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	14	1
363	[BUG]  [BUGGY]    ret  =  getNumeratorDegreesOfFreedom()  *  Math.pow(10,  x);  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  [BUGGY]    ret  =  getNumeratorDegreesOfFreedom()  *  Math.pow(10,  x);  [BUGGY]  double  n  =  getNumeratorDegreesOfFreedom();  double  m  =  getDenominatorDegreesOfFreedom();  ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	75	75	1	replace	    ret  =  getNumeratorDegreesOfFreedom()  *  Math.pow(10,  x);		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	14	1	add
363	[BUG]  [BUGGY]    ret  =  getProbabilityDegreesOfFreedom();  [CE]  cannot  find  symbol  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  [BUGGY]    ret  =  getProbabilityDegreesOfFreedom();  [BUGGY]  double  n  =  getNumeratorDegreesOfFreedom();  double  m  =  getDenominatorDegreesOfFreedom();  ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	75	75	1	replace	    ret  =  getProbabilityDegreesOfFreedom();		non-compiled	[CE]  cannot  find  symbol	14	None	add
365	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  [BUGGY]    ret  =  getNumeratorDegreesOfFreedom()  *  Math.pow(x,  0.0);  [BUGGY]  double  n  =  getNumeratorDegreesOfFreedom();  double  m  =  getDenominatorDegreesOfFreedom();  ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	75	75	1	add	    ret  =  getNumeratorDegreesOfFreedom()  *  Math.pow(x,  0.0);		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	14	1
366	[BUG]  [BUGGY]    ret  =  getNumeratorDegreesOfFreedom()  *  Math.pow(x,  0.0);  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  [BUGGY]    ret  =  getNumeratorDegreesOfFreedom()  *  Math.pow(x,  0.0);  [BUGGY]  double  n  =  getNumeratorDegreesOfFreedom();  double  m  =  getDenominatorDegreesOfFreedom();  ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	75	75	1	replace	    ret  =  getNumeratorDegreesOfFreedom()  *  Math.pow(x,  0.0);		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	14	1	add
3	[BUG]  [BUGGY]    m  =  getNumeratorDegreesOfFreedom();  [CE]  cannot  find  symbol  m  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();    [BUGGY]    m  =  getNumeratorDegreesOfFreedom();  [BUGGY]  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	147	147	1	replace	    m  =  getNumeratorDegreesOfFreedom();		non-compiled	[CE]  cannot  find  symbol  m	8	None	add
4	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();    [BUGGY]    p  =  getNumeratorDegreesOfFreedom()  *  2.0;  [BUGGY]  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	147	147	1	add	    p  =  getNumeratorDegreesOfFreedom()  *  2.0;		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	8	1
5	[BUG]  [BUGGY]    p  =  getNumeratorDegreesOfFreedom()  *  2.0;  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();    [BUGGY]    p  =  getNumeratorDegreesOfFreedom()  *  2.0;  [BUGGY]  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	147	147	1	replace	    p  =  getNumeratorDegreesOfFreedom()  *  2.0;		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	8	1	add
5	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();    [BUGGY]    double  m  =  getNumeratorDegreesOfFreedom()  *  2.0;  [BUGGY]  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	147	147	1	add	    double  m  =  getNumeratorDegreesOfFreedom()  *  2.0;		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	8	1
6	[BUG]  [BUGGY]    double  m  =  getNumeratorDegreesOfFreedom()  *  2.0;  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();    [BUGGY]    double  m  =  getNumeratorDegreesOfFreedom()  *  2.0;  [BUGGY]  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	147	147	1	replace	    double  m  =  getNumeratorDegreesOfFreedom()  *  2.0;		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	8	1	add
31	[BUG]  [BUGGY]    if(p  <.5)  {  if(getDenominatorDegreesOfFreedom()  >  0)  {  return  getDomainLowerBound(0.0);  }  [CE]  illegal  start  of  expression  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]    if(p  <.5)  {  if(getDenominatorDegreesOfFreedom()  >  0)  {  return  getDomainLowerBound(0.0);  }  [BUGGY]  return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	    if(p  <.5)  {  if(getDenominatorDegreesOfFreedom()  >  0)  {  return  getDomainLowerBound(0.0);  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
32	[BUG]  [BUGGY]    if(p  <  0.0)  {  if(getDenominatorDegreesOfFreedom()  >  0)  {  return  getDenominatorDegreesOfFreedom();  }  [CE]  illegal  start  of  expression  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]    if(p  <  0.0)  {  if(getDenominatorDegreesOfFreedom()  >  0)  {  return  getDenominatorDegreesOfFreedom();  }  [BUGGY]  return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	    if(p  <  0.0)  {  if(getDenominatorDegreesOfFreedom()  >  0)  {  return  getDenominatorDegreesOfFreedom();  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
33	[BUG]  [BUGGY]    if(p  <.5)  {  if(getDenominatorDegreesOfFreedom()  >  0)  {  return  getDenominatorDegreesOfFreedom();  }  [CE]  illegal  start  of  expression  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]    if(p  <.5)  {  if(getDenominatorDegreesOfFreedom()  >  0)  {  return  getDenominatorDegreesOfFreedom();  }  [BUGGY]  return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	    if(p  <.5)  {  if(getDenominatorDegreesOfFreedom()  >  0)  {  return  getDenominatorDegreesOfFreedom();  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
34	[BUG]  [BUGGY]    if(p  <  0.0)  {  if(getDenominatorDegreesOfFreedom()  >  0)  {  return  getDenominatorDegreesOfFreedom()  *  p;  }  [CE]  illegal  start  of  expression  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]    if(p  <  0.0)  {  if(getDenominatorDegreesOfFreedom()  >  0)  {  return  getDenominatorDegreesOfFreedom()  *  p;  }  [BUGGY]  return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	    if(p  <  0.0)  {  if(getDenominatorDegreesOfFreedom()  >  0)  {  return  getDenominatorDegreesOfFreedom()  *  p;  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
35	[BUG]  [BUGGY]    if(p  <.5)  {  if(getDenominatorDegreesOfFreedom()  >  0)  {  return  getDenominatorDegreesOfFreedom()  *  p;  }  [CE]  illegal  start  of  expression  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]    if(p  <.5)  {  if(getDenominatorDegreesOfFreedom()  >  0)  {  return  getDenominatorDegreesOfFreedom()  *  p;  }  [BUGGY]  return  0.0;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	    if(p  <.5)  {  if(getDenominatorDegreesOfFreedom()  >  0)  {  return  getDenominatorDegreesOfFreedom()  *  p;  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
61	[BUG]  [BUGGY]    System.arraycopy(numeratorDegreesOfFreedom,  p,  ret,  denominatorDegreesOfFreedom);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  [BUGGY]    System.arraycopy(numeratorDegreesOfFreedom,  p,  ret,  denominatorDegreesOfFreedom);  [BUGGY]  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	    System.arraycopy(numeratorDegreesOfFreedom,  p,  ret,  denominatorDegreesOfFreedom);		non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	10	None	add
62	[BUG]  [BUGGY]    System.arraycopy(numeratorDegreesOfFreedom,  0,  ret,  0,  denominatorDegreesOfFreedom);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  [BUGGY]    System.arraycopy(numeratorDegreesOfFreedom,  0,  ret,  0,  denominatorDegreesOfFreedom);  [BUGGY]  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	    System.arraycopy(numeratorDegreesOfFreedom,  0,  ret,  0,  denominatorDegreesOfFreedom);		non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	10	None	add
63	[BUG]  [BUGGY]    System.arraycopy(numeratorDegreesOfFreedom,  0,  ret,  1,  denominatorDegreesOfFreedom);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  [BUGGY]    System.arraycopy(numeratorDegreesOfFreedom,  0,  ret,  1,  denominatorDegreesOfFreedom);  [BUGGY]  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	    System.arraycopy(numeratorDegreesOfFreedom,  0,  ret,  1,  denominatorDegreesOfFreedom);		non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	10	None	add
64	[BUG]  [BUGGY]    System.arraycopy(numeratorDegreesOfFreedom,  p,  ret,  0,  p);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  [BUGGY]    System.arraycopy(numeratorDegreesOfFreedom,  p,  ret,  0,  p);  [BUGGY]  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	    System.arraycopy(numeratorDegreesOfFreedom,  p,  ret,  0,  p);		non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	10	None	add
91	[BUG]  [BUGGY]    final  int  p  =  Math.sqrt((  int)p);  [CE]  variable  p  is  already  defined  in  method  inverseCumulativeProbability(double)  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  [BUGGY]    final  int  p  =  Math.sqrt((  int)p);  [BUGGY]  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	100	100	1	replace	    final  int  p  =  Math.sqrt((  int)p);		non-compiled	[CE]  variable  p  is  already  defined  in  method  inverseCumulativeProbability(double)	20	None	add
92	[BUG]  [BUGGY]    if(p  ==  0)  {  if(p  ==.5)  {  return  p;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  [BUGGY]    if(p  ==  0)  {  if(p  ==.5)  {  return  p;  }  [BUGGY]  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	100	100	1	replace	    if(p  ==  0)  {  if(p  ==.5)  {  return  p;  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
93	[BUG]  [BUGGY]    if(p  ==  0)  {  if(p  ==  0.0)  {  return  0;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  [BUGGY]    if(p  ==  0)  {  if(p  ==  0.0)  {  return  0;  }  [BUGGY]  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	100	100	1	replace	    if(p  ==  0)  {  if(p  ==  0.0)  {  return  0;  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
94	[BUG]  [BUGGY]    if(p  ==  0)  {  if(p  ==  -1)  {  return  p;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  [BUGGY]    if(p  ==  0)  {  if(p  ==  -1)  {  return  p;  }  [BUGGY]  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	100	100	1	replace	    if(p  ==  0)  {  if(p  ==  -1)  {  return  p;  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
95	[BUG]  [BUGGY]    if(p  ==  0)  {  if(p  ==  0.0)  {  return  1.0;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  [BUGGY]    if(p  ==  0)  {  if(p  ==  0.0)  {  return  1.0;  }  [BUGGY]  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	100	100	1	replace	    if(p  ==  0)  {  if(p  ==  0.0)  {  return  1.0;  }		non-compiled	[CE]  illegal  start  of  expression	20	None	add
121	[BUG]  [BUGGY]    double  x  =  getSmallDegreesOfFreedom();  [CE]  variable  x  is  already  defined  in  method  cumulativeProbability(double)  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  double  n  =  getNumeratorDegreesOfFreedom();  [BUGGY]    double  x  =  getSmallDegreesOfFreedom();  [BUGGY]  double  m  =  getDenominatorDegreesOfFreedom();  ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	76	76	1	replace	    double  x  =  getSmallDegreesOfFreedom();		non-compiled	[CE]  variable  x  is  already  defined  in  method  cumulativeProbability(double)	16	None	add
123	[BUG]  [BUGGY]    double  x  =  getScaleDegreesOfFreedom();  [CE]  variable  x  is  already  defined  in  method  cumulativeProbability(double)  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  double  n  =  getNumeratorDegreesOfFreedom();  [BUGGY]    double  x  =  getScaleDegreesOfFreedom();  [BUGGY]  double  m  =  getDenominatorDegreesOfFreedom();  ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	76	76	1	replace	    double  x  =  getScaleDegreesOfFreedom();		non-compiled	[CE]  variable  x  is  already  defined  in  method  cumulativeProbability(double)	16	None	add
124	[BUG]  [BUGGY]    double  x  =  getLowerBound();  [CE]  variable  x  is  already  defined  in  method  cumulativeProbability(double)  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  double  n  =  getNumeratorDegreesOfFreedom();  [BUGGY]    double  x  =  getLowerBound();  [BUGGY]  double  m  =  getDenominatorDegreesOfFreedom();  ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	76	76	1	replace	    double  x  =  getLowerBound();		non-compiled	[CE]  variable  x  is  already  defined  in  method  cumulativeProbability(double)	16	None	add
125	[BUG]  [BUGGY]    double  x  =  getVariableDegreesOfFreedom();  [CE]  variable  x  is  already  defined  in  method  cumulativeProbability(double)  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  double  n  =  getNumeratorDegreesOfFreedom();  [BUGGY]    double  x  =  getVariableDegreesOfFreedom();  [BUGGY]  double  m  =  getDenominatorDegreesOfFreedom();  ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	76	76	1	replace	    double  x  =  getVariableDegreesOfFreedom();		non-compiled	[CE]  variable  x  is  already  defined  in  method  cumulativeProbability(double)	16	None	add
151	[BUG]  [BUGGY]    n  =  getSmallDegreesOfFreedom();  [CE]  cannot  find  symbol  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  double  n  =  getNumeratorDegreesOfFreedom();  double  m  =  getDenominatorDegreesOfFreedom();  [BUGGY]    n  =  getSmallDegreesOfFreedom();  [BUGGY]  ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),    0.5  *  n,        0.5  *  m);  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	78	80	1	replace	    n  =  getSmallDegreesOfFreedom();		non-compiled	[CE]  cannot  find  symbol	18	None	add
152	[BUG]  [BUGGY]    n  =  getStandardDegreesOfFreedom();  [CE]  cannot  find  symbol  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  double  n  =  getNumeratorDegreesOfFreedom();  double  m  =  getDenominatorDegreesOfFreedom();  [BUGGY]    n  =  getStandardDegreesOfFreedom();  [BUGGY]  ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),    0.5  *  n,        0.5  *  m);  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	78	80	1	replace	    n  =  getStandardDegreesOfFreedom();		non-compiled	[CE]  cannot  find  symbol	18	None	add
154	[BUG]  [BUGGY]    n  =  getStandardDegree();  [CE]  cannot  find  symbol  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  double  n  =  getNumeratorDegreesOfFreedom();  double  m  =  getDenominatorDegreesOfFreedom();  [BUGGY]    n  =  getStandardDegree();  [BUGGY]  ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),    0.5  *  n,        0.5  *  m);  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	78	80	1	replace	    n  =  getStandardDegree();		non-compiled	[CE]  cannot  find  symbol	18	None	add
155	[BUG]  [BUGGY]    n  =  getLowerBound();  [CE]  cannot  find  symbol  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  double  n  =  getNumeratorDegreesOfFreedom();  double  m  =  getDenominatorDegreesOfFreedom();  [BUGGY]    n  =  getLowerBound();  [BUGGY]  ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),    0.5  *  n,        0.5  *  m);  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	78	80	1	replace	    n  =  getLowerBound();		non-compiled	[CE]  cannot  find  symbol	18	None	add
181	[BUG]  [BUGGY]    if(p  ==  0)  {  if(p.getStandardDeviation()  >  0)  {  return  Integer.MAX_VALUE;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]    if(p  ==  0)  {  if(p.getStandardDeviation()  >  0)  {  return  Integer.MAX_VALUE;  }  [BUGGY]  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	    if(p  ==  0)  {  if(p.getStandardDeviation()  >  0)  {  return  Integer.MAX_VALUE;  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
182	[BUG]  [BUGGY]    if(p  ==  0)  {  if(p.getStandardDeviation()  >  0)  {  return  Integer.MIN_VALUE;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]    if(p  ==  0)  {  if(p.getStandardDeviation()  >  0)  {  return  Integer.MIN_VALUE;  }  [BUGGY]  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	    if(p  ==  0)  {  if(p.getStandardDeviation()  >  0)  {  return  Integer.MIN_VALUE;  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
183	[BUG]  [BUGGY]    if(p  ==  0)  {  if(p.equals(Math.exp(1.0)))  {  return  p;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]    if(p  ==  0)  {  if(p.equals(Math.exp(1.0)))  {  return  p;  }  [BUGGY]  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	    if(p  ==  0)  {  if(p.equals(Math.exp(1.0)))  {  return  p;  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
184	[BUG]  [BUGGY]    if(p  ==  0)  {  if(p.getStandardDeviation()  >  0)  {  return  Math.sqrt(Math.abs(0.0,  p.getStandardDeviation()));  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]    if(p  ==  0)  {  if(p.getStandardDeviation()  >  0)  {  return  Math.sqrt(Math.abs(0.0,  p.getStandardDeviation()));  }  [BUGGY]  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	    if(p  ==  0)  {  if(p.getStandardDeviation()  >  0)  {  return  Math.sqrt(Math.abs(0.0,  p.getStandardDeviation()));  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
185	[BUG]  [BUGGY]    if(p  ==  0)  {  if(p.getStandardDeviation()  >  0)  {  return  Math.sqrt(Math.abs(0.0)+  Math.abs(1.0));  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]    if(p  ==  0)  {  if(p.getStandardDeviation()  >  0)  {  return  Math.sqrt(Math.abs(0.0)+  Math.abs(1.0));  }  [BUGGY]  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	    if(p  ==  0)  {  if(p.getStandardDeviation()  >  0)  {  return  Math.sqrt(Math.abs(0.0)+  Math.abs(1.0));  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
214	[BUG]  [BUGGY]  ret  =  Beta.regularizedBeta((  n  *  x)/  (Math.abs(m  +  n  *  x),  0.5  *  n,  0.5  *  m);  [CE]  ')'  expected  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  double  n  =  getNumeratorDegreesOfFreedom();  double  m  =  getDenominatorDegreesOfFreedom();  [BUGGY]  ret  =  Beta.regularizedBeta((  n  *  x)/  (Math.abs(m  +  n  *  x),  0.5  *  n,  0.5  *  m);  [BUGGY]  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	78	80	1	replace	ret  =  Beta.regularizedBeta((  n  *  x)/  (Math.abs(m  +  n  *  x),  0.5  *  n,  0.5  *  m);	ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),  0.5  *  n,    0.5  *  m);  	non-compiled	[CE]  ')'  expected	17	None	replace
242	[BUG]  [BUGGY]    if(p  <.5)  {  if(getDenominatorDegreesOfFreedom()  >  0)  {  return  Math.max(getDenominatorDegreesOfFreedom(),  p);  }  [CE]  illegal  start  of  expression  [CONTEXT]  protected  double  getDomainUpperBound(double  p)  {  [BUGGY]    if(p  <.5)  {  if(getDenominatorDegreesOfFreedom()  >  0)  {  return  Math.max(getDenominatorDegreesOfFreedom(),  p);  }  [BUGGY]  return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	    if(p  <.5)  {  if(getDenominatorDegreesOfFreedom()  >  0)  {  return  Math.max(getDenominatorDegreesOfFreedom(),  p);  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
243	[BUG]  [BUGGY]    if(p  <.5)  {  if(getDenominatorDegreesOfFreedom()  >  0)  {  return  Math.max(getDenominatorDegreesOfFreedom()  /  getDenominatorDegreesOfFreedom());  }  [CE]  illegal  start  of  expression  [CONTEXT]  protected  double  getDomainUpperBound(double  p)  {  [BUGGY]    if(p  <.5)  {  if(getDenominatorDegreesOfFreedom()  >  0)  {  return  Math.max(getDenominatorDegreesOfFreedom()  /  getDenominatorDegreesOfFreedom());  }  [BUGGY]  return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	    if(p  <.5)  {  if(getDenominatorDegreesOfFreedom()  >  0)  {  return  Math.max(getDenominatorDegreesOfFreedom()  /  getDenominatorDegreesOfFreedom());  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
244	[BUG]  [BUGGY]    if(p  <.5)  {  if(getDenominatorDegreesOfFreedom()  >  0)  {  return  Math.max(getDenominatorDegreesOfFreedom()  /  Math.min(p,  0.0));  }  [CE]  illegal  start  of  expression  [CONTEXT]  protected  double  getDomainUpperBound(double  p)  {  [BUGGY]    if(p  <.5)  {  if(getDenominatorDegreesOfFreedom()  >  0)  {  return  Math.max(getDenominatorDegreesOfFreedom()  /  Math.min(p,  0.0));  }  [BUGGY]  return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	    if(p  <.5)  {  if(getDenominatorDegreesOfFreedom()  >  0)  {  return  Math.max(getDenominatorDegreesOfFreedom()  /  Math.min(p,  0.0));  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
245	[BUG]  [BUGGY]    if(p  <.5)  {  if(getDenominatorDegreesOfFreedom()  >  m)  {  return  Math.max(getDenominatorDegreesOfFreedom(),  p);  }  [CE]  illegal  start  of  expression  [CONTEXT]  protected  double  getDomainUpperBound(double  p)  {  [BUGGY]    if(p  <.5)  {  if(getDenominatorDegreesOfFreedom()  >  m)  {  return  Math.max(getDenominatorDegreesOfFreedom(),  p);  }  [BUGGY]  return  Double.MAX_VALUE;  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	    if(p  <.5)  {  if(getDenominatorDegreesOfFreedom()  >  m)  {  return  Math.max(getDenominatorDegreesOfFreedom(),  p);  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
301	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  [BUGGY]  return  ret  *  p;  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	add	return  ret  *  p;	return  ret;  	compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	9	1
302	[BUG]  [BUGGY]  return  ret  *  p;  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  [BUGGY]  return  ret  *  p;  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  ret  *  p;	return  ret;  	compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	9	1	replace
303	[BUG]  [BUGGY]  return  ret  *  m;  [CE]  cannot  find  symbol  m  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  [BUGGY]  return  ret  *  m;  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  ret  *  m;	return  ret;  	non-compiled	[CE]  cannot  find  symbol  m	9	None	replace
304	[BUG]  [BUGGY]  return  ret  *  num;  [CE]  cannot  find  symbol  num  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  [BUGGY]  return  ret  *  num;  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	return  ret  *  num;	return  ret;  	non-compiled	[CE]  cannot  find  symbol  num	9	None	replace
332	[BUG]  [BUGGY]  return  Double.MAX_VALUE  *  Math.pow(Double.doubleToLongBound(p));  [CE]  cannot  find  symbol  [CONTEXT]  protected  double  getDomainUpperBound(double  p)  {  [BUGGY]  return  Double.MAX_VALUE  *  Math.pow(Double.doubleToLongBound(p));  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MAX_VALUE  *  Math.pow(Double.doubleToLongBound(p));	return  Double.MAX_VALUE;  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
333	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getDomainUpperBound(double  p)  {  [BUGGY]  return  Double.MAX_VALUE  /  Double.MIN_VALUE;  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	return  Double.MAX_VALUE  /  Double.MIN_VALUE;	return  Double.MAX_VALUE;  	compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	3	1
334	[BUG]  [BUGGY]  return  Double.MAX_VALUE  /  Double.MIN_VALUE;  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getDomainUpperBound(double  p)  {  [BUGGY]  return  Double.MAX_VALUE  /  Double.MIN_VALUE;  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MAX_VALUE  /  Double.MIN_VALUE;	return  Double.MAX_VALUE;  	compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	3	1	replace
334	[BUG]  [BUGGY]  return  Double.MAX_VALUE  *  Math.pow(DomainUpper.MIN_VALUE,  p);  [CE]  cannot  find  symbol  DomainUpper  [CONTEXT]  protected  double  getDomainUpperBound(double  p)  {  [BUGGY]  return  Double.MAX_VALUE  *  Math.pow(DomainUpper.MIN_VALUE,  p);  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainUpperBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	return  Double.MAX_VALUE  *  Math.pow(DomainUpper.MIN_VALUE,  p);	return  Double.MAX_VALUE;  	non-compiled	[CE]  cannot  find  symbol  DomainUpper	3	None	replace
393	[BUG]  [BUGGY]    int  m  =  getNumeratorDegreesOfFreedom();  [CE]  possible  loss  of  precision  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  [BUGGY]    int  m  =  getNumeratorDegreesOfFreedom();  [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	    int  m  =  getNumeratorDegreesOfFreedom();		non-compiled	[CE]  possible  loss  of  precision	6	None	add
394	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  [BUGGY]    double  m  =  getNumeratorDegreesOfFreedom()  *  Math.pow(0.0,  p);  [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	add	    double  m  =  getNumeratorDegreesOfFreedom()  *  Math.pow(0.0,  p);		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	6	1
395	[BUG]  [BUGGY]    double  m  =  getNumeratorDegreesOfFreedom()  *  Math.pow(0.0,  p);  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  [BUGGY]    double  m  =  getNumeratorDegreesOfFreedom()  *  Math.pow(0.0,  p);  [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	    double  m  =  getNumeratorDegreesOfFreedom()  *  Math.pow(0.0,  p);		compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	6	1	add
395	[BUG]  [BUGGY]    m  =  getNumeratorDegreesOfFreedom();  [CE]  cannot  find  symbol  m  [CONTEXT]  protected  double  getInitialDomain(double  p)  {  double  ret;  [BUGGY]    m  =  getNumeratorDegreesOfFreedom();  [BUGGY]  double  d  =  getDenominatorDegreesOfFreedom();  ret  =  d  /  (d  -  2.0);  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  getInitialDomain  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  d  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	    m  =  getNumeratorDegreesOfFreedom();		non-compiled	[CE]  cannot  find  symbol  m	6	None	add
512	[BUG]  [BUGGY]    ret  =  super.cumulativeProbability(x);  [CE]  abstract  method  cumulativeProbability(double)  in  Distribution  cannot  be  accessed  directly  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  [BUGGY]    ret  =  super.cumulativeProbability(x);  [BUGGY]  double  n  =  getNumeratorDegreesOfFreedom();  double  m  =  getDenominatorDegreesOfFreedom();  ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	75	75	1	replace	    ret  =  super.cumulativeProbability(x);		non-compiled	[CE]  abstract  method  cumulativeProbability(double)  in  Distribution  cannot  be  accessed  directly	14	None	add
513	[BUG]  [BUGGY]    ret  =  getSmallDegreesOfFreedom();  [CE]  cannot  find  symbol  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  [BUGGY]    ret  =  getSmallDegreesOfFreedom();  [BUGGY]  double  n  =  getNumeratorDegreesOfFreedom();  double  m  =  getDenominatorDegreesOfFreedom();  ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	75	75	1	replace	    ret  =  getSmallDegreesOfFreedom();		non-compiled	[CE]  cannot  find  symbol	14	None	add
514	[BUG]  [BUGGY]    ret  =  getMean();  [CE]  cannot  find  symbol  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  [BUGGY]    ret  =  getMean();  [BUGGY]  double  n  =  getNumeratorDegreesOfFreedom();  double  m  =  getDenominatorDegreesOfFreedom();  ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	75	75	1	replace	    ret  =  getMean();		non-compiled	[CE]  cannot  find  symbol	14	None	add
515	[BUG]  [BUGGY]    ret  =  Math.exp(-x  *  Math.log(1.0))  /  getSmallDegreesOfFreedom();  [CE]  cannot  find  symbol  [CONTEXT]  public  double  cumulativeProbability(double  x)  throws  MathException  {  double  ret;  if  (x  <=  0.0)  {  ret  =  0.0;  }  else  {  [BUGGY]    ret  =  Math.exp(-x  *  Math.log(1.0))  /  getSmallDegreesOfFreedom();  [BUGGY]  double  n  =  getNumeratorDegreesOfFreedom();  double  m  =  getDenominatorDegreesOfFreedom();  ret  =  Beta.regularizedBeta((n  *  x)  /  (m  +  n  *  x),  0.5  *  n,  0.5  *  m);  }  return  ret;  }  [CLASS]  FDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	75	75	1	replace	    ret  =  Math.exp(-x  *  Math.log(1.0))  /  getSmallDegreesOfFreedom();		non-compiled	[CE]  cannot  find  symbol	14	None	add
544	[BUG]  [BUGGY]  if(p  ==  0  ||  p  >  0x)  {  [CE]  hexadecimal  numbers  must  contain  at  least  one  hexadecimal  digit  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  [BUGGY]  if(p  ==  0  ||  p  >  0x)  {  [BUGGY]  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	100	100	1	replace	if(p  ==  0  ||  p  >  0x)  {	if  (p  ==  0)  {  	non-compiled	[CE]  hexadecimal  numbers  must  contain  at  least  one  hexadecimal  digit	19	None	replace
573	[BUG]  [BUGGY]  return  0.0  ||  p  >  0;  [CE]  bad  operand  types  for  binary  operator  '||'  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]  return  0.0  ||  p  >  0;  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return  0.0  ||  p  >  0;	return  0.0;  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	1	None	replace
574	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]  return  0.0  *(p  -.5);  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	return  0.0  *(p  -.5);	return  0.0;  	compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	1	1
575	[BUG]  [BUGGY]  return  0.0  *(p  -.5);  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom  [CONTEXT]  protected  double  getDomainLowerBound(double  p)  {  [BUGGY]  return  0.0  *(p  -.5);  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  getDomainLowerBound  [RETURN_TYPE]  double  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	return  0.0  *(p  -.5);	return  0.0;  	compilable	  [FE]  IllegalArgumentException  testSmallDegreesOfFreedom	1	1	replace
