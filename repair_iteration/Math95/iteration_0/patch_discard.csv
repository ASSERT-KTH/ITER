compilation error,119,replace,[CE] double cannot be dereferenced,return 0.0; ,return 0.0 / denominatorDegreesOfFreedom * getNumeratorDegreesOfFreedom().doubleValue();
compilation error,119,replace,[CE] double cannot be dereferenced,return 0.0; ,return 0.0 / denominatorDegreesOfFreedom * getNumeratorDegreesOfFreedom().doubleValue() > p;
compilation error,119,replace,[CE] missing return statement,return 0.0; , 
increase failing tests,145,replace, [FE] IllegalArgumentException testSmallDegreesOfFreedom,double d = getDenominatorDegreesOfFreedom(); ,double d = getDenominatorDegreesOfFreedom() * p;
increase failing tests,145,replace, [FE] IllegalArgumentException testSmallDegreesOfFreedom,double d = getDenominatorDegreesOfFreedom(); ,double d = getDenominatorDegreesOfFreedom() * 2;
compilation error,145,replace,[CE] cannot find symbol d,double d = getDenominatorDegreesOfFreedom(); , 
compilation error,132,add,[CE] double cannot be dereferenced,,  double ret = getDenominatorDegreesOfFreedom().doubleValue();
compilation error,132,add,[CE] abstract method getDomainUpperBound(double) in AbstractContinuousDistribution cannot be accessed directly,,  super.getDomainUpperBound(p);
compilation error,132,add,[CE] double cannot be dereferenced,,  double ret = getDenominatorDegreesOfFreedom().doubleValue() * p;
compilation error,132,add,[CE] illegal start of expression,,  if(DomainUpperBound == p) { double ret = getDenominatorDegreesOfFreedom(); if(ret > 0) { return ret; }
compilation error,132,add,[CE] illegal start of expression,,  if(DomainUpperBound == p) { double ret = getDenominatorDegreesOfFreedom().doubleValue(); if(ret > 0) { return ret; }
increase failing tests,147,add, [FE] IllegalArgumentException testSmallDegreesOfFreedom,,  d = getNumeratorDegreesOfFreedom() * p;
compilation error,76,add,[CE] variable x is already defined in method cumulativeProbability(double),,  double x = getDenominatorDegreesOfFreedom();
compilation error,76,add,[CE] variable n is already defined in method cumulativeProbability(double),,  double n = getDenominatorDegreesOfFreedom();
compilation error,76,add,[CE] no suitable method found for regularizedBeta(double),,  ret = Beta.regularizedBeta(( n * x)/ getNumeratorDegreesOfFreedom());
compilation error,76,add,[CE] variable x is already defined in method cumulativeProbability(double),,  double x = getComparatorDegreesOfFreedom();
compilation error,76,add,[CE] no suitable method found for regularizedBeta(double),,  ret = Beta.regularizedBeta(( n * x)* getNumeratorDegreesOfFreedom());
compilation error,100,add,[CE] illegal start of expression,,  if(p == 0) { if(p == 0) { return 0d; }
compilation error,100,add,[CE] illegal start of expression,,  if(p == 0) { if(p == 0) { return 0; }
compilation error,100,add,[CE] illegal start of expression,,  if(p == 0) { if(p == 0) { return Double.POSITIVE_INFINITY; }
compilation error,100,add,[CE] illegal start of expression,,  if(p == 0) { if(p > 0) { return 0; }
compilation error,100,add,[CE] illegal start of expression,,  if(p == 0) { if(p == 0) { return 1d; }
increase failing tests,106,replace, [FE] java.lang.IllegalArgumentException: p must be between 0.0 and 1.0 testSmallDegreesOfFreedom,return super.inverseCumulativeProbability(p); ,return super.inverseCumulativeProbability(p - 1);
increase failing tests,106,replace, [FE] java.lang.IllegalArgumentException: p must be between 0.0 and 1.0 testSmallDegreesOfFreedom,return super.inverseCumulativeProbability(p); ,return super.inverseCumulativeProbability(p + 1);
compilation error,106,replace,[CE] missing return statement,return super.inverseCumulativeProbability(p); , 
compilation error,119,add,[CE] illegal start of expression,,  if(p > 0.0) { double denominatorDegreesOfFreedom = getDenominatorDegreesOfFreedom(); if(denominatorDegreesOfFreedom > 0.0) { throw new IllegalArgumentException(""); }
compilation error,119,add,[CE] illegal start of expression,,  if(p > 0.0) { double denominatorDegreesOfFreedom = getDenominatorDegreesOfFreedom(); if(denominatorDegreesOfFreedom > 0.0) { return 0.0; }
compilation error,119,add,[CE] illegal start of expression,,  if(p > 0.0) { double denominatorDegreesOfFreedom = getDenominatorDegreesOfFreedom(); if(denominatorDegreesOfFreedom > 0.0) { return domainLowerBound; }
compilation error,119,add,[CE] illegal start of expression,,  if(p > 0.0) { double denominatorDegreesOfFreedom = getDenominatorDegreesOfFreedom().doubleValue(); if(denominatorDegreesOfFreedom > 0.0) { return 0.0; }
compilation error,119,add,[CE] abstract method getDomainLowerBound(double) in AbstractContinuousDistribution cannot be accessed directly,,  super.getDomainLowerBound(p);
compilation error,75,replace,[CE] cannot find symbol,double n = getNumeratorDegreesOfFreedom(); ,double n = getNumberDegreesOfFreedom();
increase failing tests,75,replace, [FE] IllegalArgumentException testSmallDegreesOfFreedom,double n = getNumeratorDegreesOfFreedom(); ,double n = getNumeratorDegreesOfFreedom() * 2;
compilation error,75,replace,[CE] cannot find symbol n,double n = getNumeratorDegreesOfFreedom(); , 
compilation error,148,add,[CE] double cannot be dereferenced,,  ret = getNumeratorDegreesOfFreedom().doubleValue() * p;
increase failing tests,148,add, [FE] IllegalArgumentException testSmallDegreesOfFreedom,,  ret = getNumeratorDegreesOfFreedom() *(p - 1.0);
compilation error,78,replace,[CE] ')' expected,ret = Beta.regularizedBeta((n * x) / (m + n * x), 0.5 * n,  0.5 * m); ,ret = Beta.regularizedBeta(( n * x)/ (m + n * x, 0.5 * n, 0.5 * m);
increase failing tests,78,replace, [FE] IllegalArgumentException testSmallDegreesOfFreedom,ret = Beta.regularizedBeta((n * x) / (m + n * x), 0.5 * n,  0.5 * m); ,ret = Beta.regularizedBeta(( n * x)/ (m + m * x), 0.5 * n, 0.5 * m);
compilation error,78,replace,[CE] variable ret might not have been initialized,ret = Beta.regularizedBeta((n * x) / (m + n * x), 0.5 * n,  0.5 * m); , 
increase failing tests,76,replace, [FE] IllegalArgumentException testSmallDegreesOfFreedom,double m = getDenominatorDegreesOfFreedom(); ,double m = getDenominatorDegreesOfFreedom() * 2;
increase failing tests,76,replace, [FE] IllegalArgumentException testSmallDegreesOfFreedom,double m = getDenominatorDegreesOfFreedom(); ,double m = getDenominatorDegreesOfFreedom() * n;
increase failing tests,76,replace, [FE] IllegalArgumentException testSmallDegreesOfFreedom,double m = getDenominatorDegreesOfFreedom(); ,double m = getDenominatorDegreesOfFreedom() * x;
compilation error,75,add,[CE] no suitable method found for regularizedBeta(double),,  ret = Beta.regularizedBeta(( x * x)/ getNumeratorDegreesOfFreedom());
compilation error,75,add,[CE] no suitable method found for regularizedBeta(double),,  ret = Beta.regularizedBeta(( x * x)/ getDenominatorDegreesOfFreedom());
increase failing tests,147,replace, [FE] IllegalArgumentException testSmallDegreesOfFreedom,ret = d / (d - 2.0); ,ret = d /(p - 2.0);
compilation error,145,add,[CE] illegal start of expression,,  if(p < 0.0) { ret = getNumeratorDegreesOfFreedom(); if(p > 0.0) { return ret; }
increase failing tests,100,replace, [FE] AssertionFailedError testSmallDegreesOfFreedom,if (p == 0) { ,if(p == 0 || p > 0) {
increase failing tests,100,replace, [FE] AssertionFailedError testSmallDegreesOfFreedom,if (p == 0) { ,if(p == 0d || p > 0) {
compilation error,106,add,[CE] illegal start of expression,,  if(p == 2) { if(p > 0) { return Double.POSITIVE_INFINITY; }
compilation error,106,add,[CE] illegal start of expression,,  if(p == 2) { if(p.equals(Math.PI)) { return 0; }
compilation error,106,add,[CE] illegal start of expression,,  if(p == 2) { if(p > 0) { return 0; }
compilation error,106,add,[CE] illegal start of expression,,  if(p == 2) { if(p.equals(getNumberForward())) { return 0; }
compilation error,106,add,[CE] illegal start of expression,,  if(p == 2) { if(p.equals(Math.PI)) { return p; }
increase failing tests,132,replace, [FE] IllegalArgumentException testSmallDegreesOfFreedom,return Double.MAX_VALUE; ,return Double.MIN_VALUE;
compilation error,78,add,[CE] variable n is already defined in method cumulativeProbability(double),,  double n = getNumeratorDegreesOfFreedom();
compilation error,78,add,[CE] variable m is already defined in method cumulativeProbability(double),,  double m = getNumeratorDegreesOfFreedom();
compilation error,78,add,[CE] cannot find symbol,,  n = getNumeratorDegreesOfFreedom(); m = getSmallDegreesOfFreedom();
increase failing tests,75,replace, [FE] IllegalArgumentException testSmallDegreesOfFreedom,double n = getNumeratorDegreesOfFreedom(); ,double n = getNumeratorDegreesOfFreedom() - 1;
increase failing tests,75,replace, [FE] IllegalArgumentException testSmallDegreesOfFreedom,double n = getNumeratorDegreesOfFreedom(); ,double n = getNumeratorDegreesOfFreedom() / getDenominatorDegreesOfFreedom();
increase failing tests,75,replace, [FE] IllegalArgumentException testSmallDegreesOfFreedom,double n = getNumeratorDegreesOfFreedom(); ,double n = getNumeratorDegreesOfFreedom() * Math.pow(10, x);
compilation error,132,add,[CE] illegal start of expression,,  if(p <.5) { if(getDenominatorDegreesOfFreedom()) { return getDenominatorDegreesOfFreedom(); }
compilation error,132,add,[CE] illegal start of expression,,  if(p <.5) { if(getDenominatorDegreesOfFreedom() > 0) { return getDenominatorDegreesOfFreedom(); }
compilation error,132,add,[CE] illegal start of expression,,  if(p <.5) { if(p ==.5) { return getDomainLowerBound(); }
compilation error,132,add,[CE] illegal start of expression,,  if(p <.5) { if(getDenominatorDegreesOfFreedom()) { return getDomainUpperBound(p); }
compilation error,148,add,[CE] method arraycopy in class System cannot be applied to given types;,,  System.arraycopy(p, 0, ret, getNumeratorDegreesOfFreedom(), denominatorDegreesOfFreedom);
compilation error,148,add,[CE] method arraycopy in class System cannot be applied to given types;,,  System.arraycopy(p, 0, ret, getNumeratorDegreesOfFreedom(), p);
compilation error,148,add,[CE] method arraycopy in class System cannot be applied to given types;,,  System.arraycopy(p, 0, ret, getNumeratorDegreesOfFreedom(), denominatorDegreesOfFreedom); ret += p;
compilation error,119,add,[CE] illegal start of expression,,  if(p <.5) { if(getDomainLowerBound()) { return getDomainLowerBound(); }
compilation error,119,add,[CE] illegal start of expression,,  if(p > 0.0) { if(getDenominatorDegreesOfFreedom() > 0) { return getDomainLowerBound(p); }
compilation error,119,add,[CE] illegal start of expression,,  if(p <.5) { if(p > 0.0) { return getLowerBound(); }
compilation error,119,add,[CE] illegal start of expression,,  if(p > 0.0) { if(getDenominatorDegreesOfFreedom() == 0) { return getDomainLowerBound(p); }
increase failing tests,145,replace, [FE] IllegalArgumentException testSmallDegreesOfFreedom,double d = getDenominatorDegreesOfFreedom(); ,double d = getDenominatorDegreesOfFreedom() * getNumeratorDegreesOfFreedom();
compilation error,145,replace,[CE] cannot find symbol,double d = getDenominatorDegreesOfFreedom(); ,double d = getDenominatorDegreesOfFreedom() * getNumberDegreesOfFreedom();
compilation error,106,replace,[CE] no suitable method found for inverseCumulativeProbability(double,double),return super.inverseCumulativeProbability(p); ,return super.inverseCumulativeProbability(p, p);
increase failing tests,78,add, [FE] IllegalArgumentException testSmallDegreesOfFreedom,,  n = getNumeratorDegreesOfFreedom() * Math.pow(x, m);
increase failing tests,78,add, [FE] IllegalArgumentException testSmallDegreesOfFreedom,,  n = getNumeratorDegreesOfFreedom() * Math.pow(10, m);
compilation error,78,add,[CE] cannot find symbol,,  n = getNumberDegreesOfFreedom();
increase failing tests,78,add, [FE] IllegalArgumentException testSmallDegreesOfFreedom,,  n = getNumeratorDegreesOfFreedom() * Math.pow(Math.exp(1.0), m);
increase failing tests,119,replace, [FE] StackOverflowError testSmallDegreesOfFreedom,return 0.0; ,return 0.0 / getDomainLowerBound(p);
increase failing tests,147,replace, [FE] IllegalArgumentException testSmallDegreesOfFreedom,ret = d / (d - 2.0); ,ret = p /(d - 1.0);
compilation error,100,add,[CE] variable p is already defined in method inverseCumulativeProbability(double),,  final double p = getDenominatorDegreesOfFreedom();
compilation error,100,add,[CE] variable p is already defined in method inverseCumulativeProbability(double),,  final double p = getNumeratorDegreesOfFreedom();
compilation error,100,add,[CE] variable p is already defined in method inverseCumulativeProbability(double),,  final double p = getDenominatorDegreesOfFreedom().inverseCumulativeProbability(p);
compilation error,100,add,[CE] variable p is already defined in method inverseCumulativeProbability(double),,  final double p = getNumeratorDegreesOfFreedom().inverseCumulativeProbability(p);
compilation error,100,add,[CE] variable p is already defined in method inverseCumulativeProbability(double),,  final double p = getNumberDegreesOfFreedom();
increase failing tests,132,replace, [FE] IllegalArgumentException testSmallDegreesOfFreedom,return Double.MAX_VALUE; ,return Double.MIN_VALUE / Double.MAX_VALUE;
compilation error,132,replace,[CE] ';' expected,return Double.MAX_VALUE; ,return Double.MIN_VALUE, Double.MAX_VALUE;
increase failing tests,132,replace, [FE] StackOverflowError testSmallDegreesOfFreedom,return Double.MAX_VALUE; ,return Double.MIN_VALUE + getDomainUpperBound(p);
compilation error,106,add,[CE] method arraycopy in class System cannot be applied to given types;,,  System.arraycopy(numeratorDegreesOfFreedom, 0, p, denominatorDegreesOfFreedom);
compilation error,106,add,[CE] method arraycopy in class System cannot be applied to given types;,,  System.arraycopy(numeratorDegreesOfFreedom, p, getDenominatorDegreesOfFreedom(), 0, p);
compilation error,106,add,[CE] method arraycopy in class System cannot be applied to given types;,,  System.arraycopy(numeratorDegreesOfFreedom, p, getDenominatorDegreesOfFreedom(), denominatorDegreesOfFreedom);
compilation error,106,add,[CE] method arraycopy in class System cannot be applied to given types;,,  System.arraycopy(numeratorDegreesOfFreedom, 0, p, denominatorDegreesOfFreedom); p = p;
compilation error,147,add,[CE] illegal start of expression,,  if(p < 0.0) { if(d == p) { return p; }
compilation error,78,replace,[CE] cannot find symbol beta,ret = Beta.regularizedBeta((n * x) / (m + n * x), 0.5 * n,  0.5 * m); ,ret = beta.regularizedBeta(( n * x)/(m + n * x), 0.5 * n, 0.5 * m);
compilation error,75,add,[CE] cannot find symbol,,  ret = getProbabilityDegreesOfFreedom();
increase failing tests,76,replace, [FE] IllegalArgumentException testSmallDegreesOfFreedom,double m = getDenominatorDegreesOfFreedom(); ,double m = getDenominatorDegreesOfFreedom() / 2.0;
increase failing tests,76,replace, [FE] IllegalArgumentException testSmallDegreesOfFreedom,double m = getDenominatorDegreesOfFreedom(); ,double m = getDenominatorDegreesOfFreedom() - 1;
increase failing tests,76,replace, [FE] IllegalArgumentException testSmallDegreesOfFreedom,double m = getDenominatorDegreesOfFreedom(); ,double m = getDenominatorDegreesOfFreedom() + n;
compilation error,147,add,[CE] cannot find symbol m,,  m = getNumeratorDegreesOfFreedom();
compilation error,119,add,[CE] illegal start of expression,,  if(p <.5) { if(getDenominatorDegreesOfFreedom() > 0) { return getDomainLowerBound(0.0); }
compilation error,119,add,[CE] illegal start of expression,,  if(p < 0.0) { if(getDenominatorDegreesOfFreedom() > 0) { return getDenominatorDegreesOfFreedom(); }
compilation error,119,add,[CE] illegal start of expression,,  if(p <.5) { if(getDenominatorDegreesOfFreedom() > 0) { return getDenominatorDegreesOfFreedom(); }
compilation error,119,add,[CE] illegal start of expression,,  if(p < 0.0) { if(getDenominatorDegreesOfFreedom() > 0) { return getDenominatorDegreesOfFreedom() * p; }
compilation error,119,add,[CE] illegal start of expression,,  if(p <.5) { if(getDenominatorDegreesOfFreedom() > 0) { return getDenominatorDegreesOfFreedom() * p; }
compilation error,148,add,[CE] method arraycopy in class System cannot be applied to given types;,,  System.arraycopy(numeratorDegreesOfFreedom, p, ret, denominatorDegreesOfFreedom);
compilation error,148,add,[CE] method arraycopy in class System cannot be applied to given types;,,  System.arraycopy(numeratorDegreesOfFreedom, 0, ret, 0, denominatorDegreesOfFreedom);
compilation error,148,add,[CE] method arraycopy in class System cannot be applied to given types;,,  System.arraycopy(numeratorDegreesOfFreedom, 0, ret, 1, denominatorDegreesOfFreedom);
compilation error,148,add,[CE] method arraycopy in class System cannot be applied to given types;,,  System.arraycopy(numeratorDegreesOfFreedom, p, ret, 0, p);
increase failing tests,148,add, [FE] AssertionFailedError testSmallDegreesOfFreedom,,  double m = getNumeratorDegreesOfFreedom(); if(m > 0.0) { ret = m * Math.pow(-2.0, -p); }
compilation error,100,add,[CE] variable p is already defined in method inverseCumulativeProbability(double),,  final int p = Math.sqrt(( int)p);
compilation error,100,add,[CE] illegal start of expression,,  if(p == 0) { if(p ==.5) { return p; }
compilation error,100,add,[CE] illegal start of expression,,  if(p == 0) { if(p == 0.0) { return 0; }
compilation error,100,add,[CE] illegal start of expression,,  if(p == 0) { if(p == -1) { return p; }
compilation error,100,add,[CE] illegal start of expression,,  if(p == 0) { if(p == 0.0) { return 1.0; }
compilation error,76,add,[CE] variable x is already defined in method cumulativeProbability(double),,  double x = getSmallDegreesOfFreedom();
compilation error,76,add,[CE] variable x is already defined in method cumulativeProbability(double),,  double x = getScaleDegreesOfFreedom();
compilation error,76,add,[CE] variable x is already defined in method cumulativeProbability(double),,  double x = getLowerBound();
compilation error,76,add,[CE] variable x is already defined in method cumulativeProbability(double),,  double x = getVariableDegreesOfFreedom();
compilation error,78,add,[CE] cannot find symbol,,  n = getSmallDegreesOfFreedom();
compilation error,78,add,[CE] cannot find symbol,,  n = getStandardDegreesOfFreedom();
compilation error,78,add,[CE] cannot find symbol,,  n = getStandardDegree();
compilation error,78,add,[CE] cannot find symbol,,  n = getLowerBound();
compilation error,106,add,[CE] illegal start of expression,,  if(p == 0) { if(p.getStandardDeviation() > 0) { return Integer.MAX_VALUE; }
compilation error,106,add,[CE] illegal start of expression,,  if(p == 0) { if(p.getStandardDeviation() > 0) { return Integer.MIN_VALUE; }
compilation error,106,add,[CE] illegal start of expression,,  if(p == 0) { if(p.equals(Math.exp(1.0))) { return p; }
compilation error,106,add,[CE] illegal start of expression,,  if(p == 0) { if(p.getStandardDeviation() > 0) { return Math.sqrt(Math.abs(0.0, p.getStandardDeviation())); }
compilation error,106,add,[CE] illegal start of expression,,  if(p == 0) { if(p.getStandardDeviation() > 0) { return Math.sqrt(Math.abs(0.0)+ Math.abs(1.0)); }
compilation error,78,replace,[CE] ')' expected,ret = Beta.regularizedBeta((n * x) / (m + n * x), 0.5 * n,  0.5 * m); ,ret = Beta.regularizedBeta(( n * x)/ (Math.abs(m + n * x), 0.5 * n, 0.5 * m);
compilation error,132,add,[CE] illegal start of expression,,  if(p <.5) { if(getDenominatorDegreesOfFreedom() > 0) { return Math.max(getDenominatorDegreesOfFreedom(), p); }
compilation error,132,add,[CE] illegal start of expression,,  if(p <.5) { if(getDenominatorDegreesOfFreedom() > 0) { return Math.max(getDenominatorDegreesOfFreedom() / getDenominatorDegreesOfFreedom()); }
compilation error,132,add,[CE] illegal start of expression,,  if(p <.5) { if(getDenominatorDegreesOfFreedom() > 0) { return Math.max(getDenominatorDegreesOfFreedom() / Math.min(p, 0.0)); }
compilation error,132,add,[CE] illegal start of expression,,  if(p <.5) { if(getDenominatorDegreesOfFreedom() > m) { return Math.max(getDenominatorDegreesOfFreedom(), p); }
increase failing tests,75,replace, [FE] IllegalArgumentException testSmallDegreesOfFreedom,double n = getNumeratorDegreesOfFreedom(); ,double n = getNumeratorDegreesOfFreedom() * x;
increase failing tests,75,replace, [FE] IllegalArgumentException testSmallDegreesOfFreedom,double n = getNumeratorDegreesOfFreedom(); ,double n = getNumeratorDegreesOfFreedom() * Math.sqrt(x);
increase failing tests,148,replace, [FE] IllegalArgumentException testSmallDegreesOfFreedom,return ret; ,return ret * Math.log(1.0 - p);
compilation error,148,replace,[CE] cannot find symbol m,return ret; ,return ret * m;
compilation error,148,replace,[CE] cannot find symbol num,return ret; ,return ret * num;
compilation error,132,replace,[CE] cannot find symbol,return Double.MAX_VALUE; ,return Double.MAX_VALUE * Math.pow(Double.doubleToLongBound(p));
compilation error,132,replace,[CE] cannot find symbol DomainUpper,return Double.MAX_VALUE; ,return Double.MAX_VALUE * Math.pow(DomainUpper.MIN_VALUE, p);
increase failing tests,147,replace, [FE] IllegalArgumentException testSmallDegreesOfFreedom,ret = d / (d - 2.0); ,ret = d *(p - 2.0);
compilation error,145,add,[CE] possible loss of precision,,  int m = getNumeratorDegreesOfFreedom();
compilation error,145,add,[CE] cannot find symbol m,,  m = getNumeratorDegreesOfFreedom();
increase failing tests,106,replace, [FE] java.lang.IllegalArgumentException: p must be between 0.0 and 1.0 testSmallDegreesOfFreedom,return super.inverseCumulativeProbability(p); ,return super.inverseCumulativeProbability(p - 2);
increase failing tests,106,replace, [FE] java.lang.IllegalArgumentException: p must be between 0.0 and 1.0 testSmallDegreesOfFreedom,return super.inverseCumulativeProbability(p); ,return super.inverseCumulativeProbability(p + 5);
increase failing tests,145,replace, [FE] IllegalArgumentException testSmallDegreesOfFreedom,double d = getDenominatorDegreesOfFreedom(); ,double d = getDenominatorDegreesOfFreedom() * 2.0;
compilation error,75,add,[CE] abstract method cumulativeProbability(double) in Distribution cannot be accessed directly,,  ret = super.cumulativeProbability(x);
compilation error,75,add,[CE] cannot find symbol,,  ret = getSmallDegreesOfFreedom();
compilation error,75,add,[CE] cannot find symbol,,  ret = getMean();
compilation error,75,add,[CE] cannot find symbol,,  ret = Math.exp(-x * Math.log(1.0)) / getSmallDegreesOfFreedom();
compilation error,100,replace,[CE] hexadecimal numbers must contain at least one hexadecimal digit,if (p == 0) { ,if(p == 0 || p > 0x) {
compilation error,119,replace,[CE] bad operand types for binary operator '||',return 0.0; ,return 0.0 || p > 0;
