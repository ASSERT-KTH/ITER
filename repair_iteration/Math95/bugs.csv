bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] return 0.0; [FE] IllegalArgumentException [CONTEXT] protected double getDomainLowerBound(double p) { [BUGGY] return 0.0; [BUGGY] } [CLASS] FDistributionImpl [METHOD] getDomainLowerBound [RETURN_TYPE] double  double p [VARIABLES] double denominatorDegreesOfFreedom m n numeratorDegreesOfFreedom p ret x long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	replace	
2	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] protected double getDomainLowerBound(double p) { [BUGGY] [BUGGY] return 0.0; } [CLASS] FDistributionImpl [METHOD] getDomainLowerBound [RETURN_TYPE] double  double p [VARIABLES] double denominatorDegreesOfFreedom m n numeratorDegreesOfFreedom p ret x long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	119	119	1	add	
3	[BUG] [BUGGY] return Double.MAX_VALUE; [FE] IllegalArgumentException [CONTEXT] protected double getDomainUpperBound(double p) { [BUGGY] return Double.MAX_VALUE; [BUGGY] } [CLASS] FDistributionImpl [METHOD] getDomainUpperBound [RETURN_TYPE] double  double p [VARIABLES] double denominatorDegreesOfFreedom m n numeratorDegreesOfFreedom p ret x long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	replace	
4	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] protected double getDomainUpperBound(double p) { [BUGGY] [BUGGY] return Double.MAX_VALUE; } [CLASS] FDistributionImpl [METHOD] getDomainUpperBound [RETURN_TYPE] double  double p [VARIABLES] double denominatorDegreesOfFreedom m n numeratorDegreesOfFreedom p ret x long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	132	132	1	add	
5	[BUG] [BUGGY] double d = getDenominatorDegreesOfFreedom(); [FE] IllegalArgumentException [CONTEXT] protected double getInitialDomain(double p) { double ret; [BUGGY] double d = getDenominatorDegreesOfFreedom(); [BUGGY]  ret = d / (d - 2.0); return ret; } [CLASS] FDistributionImpl [METHOD] getInitialDomain [RETURN_TYPE] double  double p [VARIABLES] double d denominatorDegreesOfFreedom m n numeratorDegreesOfFreedom p ret x long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	replace	
6	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] protected double getInitialDomain(double p) { double ret; [BUGGY] [BUGGY] double d = getDenominatorDegreesOfFreedom();  ret = d / (d - 2.0); return ret; } [CLASS] FDistributionImpl [METHOD] getInitialDomain [RETURN_TYPE] double  double p [VARIABLES] double d denominatorDegreesOfFreedom m n numeratorDegreesOfFreedom p ret x long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	145	145	1	add	
7	[BUG] [BUGGY] ret = d / (d - 2.0); [FE] IllegalArgumentException [CONTEXT] protected double getInitialDomain(double p) { double ret; double d = getDenominatorDegreesOfFreedom();  [BUGGY] ret = d / (d - 2.0); [BUGGY] return ret; } [CLASS] FDistributionImpl [METHOD] getInitialDomain [RETURN_TYPE] double  double p [VARIABLES] double d denominatorDegreesOfFreedom m n numeratorDegreesOfFreedom p ret x long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	147	147	1	replace	
8	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] protected double getInitialDomain(double p) { double ret; double d = getDenominatorDegreesOfFreedom();  [BUGGY] [BUGGY] ret = d / (d - 2.0); return ret; } [CLASS] FDistributionImpl [METHOD] getInitialDomain [RETURN_TYPE] double  double p [VARIABLES] double d denominatorDegreesOfFreedom m n numeratorDegreesOfFreedom p ret x long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	147	147	1	add	
9	[BUG] [BUGGY] return ret; [FE] IllegalArgumentException [CONTEXT] protected double getInitialDomain(double p) { double ret; double d = getDenominatorDegreesOfFreedom();  ret = d / (d - 2.0); [BUGGY] return ret; [BUGGY] } [CLASS] FDistributionImpl [METHOD] getInitialDomain [RETURN_TYPE] double  double p [VARIABLES] double d denominatorDegreesOfFreedom m n numeratorDegreesOfFreedom p ret x long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	replace	
10	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] protected double getInitialDomain(double p) { double ret; double d = getDenominatorDegreesOfFreedom();  ret = d / (d - 2.0); [BUGGY] [BUGGY] return ret; } [CLASS] FDistributionImpl [METHOD] getInitialDomain [RETURN_TYPE] double  double p [VARIABLES] double d denominatorDegreesOfFreedom m n numeratorDegreesOfFreedom p ret x long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5773502691896258	148	148	1	add	
11	[BUG] [BUGGY] return super.inverseCumulativeProbability(p); [FE] IllegalArgumentException [CONTEXT] public double inverseCumulativeProbability(final double p) throws MathException { if (p == 0) { return 0d; } if (p == 1) { return Double.POSITIVE_INFINITY; } [BUGGY] return super.inverseCumulativeProbability(p); [BUGGY] } [CLASS] FDistributionImpl [METHOD] inverseCumulativeProbability [RETURN_TYPE] double  final double p [VARIABLES] double denominatorDegreesOfFreedom m n numeratorDegreesOfFreedom p ret x long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	
12	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] public double inverseCumulativeProbability(final double p) throws MathException { if (p == 0) { return 0d; } if (p == 1) { return Double.POSITIVE_INFINITY; } [BUGGY] [BUGGY] return super.inverseCumulativeProbability(p); } [CLASS] FDistributionImpl [METHOD] inverseCumulativeProbability [RETURN_TYPE] double  final double p [VARIABLES] double denominatorDegreesOfFreedom m n numeratorDegreesOfFreedom p ret x long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	add	
13	[BUG] [BUGGY] double n = getNumeratorDegreesOfFreedom(); [FE] IllegalArgumentException [CONTEXT] public double cumulativeProbability(double x) throws MathException { double ret; if (x <= 0.0) { ret = 0.0; } else { [BUGGY] double n = getNumeratorDegreesOfFreedom(); [BUGGY] double m = getDenominatorDegreesOfFreedom(); ret = Beta.regularizedBeta((n * x) / (m + n * x), 0.5 * n, 0.5 * m); } return ret; } [CLASS] FDistributionImpl [METHOD] cumulativeProbability [RETURN_TYPE] double  double x [VARIABLES] double denominatorDegreesOfFreedom m n numeratorDegreesOfFreedom ret x long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	75	75	1	replace	
14	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] public double cumulativeProbability(double x) throws MathException { double ret; if (x <= 0.0) { ret = 0.0; } else { [BUGGY] [BUGGY] double n = getNumeratorDegreesOfFreedom(); double m = getDenominatorDegreesOfFreedom(); ret = Beta.regularizedBeta((n * x) / (m + n * x), 0.5 * n, 0.5 * m); } return ret; } [CLASS] FDistributionImpl [METHOD] cumulativeProbability [RETURN_TYPE] double  double x [VARIABLES] double denominatorDegreesOfFreedom m n numeratorDegreesOfFreedom ret x long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	75	75	1	add	
15	[BUG] [BUGGY] double m = getDenominatorDegreesOfFreedom(); [FE] IllegalArgumentException [CONTEXT] public double cumulativeProbability(double x) throws MathException { double ret; if (x <= 0.0) { ret = 0.0; } else { double n = getNumeratorDegreesOfFreedom(); [BUGGY] double m = getDenominatorDegreesOfFreedom(); [BUGGY]  ret = Beta.regularizedBeta((n * x) / (m + n * x), 0.5 * n, 0.5 * m); } return ret; } [CLASS] FDistributionImpl [METHOD] cumulativeProbability [RETURN_TYPE] double  double x [VARIABLES] double denominatorDegreesOfFreedom m n numeratorDegreesOfFreedom ret x long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	76	76	1	replace	
16	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] public double cumulativeProbability(double x) throws MathException { double ret; if (x <= 0.0) { ret = 0.0; } else { double n = getNumeratorDegreesOfFreedom(); [BUGGY] [BUGGY] double m = getDenominatorDegreesOfFreedom(); ret = Beta.regularizedBeta((n * x) / (m + n * x), 0.5 * n, 0.5 * m); } return ret; } [CLASS] FDistributionImpl [METHOD] cumulativeProbability [RETURN_TYPE] double  double x [VARIABLES] double denominatorDegreesOfFreedom m n numeratorDegreesOfFreedom ret x long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	76	76	1	add	
17	[BUG] [BUGGY] ret = Beta.regularizedBeta((n * x) / (m + n * x), 0.5 * n,  0.5 * m); [FE] IllegalArgumentException [CONTEXT] public double cumulativeProbability(double x) throws MathException { double ret; if (x <= 0.0) { ret = 0.0; } else { double n = getNumeratorDegreesOfFreedom(); double m = getDenominatorDegreesOfFreedom(); [BUGGY] ret = Beta.regularizedBeta((n * x) / (m + n * x),    0.5 * n,        0.5 * m); [BUGGY] 0.5 * n, 0.5 * m); } return ret; } [CLASS] FDistributionImpl [METHOD] cumulativeProbability [RETURN_TYPE] double  double x [VARIABLES] double denominatorDegreesOfFreedom m n numeratorDegreesOfFreedom ret x long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	78	80	1	replace	
18	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] public double cumulativeProbability(double x) throws MathException { double ret; if (x <= 0.0) { ret = 0.0; } else { double n = getNumeratorDegreesOfFreedom(); double m = getDenominatorDegreesOfFreedom(); [BUGGY] [BUGGY] ret = Beta.regularizedBeta((n * x) / (m + n * x),    0.5 * n,        0.5 * m); 0.5 * n, 0.5 * m); } return ret; } [CLASS] FDistributionImpl [METHOD] cumulativeProbability [RETURN_TYPE] double  double x [VARIABLES] double denominatorDegreesOfFreedom m n numeratorDegreesOfFreedom ret x long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	78	80	1	add	
19	[BUG] [BUGGY] if (p == 0) { [FE] IllegalArgumentException [CONTEXT] public double inverseCumulativeProbability(final double p) throws MathException { [BUGGY] if (p == 0) { [BUGGY] return 0d; } if (p == 1) { return Double.POSITIVE_INFINITY; } return super.inverseCumulativeProbability(p); } [CLASS] FDistributionImpl [METHOD] inverseCumulativeProbability [RETURN_TYPE] double  final double p [VARIABLES] double denominatorDegreesOfFreedom m n numeratorDegreesOfFreedom p ret x long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	100	100	1	replace	
20	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] public double inverseCumulativeProbability(final double p) throws MathException { [BUGGY] [BUGGY] if (p == 0) { return 0d; } if (p == 1) { return Double.POSITIVE_INFINITY; } return super.inverseCumulativeProbability(p); } [CLASS] FDistributionImpl [METHOD] inverseCumulativeProbability [RETURN_TYPE] double  final double p [VARIABLES] double denominatorDegreesOfFreedom m n numeratorDegreesOfFreedom p ret x long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	100	100	1	add	
21	[BUG] [BUGGY] if (p == 1) { [FE] IllegalArgumentException [CONTEXT] public double inverseCumulativeProbability(final double p) throws MathException { if (p == 0) { return 0d; } [BUGGY] if (p == 1) { [BUGGY] return Double.POSITIVE_INFINITY; } return super.inverseCumulativeProbability(p); } [CLASS] FDistributionImpl [METHOD] inverseCumulativeProbability [RETURN_TYPE] double  final double p [VARIABLES] double denominatorDegreesOfFreedom m n numeratorDegreesOfFreedom p ret x long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	103	103	1	replace	
22	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] public double inverseCumulativeProbability(final double p) throws MathException { if (p == 0) { return 0d; } [BUGGY] [BUGGY] if (p == 1) { return Double.POSITIVE_INFINITY; } return super.inverseCumulativeProbability(p); } [CLASS] FDistributionImpl [METHOD] inverseCumulativeProbability [RETURN_TYPE] double  final double p [VARIABLES] double denominatorDegreesOfFreedom m n numeratorDegreesOfFreedom p ret x long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4472135954999579	103	103	1	add	
23	[BUG] [BUGGY] if (x <= 0.0) { [FE] IllegalArgumentException [CONTEXT] public double cumulativeProbability(double x) throws MathException { double ret; [BUGGY] if (x <= 0.0) { [BUGGY] ret = 0.0; } else { double n = getNumeratorDegreesOfFreedom(); double m = getDenominatorDegreesOfFreedom(); ret = Beta.regularizedBeta((n * x) / (m + n * x), 0.5 * n, 0.5 * m); } return ret; [CLASS] FDistributionImpl [METHOD] cumulativeProbability [RETURN_TYPE] double  double x [VARIABLES] double denominatorDegreesOfFreedom m n numeratorDegreesOfFreedom ret x long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4082482904638631	72	72	1	replace	
24	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] public double cumulativeProbability(double x) throws MathException { double ret; [BUGGY] [BUGGY] if (x <= 0.0) { ret = 0.0; } else { double n = getNumeratorDegreesOfFreedom(); double m = getDenominatorDegreesOfFreedom(); ret = Beta.regularizedBeta((n * x) / (m + n * x), 0.5 * n, 0.5 * m); } return ret; [CLASS] FDistributionImpl [METHOD] cumulativeProbability [RETURN_TYPE] double  double x [VARIABLES] double denominatorDegreesOfFreedom m n numeratorDegreesOfFreedom ret x long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4082482904638631	72	72	1	add	
25	[BUG] [BUGGY] return ret; [FE] IllegalArgumentException [CONTEXT] if (x <= 0.0) { ret = 0.0; } else { double n = getNumeratorDegreesOfFreedom(); double m = getDenominatorDegreesOfFreedom(); ret = Beta.regularizedBeta((n * x) / (m + n * x), 0.5 * n, 0.5 * m); } [BUGGY] return ret; [BUGGY] } [CLASS] FDistributionImpl [METHOD] cumulativeProbability [RETURN_TYPE] double  double x [VARIABLES] double denominatorDegreesOfFreedom m n numeratorDegreesOfFreedom ret x long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4082482904638631	82	82	1	replace	
26	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] if (x <= 0.0) { ret = 0.0; } else { double n = getNumeratorDegreesOfFreedom(); double m = getDenominatorDegreesOfFreedom(); ret = Beta.regularizedBeta((n * x) / (m + n * x), 0.5 * n, 0.5 * m); } [BUGGY] [BUGGY] return ret; } [CLASS] FDistributionImpl [METHOD] cumulativeProbability [RETURN_TYPE] double  double x [VARIABLES] double denominatorDegreesOfFreedom m n numeratorDegreesOfFreedom ret x long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4082482904638631	82	82	1	add	
27	[BUG] [BUGGY] return numeratorDegreesOfFreedom; [FE] IllegalArgumentException [CONTEXT] public double getNumeratorDegreesOfFreedom() { [BUGGY] return numeratorDegreesOfFreedom; [BUGGY] } [CLASS] FDistributionImpl [METHOD] getNumeratorDegreesOfFreedom [RETURN_TYPE] double  [VARIABLES] double d degreesOfFreedom denominatorDegreesOfFreedom m n numeratorDegreesOfFreedom p ret x long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4082482904638631	170	170	1	replace	
28	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] public double getNumeratorDegreesOfFreedom() { [BUGGY] [BUGGY] return numeratorDegreesOfFreedom; } [CLASS] FDistributionImpl [METHOD] getNumeratorDegreesOfFreedom [RETURN_TYPE] double  [VARIABLES] double d degreesOfFreedom denominatorDegreesOfFreedom m n numeratorDegreesOfFreedom p ret x long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4082482904638631	170	170	1	add	
29	[BUG] [BUGGY] return denominatorDegreesOfFreedom; [FE] IllegalArgumentException [CONTEXT] public double getDenominatorDegreesOfFreedom() { [BUGGY] return denominatorDegreesOfFreedom; [BUGGY] } [CLASS] FDistributionImpl [METHOD] getDenominatorDegreesOfFreedom [RETURN_TYPE] double  [VARIABLES] double d degreesOfFreedom denominatorDegreesOfFreedom m n numeratorDegreesOfFreedom p ret x long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4082482904638631	192	192	1	replace	
30	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] public double getDenominatorDegreesOfFreedom() { [BUGGY] [BUGGY] return denominatorDegreesOfFreedom; } [CLASS] FDistributionImpl [METHOD] getDenominatorDegreesOfFreedom [RETURN_TYPE] double  [VARIABLES] double d degreesOfFreedom denominatorDegreesOfFreedom m n numeratorDegreesOfFreedom p ret x long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.4082482904638631	192	192	1	add	
31	[BUG] [BUGGY] super(); [FE] IllegalArgumentException [CONTEXT] public FDistributionImpl(double numeratorDegreesOfFreedom, double denominatorDegreesOfFreedom) { [BUGGY] super(); [BUGGY] setNumeratorDegreesOfFreedom(numeratorDegreesOfFreedom); setDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom); } [CLASS] FDistributionImpl [METHOD] <init> [RETURN_TYPE] FDistributionImpl(double,double)  double numeratorDegreesOfFreedom double denominatorDegreesOfFreedom [VARIABLES] double denominatorDegreesOfFreedom numeratorDegreesOfFreedom long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.3333333333333333	50	50	1	replace	
32	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] public FDistributionImpl(double numeratorDegreesOfFreedom, double denominatorDegreesOfFreedom) { [BUGGY] [BUGGY] super(); setNumeratorDegreesOfFreedom(numeratorDegreesOfFreedom); setDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom); } [CLASS] FDistributionImpl [METHOD] <init> [RETURN_TYPE] FDistributionImpl(double,double)  double numeratorDegreesOfFreedom double denominatorDegreesOfFreedom [VARIABLES] double denominatorDegreesOfFreedom numeratorDegreesOfFreedom long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.3333333333333333	50	50	1	add	
33	[BUG] [BUGGY] setNumeratorDegreesOfFreedom(numeratorDegreesOfFreedom); [FE] IllegalArgumentException [CONTEXT] public FDistributionImpl(double numeratorDegreesOfFreedom, double denominatorDegreesOfFreedom) { super(); [BUGGY] setNumeratorDegreesOfFreedom(numeratorDegreesOfFreedom); [BUGGY] setDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom); } [CLASS] FDistributionImpl [METHOD] <init> [RETURN_TYPE] FDistributionImpl(double,double)  double numeratorDegreesOfFreedom double denominatorDegreesOfFreedom [VARIABLES] double denominatorDegreesOfFreedom numeratorDegreesOfFreedom long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.3333333333333333	51	51	1	replace	
34	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] public FDistributionImpl(double numeratorDegreesOfFreedom, double denominatorDegreesOfFreedom) { super(); [BUGGY] [BUGGY] setNumeratorDegreesOfFreedom(numeratorDegreesOfFreedom); setDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom); } [CLASS] FDistributionImpl [METHOD] <init> [RETURN_TYPE] FDistributionImpl(double,double)  double numeratorDegreesOfFreedom double denominatorDegreesOfFreedom [VARIABLES] double denominatorDegreesOfFreedom numeratorDegreesOfFreedom long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.3333333333333333	51	51	1	add	
35	[BUG] [BUGGY] setDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom); [FE] IllegalArgumentException [CONTEXT] public FDistributionImpl(double numeratorDegreesOfFreedom, double denominatorDegreesOfFreedom) { super(); setNumeratorDegreesOfFreedom(numeratorDegreesOfFreedom); [BUGGY] setDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom); [BUGGY] } [CLASS] FDistributionImpl [METHOD] <init> [RETURN_TYPE] FDistributionImpl(double,double)  double numeratorDegreesOfFreedom double denominatorDegreesOfFreedom [VARIABLES] double denominatorDegreesOfFreedom numeratorDegreesOfFreedom long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.3333333333333333	52	52	1	replace	
36	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] public FDistributionImpl(double numeratorDegreesOfFreedom, double denominatorDegreesOfFreedom) { super(); setNumeratorDegreesOfFreedom(numeratorDegreesOfFreedom); [BUGGY] [BUGGY] setDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom); } [CLASS] FDistributionImpl [METHOD] <init> [RETURN_TYPE] FDistributionImpl(double,double)  double numeratorDegreesOfFreedom double denominatorDegreesOfFreedom [VARIABLES] double denominatorDegreesOfFreedom numeratorDegreesOfFreedom long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.3333333333333333	52	52	1	add	
37	[BUG] [BUGGY] } [FE] IllegalArgumentException [CONTEXT] public FDistributionImpl(double numeratorDegreesOfFreedom, double denominatorDegreesOfFreedom) { super(); setNumeratorDegreesOfFreedom(numeratorDegreesOfFreedom); setDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom); [BUGGY] } [BUGGY]  [CLASS] FDistributionImpl [METHOD] <init> [RETURN_TYPE] FDistributionImpl(double,double)  double numeratorDegreesOfFreedom double denominatorDegreesOfFreedom [VARIABLES] double denominatorDegreesOfFreedom numeratorDegreesOfFreedom long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.3333333333333333	53	53	1	replace	
38	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] public FDistributionImpl(double numeratorDegreesOfFreedom, double denominatorDegreesOfFreedom) { super(); setNumeratorDegreesOfFreedom(numeratorDegreesOfFreedom); setDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom); [BUGGY] [BUGGY] } [CLASS] FDistributionImpl [METHOD] <init> [RETURN_TYPE] FDistributionImpl(double,double)  double numeratorDegreesOfFreedom double denominatorDegreesOfFreedom [VARIABLES] double denominatorDegreesOfFreedom numeratorDegreesOfFreedom long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.3333333333333333	53	53	1	add	
39	[BUG] [BUGGY] if (degreesOfFreedom <= 0.0) { [FE] IllegalArgumentException [CONTEXT] public void setNumeratorDegreesOfFreedom(double degreesOfFreedom) { [BUGGY] if (degreesOfFreedom <= 0.0) { [BUGGY] throw new IllegalArgumentException( "degrees of freedom must be positive."); } this.numeratorDegreesOfFreedom = degreesOfFreedom; } [CLASS] FDistributionImpl [METHOD] setNumeratorDegreesOfFreedom [RETURN_TYPE] void  double degreesOfFreedom [VARIABLES] double d degreesOfFreedom denominatorDegreesOfFreedom m n numeratorDegreesOfFreedom p ret x long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.3333333333333333	158	158	1	replace	
40	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] public void setNumeratorDegreesOfFreedom(double degreesOfFreedom) { [BUGGY] [BUGGY] if (degreesOfFreedom <= 0.0) { throw new IllegalArgumentException( "degrees of freedom must be positive."); } this.numeratorDegreesOfFreedom = degreesOfFreedom; } [CLASS] FDistributionImpl [METHOD] setNumeratorDegreesOfFreedom [RETURN_TYPE] void  double degreesOfFreedom [VARIABLES] double d degreesOfFreedom denominatorDegreesOfFreedom m n numeratorDegreesOfFreedom p ret x long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.3333333333333333	158	158	1	add	
41	[BUG] [BUGGY] this.numeratorDegreesOfFreedom = degreesOfFreedom; [FE] IllegalArgumentException [CONTEXT] public void setNumeratorDegreesOfFreedom(double degreesOfFreedom) { if (degreesOfFreedom <= 0.0) { throw new IllegalArgumentException( "degrees of freedom must be positive."); } [BUGGY] this.numeratorDegreesOfFreedom = degreesOfFreedom; [BUGGY] } [CLASS] FDistributionImpl [METHOD] setNumeratorDegreesOfFreedom [RETURN_TYPE] void  double degreesOfFreedom [VARIABLES] double d degreesOfFreedom denominatorDegreesOfFreedom m n numeratorDegreesOfFreedom p ret x long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.3333333333333333	162	162	1	replace	
42	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] public void setNumeratorDegreesOfFreedom(double degreesOfFreedom) { if (degreesOfFreedom <= 0.0) { throw new IllegalArgumentException( "degrees of freedom must be positive."); } [BUGGY] [BUGGY] this.numeratorDegreesOfFreedom = degreesOfFreedom; } [CLASS] FDistributionImpl [METHOD] setNumeratorDegreesOfFreedom [RETURN_TYPE] void  double degreesOfFreedom [VARIABLES] double d degreesOfFreedom denominatorDegreesOfFreedom m n numeratorDegreesOfFreedom p ret x long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.3333333333333333	162	162	1	add	
43	[BUG] [BUGGY] } [FE] IllegalArgumentException [CONTEXT] public void setNumeratorDegreesOfFreedom(double degreesOfFreedom) { if (degreesOfFreedom <= 0.0) { throw new IllegalArgumentException( "degrees of freedom must be positive."); } this.numeratorDegreesOfFreedom = degreesOfFreedom; [BUGGY] } [BUGGY]  [CLASS] FDistributionImpl [METHOD] setNumeratorDegreesOfFreedom [RETURN_TYPE] void  double degreesOfFreedom [VARIABLES] double d degreesOfFreedom denominatorDegreesOfFreedom m n numeratorDegreesOfFreedom p ret x long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.3333333333333333	163	163	1	replace	
44	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] public void setNumeratorDegreesOfFreedom(double degreesOfFreedom) { if (degreesOfFreedom <= 0.0) { throw new IllegalArgumentException( "degrees of freedom must be positive."); } this.numeratorDegreesOfFreedom = degreesOfFreedom; [BUGGY] [BUGGY] } [CLASS] FDistributionImpl [METHOD] setNumeratorDegreesOfFreedom [RETURN_TYPE] void  double degreesOfFreedom [VARIABLES] double d degreesOfFreedom denominatorDegreesOfFreedom m n numeratorDegreesOfFreedom p ret x long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.3333333333333333	163	163	1	add	
45	[BUG] [BUGGY] if (degreesOfFreedom <= 0.0) { [FE] IllegalArgumentException [CONTEXT] public void setDenominatorDegreesOfFreedom(double degreesOfFreedom) { [BUGGY] if (degreesOfFreedom <= 0.0) { [BUGGY] throw new IllegalArgumentException( "degrees of freedom must be positive."); } this.denominatorDegreesOfFreedom = degreesOfFreedom; } [CLASS] FDistributionImpl [METHOD] setDenominatorDegreesOfFreedom [RETURN_TYPE] void  double degreesOfFreedom [VARIABLES] double d degreesOfFreedom denominatorDegreesOfFreedom m n numeratorDegreesOfFreedom p ret x long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.3333333333333333	180	180	1	replace	
46	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] public void setDenominatorDegreesOfFreedom(double degreesOfFreedom) { [BUGGY] [BUGGY] if (degreesOfFreedom <= 0.0) { throw new IllegalArgumentException( "degrees of freedom must be positive."); } this.denominatorDegreesOfFreedom = degreesOfFreedom; } [CLASS] FDistributionImpl [METHOD] setDenominatorDegreesOfFreedom [RETURN_TYPE] void  double degreesOfFreedom [VARIABLES] double d degreesOfFreedom denominatorDegreesOfFreedom m n numeratorDegreesOfFreedom p ret x long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.3333333333333333	180	180	1	add	
47	[BUG] [BUGGY] this.denominatorDegreesOfFreedom = degreesOfFreedom; [FE] IllegalArgumentException [CONTEXT] public void setDenominatorDegreesOfFreedom(double degreesOfFreedom) { if (degreesOfFreedom <= 0.0) { throw new IllegalArgumentException( "degrees of freedom must be positive."); } [BUGGY] this.denominatorDegreesOfFreedom = degreesOfFreedom; [BUGGY] } [CLASS] FDistributionImpl [METHOD] setDenominatorDegreesOfFreedom [RETURN_TYPE] void  double degreesOfFreedom [VARIABLES] double d degreesOfFreedom denominatorDegreesOfFreedom m n numeratorDegreesOfFreedom p ret x long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.3333333333333333	184	184	1	replace	
48	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] public void setDenominatorDegreesOfFreedom(double degreesOfFreedom) { if (degreesOfFreedom <= 0.0) { throw new IllegalArgumentException( "degrees of freedom must be positive."); } [BUGGY] [BUGGY] this.denominatorDegreesOfFreedom = degreesOfFreedom; } [CLASS] FDistributionImpl [METHOD] setDenominatorDegreesOfFreedom [RETURN_TYPE] void  double degreesOfFreedom [VARIABLES] double d degreesOfFreedom denominatorDegreesOfFreedom m n numeratorDegreesOfFreedom p ret x long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.3333333333333333	184	184	1	add	
49	[BUG] [BUGGY] } [FE] IllegalArgumentException [CONTEXT] public void setDenominatorDegreesOfFreedom(double degreesOfFreedom) { if (degreesOfFreedom <= 0.0) { throw new IllegalArgumentException( "degrees of freedom must be positive."); } this.denominatorDegreesOfFreedom = degreesOfFreedom; [BUGGY] } [BUGGY]  [CLASS] FDistributionImpl [METHOD] setDenominatorDegreesOfFreedom [RETURN_TYPE] void  double degreesOfFreedom [VARIABLES] double d degreesOfFreedom denominatorDegreesOfFreedom m n numeratorDegreesOfFreedom p ret x long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.3333333333333333	185	185	1	replace	
50	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] public void setDenominatorDegreesOfFreedom(double degreesOfFreedom) { if (degreesOfFreedom <= 0.0) { throw new IllegalArgumentException( "degrees of freedom must be positive."); } this.denominatorDegreesOfFreedom = degreesOfFreedom; [BUGGY] [BUGGY] } [CLASS] FDistributionImpl [METHOD] setDenominatorDegreesOfFreedom [RETURN_TYPE] void  double degreesOfFreedom [VARIABLES] double d degreesOfFreedom denominatorDegreesOfFreedom m n numeratorDegreesOfFreedom p ret x long serialVersionUID boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.3333333333333333	185	185	1	add	
