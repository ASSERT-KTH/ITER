bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  super.inverseCumulativeProbability(p,  numeratorDegreesOfFreedom);  [CE]  no  suitable  method  found  for  inverseCumulativeProbability(double,double)  [FE]    IllegalArgumentException  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]  return  super.inverseCumulativeProbability(p,  numeratorDegreesOfFreedom);  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	return  super.inverseCumulativeProbability(p,  numeratorDegreesOfFreedom);	return  super.inverseCumulativeProbability(p);  	non-compiled	[CE]  no  suitable  method  found  for  inverseCumulativeProbability(double,double)	11	None	replace
2	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  p  must  be  between  0.0  and  1.0  [FE]      IllegalArgumentException  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]  return  super.inverseCumulativeProbability(p  +  1);  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	add	return  super.inverseCumulativeProbability(p  +  1);	return  super.inverseCumulativeProbability(p);  	compilable	  [FE]  java.lang.IllegalArgumentException:  p  must  be  between  0.0  and  1.0  	11	4	replace
3	[BUG]  [BUGGY]  return  super.inverseCumulativeProbability(p  +  1);  [FE]  java.lang.IllegalArgumentException:  p  must  be  between  0.0  and  1.0  [FE]      IllegalArgumentException  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]  return  super.inverseCumulativeProbability(p  +  1);  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	return  super.inverseCumulativeProbability(p  +  1);	return  super.inverseCumulativeProbability(p);  	compilable	  [FE]  java.lang.IllegalArgumentException:  p  must  be  between  0.0  and  1.0  	11	4	replace
4	[BUG]  [BUGGY]    [CE]  missing  return  statement  [FE]        IllegalArgumentException  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]    [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	  	return  super.inverseCumulativeProbability(p);  	non-compiled	[CE]  missing  return  statement	11	None	replace
5	[BUG]  [BUGGY]    if(p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  else  {  final  double  denominatorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  [CE]  ';'  expected  [FE]    IllegalArgumentException  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]    if(p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  else  {  final  double  denominatorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  [BUGGY]  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	    if(p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  else  {  final  double  denominatorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom		non-compiled	[CE]  ';'  expected	12	None	add
6	[BUG]  [BUGGY]    if(p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  else  {  final  double  denominatorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegre  [CE]  ';'  expected  [FE]      IllegalArgumentException  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]    if(p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  else  {  final  double  denominatorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegre  [BUGGY]  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	    if(p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  else  {  final  double  denominatorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegre		non-compiled	[CE]  ';'  expected	12	None	add
7	[BUG]  [BUGGY]    if(p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  else  {  final  double  denominatorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegrees  [CE]  ';'  expected  [FE]        IllegalArgumentException  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]    if(p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  else  {  final  double  denominatorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegrees  [BUGGY]  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	    if(p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  else  {  final  double  denominatorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegrees		non-compiled	[CE]  ';'  expected	12	None	add
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalArgumentException  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	add	if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.POSITIVE_INFINITY;  }	return  super.inverseCumulativeProbability(p);  	compilable	  [FE]  AssertionFailedError  	11	4	replace
9	[BUG]  [BUGGY]  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.POSITIVE_INFINITY;  }  [FE]  AssertionFailedError  [FE]    IllegalArgumentException  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.POSITIVE_INFINITY;  }	return  super.inverseCumulativeProbability(p);  	compilable	  [FE]  AssertionFailedError  	11	4	replace
10	[BUG]  [BUGGY]  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  [CE]  missing  return  statement  [FE]      IllegalArgumentException  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }	return  super.inverseCumulativeProbability(p);  	non-compiled	[CE]  missing  return  statement	11	None	replace
11	[BUG]  [BUGGY]  return  super.inverseCumulativeProbability(p,  denominatorDegreesOfFreedom);  [CE]  no  suitable  method  found  for  inverseCumulativeProbability(double,double)  [FE]        IllegalArgumentException  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]  return  super.inverseCumulativeProbability(p,  denominatorDegreesOfFreedom);  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	return  super.inverseCumulativeProbability(p,  denominatorDegreesOfFreedom);	return  super.inverseCumulativeProbability(p);  	non-compiled	[CE]  no  suitable  method  found  for  inverseCumulativeProbability(double,double)	11	None	replace
12	[BUG]  [BUGGY]    ReflectionImpl  ret  =(ReflectionImpl)super.inverseCumulativeProbability(p);  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]    ReflectionImpl  ret  =(ReflectionImpl)super.inverseCumulativeProbability(p);  [BUGGY]  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	    ReflectionImpl  ret  =(ReflectionImpl)super.inverseCumulativeProbability(p);		non-compiled	[CE]  cannot  find  symbol	12	None	add
13	[BUG]  [BUGGY]    ReflectionImpl  ret  =  super.inverseCumulativeProbability(p);  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]    ReflectionImpl  ret  =  super.inverseCumulativeProbability(p);  [BUGGY]  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	    ReflectionImpl  ret  =  super.inverseCumulativeProbability(p);		non-compiled	[CE]  cannot  find  symbol	12	None	add
14	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]    if(p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	add	    if(p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }		compilable	  [FE]  IllegalArgumentException  	12	1	add
15	[BUG]  [BUGGY]    if(p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]    if(p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	    if(p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }		compilable	  [FE]  IllegalArgumentException  	12	1	add
16	[BUG]  [BUGGY]    if(p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  else  {  return  super.inverseCumulativeProbability(p);  }  [CE]  unreachable  statement  [FE]          IllegalArgumentException  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]    if(p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  else  {  return  super.inverseCumulativeProbability(p);  }  [BUGGY]  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	    if(p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  else  {  return  super.inverseCumulativeProbability(p);  }		non-compiled	[CE]  unreachable  statement	12	None	add
17	[BUG]  [BUGGY]    ReflectionImpl  ret  =  getReflectionImpl();  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]    ReflectionImpl  ret  =  getReflectionImpl();  [BUGGY]  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	    ReflectionImpl  ret  =  getReflectionImpl();		non-compiled	[CE]  cannot  find  symbol	12	None	add
18	[BUG]  [BUGGY]    if(p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  else  {  final  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegre  [CE]  ';'  expected  [FE]    IllegalArgumentException  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]    if(p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  else  {  final  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegre  [BUGGY]  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	    if(p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  else  {  final  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegre		non-compiled	[CE]  ';'  expected	12	None	add
19	[BUG]  [BUGGY]    if(p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  else  {  final  double  denominatorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]    if(p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  else  {  final  double  denominatorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +  [BUGGY]  return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	    if(p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  else  {  final  double  denominatorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  +		non-compiled	[CE]  illegal  start  of  expression	12	None	add
20	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalArgumentException  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.NEGATIVE_INFINITY;  }  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	add	if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.NEGATIVE_INFINITY;  }	return  super.inverseCumulativeProbability(p);  	compilable	  [FE]  AssertionFailedError  	11	4	replace
21	[BUG]  [BUGGY]  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.NEGATIVE_INFINITY;  }  [FE]  AssertionFailedError  [FE]    IllegalArgumentException  [CONTEXT]  public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.NEGATIVE_INFINITY;  }  [BUGGY]  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.NEGATIVE_INFINITY;  }	return  super.inverseCumulativeProbability(p);  	compilable	  [FE]  AssertionFailedError  	11	4	replace
