bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.POSITIVE_INFINITY;  }  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.POSITIVE_INFINITY;  }  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.POSITIVE_INFINITY;  }  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	if(p    ==    1)    {    return    super.inverseCumulativeProbability(p);    }    else    {    return    Double.POSITIVE_INFINITY;    }    if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.POSITIVE_INFINITY;  }	  	non-compiled	[CE]  unreachable  statement	8	None	add
2	[BUG]  [BUGGY]  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.POSITIVE_INFINITY;  }  if(p  ==  2)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.POSITIVE_INFINITY;  }  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.POSITIVE_INFINITY;  }  if(p  ==  2)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	if(p    ==    1)    {    return    super.inverseCumulativeProbability(p);    }    else    {    return    Double.POSITIVE_INFINITY;    }    if(p  ==  2)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.POSITIVE_INFINITY;  }	  	non-compiled	[CE]  unreachable  statement	8	None	add
3	[BUG]  [BUGGY]  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.POSITIVE_INFINITY;  }  if(p  >=  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.POSITIVE_INFINITY;  }  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.POSITIVE_INFINITY;  }  if(p  >=  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	if(p    ==    1)    {    return    super.inverseCumulativeProbability(p);    }    else    {    return    Double.POSITIVE_INFINITY;    }    if(p  >=  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.POSITIVE_INFINITY;  }	  	non-compiled	[CE]  unreachable  statement	8	None	add
4	[BUG]  [BUGGY]  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.POSITIVE_INFINITY;  }  if(p!=  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.POSITIVE_INFINITY;  }  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.POSITIVE_INFINITY;  }  if(p!=  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	if(p    ==    1)    {    return    super.inverseCumulativeProbability(p);    }    else    {    return    Double.POSITIVE_INFINITY;    }    if(p!=  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.POSITIVE_INFINITY;  }	  	non-compiled	[CE]  unreachable  statement	8	None	add
5	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]      if(p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  if(p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]    return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	add	        if(p    ==    1)    {    return    Double.POSITIVE_INFINITY;    }    if(p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }	  	compilable	  [FE]  IllegalArgumentException  	14	1	add
6	[BUG]  [BUGGY]      if(p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  if(p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]      if(p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  if(p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]    return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	        if(p    ==    1)    {    return    Double.POSITIVE_INFINITY;    }    if(p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }	  	compilable	  [FE]  IllegalArgumentException  	14	1	add
7	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]      if(p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  if(p  >=  1)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]    return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	add	        if(p    ==    1)    {    return    Double.POSITIVE_INFINITY;    }    if(p  >=  1)  {  return  Double.POSITIVE_INFINITY;  }	  	compilable	  [FE]  IllegalArgumentException  	14	2	add
8	[BUG]  [BUGGY]      if(p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  if(p  >=  1)  {  return  Double.POSITIVE_INFINITY;  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]      if(p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  if(p  >=  1)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]    return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	        if(p    ==    1)    {    return    Double.POSITIVE_INFINITY;    }    if(p  >=  1)  {  return  Double.POSITIVE_INFINITY;  }	  	compilable	  [FE]  IllegalArgumentException  	14	2	add
9	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]      if(p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  if(p  ==  2)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]    return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	add	        if(p    ==    1)    {    return    Double.POSITIVE_INFINITY;    }    if(p  ==  2)  {  return  Double.POSITIVE_INFINITY;  }	  	compilable	  [FE]  IllegalArgumentException  	14	2	add
10	[BUG]  [BUGGY]      if(p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  if(p  ==  2)  {  return  Double.POSITIVE_INFINITY;  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]      if(p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  if(p  ==  2)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]    return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	        if(p    ==    1)    {    return    Double.POSITIVE_INFINITY;    }    if(p  ==  2)  {  return  Double.POSITIVE_INFINITY;  }	  	compilable	  [FE]  IllegalArgumentException  	14	2	add
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]      if(p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  if(p!=  1)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]    return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	add	        if(p    ==    1)    {    return    Double.POSITIVE_INFINITY;    }    if(p!=  1)  {  return  Double.POSITIVE_INFINITY;  }	  	compilable	  [FE]  AssertionFailedError  	14	4	add
12	[BUG]  [BUGGY]      if(p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  if(p!=  1)  {  return  Double.POSITIVE_INFINITY;  }  [FE]  AssertionFailedError  [FE]          IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]      if(p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  if(p!=  1)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]    return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	        if(p    ==    1)    {    return    Double.POSITIVE_INFINITY;    }    if(p!=  1)  {  return  Double.POSITIVE_INFINITY;  }	  	compilable	  [FE]  AssertionFailedError  	14	4	add
13	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  return  inverseCumulativeProbability(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	add	return  inverseCumulativeProbability(p);	      	compilable	  [FE]  StackOverflowError  	4	4	replace
14	[BUG]  [BUGGY]  return  inverseCumulativeProbability(p);  [FE]  StackOverflowError  [FE]            IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  return  inverseCumulativeProbability(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	return  inverseCumulativeProbability(p);	      	compilable	  [FE]  StackOverflowError  	4	4	replace
15	[BUG]  [BUGGY]  return  inverseCumulativeProbability(p,  numeratorDegreesOfFreedom);  [CE]  no  suitable  method  found  for  inverseCumulativeProbability(double,double)  [FE]              IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  return  inverseCumulativeProbability(p,  numeratorDegreesOfFreedom);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	return  inverseCumulativeProbability(p,  numeratorDegreesOfFreedom);	      	non-compiled	[CE]  no  suitable  method  found  for  inverseCumulativeProbability(double,double)	4	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  return  Double.POSITIVE_INFINITY;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	add	return  Double.POSITIVE_INFINITY;	      	compilable	  [FE]  AssertionFailedError  	4	4	replace
17	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY;  [FE]  AssertionFailedError  [FE]                IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  return  Double.POSITIVE_INFINITY;  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	return  Double.POSITIVE_INFINITY;	      	compilable	  [FE]  AssertionFailedError  	4	4	replace
18	[BUG]  [BUGGY]  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.NEGATIVE_INFINITY;  }  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.NEGATIVE_INFINITY;  }  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.NEGATIVE_INFINITY;  }  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.NEGATIVE_INFINITY;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	if(p    ==    1)    {    return    super.inverseCumulativeProbability(p);    }    else    {    return    Double.NEGATIVE_INFINITY;    }    if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.NEGATIVE_INFINITY;  }	  	non-compiled	[CE]  unreachable  statement	20	None	add
19	[BUG]  [BUGGY]  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.NEGATIVE_INFINITY;  }  if(p  ==  2)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.NEGATIVE_INFINITY;  }  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.NEGATIVE_INFINITY;  }  if(p  ==  2)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.NEGATIVE_INFINITY;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	if(p    ==    1)    {    return    super.inverseCumulativeProbability(p);    }    else    {    return    Double.NEGATIVE_INFINITY;    }    if(p  ==  2)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.NEGATIVE_INFINITY;  }	  	non-compiled	[CE]  unreachable  statement	20	None	add
20	[BUG]  [BUGGY]  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.NEGATIVE_INFINITY;  }  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.NaN;  }  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.NEGATIVE_INFINITY;  }  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.NaN;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	if(p    ==    1)    {    return    super.inverseCumulativeProbability(p);    }    else    {    return    Double.NEGATIVE_INFINITY;    }    if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.NaN;  }	  	non-compiled	[CE]  unreachable  statement	20	None	add
21	[BUG]  [BUGGY]  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.NEGATIVE_INFINITY;  }  if(p  >=  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.NEGATIVE_INFINITY;  }  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.NEGATIVE_INFINITY;  }  if(p  >=  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.NEGATIVE_INFINITY;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	if(p    ==    1)    {    return    super.inverseCumulativeProbability(p);    }    else    {    return    Double.NEGATIVE_INFINITY;    }    if(p  >=  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.NEGATIVE_INFINITY;  }	  	non-compiled	[CE]  unreachable  statement	20	None	add
22	[BUG]  [BUGGY]  return  super.inverseCumulativeProbability(p,  denominatorDegreesOfFreedom,  numeratorDegreesOfFreedom);  [CE]  no  suitable  method  found  for  inverseCumulativeProbability(double,double,double)  [FE]        IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  return  super.inverseCumulativeProbability(p,  denominatorDegreesOfFreedom,  numeratorDegreesOfFreedom);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	return  super.inverseCumulativeProbability(p,  denominatorDegreesOfFreedom,  numeratorDegreesOfFreedom);	  return    super.inverseCumulativeProbability(p,    numeratorDegreesOfFreedom);    	non-compiled	[CE]  no  suitable  method  found  for  inverseCumulativeProbability(double,double,double)	1	None	replace
23	[BUG]  [BUGGY]  return  super.inverseCumulativeProbability(p,  m,  numeratorDegreesOfFreedom);  [CE]  cannot  find  symbol  m  [FE]          IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  return  super.inverseCumulativeProbability(p,  m,  numeratorDegreesOfFreedom);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	return  super.inverseCumulativeProbability(p,  m,  numeratorDegreesOfFreedom);	  return    super.inverseCumulativeProbability(p,    numeratorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  m	1	None	replace
24	[BUG]  [BUGGY]  return  super.inverseCumulativeProbability(p,  numeratorDegreesOfFreedom,  denominatorDegreesOfFreedom);  [CE]  no  suitable  method  found  for  inverseCumulativeProbability(double,double,double)  [FE]            IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  return  super.inverseCumulativeProbability(p,  numeratorDegreesOfFreedom,  denominatorDegreesOfFreedom);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	return  super.inverseCumulativeProbability(p,  numeratorDegreesOfFreedom,  denominatorDegreesOfFreedom);	  return    super.inverseCumulativeProbability(p,    numeratorDegreesOfFreedom);    	non-compiled	[CE]  no  suitable  method  found  for  inverseCumulativeProbability(double,double,double)	1	None	replace
25	[BUG]  [BUGGY]  return  super.inverseCumulativeProbability(p,  m,  denominatorDegreesOfFreedom);  [CE]  cannot  find  symbol  m  [FE]            IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  return  super.inverseCumulativeProbability(p,  m,  denominatorDegreesOfFreedom);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	return  super.inverseCumulativeProbability(p,  m,  denominatorDegreesOfFreedom);	  return    super.inverseCumulativeProbability(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  m	11	None	replace
26	[BUG]  [BUGGY]  return  super.inverseCumulativeProbability(m,  p,  denominatorDegreesOfFreedom);  [CE]  cannot  find  symbol  m  [FE]              IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  return  super.inverseCumulativeProbability(m,  p,  denominatorDegreesOfFreedom);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	return  super.inverseCumulativeProbability(m,  p,  denominatorDegreesOfFreedom);	  return    super.inverseCumulativeProbability(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  m	11	None	replace
27	[BUG]  [BUGGY]  return  super.inverseCumulativeProbability(p,  0,  denominatorDegreesOfFreedom);  [CE]  no  suitable  method  found  for  inverseCumulativeProbability(double,int,double)  [FE]                IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  return  super.inverseCumulativeProbability(p,  0,  denominatorDegreesOfFreedom);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	return  super.inverseCumulativeProbability(p,  0,  denominatorDegreesOfFreedom);	  return    super.inverseCumulativeProbability(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  no  suitable  method  found  for  inverseCumulativeProbability(double,int,double)	11	None	replace
28	[BUG]  [BUGGY]  final  double  denominatorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);  [CE]  missing  return  statement  [FE]            IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  final  double  denominatorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);  [BUGGY]    return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	final  double  denominatorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);	      if(p    ==    1)    {    return    Double.POSITIVE_INFINITY;    }    else    {    final    double    denominatorDegreesOfFreedom    =    super.inverseCumulativeProbability(p);    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegrees    	non-compiled	[CE]  missing  return  statement	7	None	replace
29	[BUG]  [BUGGY]  final  double  numeratorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);  [CE]  missing  return  statement  [FE]              IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  final  double  numeratorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);  [BUGGY]    return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	final  double  numeratorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);	      if(p    ==    1)    {    return    Double.POSITIVE_INFINITY;    }    else    {    final    double    denominatorDegreesOfFreedom    =    super.inverseCumulativeProbability(p);    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegrees    	non-compiled	[CE]  missing  return  statement	7	None	replace
30	[BUG]  [BUGGY]  final  int  denominatorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);  [CE]  possible  loss  of  precision  [FE]                IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  final  int  denominatorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);  [BUGGY]    return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	final  int  denominatorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);	      if(p    ==    1)    {    return    Double.POSITIVE_INFINITY;    }    else    {    final    double    denominatorDegreesOfFreedom    =    super.inverseCumulativeProbability(p);    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegrees    	non-compiled	[CE]  possible  loss  of  precision	7	None	replace
31	[BUG]  [BUGGY]  parent.inverseCumulativeProbability(p);  [CE]  cannot  find  symbol  parent  [FE]              IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  parent.inverseCumulativeProbability(p);  [BUGGY]    return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	parent.inverseCumulativeProbability(p);	      if(p    ==    1)    {    return    Double.POSITIVE_INFINITY;    }    else    {    return    super.inverseCumulativeProbability(p);    }    	non-compiled	[CE]  cannot  find  symbol  parent	16	None	replace
32	[BUG]  [BUGGY]  parent  =  parent.getParent();  [CE]  cannot  find  symbol  parent  [FE]                IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  parent  =  parent.getParent();  [BUGGY]    return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	parent  =  parent.getParent();	      if(p    ==    1)    {    return    Double.POSITIVE_INFINITY;    }    else    {    return    super.inverseCumulativeProbability(p);    }    	non-compiled	[CE]  cannot  find  symbol  parent	16	None	replace
33	[BUG]  [BUGGY]  mutatorDegreesOfFreedom  =  p.nextDouble();  [CE]  cannot  find  symbol  mutatorDegreesOfFreedom  [FE]                  IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  mutatorDegreesOfFreedom  =  p.nextDouble();  [BUGGY]    return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	mutatorDegreesOfFreedom  =  p.nextDouble();	      if(p    ==    1)    {    return    Double.POSITIVE_INFINITY;    }    else    {    return    super.inverseCumulativeProbability(p);    }    	non-compiled	[CE]  cannot  find  symbol  mutatorDegreesOfFreedom	16	None	replace
34	[BUG]  [BUGGY]  mutatorDegreesOfFreedom  =  false;  [CE]  cannot  find  symbol  mutatorDegreesOfFreedom  [FE]                    IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  mutatorDegreesOfFreedom  =  false;  [BUGGY]    return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	mutatorDegreesOfFreedom  =  false;	      if(p    ==    1)    {    return    Double.POSITIVE_INFINITY;    }    else    {    return    super.inverseCumulativeProbability(p);    }    	non-compiled	[CE]  cannot  find  symbol  mutatorDegreesOfFreedom	16	None	replace
35	[BUG]  [BUGGY]  return  super.inverseCumulativeProbability(p  +  1);  if(p  <  1)  {  return  super.inverseCumulativeProbability(p  +  1);  }  else  {  return  super.inverseCumulativeProbability(p  +  1);  }  [CE]  unreachable  statement  [FE]    java.lang.IllegalArgumentException:  p  must  be  between  0.0  and  1.0    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  return  super.inverseCumulativeProbability(p  +  1);  if(p  <  1)  {  return  super.inverseCumulativeProbability(p  +  1);  }  else  {  return  super.inverseCumulativeProbability(p  +  1);  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	return    super.inverseCumulativeProbability(p    +    1);    if(p  <  1)  {  return  super.inverseCumulativeProbability(p  +  1);  }  else  {  return  super.inverseCumulativeProbability(p  +  1);  }	  	non-compiled	[CE]  unreachable  statement	2	None	add
36	[BUG]  [BUGGY]  return  super.inverseCumulativeProbability(p  +  1);  if(p  +  1)  {  return  super.inverseCumulativeProbability(p  +  1);  }  else  {  return  super.inverseCumulativeProbability(p  +  1);  }  [CE]  incompatible  types  [FE]      java.lang.IllegalArgumentException:  p  must  be  between  0.0  and  1.0    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  return  super.inverseCumulativeProbability(p  +  1);  if(p  +  1)  {  return  super.inverseCumulativeProbability(p  +  1);  }  else  {  return  super.inverseCumulativeProbability(p  +  1);  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	return    super.inverseCumulativeProbability(p    +    1);    if(p  +  1)  {  return  super.inverseCumulativeProbability(p  +  1);  }  else  {  return  super.inverseCumulativeProbability(p  +  1);  }	  	non-compiled	[CE]  incompatible  types	2	None	add
37	[BUG]  [BUGGY]  return  super.inverseCumulativeProbability(p  +  1);  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p  +  1);  }  else  {  return  super.inverseCumulativeProbability(p  +  1);  }  [CE]  unreachable  statement  [FE]        java.lang.IllegalArgumentException:  p  must  be  between  0.0  and  1.0    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  return  super.inverseCumulativeProbability(p  +  1);  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p  +  1);  }  else  {  return  super.inverseCumulativeProbability(p  +  1);  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	return    super.inverseCumulativeProbability(p    +    1);    if(p  ==  1)  {  return  super.inverseCumulativeProbability(p  +  1);  }  else  {  return  super.inverseCumulativeProbability(p  +  1);  }	  	non-compiled	[CE]  unreachable  statement	2	None	add
38	[BUG]  [BUGGY]  return  super.inverseCumulativeProbability(p  +  1);  if(p  <  1)  {  return  super.inverseCumulativeProbability(p  +  1);  }  [CE]  unreachable  statement  [FE]          java.lang.IllegalArgumentException:  p  must  be  between  0.0  and  1.0    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  return  super.inverseCumulativeProbability(p  +  1);  if(p  <  1)  {  return  super.inverseCumulativeProbability(p  +  1);  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	return    super.inverseCumulativeProbability(p    +    1);    if(p  <  1)  {  return  super.inverseCumulativeProbability(p  +  1);  }	  	non-compiled	[CE]  unreachable  statement	2	None	add
39	[BUG]  [BUGGY]  return  super.inverseCumulativeProbability(p  +  1);  if(p  +  1)  {  return  super.inverseCumulativeProbability(p  +  1);  }  [CE]  incompatible  types  [FE]            java.lang.IllegalArgumentException:  p  must  be  between  0.0  and  1.0    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  return  super.inverseCumulativeProbability(p  +  1);  if(p  +  1)  {  return  super.inverseCumulativeProbability(p  +  1);  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	return    super.inverseCumulativeProbability(p    +    1);    if(p  +  1)  {  return  super.inverseCumulativeProbability(p  +  1);  }	  	non-compiled	[CE]  incompatible  types	2	None	add
40	[BUG]  [BUGGY]  parent.replaceChild(p,  numeratorDegreesOfFreedom);  [CE]  cannot  find  symbol  parent  [FE]    IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  parent.replaceChild(p,  numeratorDegreesOfFreedom);  [BUGGY]    return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	parent.replaceChild(p,  numeratorDegreesOfFreedom);	      if(p    ==    1)    {    return    Double.POSITIVE_INFINITY;    }    	non-compiled	[CE]  cannot  find  symbol  parent	15	None	replace
41	[BUG]  [BUGGY]  parent.inverseCumulativeProbability(p,  numeratorDegreesOfFreedom);  [CE]  cannot  find  symbol  parent  [FE]      IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  parent.inverseCumulativeProbability(p,  numeratorDegreesOfFreedom);  [BUGGY]    return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	parent.inverseCumulativeProbability(p,  numeratorDegreesOfFreedom);	      if(p    ==    1)    {    return    Double.POSITIVE_INFINITY;    }    	non-compiled	[CE]  cannot  find  symbol  parent	15	None	replace
42	[BUG]  [BUGGY]  parent.inverseCumulativeProbability(p);  p  =  parent.inverseCumulativeProbability(p);  [CE]  cannot  find  symbol  parent  [FE]        IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  parent.inverseCumulativeProbability(p);  p  =  parent.inverseCumulativeProbability(p);  [BUGGY]    return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	parent.inverseCumulativeProbability(p);  p  =  parent.inverseCumulativeProbability(p);	      if(p    ==    1)    {    return    Double.POSITIVE_INFINITY;    }    	non-compiled	[CE]  cannot  find  symbol  parent	15	None	replace
43	[BUG]  [BUGGY]  ReflectionImpl  ret  =  super.inverseCumulativeProbability(p,  denominatorDegreesOfFreedom);  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  ReflectionImpl  ret  =  super.inverseCumulativeProbability(p,  denominatorDegreesOfFreedom);  [BUGGY]    return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	ReflectionImpl  ret  =  super.inverseCumulativeProbability(p,  denominatorDegreesOfFreedom);	      ReflectionImpl    ret    =    super.inverseCumulativeProbability(p);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
44	[BUG]  [BUGGY]  ReflectionImpl  ret  =  super.inverseCumulativeProbability(p,  numeratorDegreesOfFreedom);  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  ReflectionImpl  ret  =  super.inverseCumulativeProbability(p,  numeratorDegreesOfFreedom);  [BUGGY]    return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	ReflectionImpl  ret  =  super.inverseCumulativeProbability(p,  numeratorDegreesOfFreedom);	      ReflectionImpl    ret    =    super.inverseCumulativeProbability(p);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
45	[BUG]  [BUGGY]  ReflectionImpl  ret  =  super.inverseCumulativeProbability(p,  p);  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  ReflectionImpl  ret  =  super.inverseCumulativeProbability(p,  p);  [BUGGY]    return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	ReflectionImpl  ret  =  super.inverseCumulativeProbability(p,  p);	      ReflectionImpl    ret    =    super.inverseCumulativeProbability(p);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
46	[BUG]  [BUGGY]  final  double  desominatorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);  [CE]  missing  return  statement  [FE]          IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  final  double  desominatorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);  [BUGGY]    return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	final  double  desominatorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);	      if(p    ==    1)    {    return    Double.POSITIVE_INFINITY;    }    else    {    final    double    denominatorDegreesOfFreedom    =    super.inverseCumulativeProbability(p);    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    +    	non-compiled	[CE]  missing  return  statement	19	None	replace
47	[BUG]  [BUGGY]  ReflectionImpl  ret  =(ReflectionImpl)p.inverseCumulativeProbability(super);  [CE]  '.'  expected  [FE]        IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  ReflectionImpl  ret  =(ReflectionImpl)p.inverseCumulativeProbability(super);  [BUGGY]    return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	ReflectionImpl  ret  =(ReflectionImpl)p.inverseCumulativeProbability(super);	      ReflectionImpl    ret    =(ReflectionImpl)super.inverseCumulativeProbability(p);    	non-compiled	[CE]  '.'  expected	12	None	replace
48	[BUG]  [BUGGY]  ReflectionImpl  ret  =(ReflectionImpl)this.super.inverseCumulativeProbability(p);  [CE]  '('  expected  [FE]          IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  ReflectionImpl  ret  =(ReflectionImpl)this.super.inverseCumulativeProbability(p);  [BUGGY]    return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	ReflectionImpl  ret  =(ReflectionImpl)this.super.inverseCumulativeProbability(p);	      ReflectionImpl    ret    =(ReflectionImpl)super.inverseCumulativeProbability(p);    	non-compiled	[CE]  '('  expected	12	None	replace
49	[BUG]  [BUGGY]  ReflectionImpl  ret  =(ReflectionImpl)this.inverseCumulativeProbability(p);  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  ReflectionImpl  ret  =(ReflectionImpl)this.inverseCumulativeProbability(p);  [BUGGY]    return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	ReflectionImpl  ret  =(ReflectionImpl)this.inverseCumulativeProbability(p);	      ReflectionImpl    ret    =(ReflectionImpl)super.inverseCumulativeProbability(p);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
50	[BUG]  [BUGGY]  final  double  denominatorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegre  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  final  double  denominatorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegre  [BUGGY]    return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	final  double  denominatorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegre	      if(p    ==    1)    {    return    Double.POSITIVE_INFINITY;    }    else    {    final    double    denominatorDegreesOfFreedom    =    super.inverseCumulativeProbability(p);    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegre    	non-compiled	[CE]  ';'  expected	6	None	replace
51	[BUG]  [BUGGY]  final  double  p  =  super.inverseCumulativeProbability(p);  [CE]  variable  p  is  already  defined  in  method  inverseCumulativeProbability(double)  [FE]        IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  final  double  p  =  super.inverseCumulativeProbability(p);  [BUGGY]    return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	final  double  p  =  super.inverseCumulativeProbability(p);	      if(p    ==    1)    {    return    Double.POSITIVE_INFINITY;    }    else    {    final    double    denominatorDegreesOfFreedom    =    super.inverseCumulativeProbability(p);    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    	non-compiled	[CE]  variable  p  is  already  defined  in  method  inverseCumulativeProbability(double)	5	None	replace
52	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    java.lang.IllegalArgumentException:  p  must  be  between  0.0  and  1.0    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  return  super.inverseCumulativeProbability(p  /  1);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	add	return  super.inverseCumulativeProbability(p  /  1);	  return    super.inverseCumulativeProbability(p    +    1);    	compilable	  [FE]  IllegalArgumentException  	3	1	replace
53	[BUG]  [BUGGY]  return  super.inverseCumulativeProbability(p  /  1);  [FE]  IllegalArgumentException  [FE]    java.lang.IllegalArgumentException:  p  must  be  between  0.0  and  1.0    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  return  super.inverseCumulativeProbability(p  /  1);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	return  super.inverseCumulativeProbability(p  /  1);	  return    super.inverseCumulativeProbability(p    +    1);    	compilable	  [FE]  IllegalArgumentException  	3	1	replace
54	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  p  must  be  between  0.0  and  1.0  [FE]      java.lang.IllegalArgumentException:  p  must  be  between  0.0  and  1.0    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  return  super.inverseCumulativeProbability(p  +  2);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	add	return  super.inverseCumulativeProbability(p  +  2);	  return    super.inverseCumulativeProbability(p    +    1);    	compilable	  [FE]  java.lang.IllegalArgumentException:  p  must  be  between  0.0  and  1.0  	3	4	replace
55	[BUG]  [BUGGY]  return  super.inverseCumulativeProbability(p  +  2);  [FE]  java.lang.IllegalArgumentException:  p  must  be  between  0.0  and  1.0  [FE]      java.lang.IllegalArgumentException:  p  must  be  between  0.0  and  1.0    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  return  super.inverseCumulativeProbability(p  +  2);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	return  super.inverseCumulativeProbability(p  +  2);	  return    super.inverseCumulativeProbability(p    +    1);    	compilable	  [FE]  java.lang.IllegalArgumentException:  p  must  be  between  0.0  and  1.0  	3	4	replace
56	[BUG]  [BUGGY]  ReflectionImpl  ret  =  getReflectionImpl(p);  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  ReflectionImpl  ret  =  getReflectionImpl(p);  [BUGGY]    return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	ReflectionImpl  ret  =  getReflectionImpl(p);	      ReflectionImpl    ret    =    getReflectionImpl();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
57	[BUG]  [BUGGY]  ReflectionImpl  ret  =  getReferenceImpl();  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  ReflectionImpl  ret  =  getReferenceImpl();  [BUGGY]    return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	ReflectionImpl  ret  =  getReferenceImpl();	      ReflectionImpl    ret    =    getReflectionImpl();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
58	[BUG]  [BUGGY]  ReflectionImpl  ret  =  getReferenceImpl(p);  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  ReflectionImpl  ret  =  getReferenceImpl(p);  [BUGGY]    return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	ReflectionImpl  ret  =  getReferenceImpl(p);	      ReflectionImpl    ret    =    getReflectionImpl();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
59	[BUG]  [BUGGY]  mutatorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);  [CE]  cannot  find  symbol  mutatorDegreesOfFreedom  [FE]    AssertionFailedError    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  mutatorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	mutatorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);	  if(p    ==    1)    {    return    super.inverseCumulativeProbability(p);    }    else    {    return    Double.POSITIVE_INFINITY;    }    	non-compiled	[CE]  cannot  find  symbol  mutatorDegreesOfFreedom	9	None	replace
60	[BUG]  [BUGGY]  mutatorDegreesOfFreedom  =  inverseCumulativeProbability(p);  [CE]  cannot  find  symbol  mutatorDegreesOfFreedom  [FE]      AssertionFailedError    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  mutatorDegreesOfFreedom  =  inverseCumulativeProbability(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	mutatorDegreesOfFreedom  =  inverseCumulativeProbability(p);	  if(p    ==    1)    {    return    super.inverseCumulativeProbability(p);    }    else    {    return    Double.POSITIVE_INFINITY;    }    	non-compiled	[CE]  cannot  find  symbol  mutatorDegreesOfFreedom	9	None	replace
61	[BUG]  [BUGGY]  final  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  missing  return  statement  [FE]        IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  final  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]    return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	final  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	      if(p    ==    1)    {    return    Double.POSITIVE_INFINITY;    }    else    {    final    double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegre    	non-compiled	[CE]  missing  return  statement	18	None	replace
62	[BUG]  [BUGGY]  final  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegre  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  final  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegre  [BUGGY]    return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	final  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegre	      if(p    ==    1)    {    return    Double.POSITIVE_INFINITY;    }    else    {    final    double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegre    	non-compiled	[CE]  ';'  expected	18	None	replace
63	[BUG]  [BUGGY]  final  double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  missing  return  statement  [FE]            IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  final  double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]    return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	final  double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	      if(p    ==    1)    {    return    Double.POSITIVE_INFINITY;    }    else    {    final    double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegre    	non-compiled	[CE]  missing  return  statement	18	None	replace
64	[BUG]  [BUGGY]      if(p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  if(p  {  1)  {  return  Double.POSITIVE_INFINITY;  }  [CE]  ')'  expected  [FE]    IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]      if(p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  if(p  {  1)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]    return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	        if(p    ==    1)    {    return    Double.POSITIVE_INFINITY;    }    if(p  {  1)  {  return  Double.POSITIVE_INFINITY;  }	  	non-compiled	[CE]  ')'  expected	14	None	add
65	[BUG]  [BUGGY]      if(p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  If(p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]      if(p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  If(p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]    return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	        if(p    ==    1)    {    return    Double.POSITIVE_INFINITY;    }    If(p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }	  	non-compiled	[CE]  ';'  expected	14	None	add
66	[BUG]  [BUGGY]  return  super.inverseCumulativeProbability(p,  numeratorDegreesOfFreedom,  numeratorDegreesOfFreedom);  [CE]  no  suitable  method  found  for  inverseCumulativeProbability(double,double,double)  [FE]            IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  return  super.inverseCumulativeProbability(p,  numeratorDegreesOfFreedom,  numeratorDegreesOfFreedom);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	return  super.inverseCumulativeProbability(p,  numeratorDegreesOfFreedom,  numeratorDegreesOfFreedom);	  return    super.inverseCumulativeProbability(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  no  suitable  method  found  for  inverseCumulativeProbability(double,double,double)	11	None	replace
67	[BUG]  [BUGGY]  return  super.inverseCumulativeProbability(p,  m);  [CE]  cannot  find  symbol  m  [FE]              IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  return  super.inverseCumulativeProbability(p,  m);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	return  super.inverseCumulativeProbability(p,  m);	  return    super.inverseCumulativeProbability(p,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  m	11	None	replace
68	[BUG]  [BUGGY]  return  super.inverseCumulativeProbability(p  +  1);  if(p  +  1)  {  return  super.inverseCumulativeProbability(p  +  1);  }  else  {  return  super.inverseCumulativeProbability(p  +  2);  }  [CE]  incompatible  types  [FE]    java.lang.IllegalArgumentException:  p  must  be  between  0.0  and  1.0    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  return  super.inverseCumulativeProbability(p  +  1);  if(p  +  1)  {  return  super.inverseCumulativeProbability(p  +  1);  }  else  {  return  super.inverseCumulativeProbability(p  +  2);  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	return    super.inverseCumulativeProbability(p    +    1);    if(p  +  1)  {  return  super.inverseCumulativeProbability(p  +  1);  }  else  {  return  super.inverseCumulativeProbability(p  +  2);  }	  	non-compiled	[CE]  incompatible  types	2	None	add
69	[BUG]  [BUGGY]  return  super.inverseCumulativeProbability(p  +  1);  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p  +  1);  }  [CE]  unreachable  statement  [FE]      java.lang.IllegalArgumentException:  p  must  be  between  0.0  and  1.0    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  return  super.inverseCumulativeProbability(p  +  1);  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p  +  1);  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	return    super.inverseCumulativeProbability(p    +    1);    if(p  ==  1)  {  return  super.inverseCumulativeProbability(p  +  1);  }	  	non-compiled	[CE]  unreachable  statement	2	None	add
70	[BUG]  [BUGGY]  mutatorDegreesOfFreedom  =  new  NumeratorDegreesOfFreedom();  [CE]  cannot  find  symbol  mutatorDegreesOfFreedom  [FE]    IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  mutatorDegreesOfFreedom  =  new  NumeratorDegreesOfFreedom();  [BUGGY]    return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	mutatorDegreesOfFreedom  =  new  NumeratorDegreesOfFreedom();	      if(p    ==    1)    {    return    Double.POSITIVE_INFINITY;    }    	non-compiled	[CE]  cannot  find  symbol  mutatorDegreesOfFreedom	15	None	replace
71	[BUG]  [BUGGY]  if(p  ==  0)  {  final  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegre  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  if(p  ==  0)  {  final  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegre  [BUGGY]    return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	if(p  ==  0)  {  final  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegre	      if(p    ==    1)    {    return    Double.POSITIVE_INFINITY;    }    else    {    final    double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegre    	non-compiled	[CE]  ';'  expected	18	None	replace
72	[BUG]  [BUGGY]  final  int  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [CE]  possible  loss  of  precision  [FE]          IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  final  int  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  [BUGGY]    return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	final  int  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();	      if(p    ==    1)    {    return    Double.POSITIVE_INFINITY;    }    else    {    final    double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegre    	non-compiled	[CE]  possible  loss  of  precision	18	None	replace
73	[BUG]  [BUGGY]  if(p  ==  0)  {  final  double  denominatorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegre  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  if(p  ==  0)  {  final  double  denominatorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegre  [BUGGY]    return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	if(p  ==  0)  {  final  double  denominatorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegre	      if(p    ==    1)    {    return    Double.POSITIVE_INFINITY;    }    else    {    final    double    denominatorDegreesOfFreedom    =    super.inverseCumulativeProbability(p);    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegre    	non-compiled	[CE]  ';'  expected	6	None	replace
74	[BUG]  [BUGGY]  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.POSITIVE_INFINITY;  }  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Infinite.POSITIVE_INFINITY;  }  [CE]  cannot  find  symbol  Infinite  [FE]    AssertionFailedError    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.POSITIVE_INFINITY;  }  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Infinite.POSITIVE_INFINITY;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	if(p    ==    1)    {    return    super.inverseCumulativeProbability(p);    }    else    {    return    Double.POSITIVE_INFINITY;    }    if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Infinite.POSITIVE_INFINITY;  }	  	non-compiled	[CE]  cannot  find  symbol  Infinite	8	None	add
75	[BUG]  [BUGGY]  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.POSITIVE_INFINITY;  }  if(p  ==  1  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.POSITIVE_INFINITY;  }  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.POSITIVE_INFINITY;  }  if(p  ==  1  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	if(p    ==    1)    {    return    super.inverseCumulativeProbability(p);    }    else    {    return    Double.POSITIVE_INFINITY;    }    if(p  ==  1  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.POSITIVE_INFINITY;  }	  	non-compiled	[CE]  ')'  expected	8	None	add
76	[BUG]  [BUGGY]  mutatorDegreesOfFreedom  =  getNumberDegreesOfFreedom();  [CE]  cannot  find  symbol  mutatorDegreesOfFreedom  [FE]              IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  mutatorDegreesOfFreedom  =  getNumberDegreesOfFreedom();  [BUGGY]    return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	mutatorDegreesOfFreedom  =  getNumberDegreesOfFreedom();	      if(p    ==    1)    {    return    Double.POSITIVE_INFINITY;    }    else    {    return    super.inverseCumulativeProbability(p);    }    	non-compiled	[CE]  cannot  find  symbol  mutatorDegreesOfFreedom	16	None	replace
77	[BUG]  [BUGGY]  ReflectionImpl  ret  =  getReflectionImpl(null);  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  ReflectionImpl  ret  =  getReflectionImpl(null);  [BUGGY]    return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	ReflectionImpl  ret  =  getReflectionImpl(null);	      ReflectionImpl    ret    =    getReflectionImpl();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
78	[BUG]  [BUGGY]  return  super.inverseCumulativeProbability(p,  denominatorDegreesOfFreedom,  denominatorDegreesOfFreedom);  [CE]  no  suitable  method  found  for  inverseCumulativeProbability(double,double,double)  [FE]        IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  return  super.inverseCumulativeProbability(p,  denominatorDegreesOfFreedom,  denominatorDegreesOfFreedom);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	return  super.inverseCumulativeProbability(p,  denominatorDegreesOfFreedom,  denominatorDegreesOfFreedom);	  return    super.inverseCumulativeProbability(p,    numeratorDegreesOfFreedom);    	non-compiled	[CE]  no  suitable  method  found  for  inverseCumulativeProbability(double,double,double)	1	None	replace
79	[BUG]  [BUGGY]  if(p  ==  0)  {  return  super.inverseCumulativeProbability(p);  }  [CE]  missing  return  statement  [FE]          IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  if(p  ==  0)  {  return  super.inverseCumulativeProbability(p);  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	if(p  ==  0)  {  return  super.inverseCumulativeProbability(p);  }	  if(p    ==    1)    {    return    super.inverseCumulativeProbability(p);    }    	non-compiled	[CE]  missing  return  statement	10	None	replace
80	[BUG]  [BUGGY]  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.NEGATIVE_INFINITY;  }  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.POSITIVE_INFINITY;  }  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.NEGATIVE_INFINITY;  }  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	if(p    ==    1)    {    return    super.inverseCumulativeProbability(p);    }    else    {    return    Double.NEGATIVE_INFINITY;    }    if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.POSITIVE_INFINITY;  }	  	non-compiled	[CE]  unreachable  statement	20	None	add
81	[BUG]  [BUGGY]  ReflectionImpl  ret  =(ReflectionImpl)super.inverseCumulativeProbability(p,  denominatorDegreesOfFreedom);  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  ReflectionImpl  ret  =(ReflectionImpl)super.inverseCumulativeProbability(p,  denominatorDegreesOfFreedom);  [BUGGY]    return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	ReflectionImpl  ret  =(ReflectionImpl)super.inverseCumulativeProbability(p,  denominatorDegreesOfFreedom);	      ReflectionImpl    ret    =(ReflectionImpl)super.inverseCumulativeProbability(p);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
82	[BUG]  [BUGGY]  p  +=  super.inverseCumulativeProbability(p);  [CE]  final  parameter  p  may  not  be  assigned  [FE]          IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  p  +=  super.inverseCumulativeProbability(p);  [BUGGY]    return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	p  +=  super.inverseCumulativeProbability(p);	      if(p    ==    1)    {    return    Double.POSITIVE_INFINITY;    }    else    {    final    double    denominatorDegreesOfFreedom    =    super.inverseCumulativeProbability(p);    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    +    	non-compiled	[CE]  final  parameter  p  may  not  be  assigned	19	None	replace
83	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  p  must  be  between  0.0  and  1.0  [FE]    java.lang.IllegalArgumentException:  p  must  be  between  0.0  and  1.0    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  return  super.inverseCumulativeProbability(p  +  1.0);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	add	return  super.inverseCumulativeProbability(p  +  1.0);	  return    super.inverseCumulativeProbability(p    +    1);    	compilable	  [FE]  java.lang.IllegalArgumentException:  p  must  be  between  0.0  and  1.0  	3	4	replace
84	[BUG]  [BUGGY]  return  super.inverseCumulativeProbability(p  +  1.0);  [FE]  java.lang.IllegalArgumentException:  p  must  be  between  0.0  and  1.0  [FE]    java.lang.IllegalArgumentException:  p  must  be  between  0.0  and  1.0    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  return  super.inverseCumulativeProbability(p  +  1.0);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	return  super.inverseCumulativeProbability(p  +  1.0);	  return    super.inverseCumulativeProbability(p    +    1);    	compilable	  [FE]  java.lang.IllegalArgumentException:  p  must  be  between  0.0  and  1.0  	3	4	replace
85	[BUG]  [BUGGY]  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.NEGATIVE_INFINITY;  }  if(p  ==  )  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.NEGATIVE_INFINITY;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.NEGATIVE_INFINITY;  }  if(p  ==  )  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.NEGATIVE_INFINITY;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	if(p    ==    1)    {    return    super.inverseCumulativeProbability(p);    }    else    {    return    Double.NEGATIVE_INFINITY;    }    if(p  ==  )  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.NEGATIVE_INFINITY;  }	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
86	[BUG]  [BUGGY]  mutatorDegreesOfFreedom  =  p.getNumberDegreesOfFreedom();  [CE]  cannot  find  symbol  mutatorDegreesOfFreedom  [FE]              IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  mutatorDegreesOfFreedom  =  p.getNumberDegreesOfFreedom();  [BUGGY]    return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	mutatorDegreesOfFreedom  =  p.getNumberDegreesOfFreedom();	      if(p    ==    1)    {    return    Double.POSITIVE_INFINITY;    }    else    {    return    super.inverseCumulativeProbability(p);    }    	non-compiled	[CE]  cannot  find  symbol  mutatorDegreesOfFreedom	16	None	replace
87	[BUG]  [BUGGY]  final  double  n  =  super.inverseCumulativeProbability(p);  [CE]  missing  return  statement  [FE]          IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  final  double  n  =  super.inverseCumulativeProbability(p);  [BUGGY]    return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	final  double  n  =  super.inverseCumulativeProbability(p);	      if(p    ==    1)    {    return    Double.POSITIVE_INFINITY;    }    else    {    final    double    denominatorDegreesOfFreedom    =    super.inverseCumulativeProbability(p);    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    +    	non-compiled	[CE]  missing  return  statement	19	None	replace
88	[BUG]  [BUGGY]  if(p  ==  0)  {  return  Double.POSITIVE_INFINITY;  }  [CE]  missing  return  statement  [FE]            IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  if(p  ==  0)  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	if(p  ==  0)  {  return  Double.POSITIVE_INFINITY;  }	      	non-compiled	[CE]  missing  return  statement	4	None	replace
89	[BUG]  [BUGGY]  if(p  ==  0)  {  final  double  denominatorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  if(p  ==  0)  {  final  double  denominatorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom  [BUGGY]    return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	if(p  ==  0)  {  final  double  denominatorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegreesOfFreedom	      if(p    ==    1)    {    return    Double.POSITIVE_INFINITY;    }    else    {    final    double    denominatorDegreesOfFreedom    =    super.inverseCumulativeProbability(p);    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegreesOfFreedom    	non-compiled	[CE]  ';'  expected	5	None	replace
90	[BUG]  [BUGGY]  parent().inverseCumulativeProbability(p);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  parent().inverseCumulativeProbability(p);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	parent().inverseCumulativeProbability(p);	  if(p    ==    1)    {    return    super.inverseCumulativeProbability(p);    }    else    {    return    Double.POSITIVE_INFINITY;    }    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
91	[BUG]  [BUGGY]  ReflectionImpl  ret  =  getReflectionImpl(0);  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  ReflectionImpl  ret  =  getReflectionImpl(0);  [BUGGY]    return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	ReflectionImpl  ret  =  getReflectionImpl(0);	      ReflectionImpl    ret    =    getReflectionImpl();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
92	[BUG]  [BUGGY]  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.POSITIVE_INFINITY;  }  if(p  ==  )  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.POSITIVE_INFINITY;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.POSITIVE_INFINITY;  }  if(p  ==  )  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	if(p    ==    1)    {    return    super.inverseCumulativeProbability(p);    }    else    {    return    Double.POSITIVE_INFINITY;    }    if(p  ==  )  {  return  super.inverseCumulativeProbability(p);  }  else  {  return  Double.POSITIVE_INFINITY;  }	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
93	[BUG]  [BUGGY]  return  super.inverseCumulativeProbability(p  +  1);  return  super.inverseCumulativeProbability(p  +  1);  [CE]  unreachable  statement  [FE]    java.lang.IllegalArgumentException:  p  must  be  between  0.0  and  1.0    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  return  super.inverseCumulativeProbability(p  +  1);  return  super.inverseCumulativeProbability(p  +  1);  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	return    super.inverseCumulativeProbability(p    +    1);    return  super.inverseCumulativeProbability(p  +  1);	  	non-compiled	[CE]  unreachable  statement	2	None	add
94	[BUG]  [BUGGY]  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p  +  1);  }  [CE]  missing  return  statement  [FE]    java.lang.IllegalArgumentException:  p  must  be  between  0.0  and  1.0    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  if(p  ==  1)  {  return  super.inverseCumulativeProbability(p  +  1);  }  [BUGGY]    }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	if(p  ==  1)  {  return  super.inverseCumulativeProbability(p  +  1);  }	  return    super.inverseCumulativeProbability(p    +    1);    	non-compiled	[CE]  missing  return  statement	3	None	replace
95	[BUG]  [BUGGY]  final  int  numeratorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);  [CE]  possible  loss  of  precision  [FE]            IllegalArgumentException    [CONTEXT]    public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }    [BUGGY]  final  int  numeratorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);  [BUGGY]    return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	final  int  numeratorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);	      if(p    ==    1)    {    return    Double.POSITIVE_INFINITY;    }    else    {    final    double    denominatorDegreesOfFreedom    =    super.inverseCumulativeProbability(p);    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegrees    	non-compiled	[CE]  possible  loss  of  precision	7	None	replace
