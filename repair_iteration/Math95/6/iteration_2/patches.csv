bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  long  numeratorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);  [CE]  possible  loss  of  precision  [FE]                IllegalArgumentException      [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  final  long  numeratorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);  [BUGGY]      return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	final  long  numeratorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);	  final    int    numeratorDegreesOfFreedom    =    super.inverseCumulativeProbability(p);    	non-compiled	[CE]  possible  loss  of  precision	95	None	replace
2	[BUG]  [BUGGY]  static  double  numeratorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  static  double  numeratorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);  [BUGGY]      return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	static  double  numeratorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);	  final    int    numeratorDegreesOfFreedom    =    super.inverseCumulativeProbability(p);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
3	[BUG]  [BUGGY]  return  super.inverseCumulativeProbability(p,  n,  denominatorDegreesOfFreedom);  [CE]  cannot  find  symbol  n  [FE]                IllegalArgumentException      [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  return  super.inverseCumulativeProbability(p,  n,  denominatorDegreesOfFreedom);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	return  super.inverseCumulativeProbability(p,  n,  denominatorDegreesOfFreedom);	  return    super.inverseCumulativeProbability(p,    m,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  n	25	None	replace
4	[BUG]  [BUGGY]  ReflectionImpl  ret  =(ReflectionImpl)p.inverseCumulativeProbability(this);  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  ReflectionImpl  ret  =(ReflectionImpl)p.inverseCumulativeProbability(this);  [BUGGY]      return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	ReflectionImpl  ret  =(ReflectionImpl)p.inverseCumulativeProbability(this);	  ReflectionImpl    ret    =(ReflectionImpl)this.inverseCumulativeProbability(p);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
5	[BUG]  [BUGGY]  ReflectionImpl  ret  =(ReflectionImpl)this.inverseCumulativeProbability(p,  p);  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  ReflectionImpl  ret  =(ReflectionImpl)this.inverseCumulativeProbability(p,  p);  [BUGGY]      return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	ReflectionImpl  ret  =(ReflectionImpl)this.inverseCumulativeProbability(p,  p);	  ReflectionImpl    ret    =(ReflectionImpl)this.inverseCumulativeProbability(p);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
6	[BUG]  [BUGGY]  ReflectionImpl  ret  =(ReflectionImpl)this.inverseCumulativeProbability(p,  numeratorDegreesOfFreedom);  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  ReflectionImpl  ret  =(ReflectionImpl)this.inverseCumulativeProbability(p,  numeratorDegreesOfFreedom);  [BUGGY]      return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	ReflectionImpl  ret  =(ReflectionImpl)this.inverseCumulativeProbability(p,  numeratorDegreesOfFreedom);	  ReflectionImpl    ret    =(ReflectionImpl)this.inverseCumulativeProbability(p);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
7	[BUG]  [BUGGY]  return  super.inverseCumulativeProbability(p  +  1.0);  p  must  be  between  0.0  and  1.0  [CE]  ';'  expected  [FE]    java.lang.IllegalArgumentException:  p  must  be  between  0.0  and  1.0    [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  return  super.inverseCumulativeProbability(p  +  1.0);  p  must  be  between  0.0  and  1.0  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	return    super.inverseCumulativeProbability(p    +    1.0);    p  must  be  between  0.0  and  1.0	  	non-compiled	[CE]  ';'  expected	83	None	add
8	[BUG]  [BUGGY]  return  super.inverseCumulativeProbability(p  +  1.0);  p  must  be  between  0.0  and  1.0;  [CE]  ';'  expected  [FE]      java.lang.IllegalArgumentException:  p  must  be  between  0.0  and  1.0    [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  return  super.inverseCumulativeProbability(p  +  1.0);  p  must  be  between  0.0  and  1.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	return    super.inverseCumulativeProbability(p    +    1.0);    p  must  be  between  0.0  and  1.0;	  	non-compiled	[CE]  ';'  expected	83	None	add
9	[BUG]  [BUGGY]  return  super.inverseCumulativeProbability(p  +  1.0);  p  +=  1.0;  [CE]  unreachable  statement  [FE]        java.lang.IllegalArgumentException:  p  must  be  between  0.0  and  1.0    [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  return  super.inverseCumulativeProbability(p  +  1.0);  p  +=  1.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	return    super.inverseCumulativeProbability(p    +    1.0);    p  +=  1.0;	  	non-compiled	[CE]  unreachable  statement	83	None	add
10	[BUG]  [BUGGY]  return  super.inverseCumulativeProbability(p  +  1.0);  p  =  Math.abs(p  +  1.0);  [CE]  unreachable  statement  [FE]          java.lang.IllegalArgumentException:  p  must  be  between  0.0  and  1.0    [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  return  super.inverseCumulativeProbability(p  +  1.0);  p  =  Math.abs(p  +  1.0);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	return    super.inverseCumulativeProbability(p    +    1.0);    p  =  Math.abs(p  +  1.0);	  	non-compiled	[CE]  unreachable  statement	83	None	add
11	[BUG]  [BUGGY]  return  super.inverseCumulativeProbability(p  +  1.0);  p  =  0.0;  [CE]  unreachable  statement  [FE]            java.lang.IllegalArgumentException:  p  must  be  between  0.0  and  1.0    [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  return  super.inverseCumulativeProbability(p  +  1.0);  p  =  0.0;  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	return    super.inverseCumulativeProbability(p    +    1.0);    p  =  0.0;	  	non-compiled	[CE]  unreachable  statement	83	None	add
12	[BUG]  [BUGGY]  final  double  numeratorDegreesOfFreedom  =  getNumberDegreesOfFreedom();  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  final  double  numeratorDegreesOfFreedom  =  getNumberDegreesOfFreedom();  [BUGGY]      return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	final  double  numeratorDegreesOfFreedom  =  getNumberDegreesOfFreedom();	  final    double    numeratorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
13	[BUG]  [BUGGY]  final  double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(0);  [CE]  method  getNumeratorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException      [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  final  double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(0);  [BUGGY]      return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	final  double  numeratorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom(0);	  final    double    numeratorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    	non-compiled	[CE]  method  getNumeratorDegreesOfFreedom  in  class  FDistributionImpl  cannot  be  applied  to  given  types;	63	None	replace
14	[BUG]  [BUGGY]  parser.inverseCumulativeProbability(p);  [CE]  cannot  find  symbol  parser  [FE]                  IllegalArgumentException      [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  parser.inverseCumulativeProbability(p);  [BUGGY]      return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	parser.inverseCumulativeProbability(p);	  parent.inverseCumulativeProbability(p);    	non-compiled	[CE]  cannot  find  symbol  parser	31	None	replace
15	[BUG]  [BUGGY]  semi.inverseCumulativeProbability(p);  [CE]  cannot  find  symbol  semi  [FE]                    IllegalArgumentException      [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  semi.inverseCumulativeProbability(p);  [BUGGY]      return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	semi.inverseCumulativeProbability(p);	  parent.inverseCumulativeProbability(p);    	non-compiled	[CE]  cannot  find  symbol  semi	31	None	replace
16	[BUG]  [BUGGY]  inverseCumulativeProbability(p);  [CE]  missing  return  statement  [FE]                      IllegalArgumentException      [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  inverseCumulativeProbability(p);  [BUGGY]      return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	inverseCumulativeProbability(p);	  parent.inverseCumulativeProbability(p);    	non-compiled	[CE]  missing  return  statement	31	None	replace
17	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  return  super.inverseCumulativeProbability(p  /  2);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	add	return  super.inverseCumulativeProbability(p  /  2);	  return    super.inverseCumulativeProbability(p    /    1);    	compilable	  [FE]  IllegalArgumentException  	53	4	replace
18	[BUG]  [BUGGY]  return  super.inverseCumulativeProbability(p  /  2);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  return  super.inverseCumulativeProbability(p  /  2);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	return  super.inverseCumulativeProbability(p  /  2);	  return    super.inverseCumulativeProbability(p    /    1);    	compilable	  [FE]  IllegalArgumentException  	53	4	replace
19	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  return  super.inverseCumulativeProbability(p  /  2.0);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	add	return  super.inverseCumulativeProbability(p  /  2.0);	  return    super.inverseCumulativeProbability(p    /    1);    	compilable	  [FE]  IllegalArgumentException  	53	4	replace
20	[BUG]  [BUGGY]  return  super.inverseCumulativeProbability(p  /  2.0);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  return  super.inverseCumulativeProbability(p  /  2.0);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	return  super.inverseCumulativeProbability(p  /  2.0);	  return    super.inverseCumulativeProbability(p    /    1);    	compilable	  [FE]  IllegalArgumentException  	53	4	replace
21	[BUG]  [BUGGY]  if(p  <  1)  {  return  super.inverseCumulativeProbability(p  +  1);  }  [CE]  missing  return  statement  [FE]              java.lang.IllegalArgumentException:  p  must  be  between  0.0  and  1.0      [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  if(p  <  1)  {  return  super.inverseCumulativeProbability(p  +  1);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	if(p  <  1)  {  return  super.inverseCumulativeProbability(p  +  1);  }	  return    super.inverseCumulativeProbability(p    +    1);    if(p    <    1)    {    return    super.inverseCumulativeProbability(p    +    1);    }    	non-compiled	[CE]  missing  return  statement	38	None	replace
22	[BUG]  [BUGGY]  if(p  <  1)  {  return  super.inverseCumulativeProbability(p);  }  [CE]  missing  return  statement  [FE]                java.lang.IllegalArgumentException:  p  must  be  between  0.0  and  1.0      [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  if(p  <  1)  {  return  super.inverseCumulativeProbability(p);  }  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	if(p  <  1)  {  return  super.inverseCumulativeProbability(p);  }	  return    super.inverseCumulativeProbability(p    +    1);    if(p    <    1)    {    return    super.inverseCumulativeProbability(p    +    1);    }    	non-compiled	[CE]  missing  return  statement	38	None	replace
23	[BUG]  [BUGGY]  p  =  super.inverseCumulativeProbability(p);  [CE]  final  parameter  p  may  not  be  assigned  [FE]                  java.lang.IllegalArgumentException:  p  must  be  between  0.0  and  1.0      [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  p  =  super.inverseCumulativeProbability(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	p  =  super.inverseCumulativeProbability(p);	  return    super.inverseCumulativeProbability(p    +    1);    if(p    <    1)    {    return    super.inverseCumulativeProbability(p    +    1);    }    	non-compiled	[CE]  final  parameter  p  may  not  be  assigned	38	None	replace
24	[BUG]  [BUGGY]  return  super.inverseCumulativeProbability(p,  0,  numeratorDegreesOfFreedom,  denominatorDegreesOfFreedom);  [CE]  no  suitable  method  found  for  inverseCumulativeProbability(double,int,double,double)  [FE]                    IllegalArgumentException      [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  return  super.inverseCumulativeProbability(p,  0,  numeratorDegreesOfFreedom,  denominatorDegreesOfFreedom);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	return  super.inverseCumulativeProbability(p,  0,  numeratorDegreesOfFreedom,  denominatorDegreesOfFreedom);	  return    super.inverseCumulativeProbability(p,    0,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  no  suitable  method  found  for  inverseCumulativeProbability(double,int,double,double)	27	None	replace
25	[BUG]  [BUGGY]  return  super.inverseCumulativeProbability(p,  0,  p,  denominatorDegreesOfFreedom);  [CE]  no  suitable  method  found  for  inverseCumulativeProbability(double,int,double,double)  [FE]                      IllegalArgumentException      [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  return  super.inverseCumulativeProbability(p,  0,  p,  denominatorDegreesOfFreedom);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	return  super.inverseCumulativeProbability(p,  0,  p,  denominatorDegreesOfFreedom);	  return    super.inverseCumulativeProbability(p,    0,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  no  suitable  method  found  for  inverseCumulativeProbability(double,int,double,double)	27	None	replace
26	[BUG]  [BUGGY]  return  super.inverseCumulativeProbability(p,  0,  m,  denominatorDegreesOfFreedom);  [CE]  cannot  find  symbol  m  [FE]                        IllegalArgumentException      [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  return  super.inverseCumulativeProbability(p,  0,  m,  denominatorDegreesOfFreedom);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	return  super.inverseCumulativeProbability(p,  0,  m,  denominatorDegreesOfFreedom);	  return    super.inverseCumulativeProbability(p,    0,    denominatorDegreesOfFreedom);    	non-compiled	[CE]  cannot  find  symbol  m	27	None	replace
27	[BUG]  [BUGGY]  p  =  super.inverseCumulativeProbability(p  +  1);  [CE]  final  parameter  p  may  not  be  assigned  [FE]                java.lang.IllegalArgumentException:  p  must  be  between  0.0  and  1.0      [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  p  =  super.inverseCumulativeProbability(p  +  1);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	p  =  super.inverseCumulativeProbability(p  +  1);	  return    super.inverseCumulativeProbability(p    +    1);    if(p    +    1)    {    return    super.inverseCumulativeProbability(p    +    1);    }    	non-compiled	[CE]  final  parameter  p  may  not  be  assigned	39	None	replace
28	[BUG]  [BUGGY]  n  =  super.inverseCumulativeProbability(p);  [CE]  cannot  find  symbol  n  [FE]                  java.lang.IllegalArgumentException:  p  must  be  between  0.0  and  1.0      [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  n  =  super.inverseCumulativeProbability(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	n  =  super.inverseCumulativeProbability(p);	  return    super.inverseCumulativeProbability(p    +    1);    if(p    +    1)    {    return    super.inverseCumulativeProbability(p    +    1);    }    	non-compiled	[CE]  cannot  find  symbol  n	39	None	replace
29	[BUG]  [BUGGY]  return  inverseCumulativeProbability(p);  inverseCumulativeProbability(p);  [CE]  unreachable  statement  [FE]    StackOverflowError    [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  return  inverseCumulativeProbability(p);  inverseCumulativeProbability(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	return    inverseCumulativeProbability(p);    inverseCumulativeProbability(p);	  	non-compiled	[CE]  unreachable  statement	13	None	add
30	[BUG]  [BUGGY]  return  inverseCumulativeProbability(p);  return  inverseCumulativeProbability(p);  [CE]  unreachable  statement  [FE]      StackOverflowError    [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  return  inverseCumulativeProbability(p);  return  inverseCumulativeProbability(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	return    inverseCumulativeProbability(p);    return  inverseCumulativeProbability(p);	  	non-compiled	[CE]  unreachable  statement	13	None	add
31	[BUG]  [BUGGY]  return  inverseCumulativeProbability(p);  ReflectionImpl  ret  =  getReflectionImpl();  [CE]  cannot  find  symbol  [FE]        StackOverflowError    [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  return  inverseCumulativeProbability(p);  ReflectionImpl  ret  =  getReflectionImpl();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	return    inverseCumulativeProbability(p);    ReflectionImpl  ret  =  getReflectionImpl();	  	non-compiled	[CE]  cannot  find  symbol	13	None	add
32	[BUG]  [BUGGY]  return  inverseCumulativeProbability(p);  ReflectionImpl  ret  =  getReflectionImpl(p);  [CE]  cannot  find  symbol  [FE]          StackOverflowError    [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  return  inverseCumulativeProbability(p);  ReflectionImpl  ret  =  getReflectionImpl(p);  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	return    inverseCumulativeProbability(p);    ReflectionImpl  ret  =  getReflectionImpl(p);	  	non-compiled	[CE]  cannot  find  symbol	13	None	add
33	[BUG]  [BUGGY]  return  inverseCumulativeProbability(p);  ReflectionImpl  ret  =  new  ReflectionImpl();  [CE]  cannot  find  symbol  [FE]            StackOverflowError    [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  return  inverseCumulativeProbability(p);  ReflectionImpl  ret  =  new  ReflectionImpl();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	return    inverseCumulativeProbability(p);    ReflectionImpl  ret  =  new  ReflectionImpl();	  	non-compiled	[CE]  cannot  find  symbol	13	None	add
34	[BUG]  [BUGGY]  final  double  denominatorDegreesOfFreedom  =  super.inverseCumulativeProbability(p,  numeratorDegreesOfFreedom);  [CE]  no  suitable  method  found  for  inverseCumulativeProbability(double,double)  [FE]                IllegalArgumentException      [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  final  double  denominatorDegreesOfFreedom  =  super.inverseCumulativeProbability(p,  numeratorDegreesOfFreedom);  [BUGGY]      return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	final  double  denominatorDegreesOfFreedom  =  super.inverseCumulativeProbability(p,  numeratorDegreesOfFreedom);	  final    double    denominatorDegreesOfFreedom    =    super.inverseCumulativeProbability(p);    	non-compiled	[CE]  no  suitable  method  found  for  inverseCumulativeProbability(double,double)	28	None	replace
35	[BUG]  [BUGGY]  final  double  denominatorDegreesOfFreedom  =  super.inverseCumulativeProbability(denominatorDegreesOfFreedom);  [CE]  variable  denominatorDegreesOfFreedom  might  not  have  been  initialized  [FE]                  IllegalArgumentException      [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  final  double  denominatorDegreesOfFreedom  =  super.inverseCumulativeProbability(denominatorDegreesOfFreedom);  [BUGGY]      return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	final  double  denominatorDegreesOfFreedom  =  super.inverseCumulativeProbability(denominatorDegreesOfFreedom);	  final    double    denominatorDegreesOfFreedom    =    super.inverseCumulativeProbability(p);    	non-compiled	[CE]  variable  denominatorDegreesOfFreedom  might  not  have  been  initialized	28	None	replace
36	[BUG]  [BUGGY]  p  =  p.inverseCumulativeProbability(p);  [CE]  double  cannot  be  dereferenced  [FE]            IllegalArgumentException      [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  p  =  p.inverseCumulativeProbability(p);  [BUGGY]      return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	p  =  p.inverseCumulativeProbability(p);	  parent.inverseCumulativeProbability(p);    p    =    parent.inverseCumulativeProbability(p);    	non-compiled	[CE]  double  cannot  be  dereferenced	42	None	replace
37	[BUG]  [BUGGY]  p  =  parent.inverseCumulativeProbability(p);  [CE]  cannot  find  symbol  parent  [FE]              IllegalArgumentException      [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  p  =  parent.inverseCumulativeProbability(p);  [BUGGY]      return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	p  =  parent.inverseCumulativeProbability(p);	  parent.inverseCumulativeProbability(p);    p    =    parent.inverseCumulativeProbability(p);    	non-compiled	[CE]  cannot  find  symbol  parent	42	None	replace
38	[BUG]  [BUGGY]  P  =  p.inverseCumulativeProbability(p);  [CE]  cannot  find  symbol  P  [FE]                IllegalArgumentException      [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  P  =  p.inverseCumulativeProbability(p);  [BUGGY]      return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	P  =  p.inverseCumulativeProbability(p);	  parent.inverseCumulativeProbability(p);    p    =    parent.inverseCumulativeProbability(p);    	non-compiled	[CE]  cannot  find  symbol  P	42	None	replace
39	[BUG]  [BUGGY]  p  =  inverseCumulativeProbability(p);  [CE]  final  parameter  p  may  not  be  assigned  [FE]                  IllegalArgumentException      [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  p  =  inverseCumulativeProbability(p);  [BUGGY]      return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	p  =  inverseCumulativeProbability(p);	  parent.inverseCumulativeProbability(p);    p    =    parent.inverseCumulativeProbability(p);    	non-compiled	[CE]  final  parameter  p  may  not  be  assigned	42	None	replace
40	[BUG]  [BUGGY]  parent  =  parent.nextDouble();  [CE]  cannot  find  symbol  parent  [FE]        AssertionFailedError      [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  parent  =  parent.nextDouble();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	parent  =  parent.nextDouble();	  if(p    ==    1)    {    return    super.inverseCumulativeProbability(p);    }    else    {    return    Double.POSITIVE_INFINITY;    }    if(p    ==    )    {    return    super.inverseCumulativeProbability(p);    }    else    {    return    Double.POSITIVE_INFINITY;    }    	non-compiled	[CE]  cannot  find  symbol  parent	92	None	replace
41	[BUG]  [BUGGY]  parent  =  parent.next();  [CE]  cannot  find  symbol  parent  [FE]          AssertionFailedError      [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  parent  =  parent.next();  [BUGGY]      }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	parent  =  parent.next();	  if(p    ==    1)    {    return    super.inverseCumulativeProbability(p);    }    else    {    return    Double.POSITIVE_INFINITY;    }    if(p    ==    )    {    return    super.inverseCumulativeProbability(p);    }    else    {    return    Double.POSITIVE_INFINITY;    }    	non-compiled	[CE]  cannot  find  symbol  parent	92	None	replace
42	[BUG]  [BUGGY]  ReflectionImpl  ret  =  getReflectionImpl(1);  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  ReflectionImpl  ret  =  getReflectionImpl(1);  [BUGGY]      return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	ReflectionImpl  ret  =  getReflectionImpl(1);	  ReflectionImpl    ret    =    getReflectionImpl(0);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
43	[BUG]  [BUGGY]  ReflectionImpl  ret  =  getReflectionImpl(2);  [CE]  cannot  find  symbol  [FE]                      IllegalArgumentException      [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  ReflectionImpl  ret  =  getReflectionImpl(2);  [BUGGY]      return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	ReflectionImpl  ret  =  getReflectionImpl(2);	  ReflectionImpl    ret    =    getReflectionImpl(0);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
44	[BUG]  [BUGGY]  ReflectionImpl  ret  =(ReflectionImpl)p.inverseCumulativeProbability(p);  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  ReflectionImpl  ret  =(ReflectionImpl)p.inverseCumulativeProbability(p);  [BUGGY]      return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	ReflectionImpl  ret  =(ReflectionImpl)p.inverseCumulativeProbability(p);	  ReflectionImpl    ret    =(ReflectionImpl)p.inverseCumulativeProbability(super);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
45	[BUG]  [BUGGY]  final  double  denominatorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);  if(denominatorDegreesOfFreedom  ==  null)  {  return  denominatorDegre  [CE]  ';'  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  final  double  denominatorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);  if(denominatorDegreesOfFreedom  ==  null)  {  return  denominatorDegre  [BUGGY]      return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	final  double  denominatorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);  if(denominatorDegreesOfFreedom  ==  null)  {  return  denominatorDegre	  final    double    denominatorDegreesOfFreedom    =    super.inverseCumulativeProbability(p);    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegre    	non-compiled	[CE]  ';'  expected	50	None	replace
46	[BUG]  [BUGGY]  final  int  denominatorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegre  [CE]  ';'  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  final  int  denominatorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegre  [BUGGY]      return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	final  int  denominatorDegreesOfFreedom  =  super.inverseCumulativeProbability(p);  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegre	  final    double    denominatorDegreesOfFreedom    =    super.inverseCumulativeProbability(p);    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegre    	non-compiled	[CE]  ';'  expected	50	None	replace
47	[BUG]  [BUGGY]  denominatorDegreesOfFreedom  =  false;  [CE]  incompatible  types  [FE]                        IllegalArgumentException      [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  denominatorDegreesOfFreedom  =  false;  [BUGGY]      return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	denominatorDegreesOfFreedom  =  false;	  mutatorDegreesOfFreedom    =    false;    	non-compiled	[CE]  incompatible  types	34	None	replace
48	[BUG]  [BUGGY]  MutatorDegreesOfFreedom  =  false;  [CE]  cannot  find  symbol  MutatorDegreesOfFreedom  [FE]                          IllegalArgumentException      [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  MutatorDegreesOfFreedom  =  false;  [BUGGY]      return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	MutatorDegreesOfFreedom  =  false;	  mutatorDegreesOfFreedom    =    false;    	non-compiled	[CE]  cannot  find  symbol  MutatorDegreesOfFreedom	34	None	replace
49	[BUG]  [BUGGY]  nullDegreesOfFreedom  =  false;  [CE]  cannot  find  symbol  nullDegreesOfFreedom  [FE]                            IllegalArgumentException      [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  nullDegreesOfFreedom  =  false;  [BUGGY]      return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	nullDegreesOfFreedom  =  false;	  mutatorDegreesOfFreedom    =    false;    	non-compiled	[CE]  cannot  find  symbol  nullDegreesOfFreedom	34	None	replace
50	[BUG]  [BUGGY]  MäeratorDegreesOfFreedom  =  false;  [CE]  cannot  find  symbol  M  [FE]                              IllegalArgumentException      [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  MäeratorDegreesOfFreedom  =  false;  [BUGGY]      return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	MäeratorDegreesOfFreedom  =  false;	  mutatorDegreesOfFreedom    =    false;    	non-compiled	[CE]  cannot  find  symbol  M	34	None	replace
51	[BUG]  [BUGGY]  parent  =  p.getParent();  [CE]  cannot  find  symbol  parent  [FE]                    IllegalArgumentException      [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  parent  =  p.getParent();  [BUGGY]      return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	parent  =  p.getParent();	  parent    =    parent.getParent();    	non-compiled	[CE]  cannot  find  symbol  parent	32	None	replace
52	[BUG]  [BUGGY]  parent  =  this.parent.getParent();  [CE]  cannot  find  symbol  parent  [FE]                      IllegalArgumentException      [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  parent  =  this.parent.getParent();  [BUGGY]      return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	parent  =  this.parent.getParent();	  parent    =    parent.getParent();    	non-compiled	[CE]  cannot  find  symbol  parent	32	None	replace
53	[BUG]  [BUGGY]  final  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegre  [CE]  ';'  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  final  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegre  [BUGGY]      return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	final  double  denominatorDegreesOfFreedom  =  getDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegre	  if(p    ==    0)    {    final    double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegre    	non-compiled	[CE]  ';'  expected	71	None	replace
54	[BUG]  [BUGGY]  final  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegre  [CE]  ';'  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  final  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegre  [BUGGY]      return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	final  double  denominatorDegreesOfFreedom  =  getNumberDenominatorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegre	  if(p    ==    0)    {    final    double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegre    	non-compiled	[CE]  ';'  expected	71	None	replace
55	[BUG]  [BUGGY]  final  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  if(denominatorDegreesOfFreedom  ==  null)  {  return  denominatorDegre  [CE]  ';'  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  final  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  if(denominatorDegreesOfFreedom  ==  null)  {  return  denominatorDegre  [BUGGY]      return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	final  double  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  if(denominatorDegreesOfFreedom  ==  null)  {  return  denominatorDegre	  if(p    ==    0)    {    final    double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegre    	non-compiled	[CE]  ';'  expected	71	None	replace
56	[BUG]  [BUGGY]  final  int  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegre  [CE]  ';'  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  double  inverseCumulativeProbability(final  double  p)  throws  MathException  {  if  (p  ==  0)  {  return  0d;  }  if  (p  ==  1)  {  return  Double.POSITIVE_INFINITY;  }      [BUGGY]  final  int  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegre  [BUGGY]      return  super.inverseCumulativeProbability(p);  }  [CLASS]  FDistributionImpl  [METHOD]  inverseCumulativeProbability  [RETURN_TYPE]  double  final  double  p  [VARIABLES]  double  denominatorDegreesOfFreedom  m  n  numeratorDegreesOfFreedom  p  ret  x  long  serialVersionUID  boolean  	projects/Math95/src/java/org/apache/commons/math/distribution/FDistributionImpl.java	0.5	106	106	1	replace	final  int  denominatorDegreesOfFreedom  =  getNumeratorDegreesOfFreedom();  if(denominatorDegreesOfFreedom!=  null)  {  return  denominatorDegre	  final    double    denominatorDegreesOfFreedom    =    getNumeratorDegreesOfFreedom();    if(denominatorDegreesOfFreedom!=    null)    {    return    denominatorDegre    	non-compiled	[CE]  ';'  expected	62	None	replace
