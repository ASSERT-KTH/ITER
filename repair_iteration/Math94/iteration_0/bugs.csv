bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] if (u * v == 0) { [FE] AssertionFailedError testGcd [CONTEXT] public static int gcd(int u, int v) { [BUGGY] if (u * v == 0) { [BUGGY] return (Math.abs(u) + Math.abs(v)); }      if (u > 0) { u = -u; } // make u negative [CLASS] MathUtils [METHOD] gcd [RETURN_TYPE] int  int u int v [VARIABLES] short NS PS ZS boolean double EPSILON SAFE_MIN TWO_PI logSum x y byte NB PB ZB int k t u v  	projects/Math94/src/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	412	412	1	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError testGcd [CONTEXT] public static int gcd(int u, int v) { [BUGGY] [BUGGY] if (u * v == 0) { return (Math.abs(u) + Math.abs(v)); }      if (u > 0) { u = -u; } // make u negative [CLASS] MathUtils [METHOD] gcd [RETURN_TYPE] int  int u int v [VARIABLES] short NS PS ZS boolean double EPSILON SAFE_MIN TWO_PI logSum x y byte NB PB ZB int k t u v  	projects/Math94/src/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	412	412	1	add	
3	[BUG] [BUGGY] return (Math.abs(u) + Math.abs(v)); [FE] AssertionFailedError testGcd [CONTEXT] public static int gcd(int u, int v) { if (u * v == 0) { [BUGGY] return (Math.abs(u) + Math.abs(v)); [BUGGY] }      if (u > 0) { u = -u; } // make u negative if (v > 0) { [CLASS] MathUtils [METHOD] gcd [RETURN_TYPE] int  int u int v [VARIABLES] short NS PS ZS boolean double EPSILON SAFE_MIN TWO_PI logSum x y byte NB PB ZB int k t u v  	projects/Math94/src/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	413	413	1	replace	
4	[BUG] [BUGGY] [FE] AssertionFailedError testGcd [CONTEXT] public static int gcd(int u, int v) { if (u * v == 0) { [BUGGY] [BUGGY] return (Math.abs(u) + Math.abs(v)); }      if (u > 0) { u = -u; } // make u negative if (v > 0) { [CLASS] MathUtils [METHOD] gcd [RETURN_TYPE] int  int u int v [VARIABLES] short NS PS ZS boolean double EPSILON SAFE_MIN TWO_PI logSum x y byte NB PB ZB int k t u v  	projects/Math94/src/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	413	413	1	add	
5	[BUG] [BUGGY] if (u > 0) { [FE] AssertionFailedError testGcd [CONTEXT] public static int gcd(int u, int v) { if (u * v == 0) { return (Math.abs(u) + Math.abs(v)); }      [BUGGY] if (u > 0) { [BUGGY] u = -u; } // make u negative if (v > 0) { v = -v; } // make v negative  int k = 0; while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are  u /= 2; [CLASS] MathUtils [METHOD] gcd [RETURN_TYPE] int  int u int v [VARIABLES] short NS PS ZS boolean double EPSILON SAFE_MIN TWO_PI logSum x y byte NB PB ZB int k t u v  	projects/Math94/src/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	420	420	1	replace	
6	[BUG] [BUGGY] [FE] AssertionFailedError testGcd [CONTEXT] public static int gcd(int u, int v) { if (u * v == 0) { return (Math.abs(u) + Math.abs(v)); }      [BUGGY] [BUGGY] if (u > 0) { u = -u; } // make u negative if (v > 0) { v = -v; } // make v negative  int k = 0; while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are  u /= 2; [CLASS] MathUtils [METHOD] gcd [RETURN_TYPE] int  int u int v [VARIABLES] short NS PS ZS boolean double EPSILON SAFE_MIN TWO_PI logSum x y byte NB PB ZB int k t u v  	projects/Math94/src/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	420	420	1	add	
7	[BUG] [BUGGY] u = -u; [FE] AssertionFailedError testGcd [CONTEXT] public static int gcd(int u, int v) { if (u * v == 0) { return (Math.abs(u) + Math.abs(v)); }      if (u > 0) { [BUGGY] u = -u; [BUGGY] } // make u negative if (v > 0) { v = -v; } // make v negative  int k = 0; while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are  u /= 2; v /= 2; [CLASS] MathUtils [METHOD] gcd [RETURN_TYPE] int  int u int v [VARIABLES] short NS PS ZS boolean double EPSILON SAFE_MIN TWO_PI logSum x y byte NB PB ZB int k t u v  	projects/Math94/src/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	421	421	1	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError testGcd [CONTEXT] public static int gcd(int u, int v) { if (u * v == 0) { return (Math.abs(u) + Math.abs(v)); }      if (u > 0) { [BUGGY] [BUGGY] u = -u; } // make u negative if (v > 0) { v = -v; } // make v negative  int k = 0; while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are  u /= 2; v /= 2; [CLASS] MathUtils [METHOD] gcd [RETURN_TYPE] int  int u int v [VARIABLES] short NS PS ZS boolean double EPSILON SAFE_MIN TWO_PI logSum x y byte NB PB ZB int k t u v  	projects/Math94/src/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	421	421	1	add	
9	[BUG] [BUGGY] if (v > 0) { [FE] AssertionFailedError testGcd [CONTEXT] return (Math.abs(u) + Math.abs(v)); }      if (u > 0) { u = -u; } // make u negative [BUGGY] if (v > 0) { [BUGGY] v = -v; } // make v negative  int k = 0; while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are  u /= 2; v /= 2; k++; // cast out twos. } [CLASS] MathUtils [METHOD] gcd [RETURN_TYPE] int  int u int v [VARIABLES] short NS PS ZS boolean double EPSILON SAFE_MIN TWO_PI logSum x y byte NB PB ZB int k t u v  	projects/Math94/src/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	423	423	1	replace	
10	[BUG] [BUGGY] [FE] AssertionFailedError testGcd [CONTEXT] return (Math.abs(u) + Math.abs(v)); }      if (u > 0) { u = -u; } // make u negative [BUGGY] [BUGGY] if (v > 0) { v = -v; } // make v negative  int k = 0; while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are  u /= 2; v /= 2; k++; // cast out twos. } [CLASS] MathUtils [METHOD] gcd [RETURN_TYPE] int  int u int v [VARIABLES] short NS PS ZS boolean double EPSILON SAFE_MIN TWO_PI logSum x y byte NB PB ZB int k t u v  	projects/Math94/src/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	423	423	1	add	
11	[BUG] [BUGGY] v = -v; [FE] AssertionFailedError testGcd [CONTEXT] }      if (u > 0) { u = -u; } // make u negative if (v > 0) { [BUGGY] v = -v; [BUGGY] } // make v negative  int k = 0; while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are  u /= 2; v /= 2; k++; // cast out twos. } if (k == 31) { [CLASS] MathUtils [METHOD] gcd [RETURN_TYPE] int  int u int v [VARIABLES] short NS PS ZS boolean double EPSILON SAFE_MIN TWO_PI logSum x y byte NB PB ZB int k t u v  	projects/Math94/src/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	424	424	1	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError testGcd [CONTEXT] }      if (u > 0) { u = -u; } // make u negative if (v > 0) { [BUGGY] [BUGGY] v = -v; } // make v negative  int k = 0; while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are  u /= 2; v /= 2; k++; // cast out twos. } if (k == 31) { [CLASS] MathUtils [METHOD] gcd [RETURN_TYPE] int  int u int v [VARIABLES] short NS PS ZS boolean double EPSILON SAFE_MIN TWO_PI logSum x y byte NB PB ZB int k t u v  	projects/Math94/src/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	424	424	1	add	
13	[BUG] [BUGGY] int k = 0; [FE] AssertionFailedError testGcd [CONTEXT]    if (u > 0) { u = -u; } // make u negative if (v > 0) { v = -v; } // make v negative  [BUGGY] int k = 0; [BUGGY] while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are  u /= 2; v /= 2; k++; // cast out twos. } if (k == 31) { throw new ArithmeticException("overflow: gcd is 2^31"); }  [CLASS] MathUtils [METHOD] gcd [RETURN_TYPE] int  int u int v [VARIABLES] short NS PS ZS boolean double EPSILON SAFE_MIN TWO_PI logSum x y byte NB PB ZB int k t u v  	projects/Math94/src/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	427	427	1	replace	
14	[BUG] [BUGGY] [FE] AssertionFailedError testGcd [CONTEXT]    if (u > 0) { u = -u; } // make u negative if (v > 0) { v = -v; } // make v negative  [BUGGY] [BUGGY] int k = 0; while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are  u /= 2; v /= 2; k++; // cast out twos. } if (k == 31) { throw new ArithmeticException("overflow: gcd is 2^31"); }  [CLASS] MathUtils [METHOD] gcd [RETURN_TYPE] int  int u int v [VARIABLES] short NS PS ZS boolean double EPSILON SAFE_MIN TWO_PI logSum x y byte NB PB ZB int k t u v  	projects/Math94/src/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	427	427	1	add	
15	[BUG] [BUGGY] while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are    // both even...  u /= 2; [FE] AssertionFailedError testGcd [CONTEXT]   if (u > 0) { u = -u; } // make u negative if (v > 0) { v = -v; } // make v negative  int k = 0; [BUGGY] while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are               // both even...      u /= 2; [BUGGY]  u /= 2; v /= 2; k++; // cast out twos. } if (k == 31) { throw new ArithmeticException("overflow: gcd is 2^31"); }   [CLASS] MathUtils [METHOD] gcd [RETURN_TYPE] int  int u int v [VARIABLES] short NS PS ZS boolean double EPSILON SAFE_MIN TWO_PI logSum x y byte NB PB ZB int k t u v  	projects/Math94/src/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	428	430	1	replace	
16	[BUG] [BUGGY] [FE] AssertionFailedError testGcd [CONTEXT]   if (u > 0) { u = -u; } // make u negative if (v > 0) { v = -v; } // make v negative  int k = 0; [BUGGY] [BUGGY] while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are               // both even...      u /= 2;  u /= 2; v /= 2; k++; // cast out twos. } if (k == 31) { throw new ArithmeticException("overflow: gcd is 2^31"); }   [CLASS] MathUtils [METHOD] gcd [RETURN_TYPE] int  int u int v [VARIABLES] short NS PS ZS boolean double EPSILON SAFE_MIN TWO_PI logSum x y byte NB PB ZB int k t u v  	projects/Math94/src/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	428	430	1	add	
17	[BUG] [BUGGY] u /= 2; [FE] AssertionFailedError testGcd [CONTEXT] if (u > 0) { u = -u; } // make u negative if (v > 0) { v = -v; } // make v negative  int k = 0; while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are  [BUGGY] u /= 2; [BUGGY] v /= 2; k++; // cast out twos. } if (k == 31) { throw new ArithmeticException("overflow: gcd is 2^31"); }   int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;  [CLASS] MathUtils [METHOD] gcd [RETURN_TYPE] int  int u int v [VARIABLES] short NS PS ZS boolean double EPSILON SAFE_MIN TWO_PI logSum x y byte NB PB ZB int k t u v  	projects/Math94/src/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	430	430	1	replace	
18	[BUG] [BUGGY] [FE] AssertionFailedError testGcd [CONTEXT] if (u > 0) { u = -u; } // make u negative if (v > 0) { v = -v; } // make v negative  int k = 0; while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are  [BUGGY] [BUGGY] u /= 2; v /= 2; k++; // cast out twos. } if (k == 31) { throw new ArithmeticException("overflow: gcd is 2^31"); }   int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;  [CLASS] MathUtils [METHOD] gcd [RETURN_TYPE] int  int u int v [VARIABLES] short NS PS ZS boolean double EPSILON SAFE_MIN TWO_PI logSum x y byte NB PB ZB int k t u v  	projects/Math94/src/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	430	430	1	add	
19	[BUG] [BUGGY] v /= 2; [FE] AssertionFailedError testGcd [CONTEXT] u = -u; } // make u negative if (v > 0) { v = -v; } // make v negative  int k = 0; while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are  u /= 2; [BUGGY] v /= 2; [BUGGY] k++; // cast out twos. } if (k == 31) { throw new ArithmeticException("overflow: gcd is 2^31"); }   int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;   [CLASS] MathUtils [METHOD] gcd [RETURN_TYPE] int  int u int v [VARIABLES] short NS PS ZS boolean double EPSILON SAFE_MIN TWO_PI logSum x y byte NB PB ZB int k t u v  	projects/Math94/src/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	431	431	1	replace	
20	[BUG] [BUGGY] [FE] AssertionFailedError testGcd [CONTEXT] u = -u; } // make u negative if (v > 0) { v = -v; } // make v negative  int k = 0; while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are  u /= 2; [BUGGY] [BUGGY] v /= 2; k++; // cast out twos. } if (k == 31) { throw new ArithmeticException("overflow: gcd is 2^31"); }   int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;   [CLASS] MathUtils [METHOD] gcd [RETURN_TYPE] int  int u int v [VARIABLES] short NS PS ZS boolean double EPSILON SAFE_MIN TWO_PI logSum x y byte NB PB ZB int k t u v  	projects/Math94/src/java/org/apache/commons/math/util/MathUtils.java	0.7071067811865475	431	431	1	add	
