bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer.length  -  1];  [CE]  'else'  without  'if'  [FE]          AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  char[]  buffer  =  new  char[buffer.length  -  1];  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char[]  buffer  =  new  char[buffer.length  -  1];	      char[]    buffer    =    new    char[count    -    1];    	non-compiled	[CE]  'else'  without  'if'	2	None	replace
2	[BUG]  [BUGGY]  char[]  buffer  =  new  char[len  -  1];  [CE]  'else'  without  'if'  [FE]            AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  char[]  buffer  =  new  char[len  -  1];  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char[]  buffer  =  new  char[len  -  1];	      char[]    buffer    =    new    char[count    -    1];    	non-compiled	[CE]  'else'  without  'if'	2	None	replace
3	[BUG]  [BUGGY]  char[]  buffer  =  new  char[length  -  1];  [CE]  'else'  without  'if'  [FE]              AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  char[]  buffer  =  new  char[length  -  1];  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char[]  buffer  =  new  char[length  -  1];	      char[]    buffer    =    new    char[count    -    1];    	non-compiled	[CE]  'else'  without  'if'	2	None	replace
4	[BUG]  [BUGGY]  char  ch  =  random.nextInt(gap,  start);  [CE]  'else'  without  'if'  [FE]        AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  char  ch  =  random.nextInt(gap,  start);  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  random.nextInt(gap,  start);	      char    ch    =    random.nextInt(gap);    	non-compiled	[CE]  'else'  without  'if'	11	None	replace
5	[BUG]  [BUGGY]  char  ch  =  random.nextInt(start,  gap);  [CE]  'else'  without  'if'  [FE]          AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  char  ch  =  random.nextInt(start,  gap);  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  random.nextInt(start,  gap);	      char    ch    =    random.nextInt(gap);    	non-compiled	[CE]  'else'  without  'if'	11	None	replace
6	[BUG]  [BUGGY]  char  ch  =  random.nextInt(buffer,  start);  [CE]  'else'  without  'if'  [FE]            AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  char  ch  =  random.nextInt(buffer,  start);  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  random.nextInt(buffer,  start);	      char    ch    =    random.nextInt(gap);    	non-compiled	[CE]  'else'  without  'if'	11	None	replace
7	[BUG]  [BUGGY]  char  ch  =  random.nextInt(gap  +  start);  [CE]  'else'  without  'if'  [FE]              AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  char  ch  =  random.nextInt(gap  +  start);  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  random.nextInt(gap  +  start);	      char    ch    =    random.nextInt(gap);    	non-compiled	[CE]  'else'  without  'if'	11	None	replace
8	[BUG]  [BUGGY]  char[]  buffer  =  new  char[len  -  start];  [CE]  'else'  without  'if'  [FE]        AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  char[]  buffer  =  new  char[len  -  start];  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char[]  buffer  =  new  char[len  -  start];	      char[]    buffer    =    new    char[count    -    start];    	non-compiled	[CE]  'else'  without  'if'	1	None	replace
9	[BUG]  [BUGGY]  char[]  buffer  =  new  char[end  -  start];  [CE]  'else'  without  'if'  [FE]          AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  char[]  buffer  =  new  char[end  -  start];  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char[]  buffer  =  new  char[end  -  start];	      char[]    buffer    =    new    char[count    -    start];    	non-compiled	[CE]  'else'  without  'if'	1	None	replace
10	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer.length  +  2];  [CE]  'else'  without  'if'  [FE]            AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  char[]  buffer  =  new  char[buffer.length  +  2];  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char[]  buffer  =  new  char[buffer.length  +  2];	      char[]    buffer    =    new    char[buffer.length    +    1];    	non-compiled	[CE]  'else'  without  'if'	3	None	replace
11	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer.length  *  1];  [CE]  'else'  without  'if'  [FE]              AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  char[]  buffer  =  new  char[buffer.length  *  1];  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char[]  buffer  =  new  char[buffer.length  *  1];	      char[]    buffer    =    new    char[buffer.length    +    1];    	non-compiled	[CE]  'else'  without  'if'	3	None	replace
12	[BUG]  [BUGGY]  Char  ch  =  buffer[random.nextInt(gap)+1];  [CE]  'else'  without  'if'  [FE]              AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  Char  ch  =  buffer[random.nextInt(gap)+1];  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Char  ch  =  buffer[random.nextInt(gap)+1];	      Char    ch    =    chars[random.nextInt(gap)+1];    	non-compiled	[CE]  'else'  without  'if'	17	None	replace
13	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  ch  =  (char)(random.nextInt(gap)+  1);  ch  =  (char)(random.nextInt(gap)+  1);  [BUGGY]    }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	add	ch    =    (char)(random.nextInt(gap)+    1);    ch  =  (char)(random.nextInt(gap)+  1);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	4	add
14	[BUG]  [BUGGY]  ch  =  (char)(random.nextInt(gap)+  1);  ch  =  (char)(random.nextInt(gap)+  1);  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  ch  =  (char)(random.nextInt(gap)+  1);  ch  =  (char)(random.nextInt(gap)+  1);  [BUGGY]    }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	ch    =    (char)(random.nextInt(gap)+    1);    ch  =  (char)(random.nextInt(gap)+  1);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	4	add
15	[BUG]  [BUGGY]  ch  =  (char)(random.nextInt(gap)+  1);  ch  =  (char)(random.nextInt(gap)+  1));  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  ch  =  (char)(random.nextInt(gap)+  1);  ch  =  (char)(random.nextInt(gap)+  1));  [BUGGY]    }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	ch    =    (char)(random.nextInt(gap)+    1);    ch  =  (char)(random.nextInt(gap)+  1));	  	non-compiled	[CE]  ';'  expected	6	None	add
16	[BUG]  [BUGGY]  ch  =  (char)(random.nextInt(gap)+  1);  ch  =  (Char)(random.nextInt(gap)+  1);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  ch  =  (char)(random.nextInt(gap)+  1);  ch  =  (Char)(random.nextInt(gap)+  1);  [BUGGY]    }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	ch    =    (char)(random.nextInt(gap)+    1);    ch  =  (Char)(random.nextInt(gap)+  1);	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
17	[BUG]  [BUGGY]  char  ch  =  buffer[random.nextInt(gap)+  start];  [CE]  'else'  without  'if'  [FE]        AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  char  ch  =  buffer[random.nextInt(gap)+  start];  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  buffer[random.nextInt(gap)+  start];	      char    ch    =    chars[random.nextInt(gap)+    start];    	non-compiled	[CE]  'else'  without  'if'	14	None	replace
18	[BUG]  [BUGGY]  Char  ch  =  buffer[random.nextInt(gap)+  start];  [CE]  'else'  without  'if'  [FE]          AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  Char  ch  =  buffer[random.nextInt(gap)+  start];  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Char  ch  =  buffer[random.nextInt(gap)+  start];	      Char    ch    =    chars[random.nextInt(gap)+    start];    	non-compiled	[CE]  'else'  without  'if'	15	None	replace
19	[BUG]  [BUGGY]  char[]  buffer  =  new  char[len  +  1];  [CE]  'else'  without  'if'  [FE]                AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  char[]  buffer  =  new  char[len  +  1];  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char[]  buffer  =  new  char[len  +  1];	      char[]    buffer    =    new    char[count    +    1];    	non-compiled	[CE]  'else'  without  'if'	5	None	replace
20	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer  +  1];  [CE]  'else'  without  'if'  [FE]                  AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  char[]  buffer  =  new  char[buffer  +  1];  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char[]  buffer  =  new  char[buffer  +  1];	      char[]    buffer    =    new    char[count    +    1];    	non-compiled	[CE]  'else'  without  'if'	5	None	replace
21	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  ch  =  (char)(random.nextInt(gap)+  start  +  1);  ch  =  (char)(random.nextInt(gap)+  start  +  1);  [BUGGY]    }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	add	ch    =    (char)(random.nextInt(gap)+    start    +    1);    ch  =  (char)(random.nextInt(gap)+  start  +  1);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	4	add
22	[BUG]  [BUGGY]  ch  =  (char)(random.nextInt(gap)+  start  +  1);  ch  =  (char)(random.nextInt(gap)+  start  +  1);  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  ch  =  (char)(random.nextInt(gap)+  start  +  1);  ch  =  (char)(random.nextInt(gap)+  start  +  1);  [BUGGY]    }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	ch    =    (char)(random.nextInt(gap)+    start    +    1);    ch  =  (char)(random.nextInt(gap)+  start  +  1);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	4	add
23	[BUG]  [BUGGY]  ch  =  (char)(random.nextInt(gap)+  start  +  1);  ch  =  (char)(random.nextInt(gap)+  start  +  1));  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  ch  =  (char)(random.nextInt(gap)+  start  +  1);  ch  =  (char)(random.nextInt(gap)+  start  +  1));  [BUGGY]    }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	ch    =    (char)(random.nextInt(gap)+    start    +    1);    ch  =  (char)(random.nextInt(gap)+  start  +  1));	  	non-compiled	[CE]  not  a  statement	9	None	add
24	[BUG]  [BUGGY]  ch  =  (char)(random.nextInt(gap)+  start  +  1);  ch  =  (Char)(random.nextInt(gap)+  start  +  1);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  ch  =  (char)(random.nextInt(gap)+  start  +  1);  ch  =  (Char)(random.nextInt(gap)+  start  +  1);  [BUGGY]    }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	ch    =    (char)(random.nextInt(gap)+    start    +    1);    ch  =  (Char)(random.nextInt(gap)+  start  +  1);	  	non-compiled	[CE]  not  a  statement	9	None	add
25	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer.length  -  start  +  1];  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  char[]  buffer  =  new  char[buffer.length  -  start  +  1];  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char[]  buffer  =  new  char[buffer.length  -  start  +  1];	      char[]    buffer    =    new    char[buffer.length    -    start];    	non-compiled	[CE]  not  a  statement	4	None	replace
26	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer.length  -  2];  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  char[]  buffer  =  new  char[buffer.length  -  2];  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char[]  buffer  =  new  char[buffer.length  -  2];	      char[]    buffer    =    new    char[buffer.length    -    start];    	non-compiled	[CE]  not  a  statement	4	None	replace
27	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  start,  end);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  start,  end);  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getRandom(buffer,  start,  end);	      Random    random    =    RandomStringUtils.getRandom(random);    	non-compiled	[CE]  not  a  statement	13	None	replace
28	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer);  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getRandom(buffer);	      Random    random    =    RandomStringUtils.getRandom(random);    	non-compiled	[CE]  not  a  statement	13	None	replace
29	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  end);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  end);  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getRandom(buffer,  end);	      Random    random    =    RandomStringUtils.getRandom(random);    	non-compiled	[CE]  not  a  statement	13	None	replace
30	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  0);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  0);  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getRandom(buffer,  0);	      Random    random    =    RandomStringUtils.getRandom(random);    	non-compiled	[CE]  not  a  statement	13	None	replace
31	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  end);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  end);  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getValue(buffer,  0,  end);	      Random    random    =    RandomStringUtils.getValue(buffer,    start,    end);    	non-compiled	[CE]  not  a  statement	12	None	replace
32	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  count);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  count);  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  count);	      Random    random    =    RandomStringUtils.getValue(buffer,    start,    end);    	non-compiled	[CE]  not  a  statement	12	None	replace
33	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  0);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  0);  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  0);	      Random    random    =    RandomStringUtils.getValue(buffer,    start,    end);    	non-compiled	[CE]  not  a  statement	12	None	replace
34	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  letters);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  letters);  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  letters);	      Random    random    =    RandomStringUtils.getValue(buffer,    start,    end);    	non-compiled	[CE]  ')'  expected	12	None	replace
35	[BUG]  [BUGGY]  ch  =  (char)(random.nextInt(gap)+  1];  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  ch  =  (char)(random.nextInt(gap)+  1];  [BUGGY]    }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	ch  =  (char)(random.nextInt(gap)+  1];	  ch    =    (char)(random.nextInt(gap)+    start];    	non-compiled	[CE]  ')'  expected	8	None	replace
36	[BUG]  [BUGGY]  char  ch  =  buffer[random.nextInt(gap)+1];  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  char  ch  =  buffer[random.nextInt(gap)+1];  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  buffer[random.nextInt(gap)+1];	      char    ch    =    chars[random.nextInt(gap)+1];    	non-compiled	[CE]  not  a  statement	16	None	replace
37	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  start);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  start);  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getRandom(buffer,  start);	      Random    random    =    RandomStringUtils.getRandom(random);    	non-compiled	[CE]  not  a  statement	13	None	replace
38	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  0,  start);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  0,  start);  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getRandom(buffer,  0,  start);	      Random    random    =    RandomStringUtils.getRandom(random);    	non-compiled	[CE]  not  a  statement	13	None	replace
39	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buff.length  -  start];  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  char[]  buffer  =  new  char[buff.length  -  start];  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char[]  buffer  =  new  char[buff.length  -  start];	      char[]    buffer    =    new    char[buffer.length    -    start];    	non-compiled	[CE]  not  a  statement	4	None	replace
40	[BUG]  [BUGGY]  char  ch  =  chars[random.nextInt(gap)+  start  +  1];  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  char  ch  =  chars[random.nextInt(gap)+  start  +  1];  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  chars[random.nextInt(gap)+  start  +  1];	      char    ch    =    chars[random.nextInt(gap)+    start];    	non-compiled	[CE]  not  a  statement	14	None	replace
41	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer  -  start];  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  char[]  buffer  =  new  char[buffer  -  start];  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char[]  buffer  =  new  char[buffer  -  start];	      char[]    buffer    =    new    char[count    -    start];    	non-compiled	[CE]  ')'  expected	1	None	replace
42	[BUG]  [BUGGY]  char[]  buffer  =  new  char[count  -  start  +  1];  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  char[]  buffer  =  new  char[count  -  start  +  1];  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char[]  buffer  =  new  char[count  -  start  +  1];	      char[]    buffer    =    new    char[count    -    start];    	non-compiled	[CE]  ')'  expected	1	None	replace
43	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  chars.length);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  chars.length);  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  chars.length);	      Random    random    =    RandomStringUtils.getValue(buffer,    start,    end);    	non-compiled	[CE]  ')'  expected	12	None	replace
44	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  ch);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  ch);  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  ch);	      Random    random    =    RandomStringUtils.getValue(buffer,    start,    end);    	non-compiled	[CE]  ')'  expected	12	None	replace
45	[BUG]  [BUGGY]  char  ch  =  chars[random.nextInt(gap)+1]  +  start;  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  char  ch  =  chars[random.nextInt(gap)+1]  +  start;  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  chars[random.nextInt(gap)+1]  +  start;	      char    ch    =    chars[random.nextInt(gap)+1];    	non-compiled	[CE]  ')'  expected	16	None	replace
46	[BUG]  [BUGGY]  char  ch  =  random.nextInt(buffer);  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  char  ch  =  random.nextInt(buffer);  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  random.nextInt(buffer);	      char    ch    =    random.nextInt(gap);    	non-compiled	[CE]  ')'  expected	11	None	replace
47	[BUG]  [BUGGY]  char  ch  =  random.nextInt(start);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  char  ch  =  random.nextInt(start);  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  random.nextInt(start);	      char    ch    =    random.nextInt(gap);    	non-compiled	[CE]  ')'  expected	11	None	replace
48	[BUG]  [BUGGY]  Char  ch  =  chars[random.nextInt(gap)+1],  start;  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  Char  ch  =  chars[random.nextInt(gap)+1],  start;  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Char  ch  =  chars[random.nextInt(gap)+1],  start;	      Char    ch    =    chars[random.nextInt(gap)+1];    	non-compiled	[CE]  ')'  expected	17	None	replace
49	[BUG]  [BUGGY]  char[]  buffer  =  new  char[start  +  1];  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  char[]  buffer  =  new  char[start  +  1];  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char[]  buffer  =  new  char[start  +  1];	      char[]    buffer    =    new    char[count    +    1];    	non-compiled	[CE]  ')'  expected	5	None	replace
50	[BUG]  [BUGGY]  Char  ch  =  chars[random.nextInt(gap)+1  start];  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  Char  ch  =  chars[random.nextInt(gap)+1  start];  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Char  ch  =  chars[random.nextInt(gap)+1  start];	      Char    ch    =    chars[random.nextInt(gap)+    start];    	non-compiled	[CE]  ')'  expected	15	None	replace
51	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(random,  start);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  Random  random  =  RandomStringUtils.getRandom(random,  start);  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getRandom(random,  start);	      Random    random    =    RandomStringUtils.getRandom(random);    	non-compiled	[CE]  ')'  expected	13	None	replace
52	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(ch);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  Random  random  =  RandomStringUtils.getRandom(ch);  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getRandom(ch);	      Random    random    =    RandomStringUtils.getRandom(random);    	non-compiled	[CE]  ')'  expected	13	None	replace
53	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(random,  count);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  Random  random  =  RandomStringUtils.getRandom(random,  count);  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getRandom(random,  count);	      Random    random    =    RandomStringUtils.getRandom(random);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
54	[BUG]  [BUGGY]  char  ch  =  chars.nextInt(gap);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  char  ch  =  chars.nextInt(gap);  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  chars.nextInt(gap);	      char    ch    =    random.nextInt(gap);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
55	[BUG]  [BUGGY]  char  ch  =  chars[random.nextInt(gap)+  start);  [CE]  ']'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  char  ch  =  chars[random.nextInt(gap)+  start);  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  chars[random.nextInt(gap)+  start);	      char    ch    =    random.nextInt(gap);    	non-compiled	[CE]  ']'  expected	11	None	replace
56	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(chars,  start,  end);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  Random  random  =  RandomStringUtils.getValue(chars,  start,  end);  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getValue(chars,  start,  end);	      Random    random    =    RandomStringUtils.getValue(buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
57	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buff.length  +  1];  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {    [BUGGY]  char[]  buffer  =  new  char[buff.length  +  1];  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char[]  buffer  =  new  char[buff.length  +  1];	      char[]    buffer    =    new    char[buffer.length    +    1];    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
