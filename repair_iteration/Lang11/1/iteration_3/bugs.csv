bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  char[]  buffer  =  new  char[len  *  1];  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char[]  buffer  =  new  char[len  *  1];  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char[]  buffer  =  new  char[len  *  1];	  char[]    buffer    =    new    char[len    +    1];    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
2	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buff.length  -  1];  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char[]  buffer  =  new  char[buff.length  -  1];  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char[]  buffer  =  new  char[buff.length  -  1];	  char[]    buffer    =    new    char[buff.length    -    start];    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
3	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buff.length  -  start  +  1];  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char[]  buffer  =  new  char[buff.length  -  start  +  1];  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char[]  buffer  =  new  char[buff.length  -  start  +  1];	  char[]    buffer    =    new    char[buff.length    -    start];    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
4	[BUG]  [BUGGY]  char  ch  =  chars[random.nextInt(buffer)];  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char  ch  =  chars[random.nextInt(buffer)];  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  chars[random.nextInt(buffer)];	  char    ch    =    random.nextInt(buffer);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
5	[BUG]  [BUGGY]  char  ch  =  random.nextInt(start,  end);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char  ch  =  random.nextInt(start,  end);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  random.nextInt(start,  end);	  char    ch    =    random.nextInt(start,    gap);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
6	[BUG]  [BUGGY]  char  ch  =  random.nextInt(buffer,  start,  end);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char  ch  =  random.nextInt(buffer,  start,  end);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  random.nextInt(buffer,  start,  end);	  char    ch    =    random.nextInt(start,    gap);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
7	[BUG]  [BUGGY]  char  ch  =  random.nextInt(start,  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char  ch  =  random.nextInt(start,  1);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  random.nextInt(start,  1);	  char    ch    =    random.nextInt(start,    gap);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
8	[BUG]  [BUGGY]  char[]  buffer  =  new  char[length  -  2];  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char[]  buffer  =  new  char[length  -  2];  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char[]  buffer  =  new  char[length  -  2];	  char[]    buffer    =    new    char[length    -    1];    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
9	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(ch  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(ch  +  1);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getRandom(ch  +  1);	  Random    random    =    RandomStringUtils.getRandom(ch);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
10	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(ch,  start);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(ch,  start);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getRandom(ch,  start);	  Random    random    =    RandomStringUtils.getRandom(ch);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
11	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(ch)+  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(ch)+  1;  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getRandom(ch)+  1;	  Random    random    =    RandomStringUtils.getRandom(ch);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
12	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(random,  start  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(random,  start  +  1);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getRandom(random,  start  +  1);	  Random    random    =    RandomStringUtils.getRandom(random,    start);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
13	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(start,  gap);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(start,  gap);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getRandom(start,  gap);	  Random    random    =    RandomStringUtils.getRandom(random,    start);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
14	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(random,  gap);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(random,  gap);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getRandom(random,  gap);	  Random    random    =    RandomStringUtils.getRandom(random,    start);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
15	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  start,  count);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  start,  count);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getRandom(buffer,  start,  count);	  Random    random    =    RandomStringUtils.getRandom(buffer,    start);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
16	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  start,  0);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  start,  0);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getRandom(buffer,  start,  0);	  Random    random    =    RandomStringUtils.getRandom(buffer,    start);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
17	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer.length  -  end  +  1];  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char[]  buffer  =  new  char[buffer.length  -  end  +  1];  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char[]  buffer  =  new  char[buffer.length  -  end  +  1];	  char[]    buffer    =    new    char[buffer.length    -    start    +    1];    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
18	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer.length  -  start  +  2];  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char[]  buffer  =  new  char[buffer.length  -  start  +  2];  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char[]  buffer  =  new  char[buffer.length  -  start  +  2];	  char[]    buffer    =    new    char[buffer.length    -    start    +    1];    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
19	[BUG]  [BUGGY]  Char  ch  =  chars[random.nextInt(gap)+1],  start  +  1;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Char  ch  =  chars[random.nextInt(gap)+1],  start  +  1;  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Char  ch  =  chars[random.nextInt(gap)+1],  start  +  1;	  Char    ch    =    chars[random.nextInt(gap)+1],    start;    	non-compiled	[CE]  ';'  expected	48	None	replace
20	[BUG]  [BUGGY]  Char  ch  =  chars[random.nextInt(gap)+  1,  start  +  1];  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Char  ch  =  chars[random.nextInt(gap)+  1,  start  +  1];  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Char  ch  =  chars[random.nextInt(gap)+  1,  start  +  1];	  Char    ch    =    chars[random.nextInt(gap)+1],    start;    	non-compiled	[CE]  ']'  expected	48	None	replace
21	[BUG]  [BUGGY]  Char  ch  =  chars[random.nextInt(gap)+  1,  end;  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Char  ch  =  chars[random.nextInt(gap)+  1,  end;  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Char  ch  =  chars[random.nextInt(gap)+  1,  end;	  Char    ch    =    chars[random.nextInt(gap)+1],    start;    	non-compiled	[CE]  ']'  expected	48	None	replace
22	[BUG]  [BUGGY]  char  ch  =  random.nextInt(gap,  start  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char  ch  =  random.nextInt(gap,  start  +  1);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  random.nextInt(gap,  start  +  1);	  char    ch    =    random.nextInt(gap,    start);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
23	[BUG]  [BUGGY]  char  ch  =  random.nextInt(gap,  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char  ch  =  random.nextInt(gap,  1);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  random.nextInt(gap,  1);	  char    ch    =    random.nextInt(gap,    start);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
24	[BUG]  [BUGGY]  char  ch  =  random.nextInt(gap,  end);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char  ch  =  random.nextInt(gap,  end);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  random.nextInt(gap,  end);	  char    ch    =    random.nextInt(gap,    start);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
25	[BUG]  [BUGGY]  char  ch  =  random.nextInt(gap,  0,  start);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char  ch  =  random.nextInt(gap,  0,  start);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  random.nextInt(gap,  0,  start);	  char    ch    =    random.nextInt(gap,    start);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
26	[BUG]  [BUGGY]  char  ch  =  buffer.nextInt(gap);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char  ch  =  buffer.nextInt(gap);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  buffer.nextInt(gap);	  char    ch    =    chars.nextInt(gap);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
27	[BUG]  [BUGGY]  char  ch  =  buffer[random.nextInt(gap)];  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char  ch  =  buffer[random.nextInt(gap)];  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  buffer[random.nextInt(gap)];	  char    ch    =    chars.nextInt(gap);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
28	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer.length  *  2];  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char[]  buffer  =  new  char[buffer.length  *  2];  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char[]  buffer  =  new  char[buffer.length  *  2];	  char[]    buffer    =    new    char[buffer.length    *    1];    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
29	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer.length  *  4];  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char[]  buffer  =  new  char[buffer.length  *  4];  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char[]  buffer  =  new  char[buffer.length  *  4];	  char[]    buffer    =    new    char[buffer.length    *    1];    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
30	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer.length  *  3];  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char[]  buffer  =  new  char[buffer.length  *  3];  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char[]  buffer  =  new  char[buffer.length  *  3];	  char[]    buffer    =    new    char[buffer.length    *    1];    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
31	[BUG]  [BUGGY]  char  ch  =  buffer[random.nextInt(gap)+  start  +  1];  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char  ch  =  buffer[random.nextInt(gap)+  start  +  1];  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  buffer[random.nextInt(gap)+  start  +  1];	  char    ch    =    chars[random.nextInt(gap)+    start    +    1];    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
32	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer.length  +  3];  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char[]  buffer  =  new  char[buffer.length  +  3];  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char[]  buffer  =  new  char[buffer.length  +  3];	  char[]    buffer    =    new    char[buffer.length    +    2];    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
33	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(chars,  0,  end);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getValue(chars,  0,  end);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getValue(chars,  0,  end);	  Random    random    =    RandomStringUtils.getValue(chars,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
34	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(chars,  buffer,  start,  end);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getValue(chars,  buffer,  start,  end);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getValue(chars,  buffer,  start,  end);	  Random    random    =    RandomStringUtils.getValue(chars,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
35	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(chars,  0,  start,  end);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getValue(chars,  0,  start,  end);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getValue(chars,  0,  start,  end);	  Random    random    =    RandomStringUtils.getValue(chars,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
36	[BUG]  [BUGGY]  ch    =    (char)(random.nextInt(gap)+    1);    ch  =  (char)(random.nextInt(gap)+  1);  ch  =  (char)(random.nextInt(gap)+  1);  ch  =  (char)(random.nextInt(gap)+  1);  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  ch    =    (char)(random.nextInt(gap)+    1);    ch  =  (char)(random.nextInt(gap)+  1);  ch  =  (char)(random.nextInt(gap)+  1);  ch  =  (char)(random.nextInt(gap)+  1);  [BUGGY]      }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	ch        =        (char)(random.nextInt(gap)+        1);        ch    =    (char)(random.nextInt(gap)+    1);    ch  =  (char)(random.nextInt(gap)+  1);  ch  =  (char)(random.nextInt(gap)+  1);	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
37	[BUG]  [BUGGY]  ch    =    (char)(random.nextInt(gap)+    1);    ch  =  (char)(random.nextInt(gap)+  1);  ch  =  (char)(random.nextInt(gap)+  1);  ch  =  (char)(random.nextInt(gap)+  1;  [CE]  ']'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  ch    =    (char)(random.nextInt(gap)+    1);    ch  =  (char)(random.nextInt(gap)+  1);  ch  =  (char)(random.nextInt(gap)+  1);  ch  =  (char)(random.nextInt(gap)+  1;  [BUGGY]      }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	ch        =        (char)(random.nextInt(gap)+        1);        ch    =    (char)(random.nextInt(gap)+    1);    ch  =  (char)(random.nextInt(gap)+  1);  ch  =  (char)(random.nextInt(gap)+  1;	  	non-compiled	[CE]  ']'  expected	13	None	add
38	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer  -  start  +  1];  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char[]  buffer  =  new  char[buffer  -  start  +  1];  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char[]  buffer  =  new  char[buffer  -  start  +  1];	  char[]    buffer    =    new    char[buffer    -    start];    	non-compiled	[CE]  ']'  expected	41	None	replace
39	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer  -  1];  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char[]  buffer  =  new  char[buffer  -  1];  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char[]  buffer  =  new  char[buffer  -  1];	  char[]    buffer    =    new    char[buffer    -    start];    	non-compiled	[CE]  ']'  expected	41	None	replace
40	[BUG]  [BUGGY]  char  ch  =  buffer[random.nextInt(gap)+1]  +  start;  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char  ch  =  buffer[random.nextInt(gap)+1]  +  start;  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  buffer[random.nextInt(gap)+1]  +  start;	  char    ch    =    chars[random.nextInt(gap)+1]    +    start;    	non-compiled	[CE]  ']'  expected	45	None	replace
41	[BUG]  [BUGGY]  char  ch  =  chars[random.nextInt(gap)+  1]  +  end;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char  ch  =  chars[random.nextInt(gap)+  1]  +  end;  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  chars[random.nextInt(gap)+  1]  +  end;	  char    ch    =    chars[random.nextInt(gap)+1]    +    start;    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
42	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  buffer.length);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  buffer.length);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getValue(buffer,  0,  buffer.length);	  Random    random    =    RandomStringUtils.getValue(buffer,    0,    end);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
43	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(chars,  0,  buffer.length);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getValue(chars,  0,  buffer.length);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getValue(chars,  0,  buffer.length);	  Random    random    =    RandomStringUtils.getValue(buffer,    0,    end);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
44	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  buffer.length,  end);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  buffer.length,  end);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getValue(buffer,  0,  buffer.length,  end);	  Random    random    =    RandomStringUtils.getValue(buffer,    0,    end);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
45	[BUG]  [BUGGY]  Char  ch  =  chars[random.nextInt(gap)+  2];  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Char  ch  =  chars[random.nextInt(gap)+  2];  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Char  ch  =  chars[random.nextInt(gap)+  2];	  Char    ch    =    chars[random.nextInt(gap)+1    start];    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
46	[BUG]  [BUGGY]  char  ch  =  random.nextInt(start  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char  ch  =  random.nextInt(start  +  1);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  random.nextInt(start  +  1);	  char    ch    =    random.nextInt(start);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
47	[BUG]  [BUGGY]  char  ch  =  random.nextInt(gap  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char  ch  =  random.nextInt(gap  +  1);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  random.nextInt(gap  +  1);	  char    ch    =    random.nextInt(gap    +    start);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
48	[BUG]  [BUGGY]  char  ch  =  random.nextInt(gap  +  start,  count);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char  ch  =  random.nextInt(gap  +  start,  count);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  random.nextInt(gap  +  start,  count);	  char    ch    =    random.nextInt(gap    +    start);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
49	[BUG]  [BUGGY]  char  ch  =  random.nextInt(gap  +  start,  end);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char  ch  =  random.nextInt(gap  +  start,  end);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  random.nextInt(gap  +  start,  end);	  char    ch    =    random.nextInt(gap    +    start);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
50	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  end,  ch);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  end,  ch);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getValue(buffer,  0,  end,  ch);	  Random    random    =    RandomStringUtils.getValue(buffer,    start,    end,    ch);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
51	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  ch  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  ch  +  1);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  ch  +  1);	  Random    random    =    RandomStringUtils.getValue(buffer,    start,    end,    ch);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
52	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  buffer.length);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  buffer.length);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  buffer.length);	  Random    random    =    RandomStringUtils.getValue(buffer,    start,    end,    ch);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
53	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  ch,  numbers);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  ch,  numbers);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  ch,  numbers);	  Random    random    =    RandomStringUtils.getValue(buffer,    start,    end,    ch);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
54	[BUG]  [BUGGY]  char  ch  =  chars[random.nextInt(gap)+  1);  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char  ch  =  chars[random.nextInt(gap)+  1);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  chars[random.nextInt(gap)+  1);	  char    ch    =    chars[random.nextInt(gap)+    start);    	non-compiled	[CE]  ']'  expected	55	None	replace
55	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer  +  2];  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char[]  buffer  =  new  char[buffer  +  2];  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char[]  buffer  =  new  char[buffer  +  2];	  char[]    buffer    =    new    char[buffer    +    1];    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
56	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  buffer.length,  0);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  buffer.length,  0);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getValue(buffer,  0,  buffer.length,  0);	  Random    random    =    RandomStringUtils.getValue(buffer,    start,    end,    0);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
57	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  end,  0);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  end,  0);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getValue(buffer,  0,  end,  0);	  Random    random    =    RandomStringUtils.getValue(buffer,    start,    end,    0);    	non-compiled	[CE]  ';'  expected	33	None	replace
58	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  0,  count);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  0,  count);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  0,  count);	  Random    random    =    RandomStringUtils.getValue(buffer,    start,    end,    0);    	non-compiled	[CE]  ';'  expected	33	None	replace
59	[BUG]  [BUGGY]  char  ch  =  random.nextInt(buffer,  0,  start);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char  ch  =  random.nextInt(buffer,  0,  start);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  random.nextInt(buffer,  0,  start);	  char    ch    =    random.nextInt(buffer,    start);    	non-compiled	[CE]  ';'  expected	6	None	replace
60	[BUG]  [BUGGY]  char  ch  =  random.nextInt(buffer,  start  +  1);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char  ch  =  random.nextInt(buffer,  start  +  1);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  random.nextInt(buffer,  start  +  1);	  char    ch    =    random.nextInt(buffer,    start);    	non-compiled	[CE]  ';'  expected	6	None	replace
61	[BUG]  [BUGGY]  char  ch  =  random.nextInt(buffer,  end);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char  ch  =  random.nextInt(buffer,  end);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  random.nextInt(buffer,  end);	  char    ch    =    random.nextInt(buffer,    start);    	non-compiled	[CE]  ';'  expected	6	None	replace
62	[BUG]  [BUGGY]  ch    =    (char)(random.nextInt(gap)+    start    +    1);    ch  =  (char)(random.nextInt(gap)+  start  +  1);  ch  =  (char)(random.nextInt(gap)+  start  +  1);  ch  =  (char)(random.nextInt(gap)+  start  +  1);  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  ch    =    (char)(random.nextInt(gap)+    start    +    1);    ch  =  (char)(random.nextInt(gap)+  start  +  1);  ch  =  (char)(random.nextInt(gap)+  start  +  1);  ch  =  (char)(random.nextInt(gap)+  start  +  1);  [BUGGY]      }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	ch        =        (char)(random.nextInt(gap)+        start        +        1);        ch    =    (char)(random.nextInt(gap)+    start    +    1);    ch  =  (char)(random.nextInt(gap)+  start  +  1);  ch  =  (char)(random.nextInt(gap)+  start  +  1);	  	non-compiled	[CE]  ';'  expected	21	None	add
63	[BUG]  [BUGGY]  ch    =    (char)(random.nextInt(gap)+    start    +    1);    ch  =  (char)(random.nextInt(gap)+  start  +  1);  ch  =  (char)(random.nextInt(gap)+1  start  +  1);  ch  =  (char)(random.nextInt(gap)+  start  +  1);  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  ch    =    (char)(random.nextInt(gap)+    start    +    1);    ch  =  (char)(random.nextInt(gap)+  start  +  1);  ch  =  (char)(random.nextInt(gap)+1  start  +  1);  ch  =  (char)(random.nextInt(gap)+  start  +  1);  [BUGGY]      }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	ch        =        (char)(random.nextInt(gap)+        start        +        1);        ch    =    (char)(random.nextInt(gap)+    start    +    1);    ch  =  (char)(random.nextInt(gap)+1  start  +  1);  ch  =  (char)(random.nextInt(gap)+  start  +  1);	  	non-compiled	[CE]  ';'  expected	21	None	add
64	[BUG]  [BUGGY]  ch    =    (char)(random.nextInt(gap)+    start    +    1);    ch  =  (char)(random.nextInt(gap)+  start  +  1);  ch  =  (char)(random.nextInt(gap)+  start  +  1);  ch  =  (char)(random.nextInt(gap)+  start  +  1;  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  ch    =    (char)(random.nextInt(gap)+    start    +    1);    ch  =  (char)(random.nextInt(gap)+  start  +  1);  ch  =  (char)(random.nextInt(gap)+  start  +  1);  ch  =  (char)(random.nextInt(gap)+  start  +  1;  [BUGGY]      }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	ch        =        (char)(random.nextInt(gap)+        start        +        1);        ch    =    (char)(random.nextInt(gap)+    start    +    1);    ch  =  (char)(random.nextInt(gap)+  start  +  1);  ch  =  (char)(random.nextInt(gap)+  start  +  1;	  	non-compiled	[CE]  ';'  expected	21	None	add
65	[BUG]  [BUGGY]  ch  =  (char)(random.nextInt(gap)+  start  +  1));  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  ch  =  (char)(random.nextInt(gap)+  start  +  1));  [BUGGY]      }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	ch  =  (char)(random.nextInt(gap)+  start  +  1));	  ch    =    (char)(random.nextInt(gap)+    start    +    1);    ch    =    (char)(random.nextInt(gap)+    start    +    1));    	non-compiled	[CE]  ';'  expected	23	None	replace
66	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(chars,  start,  end,  buffer.length);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getValue(chars,  start,  end,  buffer.length);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getValue(chars,  start,  end,  buffer.length);	  Random    random    =    RandomStringUtils.getValue(buffer,    start,    end,    chars.length);    	non-compiled	[CE]  ';'  expected	43	None	replace
67	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  end,  chars.length);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  end,  chars.length);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getValue(buffer,  0,  end,  chars.length);	  Random    random    =    RandomStringUtils.getValue(buffer,    start,    end,    chars.length);    	non-compiled	[CE]  ';'  expected	43	None	replace
68	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  0,  buffer.length);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  0,  buffer.length);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getRandom(buffer,  0,  buffer.length);	  Random    random    =    RandomStringUtils.getRandom(buffer,    0,    start);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
69	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  0,  end);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  0,  end);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getRandom(buffer,  0,  end);	  Random    random    =    RandomStringUtils.getRandom(buffer,    0,    start);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
70	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  0,  gap);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  0,  gap);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getRandom(buffer,  0,  gap);	  Random    random    =    RandomStringUtils.getRandom(buffer,    0,    start);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
71	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  0,  chars.length);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  0,  chars.length);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getRandom(buffer,  0,  chars.length);	  Random    random    =    RandomStringUtils.getRandom(buffer,    0,    start);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
72	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  end,  letters);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  end,  letters);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getValue(buffer,  0,  end,  letters);	  Random    random    =    RandomStringUtils.getValue(buffer,    start,    end,    letters);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
73	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  chars);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  chars);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  chars);	  Random    random    =    RandomStringUtils.getValue(buffer,    start,    end,    letters);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
74	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  count);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  count);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getRandom(buffer,  count);	  Random    random    =    RandomStringUtils.getRandom(random,    count);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
75	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(random,  start,  count);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(random,  start,  count);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getRandom(random,  start,  count);	  Random    random    =    RandomStringUtils.getRandom(random,    count);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
76	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  0,  count);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  0,  count);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getRandom(buffer,  0,  count);	  Random    random    =    RandomStringUtils.getRandom(buffer,    0);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
77	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buff.length  +  2];  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char[]  buffer  =  new  char[buff.length  +  2];  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char[]  buffer  =  new  char[buff.length  +  2];	  char[]    buffer    =    new    char[buff.length    +    1];    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
78	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buff.length  *  1];  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char[]  buffer  =  new  char[buff.length  *  1];  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char[]  buffer  =  new  char[buff.length  *  1];	  char[]    buffer    =    new    char[buff.length    +    1];    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
79	[BUG]  [BUGGY]  ch  =  (Char)(random.nextInt(gap)+  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  ch  =  (Char)(random.nextInt(gap)+  1);  [BUGGY]      }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	ch  =  (Char)(random.nextInt(gap)+  1);	  ch    =    (char)(random.nextInt(gap)+    1);    ch    =    (Char)(random.nextInt(gap)+    1);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
80	[BUG]  [BUGGY]  char[]  buffer  =  new  char[end  -  start  +  1];  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char[]  buffer  =  new  char[end  -  start  +  1];  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char[]  buffer  =  new  char[end  -  start  +  1];	  char[]    buffer    =    new    char[count    -    start    +    1];    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
81	[BUG]  [BUGGY]  char[]  buffer  =  new  char[len  -  start  +  1];  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char[]  buffer  =  new  char[len  -  start  +  1];  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char[]  buffer  =  new  char[len  -  start  +  1];	  char[]    buffer    =    new    char[count    -    start    +    1];    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
82	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer.length  -  1  +  1];  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char[]  buffer  =  new  char[buffer.length  -  1  +  1];  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char[]  buffer  =  new  char[buffer.length  -  1  +  1];	  char[]    buffer    =    new    char[buffer.length    -    1];    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
83	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  start,  end,  0);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  start,  end,  0);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getRandom(buffer,  start,  end,  0);	  Random    random    =    RandomStringUtils.getRandom(buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
84	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  start,  end,  letters);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  start,  end,  letters);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getRandom(buffer,  start,  end,  letters);	  Random    random    =    RandomStringUtils.getRandom(buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
85	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  start,  end,  numbers);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  start,  end,  numbers);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getRandom(buffer,  start,  end,  numbers);	  Random    random    =    RandomStringUtils.getRandom(buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
86	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  gap);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  gap);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getRandom(buffer,  gap);	  Random    random    =    RandomStringUtils.getRandom(buffer,    end);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
87	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  end,  0);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  end,  0);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getRandom(buffer,  end,  0);	  Random    random    =    RandomStringUtils.getRandom(buffer,    end);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
88	[BUG]  [BUGGY]  char[]  buffer  =  new  char[next  -  start];  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char[]  buffer  =  new  char[next  -  start];  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char[]  buffer  =  new  char[next  -  start];	  char[]    buffer    =    new    char[end    -    start];    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
89	[BUG]  [BUGGY]  char[]  buffer  =  new  char[end  +  1];  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char[]  buffer  =  new  char[end  +  1];  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char[]  buffer  =  new  char[end  +  1];	  char[]    buffer    =    new    char[start    +    1];    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
90	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  end,  count);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  end,  count);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getValue(buffer,  0,  end,  count);	  Random    random    =    RandomStringUtils.getValue(buffer,    start,    end,    count);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
91	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  start);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  start);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getValue(buffer,  0,  start);	  Random    random    =    RandomStringUtils.getValue(buffer,    0,    end);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
92	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  gap);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  gap);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getValue(buffer,  0,  gap);	  Random    random    =    RandomStringUtils.getValue(buffer,    0,    end);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
93	[BUG]  [BUGGY]  Char  ch  =  buffer[random.nextInt(gap)+1]  +  start;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Char  ch  =  buffer[random.nextInt(gap)+1]  +  start;  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Char  ch  =  buffer[random.nextInt(gap)+1]  +  start;	  Char    ch    =    buffer[random.nextInt(gap)+1];    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
94	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  start  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  start  +  1);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getRandom(buffer,  start  +  1);	  Random    random    =    RandomStringUtils.getRandom(buffer,    start);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
95	[BUG]  [BUGGY]  char  ch  =  chars[random.nextInt(gap)+  start]  +  buffer;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char  ch  =  chars[random.nextInt(gap)+  start]  +  buffer;  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  chars[random.nextInt(gap)+  start]  +  buffer;	  char    ch    =    chars[random.nextInt(gap)+1]    +    start;    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
96	[BUG]  [BUGGY]  char  ch  =  chars[random.nextInt(gap)+  start]  +  end;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char  ch  =  chars[random.nextInt(gap)+  start]  +  end;  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  chars[random.nextInt(gap)+  start]  +  end;	  char    ch    =    chars[random.nextInt(gap)+1]    +    start;    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
97	[BUG]  [BUGGY]  char  ch  =  random.nextInt(buffer,  start  +  1,  count);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char  ch  =  random.nextInt(buffer,  start  +  1,  count);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  random.nextInt(buffer,  start  +  1,  count);	  char    ch    =    random.nextInt(buffer,    start);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
98	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(start,  buffer,  end);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(start,  buffer,  end);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getRandom(start,  buffer,  end);	  Random    random    =    RandomStringUtils.getRandom(buffer,    end);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
99	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer  *  1];  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char[]  buffer  =  new  char[buffer  *  1];  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char[]  buffer  =  new  char[buffer  *  1];	  char[]    buffer    =    new    char[buffer    +    1];    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
100	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(start,  end);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(start,  end);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getRandom(start,  end);	  Random    random    =    RandomStringUtils.getRandom(random,    start);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
101	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(chars,  start,  gap);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getValue(chars,  start,  gap);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getValue(chars,  start,  gap);	  Random    random    =    RandomStringUtils.getValue(chars,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
102	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(chars,  start,  buffer.length);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getValue(chars,  start,  buffer.length);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getValue(chars,  start,  buffer.length);	  Random    random    =    RandomStringUtils.getValue(chars,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
103	[BUG]  [BUGGY]  Char  ch  =  buffer[random.nextInt(gap)+  start  +  1];  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Char  ch  =  buffer[random.nextInt(gap)+  start  +  1];  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Char  ch  =  buffer[random.nextInt(gap)+  start  +  1];	  Char    ch    =    buffer[random.nextInt(gap)+    start];    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
104	[BUG]  [BUGGY]  Char  ch  =  buffer[random.nextInt(gap)+1  start];  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Char  ch  =  buffer[random.nextInt(gap)+1  start];  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Char  ch  =  buffer[random.nextInt(gap)+1  start];	  Char    ch    =    buffer[random.nextInt(gap)+    start];    	non-compiled	[CE]  ']'  expected	18	None	replace
105	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buff  -  start];  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char[]  buffer  =  new  char[buff  -  start];  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char[]  buffer  =  new  char[buff  -  start];	  char[]    buffer    =    new    char[end    -    start];    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
106	[BUG]  [BUGGY]  char  ch  =  chars[random.nextInt(gap)+  start  +  2];  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char  ch  =  chars[random.nextInt(gap)+  start  +  2];  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  chars[random.nextInt(gap)+  start  +  2];	  char    ch    =    chars[random.nextInt(gap)+    start    +    1];    	non-compiled	[CE]  ';'  expected	40	None	replace
107	[BUG]  [BUGGY]  Char  ch  =  chars[random.nextInt(gap)+1  +  start];  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Char  ch  =  chars[random.nextInt(gap)+1  +  start];  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Char  ch  =  chars[random.nextInt(gap)+1  +  start];	  Char    ch    =    chars[random.nextInt(gap)+1    start];    	non-compiled	[CE]  ';'  expected	50	None	replace
108	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer.length  /  1];  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char[]  buffer  =  new  char[buffer.length  /  1];  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char[]  buffer  =  new  char[buffer.length  /  1];	  char[]    buffer    =    new    char[buffer.length    *    1];    	non-compiled	[CE]  ';'  expected	11	None	replace
109	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  start,  gap);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  start,  gap);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getRandom(buffer,  start,  gap);	  Random    random    =    RandomStringUtils.getRandom(buffer,    start,    end);    	non-compiled	[CE]  ';'  expected	27	None	replace
110	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  start,  end  -  start);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  start,  end  -  start);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getRandom(buffer,  start,  end  -  start);	  Random    random    =    RandomStringUtils.getRandom(buffer,    start,    end);    	non-compiled	[CE]  ';'  expected	27	None	replace
111	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  start,  end,  count);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  start,  end,  count);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getRandom(buffer,  start,  end,  count);	  Random    random    =    RandomStringUtils.getRandom(buffer,    start,    end);    	non-compiled	[CE]  ';'  expected	27	None	replace
112	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(start);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(start);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getRandom(start);	  Random    random    =    RandomStringUtils.getRandom(ch);    	non-compiled	[CE]  ';'  expected	52	None	replace
113	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  gap);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  gap);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  gap);	  Random    random    =    RandomStringUtils.getValue(buffer,    start,    end,    count);    	non-compiled	[CE]  ';'  expected	32	None	replace
114	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  0,  start  +  1);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  0,  start  +  1);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getRandom(buffer,  0,  start  +  1);	  Random    random    =    RandomStringUtils.getRandom(buffer,    0,    start);    	non-compiled	[CE]  ';'  expected	38	None	replace
115	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  1);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  1);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  1);	  Random    random    =    RandomStringUtils.getValue(buffer,    start,    end,    0);    	non-compiled	[CE]  ';'  expected	33	None	replace
116	[BUG]  [BUGGY]  char  ch  =  chars[random.nextInt(gap)+  start  +  1;  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char  ch  =  chars[random.nextInt(gap)+  start  +  1;  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  chars[random.nextInt(gap)+  start  +  1;	  char    ch    =    chars[random.nextInt(gap)+    start);    	non-compiled	[CE]  ']'  expected	55	None	replace
117	[BUG]  [BUGGY]  char  ch  =  chars.nextInt(buffer);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char  ch  =  chars.nextInt(buffer);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  chars.nextInt(buffer);	  char    ch    =    random.nextInt(buffer);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
118	[BUG]  [BUGGY]  char  ch  =  chars[random.nextInt(buffer);  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char  ch  =  chars[random.nextInt(buffer);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  chars[random.nextInt(buffer);	  char    ch    =    random.nextInt(buffer);    	non-compiled	[CE]  ']'  expected	46	None	replace
119	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer.length  -  start  *  1];  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char[]  buffer  =  new  char[buffer.length  -  start  *  1];  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char[]  buffer  =  new  char[buffer.length  -  start  *  1];	  char[]    buffer    =    new    char[buffer.length    -    start    +    1];    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
120	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer.length  -  1  +  start];  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char[]  buffer  =  new  char[buffer.length  -  1  +  start];  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char[]  buffer  =  new  char[buffer.length  -  1  +  start];	  char[]    buffer    =    new    char[buffer.length    -    1];    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
121	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  ch,  0);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  ch,  0);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  ch,  0);	  Random    random    =    RandomStringUtils.getValue(buffer,    start,    end,    ch);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
122	[BUG]  [BUGGY]  char  ch  =  random.nextInt(gap)+  start;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char  ch  =  random.nextInt(gap)+  start;  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  random.nextInt(gap)+  start;	  char    ch    =    random.nextInt(gap    +    start);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
123	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(start,  count);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(start,  count);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getRandom(start,  count);	  Random    random    =    RandomStringUtils.getRandom(random,    count);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
124	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(random,  end);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(random,  end);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getRandom(random,  end);	  Random    random    =    RandomStringUtils.getRandom(random,    count);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
125	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(random,  0);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(random,  0);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getRandom(random,  0);	  Random    random    =    RandomStringUtils.getRandom(random,    count);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
126	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(chars,  start,  end,  0);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getValue(chars,  start,  end,  0);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getValue(chars,  start,  end,  0);	  Random    random    =    RandomStringUtils.getValue(buffer,    start,    end,    0);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
127	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  4);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  4);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  4);	  Random    random    =    RandomStringUtils.getValue(buffer,    start,    end,    0);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
128	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  1);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getRandom(buffer,  1);	  Random    random    =    RandomStringUtils.getRandom(buffer,    0);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
129	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  -1);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  -1);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getRandom(buffer,  -1);	  Random    random    =    RandomStringUtils.getRandom(buffer,    0);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
130	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffered  -  start];  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char[]  buffer  =  new  char[buffered  -  start];  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char[]  buffer  =  new  char[buffered  -  start];	  char[]    buffer    =    new    char[end    -    start];    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
131	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(chars,  0,  start);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(chars,  0,  start);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getRandom(chars,  0,  start);	  Random    random    =    RandomStringUtils.getRandom(buffer,    0,    start);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
132	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(chars,  start,  end,  letters);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getValue(chars,  start,  end,  letters);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getValue(chars,  start,  end,  letters);	  Random    random    =    RandomStringUtils.getValue(buffer,    start,    end,    letters);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
133	[BUG]  [BUGGY]  ch    =    (char)(random.nextInt(gap)+    start    +    1);    ch  =  (char)(random.nextInt(gap)+  start  +  1);  ch  =  (char)(random.nextInt(gap)+  start);  ch  =  (char)(random.nextInt(gap)+  start  +  1);  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  ch    =    (char)(random.nextInt(gap)+    start    +    1);    ch  =  (char)(random.nextInt(gap)+  start  +  1);  ch  =  (char)(random.nextInt(gap)+  start);  ch  =  (char)(random.nextInt(gap)+  start  +  1);  [BUGGY]      }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	ch        =        (char)(random.nextInt(gap)+        start        +        1);        ch    =    (char)(random.nextInt(gap)+    start    +    1);    ch  =  (char)(random.nextInt(gap)+  start);  ch  =  (char)(random.nextInt(gap)+  start  +  1);	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
134	[BUG]  [BUGGY]  ch    =    (char)(random.nextInt(gap)+    start    +    1);    ch  =  (char)(random.nextInt(gap)+  start  +  1);  ch  =  (char)(random.nextInt(gap)+  1);  ch  =  (char)(random.nextInt(gap)+  start  +  1);  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  ch    =    (char)(random.nextInt(gap)+    start    +    1);    ch  =  (char)(random.nextInt(gap)+  start  +  1);  ch  =  (char)(random.nextInt(gap)+  1);  ch  =  (char)(random.nextInt(gap)+  start  +  1);  [BUGGY]      }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	ch        =        (char)(random.nextInt(gap)+        start        +        1);        ch    =    (char)(random.nextInt(gap)+    start    +    1);    ch  =  (char)(random.nextInt(gap)+  1);  ch  =  (char)(random.nextInt(gap)+  start  +  1);	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
135	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(chars);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(chars);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getRandom(chars);	  Random    random    =    RandomStringUtils.getRandom(buffer);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
136	[BUG]  [BUGGY]  char  ch  =  chars[random.nextInt(buffer));  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char  ch  =  chars[random.nextInt(buffer));  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  chars[random.nextInt(buffer));	  char    ch    =    random.nextInt(buffer);    	non-compiled	[CE]  ']'  expected	46	None	replace
137	[BUG]  [BUGGY]  char  ch  =  chars[random.nextInt(buffer)+  start];  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char  ch  =  chars[random.nextInt(buffer)+  start];  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  chars[random.nextInt(buffer)+  start];	  char    ch    =    random.nextInt(buffer);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
138	[BUG]  [BUGGY]  char  ch  =  chars[random.nextInt(buffer)+  start);  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char  ch  =  chars[random.nextInt(buffer)+  start);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  chars[random.nextInt(buffer)+  start);	  char    ch    =    random.nextInt(buffer);    	non-compiled	[CE]  ']'  expected	46	None	replace
139	[BUG]  [BUGGY]  char  ch  =  chars.nextInt(gap,  start);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char  ch  =  chars.nextInt(gap,  start);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  chars.nextInt(gap,  start);	  char    ch    =    random.nextInt(gap,    start);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
140	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(chars,  start,  end);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(chars,  start,  end);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getRandom(chars,  start,  end);	  Random    random    =    RandomStringUtils.getRandom(buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
141	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  start,  end  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  start,  end  +  1);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getRandom(buffer,  start,  end  +  1);	  Random    random    =    RandomStringUtils.getRandom(buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
142	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  chars.length  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  chars.length  -  1);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  chars.length  -  1);	  Random    random    =    RandomStringUtils.getValue(buffer,    start,    end,    chars.length);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
143	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(chars,  start,  end,  ch);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getValue(chars,  start,  end,  ch);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getValue(chars,  start,  end,  ch);	  Random    random    =    RandomStringUtils.getValue(buffer,    start,    end,    ch);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
144	[BUG]  [BUGGY]  char  ch  =  chars[random.nextInt(gap)+1]  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char  ch  =  chars[random.nextInt(gap)+1]  +  1;  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  chars[random.nextInt(gap)+1]  +  1;	  char    ch    =    chars[random.nextInt(gap)+1]    +    start;    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
145	[BUG]  [BUGGY]  char  ch  =  random.nextInt(buffer,  start  +  start);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char  ch  =  random.nextInt(buffer,  start  +  start);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  random.nextInt(buffer,  start  +  start);	  char    ch    =    random.nextInt(gap    +    start);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
146	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer.length  *  2  +  1];  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char[]  buffer  =  new  char[buffer.length  *  2  +  1];  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char[]  buffer  =  new  char[buffer.length  *  2  +  1];	  char[]    buffer    =    new    char[buffer.length    *    1];    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
147	[BUG]  [BUGGY]  char  ch  =  chars.nextInt(start);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char  ch  =  chars.nextInt(start);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  chars.nextInt(start);	  char    ch    =    random.nextInt(start);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
148	[BUG]  [BUGGY]  char  ch  =  chars[random.nextInt(start);  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char  ch  =  chars[random.nextInt(start);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  chars[random.nextInt(start);	  char    ch    =    random.nextInt(start);    	non-compiled	[CE]  ']'  expected	47	None	replace
149	[BUG]  [BUGGY]  char  ch  =  chars[random.nextInt(start)+  start];  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char  ch  =  chars[random.nextInt(start)+  start];  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  chars[random.nextInt(start)+  start];	  char    ch    =    random.nextInt(start);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
150	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(random,  start,  0);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(random,  start,  0);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getRandom(random,  start,  0);	  Random    random    =    RandomStringUtils.getRandom(random,    start);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
151	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(chars,  start,  end,  count);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  Random  random  =  RandomStringUtils.getValue(chars,  start,  end,  count);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	Random  random  =  RandomStringUtils.getValue(chars,  start,  end,  count);	  Random    random    =    RandomStringUtils.getValue(buffer,    start,    end,    count);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
152	[BUG]  [BUGGY]  char  ch  =  random.nextInt(buffer,  start,  gap);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {      [BUGGY]  char  ch  =  random.nextInt(buffer,  start,  gap);  [BUGGY]      ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	char  ch  =  random.nextInt(buffer,  start,  gap);	  char    ch    =    random.nextInt(start,    gap);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
