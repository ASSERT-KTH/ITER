bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number
this_action5	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  gap  [CONTEXT]  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  [BUGGY]    [BUGGY]    while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	  	int  gap  =  end  -  start;  	non-compiled	[CE]  cannot  find  symbol  gap	9	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testLANG807  [CONTEXT]  public  static  String  random(int  count,  int  start,  int  end,  boolean  letters,  boolean  numbers)  {  [BUGGY]    random(count,  start,  end,  letters,  numbers,  null,  RANDOM);  [BUGGY]  return  random(count,  start,  end,  letters,  numbers,  null,  RANDOM);  }  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  [VARIABLES]  Random  RANDOM  int  count  end  start  boolean  letters  numbers  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	163	163	1	add	    random(count,  start,  end,  letters,  numbers,  null,  RANDOM);		compilable	  [FE]  AssertionFailedError  testLANG807	4	1
12	[BUG]  [BUGGY]    random(count,  start,  end,  letters,  numbers,  null,  RANDOM);  [FE]  AssertionFailedError  testLANG807  [CONTEXT]  public  static  String  random(int  count,  int  start,  int  end,  boolean  letters,  boolean  numbers)  {  [BUGGY]    random(count,  start,  end,  letters,  numbers,  null,  RANDOM);  [BUGGY]  return  random(count,  start,  end,  letters,  numbers,  null,  RANDOM);  }  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  [VARIABLES]  Random  RANDOM  int  count  end  start  boolean  letters  numbers  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	163	163	1	replace	    random(count,  start,  end,  letters,  numbers,  null,  RANDOM);		compilable	  [FE]  AssertionFailedError  testLANG807	4	1	add
12	[BUG]  [BUGGY]    Random  RANDOM  =  random(count,  start,  end,  letters,  numbers);  [CE]  incompatible  types  [CONTEXT]  public  static  String  random(int  count,  int  start,  int  end,  boolean  letters,  boolean  numbers)  {  [BUGGY]    Random  RANDOM  =  random(count,  start,  end,  letters,  numbers);  [BUGGY]  return  random(count,  start,  end,  letters,  numbers,  null,  RANDOM);  }  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  [VARIABLES]  Random  RANDOM  int  count  end  start  boolean  letters  numbers  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	163	163	1	replace	    Random  RANDOM  =  random(count,  start,  end,  letters,  numbers);		non-compiled	[CE]  incompatible  types	4	None	add
13	[BUG]  [BUGGY]    Random  RANDOM  =  NumberOutput.parseInt(count,  start,  end,  letters,  numbers);  [CE]  cannot  find  symbol  NumberOutput  [CONTEXT]  public  static  String  random(int  count,  int  start,  int  end,  boolean  letters,  boolean  numbers)  {  [BUGGY]    Random  RANDOM  =  NumberOutput.parseInt(count,  start,  end,  letters,  numbers);  [BUGGY]  return  random(count,  start,  end,  letters,  numbers,  null,  RANDOM);  }  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  [VARIABLES]  Random  RANDOM  int  count  end  start  boolean  letters  numbers  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	163	163	1	replace	    Random  RANDOM  =  NumberOutput.parseInt(count,  start,  end,  letters,  numbers);		non-compiled	[CE]  cannot  find  symbol  NumberOutput	4	None	add
14	[BUG]  [BUGGY]    Random  RANDOM  =  NumberInput.parseAsString(count,  start,  end,  letters,  numbers);  [CE]  cannot  find  symbol  NumberInput  [CONTEXT]  public  static  String  random(int  count,  int  start,  int  end,  boolean  letters,  boolean  numbers)  {  [BUGGY]    Random  RANDOM  =  NumberInput.parseAsString(count,  start,  end,  letters,  numbers);  [BUGGY]  return  random(count,  start,  end,  letters,  numbers,  null,  RANDOM);  }  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  [VARIABLES]  Random  RANDOM  int  count  end  start  boolean  letters  numbers  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	163	163	1	replace	    Random  RANDOM  =  NumberInput.parseAsString(count,  start,  end,  letters,  numbers);		non-compiled	[CE]  cannot  find  symbol  NumberInput	4	None	add
25	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  buffer  [CONTEXT]  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  [BUGGY]    [BUGGY]  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	247	247	1	replace	  	char[]  buffer  =  new  char[count];  	non-compiled	[CE]  cannot  find  symbol  buffer	7	None	replace
31	[BUG]  [BUGGY]  if((  letters  &&  Character.isLetter(ch))  ||(numbers  &&  Character.isDigit(ch))  ||(!letters  &&!numbers))  {  [CE]  cannot  find  symbol  ch  [CONTEXT]  char[]  chars,  Random  random)  {  [BUGGY]  if((  letters  &&  Character.isLetter(ch))  ||(numbers  &&  Character.isDigit(ch))  ||(!letters  &&!numbers))  {  [BUGGY]  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  Character.isLetter(ch))  ||(numbers  &&  Character.isDigit(ch))  ||(!letters  &&!numbers))  {	if  (count  ==  0)  {  	non-compiled	[CE]  cannot  find  symbol  ch	15	None	replace
32	[BUG]  [BUGGY]  if((  letters  &&  Character.isLetter(ch)||(numbers  &&  Character.isDigit(ch))  ||(!letters  &&!numbers))  {  [CE]  ')'  expected  [CONTEXT]  char[]  chars,  Random  random)  {  [BUGGY]  if((  letters  &&  Character.isLetter(ch)||(numbers  &&  Character.isDigit(ch))  ||(!letters  &&!numbers))  {  [BUGGY]  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  Character.isLetter(ch)||(numbers  &&  Character.isDigit(ch))  ||(!letters  &&!numbers))  {	if  (count  ==  0)  {  	non-compiled	[CE]  ')'  expected	15	None	replace
33	[BUG]  [BUGGY]  if((  letters  &&  Character.isLetter(ch))  ||(numbers  &&  Character.isDigit(ch)))  {  [CE]  cannot  find  symbol  ch  [CONTEXT]  char[]  chars,  Random  random)  {  [BUGGY]  if((  letters  &&  Character.isLetter(ch))  ||(numbers  &&  Character.isDigit(ch)))  {  [BUGGY]  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  Character.isLetter(ch))  ||(numbers  &&  Character.isDigit(ch)))  {	if  (count  ==  0)  {  	non-compiled	[CE]  cannot  find  symbol  ch	15	None	replace
34	[BUG]  [BUGGY]  if((  letters  &&  Character.isUpperCase(ch))  ||(numbers  &&  Character.isLetter(ch))  ||(!letters  &&!numbers))  {  [CE]  cannot  find  symbol  ch  [CONTEXT]  char[]  chars,  Random  random)  {  [BUGGY]  if((  letters  &&  Character.isUpperCase(ch))  ||(numbers  &&  Character.isLetter(ch))  ||(!letters  &&!numbers))  {  [BUGGY]  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  Character.isUpperCase(ch))  ||(numbers  &&  Character.isLetter(ch))  ||(!letters  &&!numbers))  {	if  (count  ==  0)  {  	non-compiled	[CE]  cannot  find  symbol  ch	15	None	replace
35	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [CONTEXT]  char[]  chars,  Random  random)  {  [BUGGY]    [BUGGY]  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	  	if  (count  ==  0)  {  	non-compiled	[CE]  illegal  start  of  type	15	None	replace
42	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testLANG807  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  [BUGGY]  }  else  if(count  <  1)  {  [BUGGY]  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	add	}  else  if(count  <  1)  {	}  else  if  (count  <  0)  {  	compilable	  [FE]  AssertionFailedError  testLANG807	17	1
43	[BUG]  [BUGGY]  }  else  if(count  <  1)  {  [FE]  AssertionFailedError  testLANG807  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  [BUGGY]  }  else  if(count  <  1)  {  [BUGGY]  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count  <  1)  {	}  else  if  (count  <  0)  {  	compilable	  [FE]  AssertionFailedError  testLANG807	17	1	replace
43	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testLANG807  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  [BUGGY]  }  else  if(count  <  2)  {  [BUGGY]  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	add	}  else  if(count  <  2)  {	}  else  if  (count  <  0)  {  	compilable	  [FE]  AssertionFailedError  testLANG807	17	1
44	[BUG]  [BUGGY]  }  else  if(count  <  2)  {  [FE]  AssertionFailedError  testLANG807  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  [BUGGY]  }  else  if(count  <  2)  {  [BUGGY]  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count  <  2)  {	}  else  if  (count  <  0)  {  	compilable	  [FE]  AssertionFailedError  testLANG807	17	1	replace
44	[BUG]  [BUGGY]  }  else  if(count  <  less  than  0)  {  [CE]  ')'  expected  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  [BUGGY]  }  else  if(count  <  less  than  0)  {  [BUGGY]  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count  <  less  than  0)  {	}  else  if  (count  <  0)  {  	non-compiled	[CE]  ')'  expected	17	None	replace
45	[BUG]  [BUGGY]    [CE]  unreachable  statement  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  [BUGGY]    [BUGGY]  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	  	}  else  if  (count  <  0)  {  	non-compiled	[CE]  unreachable  statement	17	None	replace
52	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testLANG807  [CONTEXT]  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  [BUGGY]  if(chars  ==  null  ||  buffer  ==  null)  {  [BUGGY]  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	add	if(chars  ==  null  ||  buffer  ==  null)  {	if  (chars  ==  null)  {  	compilable	  [FE]  AssertionFailedError  testLANG807	13	1
53	[BUG]  [BUGGY]  if(chars  ==  null  ||  buffer  ==  null)  {  [FE]  AssertionFailedError  testLANG807  [CONTEXT]  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  [BUGGY]  if(chars  ==  null  ||  buffer  ==  null)  {  [BUGGY]  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	if(chars  ==  null  ||  buffer  ==  null)  {	if  (chars  ==  null)  {  	compilable	  [FE]  AssertionFailedError  testLANG807	13	1	replace
53	[BUG]  [BUGGY]  if(chars  ==  null  ||!chars.isDigit(ch))  {  [CE]  cannot  find  symbol  [CONTEXT]  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  [BUGGY]  if(chars  ==  null  ||!chars.isDigit(ch))  {  [BUGGY]  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	if(chars  ==  null  ||!chars.isDigit(ch))  {	if  (chars  ==  null)  {  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
54	[BUG]  [BUGGY]  if(chars  ==  null  ||!chars.isEmpty())  {  [CE]  cannot  find  symbol  [CONTEXT]  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  [BUGGY]  if(chars  ==  null  ||!chars.isEmpty())  {  [BUGGY]  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	if(chars  ==  null  ||!chars.isEmpty())  {	if  (chars  ==  null)  {  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
55	[BUG]  [BUGGY]    [CE]  'else'  without  'if'  [CONTEXT]  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  [BUGGY]    [BUGGY]  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	  	if  (chars  ==  null)  {  	non-compiled	[CE]  'else'  without  'if'	13	None	replace
61	[BUG]  [BUGGY]    char  ch  =  buffer[count  -  1];  [CE]  cannot  find  symbol  buffer  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  [BUGGY]    char  ch  =  buffer[count  -  1];  [BUGGY]  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	234	234	1	replace	    char  ch  =  buffer[count  -  1];		non-compiled	[CE]  cannot  find  symbol  buffer	6	None	add
62	[BUG]  [BUGGY]    System.arraycopy(buffer,  0,  chars,  start,  0,  count);  [CE]  cannot  find  symbol  buffer  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  [BUGGY]    System.arraycopy(buffer,  0,  chars,  start,  0,  count);  [BUGGY]  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	234	234	1	replace	    System.arraycopy(buffer,  0,  chars,  start,  0,  count);		non-compiled	[CE]  cannot  find  symbol  buffer	6	None	add
63	[BUG]  [BUGGY]    System.arraycopy(buffer,  0,  chars,  start,  0,  chars.length);  [CE]  cannot  find  symbol  buffer  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  [BUGGY]    System.arraycopy(buffer,  0,  chars,  start,  0,  chars.length);  [BUGGY]  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	234	234	1	replace	    System.arraycopy(buffer,  0,  chars,  start,  0,  chars.length);		non-compiled	[CE]  cannot  find  symbol  buffer	6	None	add
64	[BUG]  [BUGGY]    char  ch  =  buffer[count++];  [CE]  cannot  find  symbol  buffer  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  [BUGGY]    char  ch  =  buffer[count++];  [BUGGY]  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	234	234	1	replace	    char  ch  =  buffer[count++];		non-compiled	[CE]  cannot  find  symbol  buffer	6	None	add
65	[BUG]  [BUGGY]    System.arraycopy(buffer,  start,  buffer,  0,  count);  [CE]  cannot  find  symbol  buffer  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  [BUGGY]    System.arraycopy(buffer,  start,  buffer,  0,  count);  [BUGGY]  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	234	234	1	replace	    System.arraycopy(buffer,  start,  buffer,  0,  count);		non-compiled	[CE]  cannot  find  symbol  buffer	6	None	add
71	[BUG]  [BUGGY]    int  count  =  chars.length;  [CE]  variable  count  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)  [CONTEXT]  char[]  chars,  Random  random)  {  [BUGGY]    int  count  =  chars.length;  [BUGGY]  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	    int  count  =  chars.length;		non-compiled	[CE]  variable  count  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)	16	None	add
72	[BUG]  [BUGGY]    int  count  =  buffer[count];  [CE]  variable  count  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)  [CONTEXT]  char[]  chars,  Random  random)  {  [BUGGY]    int  count  =  buffer[count];  [BUGGY]  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	    int  count  =  buffer[count];		non-compiled	[CE]  variable  count  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)	16	None	add
73	[BUG]  [BUGGY]    int  count  =  buffer[count++];  [CE]  variable  count  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)  [CONTEXT]  char[]  chars,  Random  random)  {  [BUGGY]    int  count  =  buffer[count++];  [BUGGY]  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	    int  count  =  buffer[count++];		non-compiled	[CE]  variable  count  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)	16	None	add
74	[BUG]  [BUGGY]    int  count  =  chars.length();  [CE]  variable  count  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)  [CONTEXT]  char[]  chars,  Random  random)  {  [BUGGY]    int  count  =  chars.length();  [BUGGY]  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	    int  count  =  chars.length();		non-compiled	[CE]  variable  count  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)	16	None	add
75	[BUG]  [BUGGY]    int  count  =  chars[count];  [CE]  variable  count  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)  [CONTEXT]  char[]  chars,  Random  random)  {  [BUGGY]    int  count  =  chars[count];  [BUGGY]  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	    int  count  =  chars[count];		non-compiled	[CE]  variable  count  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)	16	None	add
84	[BUG]  [BUGGY]    chars[count--]  buffer  =  new  char[gap];  [CE]  not  a  statement  [CONTEXT]  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  [BUGGY]    chars[count--]  buffer  =  new  char[gap];  [BUGGY]  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	250	250	1	replace	    chars[count--]  buffer  =  new  char[gap];		non-compiled	[CE]  not  a  statement	12	None	add
95	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  [BUGGY]    [BUGGY]  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	  	if  (chars  !=  null  &&  chars.length  ==  0)  {  	non-compiled	[CE]  illegal  start  of  type	19	None	replace
101	[BUG]  [BUGGY]    if((  letters  &&  Character.isLetter(ch))  ||(numbers  &&  Character.isDigit(ch))  ||(!letters  &&!numbers))  {  count++;  }  [CE]  cannot  find  symbol  ch  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  [BUGGY]    if((  letters  &&  Character.isLetter(ch))  ||(numbers  &&  Character.isDigit(ch))  ||(!letters  &&!numbers))  {  count++;  }  [BUGGY]  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	    if((  letters  &&  Character.isLetter(ch))  ||(numbers  &&  Character.isDigit(ch))  ||(!letters  &&!numbers))  {  count++;  }		non-compiled	[CE]  cannot  find  symbol  ch	18	None	add
102	[BUG]  [BUGGY]    if((  letters  &&  Character.isLetter(ch))  ||(numbers  &&  Character.isDigit(ch))  ||(!letters  &&!numbers))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  ch  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  [BUGGY]    if((  letters  &&  Character.isLetter(ch))  ||(numbers  &&  Character.isDigit(ch))  ||(!letters  &&!numbers))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	    if((  letters  &&  Character.isLetter(ch))  ||(numbers  &&  Character.isDigit(ch))  ||(!letters  &&!numbers))  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  cannot  find  symbol  ch	18	None	add
103	[BUG]  [BUGGY]    if((  letters  &&  Character.isLetter(ch))  ||(numbers  &&  Character.isDigit(ch))  ||(!letters  &&!numbers))  {  end  =  0;  }  [CE]  cannot  find  symbol  ch  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  [BUGGY]    if((  letters  &&  Character.isLetter(ch))  ||(numbers  &&  Character.isDigit(ch))  ||(!letters  &&!numbers))  {  end  =  0;  }  [BUGGY]  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	    if((  letters  &&  Character.isLetter(ch))  ||(numbers  &&  Character.isDigit(ch))  ||(!letters  &&!numbers))  {  end  =  0;  }		non-compiled	[CE]  cannot  find  symbol  ch	18	None	add
104	[BUG]  [BUGGY]    if((  letters  &&  Character.isLetter(ch))  ||(numbers  &&  Character.isDigit(ch)))  {  if(!letters  &&!numbers)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  [BUGGY]    if((  letters  &&  Character.isLetter(ch))  ||(numbers  &&  Character.isDigit(ch)))  {  if(!letters  &&!numbers)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	    if((  letters  &&  Character.isLetter(ch))  ||(numbers  &&  Character.isDigit(ch)))  {  if(!letters  &&!numbers)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	18	None	add
105	[BUG]  [BUGGY]    if((  letters  &&  Character.isLetter(ch))  ||(numbers  &&  Character.isDigit(ch)))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  ch  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  [BUGGY]    if((  letters  &&  Character.isLetter(ch))  ||(numbers  &&  Character.isDigit(ch)))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	    if((  letters  &&  Character.isLetter(ch))  ||(numbers  &&  Character.isDigit(ch)))  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  cannot  find  symbol  ch	18	None	add
111	[BUG]  [BUGGY]  if((  letters  &&  Character.isLetter(ch))  ||(numbers  &&  Character.isDigit(ch))  ||(!letters  &&!numbers))  {  [CE]  cannot  find  symbol  ch  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  [BUGGY]  if((  letters  &&  Character.isLetter(ch))  ||(numbers  &&  Character.isDigit(ch))  ||(!letters  &&!numbers))  {  [BUGGY]  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	234	234	1	replace	if((  letters  &&  Character.isLetter(ch))  ||(numbers  &&  Character.isDigit(ch))  ||(!letters  &&!numbers))  {	if  (start  ==  0  &&  end  ==  0)  {  	non-compiled	[CE]  cannot  find  symbol  ch	5	None	replace
112	[BUG]  [BUGGY]  if((  letters  &&  Character.isLetter(ch)||(numbers  &&  Character.isDigit(ch))  ||(!letters  &&!numbers))  {  [CE]  ')'  expected  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  [BUGGY]  if((  letters  &&  Character.isLetter(ch)||(numbers  &&  Character.isDigit(ch))  ||(!letters  &&!numbers))  {  [BUGGY]  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	234	234	1	replace	if((  letters  &&  Character.isLetter(ch)||(numbers  &&  Character.isDigit(ch))  ||(!letters  &&!numbers))  {	if  (start  ==  0  &&  end  ==  0)  {  	non-compiled	[CE]  ')'  expected	5	None	replace
113	[BUG]  [BUGGY]  if((  letters  &&  Character.isLetter(ch))  ||(numbers  &&  Character.isDigit(ch)))  {  [CE]  cannot  find  symbol  ch  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  [BUGGY]  if((  letters  &&  Character.isLetter(ch))  ||(numbers  &&  Character.isDigit(ch)))  {  [BUGGY]  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	234	234	1	replace	if((  letters  &&  Character.isLetter(ch))  ||(numbers  &&  Character.isDigit(ch)))  {	if  (start  ==  0  &&  end  ==  0)  {  	non-compiled	[CE]  cannot  find  symbol  ch	5	None	replace
114	[BUG]  [BUGGY]  if((  letters  &&  Character.isDigit(ch))  ||(numbers  &&  Character.isLetter(ch))  ||(!letters  &&!numbers))  {  [CE]  cannot  find  symbol  ch  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  [BUGGY]  if((  letters  &&  Character.isDigit(ch))  ||(numbers  &&  Character.isLetter(ch))  ||(!letters  &&!numbers))  {  [BUGGY]  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	234	234	1	replace	if((  letters  &&  Character.isDigit(ch))  ||(numbers  &&  Character.isLetter(ch))  ||(!letters  &&!numbers))  {	if  (start  ==  0  &&  end  ==  0)  {  	non-compiled	[CE]  cannot  find  symbol  ch	5	None	replace
121	[BUG]  [BUGGY]    System.arraycopy(buffer,  0,  chars,  start,  count  -  1);  [CE]  cannot  find  symbol  buffer  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  [BUGGY]    System.arraycopy(buffer,  0,  chars,  start,  count  -  1);  [BUGGY]  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	    System.arraycopy(buffer,  0,  chars,  start,  count  -  1);		non-compiled	[CE]  cannot  find  symbol  buffer	20	None	add
122	[BUG]  [BUGGY]    System.arraycopy(buffer,  0,  chars,  start,  count  +  1);  [CE]  cannot  find  symbol  buffer  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  [BUGGY]    System.arraycopy(buffer,  0,  chars,  start,  count  +  1);  [BUGGY]  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	    System.arraycopy(buffer,  0,  chars,  start,  count  +  1);		non-compiled	[CE]  cannot  find  symbol  buffer	20	None	add
123	[BUG]  [BUGGY]    chars[]  buffer  =  random.toCharArray();  [CE]  cannot  find  symbol  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  [BUGGY]    chars[]  buffer  =  random.toCharArray();  [BUGGY]  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	    chars[]  buffer  =  random.toCharArray();		non-compiled	[CE]  cannot  find  symbol	20	None	add
124	[BUG]  [BUGGY]    System.arraycopy(buffer,  0,  chars,  start,  end,  letters,  numbers);  [CE]  cannot  find  symbol  buffer  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  [BUGGY]    System.arraycopy(buffer,  0,  chars,  start,  end,  letters,  numbers);  [BUGGY]  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	    System.arraycopy(buffer,  0,  chars,  start,  end,  letters,  numbers);		non-compiled	[CE]  cannot  find  symbol  buffer	20	None	add
125	[BUG]  [BUGGY]    chars[]  buffer  =  random.toString();  [CE]  cannot  find  symbol  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  [BUGGY]    chars[]  buffer  =  random.toString();  [BUGGY]  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	    chars[]  buffer  =  random.toString();		non-compiled	[CE]  cannot  find  symbol	20	None	add
131	[BUG]  [BUGGY]    chars  =  random.nextInt(gap);  [CE]  incompatible  types  [CONTEXT]  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  [BUGGY]    chars  =  random.nextInt(gap);  [BUGGY]  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	    chars  =  random.nextInt(gap);		non-compiled	[CE]  incompatible  types	2	None	add
134	[BUG]  [BUGGY]    buffer[gap]  =  start;  [CE]  possible  loss  of  precision  [CONTEXT]  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  [BUGGY]    buffer[gap]  =  start;  [BUGGY]  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	    buffer[gap]  =  start;		non-compiled	[CE]  possible  loss  of  precision	2	None	add
142	[BUG]  [BUGGY]  return  random(count,  start,  end,  letters,  numbers,  false,  null,  RANDOM);  [CE]  no  suitable  method  found  for  random(int,int,int,boolean,boolean,boolean,<null>,Random)  [CONTEXT]  public  static  String  random(int  count,  int  start,  int  end,  boolean  letters,  boolean  numbers)  {  [BUGGY]  return  random(count,  start,  end,  letters,  numbers,  false,  null,  RANDOM);  [BUGGY]  }  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  [VARIABLES]  Random  RANDOM  int  count  end  start  boolean  letters  numbers  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	163	163	1	replace	return  random(count,  start,  end,  letters,  numbers,  false,  null,  RANDOM);	return  random(count,  start,  end,  letters,  numbers,  null,  RANDOM);  	non-compiled	[CE]  no  suitable  method  found  for  random(int,int,int,boolean,boolean,boolean,<null>,Random)	3	None	replace
143	[BUG]  [BUGGY]  return  random(count,  start,  end,  letters,  numbers,  false,  RANDOM);  [CE]  no  suitable  method  found  for  random(int,int,int,boolean,boolean,boolean,Random)  [CONTEXT]  public  static  String  random(int  count,  int  start,  int  end,  boolean  letters,  boolean  numbers)  {  [BUGGY]  return  random(count,  start,  end,  letters,  numbers,  false,  RANDOM);  [BUGGY]  }  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  [VARIABLES]  Random  RANDOM  int  count  end  start  boolean  letters  numbers  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	163	163	1	replace	return  random(count,  start,  end,  letters,  numbers,  false,  RANDOM);	return  random(count,  start,  end,  letters,  numbers,  null,  RANDOM);  	non-compiled	[CE]  no  suitable  method  found  for  random(int,int,int,boolean,boolean,boolean,Random)	3	None	replace
144	[BUG]  [BUGGY]  return  random(count,  begin,  end,  letters,  numbers,  null,  RANDOM);  [CE]  cannot  find  symbol  begin  [CONTEXT]  public  static  String  random(int  count,  int  start,  int  end,  boolean  letters,  boolean  numbers)  {  [BUGGY]  return  random(count,  begin,  end,  letters,  numbers,  null,  RANDOM);  [BUGGY]  }  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  [VARIABLES]  Random  RANDOM  int  count  end  start  boolean  letters  numbers  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	163	163	1	replace	return  random(count,  begin,  end,  letters,  numbers,  null,  RANDOM);	return  random(count,  start,  end,  letters,  numbers,  null,  RANDOM);  	non-compiled	[CE]  cannot  find  symbol  begin	3	None	replace
151	[BUG]  [BUGGY]    int  count  =  chars.length;  [CE]  variable  count  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)  [CONTEXT]  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  [BUGGY]    int  count  =  chars.length;  [BUGGY]  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	247	247	1	replace	    int  count  =  chars.length;		non-compiled	[CE]  variable  count  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)	8	None	add
152	[BUG]  [BUGGY]    int  count  =  NumberInput.parseInt(letters,  end);  [CE]  variable  count  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)  [CONTEXT]  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  [BUGGY]    int  count  =  NumberInput.parseInt(letters,  end);  [BUGGY]  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	247	247	1	replace	    int  count  =  NumberInput.parseInt(letters,  end);		non-compiled	[CE]  variable  count  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)	8	None	add
153	[BUG]  [BUGGY]    int  count  =  random.intValue();  [CE]  variable  count  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)  [CONTEXT]  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  [BUGGY]    int  count  =  random.intValue();  [BUGGY]  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	247	247	1	replace	    int  count  =  random.intValue();		non-compiled	[CE]  variable  count  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)	8	None	add
154	[BUG]  [BUGGY]    int  count  =  chars[count-1];  [CE]  variable  count  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)  [CONTEXT]  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  [BUGGY]    int  count  =  chars[count-1];  [BUGGY]  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	247	247	1	replace	    int  count  =  chars[count-1];		non-compiled	[CE]  variable  count  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)	8	None	add
155	[BUG]  [BUGGY]    int  count  =  chars[count];  [CE]  variable  count  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)  [CONTEXT]  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  [BUGGY]    int  count  =  chars[count];  [BUGGY]  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	247	247	1	replace	    int  count  =  chars[count];		non-compiled	[CE]  variable  count  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)	8	None	add
173	[BUG]  [BUGGY]  ch  =(char)(random.nextInt(gap)+  start)+  1;  [CE]  possible  loss  of  precision  [CONTEXT]  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  [BUGGY]  ch  =(char)(random.nextInt(gap)+  start)+  1;  [BUGGY]  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	ch  =(char)(random.nextInt(gap)+  start)+  1;	ch  =  (char)  (random.nextInt(gap)  +  start);  	non-compiled	[CE]  possible  loss  of  precision	1	None	replace
174	[BUG]  [BUGGY]  ch  =(char)(random.nextInt(gap)+  start];  [CE]  ')'  expected  [CONTEXT]  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  [BUGGY]  ch  =(char)(random.nextInt(gap)+  start];  [BUGGY]  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	ch  =(char)(random.nextInt(gap)+  start];	ch  =  (char)  (random.nextInt(gap)  +  start);  	non-compiled	[CE]  ')'  expected	1	None	replace
183	[BUG]  [BUGGY]    System.arraycopy(buffer,  0,  buffer,  start,  0,  count);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [CONTEXT]  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  [BUGGY]    System.arraycopy(buffer,  0,  buffer,  start,  0,  count);  [BUGGY]  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	    System.arraycopy(buffer,  0,  buffer,  start,  0,  count);		non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	10	None	add
184	[BUG]  [BUGGY]    chars[]  buffer  =  new  char[count];  [CE]  cannot  find  symbol  [CONTEXT]  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  [BUGGY]    chars[]  buffer  =  new  char[count];  [BUGGY]  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	    chars[]  buffer  =  new  char[count];		non-compiled	[CE]  cannot  find  symbol	10	None	add
192	[BUG]  [BUGGY]    chars[]  buffer  =  random.nextInt(gap);  [CE]  cannot  find  symbol  [CONTEXT]  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  [BUGGY]    chars[]  buffer  =  random.nextInt(gap);  [BUGGY]  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	    chars[]  buffer  =  random.nextInt(gap);		non-compiled	[CE]  cannot  find  symbol	14	None	add
193	[BUG]  [BUGGY]    chars  =  buffer[gap];  [CE]  incompatible  types  [CONTEXT]  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  [BUGGY]    chars  =  buffer[gap];  [BUGGY]  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	    chars  =  buffer[gap];		non-compiled	[CE]  incompatible  types	14	None	add
195	[BUG]  [BUGGY]    int  letters  =  random.add(buffer,  start,  gap);  [CE]  variable  letters  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)  [CONTEXT]  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  [BUGGY]    int  letters  =  random.add(buffer,  start,  gap);  [BUGGY]  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	    int  letters  =  random.add(buffer,  start,  gap);		non-compiled	[CE]  variable  letters  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)	14	None	add
2	[BUG]  [BUGGY]    chars  =  random.charArray(buffer,  start,  gap);  [CE]  cannot  find  symbol  [CONTEXT]  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  [BUGGY]    chars  =  random.charArray(buffer,  start,  gap);  [BUGGY]  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	    chars  =  random.charArray(buffer,  start,  gap);		non-compiled	[CE]  cannot  find  symbol	14	None	add
3	[BUG]  [BUGGY]    char[]  chars  =  random.getChars(start,  end);  [CE]  variable  chars  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)  [CONTEXT]  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  [BUGGY]    char[]  chars  =  random.getChars(start,  end);  [BUGGY]  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	    char[]  chars  =  random.getChars(start,  end);		non-compiled	[CE]  variable  chars  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)	14	None	add
4	[BUG]  [BUGGY]    chars  =  random.charAt(buffer,  start,  gap);  [CE]  cannot  find  symbol  [CONTEXT]  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  [BUGGY]    chars  =  random.charAt(buffer,  start,  gap);  [BUGGY]  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	    chars  =  random.charAt(buffer,  start,  gap);		non-compiled	[CE]  cannot  find  symbol	14	None	add
5	[BUG]  [BUGGY]    chars[random.nextInt(gap)]  =  buffer;  [CE]  incompatible  types  [CONTEXT]  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  [BUGGY]    chars[random.nextInt(gap)]  =  buffer;  [BUGGY]  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	    chars[random.nextInt(gap)]  =  buffer;		non-compiled	[CE]  incompatible  types	14	None	add
21	[BUG]  [BUGGY]    int  start  =  chars.length;  [CE]  variable  start  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  [BUGGY]    int  start  =  chars.length;  [BUGGY]  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	234	234	1	replace	    int  start  =  chars.length;		non-compiled	[CE]  variable  start  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)	6	None	add
22	[BUG]  [BUGGY]    int  start  =  chars.length();  [CE]  variable  start  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  [BUGGY]    int  start  =  chars.length();  [BUGGY]  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	234	234	1	replace	    int  start  =  chars.length();		non-compiled	[CE]  variable  start  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)	6	None	add
23	[BUG]  [BUGGY]    int  start  =(int)(chars.length  -  start);  [CE]  variable  start  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  [BUGGY]    int  start  =(int)(chars.length  -  start);  [BUGGY]  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	234	234	1	replace	    int  start  =(int)(chars.length  -  start);		non-compiled	[CE]  variable  start  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)	6	None	add
24	[BUG]  [BUGGY]    int  start  =  chars.indexOf('-');  [CE]  variable  start  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  [BUGGY]    int  start  =  chars.indexOf('-');  [BUGGY]  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	234	234	1	replace	    int  start  =  chars.indexOf('-');		non-compiled	[CE]  variable  start  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)	6	None	add
25	[BUG]  [BUGGY]    int  start  =  chars.indexOf('+');  [CE]  variable  start  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  [BUGGY]    int  start  =  chars.indexOf('+');  [BUGGY]  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	234	234	1	replace	    int  start  =  chars.indexOf('+');		non-compiled	[CE]  variable  start  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)	6	None	add
41	[BUG]  [BUGGY]    int  start  =  random.nextInt(gap);  [CE]  variable  start  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)  [CONTEXT]  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  [BUGGY]    int  start  =  random.nextInt(gap);  [BUGGY]  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	    int  start  =  random.nextInt(gap);		non-compiled	[CE]  variable  start  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)	2	None	add
42	[BUG]  [BUGGY]    chars  =  new  char[gap.length];  [CE]  int  cannot  be  dereferenced  [CONTEXT]  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  [BUGGY]    chars  =  new  char[gap.length];  [BUGGY]  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	    chars  =  new  char[gap.length];		non-compiled	[CE]  int  cannot  be  dereferenced	2	None	add
43	[BUG]  [BUGGY]    buffer[gap]  =  start  +  1;  [CE]  possible  loss  of  precision  [CONTEXT]  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  [BUGGY]    buffer[gap]  =  start  +  1;  [BUGGY]  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	    buffer[gap]  =  start  +  1;		non-compiled	[CE]  possible  loss  of  precision	2	None	add
61	[BUG]  [BUGGY]    System.arraycopy(buffer,  start,  0,  buffer,  start,  0);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [CONTEXT]  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  [BUGGY]    System.arraycopy(buffer,  start,  0,  buffer,  start,  0);  [BUGGY]  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	    System.arraycopy(buffer,  start,  0,  buffer,  start,  0);		non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	10	None	add
62	[BUG]  [BUGGY]    System.arraycopy(buffer,  start,  0,  buffer,  start,  end);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [CONTEXT]  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  [BUGGY]    System.arraycopy(buffer,  start,  0,  buffer,  start,  end);  [BUGGY]  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	    System.arraycopy(buffer,  start,  0,  buffer,  start,  end);		non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	10	None	add
64	[BUG]  [BUGGY]    char[]  chars  =  random.get(buffer,  start,  end);  [CE]  variable  chars  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)  [CONTEXT]  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  [BUGGY]    char[]  chars  =  random.get(buffer,  start,  end);  [BUGGY]  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	    char[]  chars  =  random.get(buffer,  start,  end);		non-compiled	[CE]  variable  chars  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)	10	None	add
101	[BUG]  [BUGGY]    int  count  =  random.add(0,  start);  [CE]  variable  count  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)  [CONTEXT]  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  [BUGGY]    int  count  =  random.add(0,  start);  [BUGGY]  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	247	247	1	replace	    int  count  =  random.add(0,  start);		non-compiled	[CE]  variable  count  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)	8	None	add
102	[BUG]  [BUGGY]    int  count  =  random.add(start,  end);  [CE]  variable  count  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)  [CONTEXT]  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  [BUGGY]    int  count  =  random.add(start,  end);  [BUGGY]  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	247	247	1	replace	    int  count  =  random.add(start,  end);		non-compiled	[CE]  variable  count  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)	8	None	add
103	[BUG]  [BUGGY]    int  count  =  random.add(numbers,  start);  [CE]  variable  count  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)  [CONTEXT]  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  [BUGGY]    int  count  =  random.add(numbers,  start);  [BUGGY]  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	247	247	1	replace	    int  count  =  random.add(numbers,  start);		non-compiled	[CE]  variable  count  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)	8	None	add
104	[BUG]  [BUGGY]    int  count  =  random.add(null,  start);  [CE]  variable  count  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)  [CONTEXT]  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  [BUGGY]    int  count  =  random.add(null,  start);  [BUGGY]  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	247	247	1	replace	    int  count  =  random.add(null,  start);		non-compiled	[CE]  variable  count  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)	8	None	add
105	[BUG]  [BUGGY]    int  count  =  random.add(start);  [CE]  variable  count  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)  [CONTEXT]  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  [BUGGY]    int  count  =  random.add(start);  [BUGGY]  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	247	247	1	replace	    int  count  =  random.add(start);		non-compiled	[CE]  variable  count  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)	8	None	add
121	[BUG]  [BUGGY]    System.arraycopy(buffer,  start,  chars,  0,  count);  [CE]  cannot  find  symbol  buffer  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  [BUGGY]    System.arraycopy(buffer,  start,  chars,  0,  count);  [BUGGY]  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	    System.arraycopy(buffer,  start,  chars,  0,  count);		non-compiled	[CE]  cannot  find  symbol  buffer	20	None	add
122	[BUG]  [BUGGY]    char[]  buffer  =(char[])Array.newInstance();  [CE]  cannot  find  symbol  Array  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  [BUGGY]    char[]  buffer  =(char[])Array.newInstance();  [BUGGY]  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	    char[]  buffer  =(char[])Array.newInstance();		non-compiled	[CE]  cannot  find  symbol  Array	20	None	add
123	[BUG]  [BUGGY]    System.arraycopy(buffer,  start,  count,  buffer,  start,  end);  [CE]  cannot  find  symbol  buffer  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  [BUGGY]    System.arraycopy(buffer,  start,  count,  buffer,  start,  end);  [BUGGY]  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	    System.arraycopy(buffer,  start,  count,  buffer,  start,  end);		non-compiled	[CE]  cannot  find  symbol  buffer	20	None	add
124	[BUG]  [BUGGY]    char[]  buffer  =(char[])Arrays.asList(numbers);  [CE]  cannot  find  symbol  Arrays  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  [BUGGY]    char[]  buffer  =(char[])Arrays.asList(numbers);  [BUGGY]  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	    char[]  buffer  =(char[])Arrays.asList(numbers);		non-compiled	[CE]  cannot  find  symbol  Arrays	20	None	add
125	[BUG]  [BUGGY]    char[]  buffer  =(char[])Arrays.asList(ch);  [CE]  cannot  find  symbol  ch  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  [BUGGY]    char[]  buffer  =(char[])Arrays.asList(ch);  [BUGGY]  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	    char[]  buffer  =(char[])Arrays.asList(ch);		non-compiled	[CE]  cannot  find  symbol  ch	20	None	add
141	[BUG]  [BUGGY]    char  ch  =  buffer[random.nextInt(gap)+  start];  [CE]  variable  ch  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)  [CONTEXT]  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  [BUGGY]    char  ch  =  buffer[random.nextInt(gap)+  start];  [BUGGY]  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	250	250	1	replace	    char  ch  =  buffer[random.nextInt(gap)+  start];		non-compiled	[CE]  variable  ch  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)	12	None	add
142	[BUG]  [BUGGY]    char  ch  =(char)(random.nextInt(gap)+  start);  [CE]  variable  ch  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)  [CONTEXT]  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  [BUGGY]    char  ch  =(char)(random.nextInt(gap)+  start);  [BUGGY]  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	250	250	1	replace	    char  ch  =(char)(random.nextInt(gap)+  start);		non-compiled	[CE]  variable  ch  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)	12	None	add
143	[BUG]  [BUGGY]    int  ch  =(char)(random.nextInt(gap)+  start);  [CE]  variable  ch  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)  [CONTEXT]  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  [BUGGY]    int  ch  =(char)(random.nextInt(gap)+  start);  [BUGGY]  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	250	250	1	replace	    int  ch  =(char)(random.nextInt(gap)+  start);		non-compiled	[CE]  variable  ch  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)	12	None	add
144	[BUG]  [BUGGY]    int  count  =  random.add(buffer,  start,  gap);  [CE]  variable  count  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)  [CONTEXT]  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  [BUGGY]    int  count  =  random.add(buffer,  start,  gap);  [BUGGY]  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	250	250	1	replace	    int  count  =  random.add(buffer,  start,  gap);		non-compiled	[CE]  variable  count  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)	12	None	add
145	[BUG]  [BUGGY]    char[]  chars  =  random.getChars(start,  end,  buffer,  start);  [CE]  variable  chars  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)  [CONTEXT]  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  [BUGGY]    char[]  chars  =  random.getChars(start,  end,  buffer,  start);  [BUGGY]  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	250	250	1	replace	    char[]  chars  =  random.getChars(start,  end,  buffer,  start);		non-compiled	[CE]  variable  chars  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)	12	None	add
161	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testLANG807  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  [BUGGY]  if((  start  ==  0)&&(end  ==  0))  {  [BUGGY]  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	234	234	1	add	if((  start  ==  0)&&(end  ==  0))  {	if  (start  ==  0  &&  end  ==  0)  {  	compilable	  [FE]  AssertionFailedError  testLANG807	5	1
162	[BUG]  [BUGGY]  if((  start  ==  0)&&(end  ==  0))  {  [FE]  AssertionFailedError  testLANG807  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  [BUGGY]  if((  start  ==  0)&&(end  ==  0))  {  [BUGGY]  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	234	234	1	replace	if((  start  ==  0)&&(end  ==  0))  {	if  (start  ==  0  &&  end  ==  0)  {  	compilable	  [FE]  AssertionFailedError  testLANG807	5	1	replace
202	[BUG]  [BUGGY]  return  random(count,  start,  end,  letters,  numbers,  0,  RANDOM);  [CE]  no  suitable  method  found  for  random(int,int,int,boolean,boolean,int,Random)  [CONTEXT]  public  static  String  random(int  count,  int  start,  int  end,  boolean  letters,  boolean  numbers)  {  [BUGGY]  return  random(count,  start,  end,  letters,  numbers,  0,  RANDOM);  [BUGGY]  }  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  [VARIABLES]  Random  RANDOM  int  count  end  start  boolean  letters  numbers  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	163	163	1	replace	return  random(count,  start,  end,  letters,  numbers,  0,  RANDOM);	return  random(count,  start,  end,  letters,  numbers,  null,  RANDOM);  	non-compiled	[CE]  no  suitable  method  found  for  random(int,int,int,boolean,boolean,int,Random)	3	None	replace
204	[BUG]  [BUGGY]  return  random(count,  start,  end,  letters,  numbers,  RANDOM);  [CE]  no  suitable  method  found  for  random(int,int,int,boolean,boolean,Random)  [CONTEXT]  public  static  String  random(int  count,  int  start,  int  end,  boolean  letters,  boolean  numbers)  {  [BUGGY]  return  random(count,  start,  end,  letters,  numbers,  RANDOM);  [BUGGY]  }  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  [VARIABLES]  Random  RANDOM  int  count  end  start  boolean  letters  numbers  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	163	163	1	replace	return  random(count,  start,  end,  letters,  numbers,  RANDOM);	return  random(count,  start,  end,  letters,  numbers,  null,  RANDOM);  	non-compiled	[CE]  no  suitable  method  found  for  random(int,int,int,boolean,boolean,Random)	3	None	replace
221	[BUG]  [BUGGY]    if((  start  ==  0)&&(end  ==  0))  {  if(chars.length!=  1)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  [BUGGY]    if((  start  ==  0)&&(end  ==  0))  {  if(chars.length!=  1)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	    if((  start  ==  0)&&(end  ==  0))  {  if(chars.length!=  1)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	18	None	add
222	[BUG]  [BUGGY]    char  ch  =(char[])chars.clone();  [CE]  incompatible  types  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  [BUGGY]    char  ch  =(char[])chars.clone();  [BUGGY]  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	    char  ch  =(char[])chars.clone();		non-compiled	[CE]  incompatible  types	18	None	add
223	[BUG]  [BUGGY]    if((  start  ==  0)&&(end  <  0))  {  if(chars.length!=  1)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  [BUGGY]    if((  start  ==  0)&&(end  <  0))  {  if(chars.length!=  1)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	    if((  start  ==  0)&&(end  <  0))  {  if(chars.length!=  1)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	18	None	add
224	[BUG]  [BUGGY]    if((  start  ==  0)&&(end  ==  0))  {  if(chars.length!=  1)  {  throw  new  IllegalArgumentException( "The  char  array  must  not  be  empty ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  [BUGGY]    if((  start  ==  0)&&(end  ==  0))  {  if(chars.length!=  1)  {  throw  new  IllegalArgumentException( "The  char  array  must  not  be  empty ");  }  [BUGGY]  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	    if((  start  ==  0)&&(end  ==  0))  {  if(chars.length!=  1)  {  throw  new  IllegalArgumentException( "The  char  array  must  not  be  empty ");  }		non-compiled	[CE]  illegal  start  of  expression	18	None	add
225	[BUG]  [BUGGY]    if((  start  ==  0)&&(end  ==  0))  {  if(chars.length!=  1)  {  throw  new  IllegalArgumentException( "The  string  array  must  not  be  empty ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  [BUGGY]    if((  start  ==  0)&&(end  ==  0))  {  if(chars.length!=  1)  {  throw  new  IllegalArgumentException( "The  string  array  must  not  be  empty ");  }  [BUGGY]  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	    if((  start  ==  0)&&(end  ==  0))  {  if(chars.length!=  1)  {  throw  new  IllegalArgumentException( "The  string  array  must  not  be  empty ");  }		non-compiled	[CE]  illegal  start  of  expression	18	None	add
262	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testLANG807  [CONTEXT]  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  [BUGGY]  ch  =(char)(random.nextInt(gap)+  start  +  1);  [BUGGY]  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	add	ch  =(char)(random.nextInt(gap)+  start  +  1);	ch  =  (char)  (random.nextInt(gap)  +  start);  	compilable	  [FE]  AssertionFailedError  testLANG807	1	1
263	[BUG]  [BUGGY]  ch  =(char)(random.nextInt(gap)+  start  +  1);  [FE]  AssertionFailedError  testLANG807  [CONTEXT]  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  [BUGGY]  ch  =(char)(random.nextInt(gap)+  start  +  1);  [BUGGY]  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5773502691896258	253	253	1	replace	ch  =(char)(random.nextInt(gap)+  start  +  1);	ch  =  (char)  (random.nextInt(gap)  +  start);  	compilable	  [FE]  AssertionFailedError  testLANG807	1	1	replace
284	[BUG]  [BUGGY]  if((  letters  &&  Character.isLetter(ch))  ||(numbers  &&  Character.isDigit(ch))  ||(!letters  &&! "numbers ").equals(chars[0]))  {  [CE]  cannot  find  symbol  ch  [CONTEXT]  char[]  chars,  Random  random)  {  [BUGGY]  if((  letters  &&  Character.isLetter(ch))  ||(numbers  &&  Character.isDigit(ch))  ||(!letters  &&! "numbers ").equals(chars[0]))  {  [BUGGY]  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  Character.isLetter(ch))  ||(numbers  &&  Character.isDigit(ch))  ||(!letters  &&! "numbers ").equals(chars[0]))  {	if  (count  ==  0)  {  	non-compiled	[CE]  cannot  find  symbol  ch	15	None	replace
301	[BUG]  [BUGGY]  }  else  if(count  <  less  than  0.)  {  [CE]  ')'  expected  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  [BUGGY]  }  else  if(count  <  less  than  0.)  {  [BUGGY]  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count  <  less  than  0.)  {	}  else  if  (count  <  0)  {  	non-compiled	[CE]  ')'  expected	17	None	replace
303	[BUG]  [BUGGY]  }  else  if(count  <  less  than  0.10)  {  [CE]  ')'  expected  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  [BUGGY]  }  else  if(count  <  less  than  0.10)  {  [BUGGY]  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count  <  less  than  0.10)  {	}  else  if  (count  <  0)  {  	non-compiled	[CE]  ')'  expected	17	None	replace
343	[BUG]  [BUGGY]    random(count,  start,  end,  letters,  numbers,  RANDOM);  [CE]  no  suitable  method  found  for  random(int,int,int,boolean,boolean,Random)  [CONTEXT]  public  static  String  random(int  count,  int  start,  int  end,  boolean  letters,  boolean  numbers)  {  [BUGGY]    random(count,  start,  end,  letters,  numbers,  RANDOM);  [BUGGY]  return  random(count,  start,  end,  letters,  numbers,  null,  RANDOM);  }  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  [VARIABLES]  Random  RANDOM  int  count  end  start  boolean  letters  numbers  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	163	163	1	replace	    random(count,  start,  end,  letters,  numbers,  RANDOM);		non-compiled	[CE]  no  suitable  method  found  for  random(int,int,int,boolean,boolean,Random)	4	None	add
344	[BUG]  [BUGGY]    Random  RANDOM  =  random(count,  start,  end,  letters,  numbers,  null,  RANDOM);  [CE]  incompatible  types  [CONTEXT]  public  static  String  random(int  count,  int  start,  int  end,  boolean  letters,  boolean  numbers)  {  [BUGGY]    Random  RANDOM  =  random(count,  start,  end,  letters,  numbers,  null,  RANDOM);  [BUGGY]  return  random(count,  start,  end,  letters,  numbers,  null,  RANDOM);  }  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  [VARIABLES]  Random  RANDOM  int  count  end  start  boolean  letters  numbers  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	163	163	1	replace	    Random  RANDOM  =  random(count,  start,  end,  letters,  numbers,  null,  RANDOM);		non-compiled	[CE]  incompatible  types	4	None	add
345	[BUG]  [BUGGY]    random(count,  start,  end,  letters,  numbers,  0,  RANDOM);  [CE]  no  suitable  method  found  for  random(int,int,int,boolean,boolean,int,Random)  [CONTEXT]  public  static  String  random(int  count,  int  start,  int  end,  boolean  letters,  boolean  numbers)  {  [BUGGY]    random(count,  start,  end,  letters,  numbers,  0,  RANDOM);  [BUGGY]  return  random(count,  start,  end,  letters,  numbers,  null,  RANDOM);  }  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  [VARIABLES]  Random  RANDOM  int  count  end  start  boolean  letters  numbers  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	163	163	1	replace	    random(count,  start,  end,  letters,  numbers,  0,  RANDOM);		non-compiled	[CE]  no  suitable  method  found  for  random(int,int,int,boolean,boolean,int,Random)	4	None	add
362	[BUG]  [BUGGY]    int  count  =(char[])chars.clone();  [CE]  variable  count  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)  [CONTEXT]  char[]  chars,  Random  random)  {  [BUGGY]    int  count  =(char[])chars.clone();  [BUGGY]  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	    int  count  =(char[])chars.clone();		non-compiled	[CE]  variable  count  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)	16	None	add
364	[BUG]  [BUGGY]    int  count  =(char[])chars.toCharArray();  [CE]  variable  count  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)  [CONTEXT]  char[]  chars,  Random  random)  {  [BUGGY]    int  count  =(char[])chars.toCharArray();  [BUGGY]  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	    int  count  =(char[])chars.toCharArray();		non-compiled	[CE]  variable  count  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)	16	None	add
365	[BUG]  [BUGGY]    int  count  =  chars.size();  [CE]  variable  count  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)  [CONTEXT]  char[]  chars,  Random  random)  {  [BUGGY]    int  count  =  chars.size();  [BUGGY]  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	    int  count  =  chars.size();		non-compiled	[CE]  variable  count  is  already  defined  in  method  random(int,int,int,boolean,boolean,char[],Random)	16	None	add
383	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testLANG807  [CONTEXT]  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  [BUGGY]  if(chars  ==  null  ||  chars.length  ==  0)  {  [BUGGY]  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	add	if(chars  ==  null  ||  chars.length  ==  0)  {	if  (chars  ==  null)  {  	compilable	  [FE]  AssertionFailedError  testLANG807	13	1
384	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  ==  0)  {  [FE]  AssertionFailedError  testLANG807  [CONTEXT]  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  [BUGGY]  if(chars  ==  null  ||  chars.length  ==  0)  {  [BUGGY]  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	if(chars  ==  null  ||  chars.length  ==  0)  {	if  (chars  ==  null)  {  	compilable	  [FE]  AssertionFailedError  testLANG807	13	1	replace
384	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testLANG807  [CONTEXT]  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  [BUGGY]  if(chars  ==  null  ||  chars.length  <  0)  {  [BUGGY]  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	add	if(chars  ==  null  ||  chars.length  <  0)  {	if  (chars  ==  null)  {  	compilable	  [FE]  AssertionFailedError  testLANG807	13	1
385	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  <  0)  {  [FE]  AssertionFailedError  testLANG807  [CONTEXT]  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  [BUGGY]  if(chars  ==  null  ||  chars.length  <  0)  {  [BUGGY]  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	if(chars  ==  null  ||  chars.length  <  0)  {	if  (chars  ==  null)  {  	compilable	  [FE]  AssertionFailedError  testLANG807	13	1	replace
4	[BUG]  [BUGGY]  if(chars  <  null  ||  chars.length  <  0)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  [BUGGY]  if(chars  <  null  ||  chars.length  <  0)  {  [BUGGY]  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	if(chars  <  null  ||  chars.length  <  0)  {	if  (chars  !=  null  &&  chars.length  ==  0)  {  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	19	None	replace
63	[BUG]  [BUGGY]  char[]  buffer  =  new  char[128);  [CE]  ']'  expected  [CONTEXT]  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  [BUGGY]  char[]  buffer  =  new  char[128);  [BUGGY]  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	247	247	1	replace	char[]  buffer  =  new  char[128);	char[]  buffer  =  new  char[count];  	non-compiled	[CE]  ']'  expected	7	None	replace
64	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testLANG807  [CONTEXT]  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  [BUGGY]  char[]  buffer  =  new  char[count-0];  [BUGGY]  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	247	247	1	add	char[]  buffer  =  new  char[count-0];	char[]  buffer  =  new  char[count];  	compilable	  [FE]  AssertionFailedError  testLANG807	7	1
65	[BUG]  [BUGGY]  char[]  buffer  =  new  char[count-0];  [FE]  AssertionFailedError  testLANG807  [CONTEXT]  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  [BUGGY]  char[]  buffer  =  new  char[count-0];  [BUGGY]  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	247	247	1	replace	char[]  buffer  =  new  char[count-0];	char[]  buffer  =  new  char[count];  	compilable	  [FE]  AssertionFailedError  testLANG807	7	1	replace
92	[BUG]  [BUGGY]    RANDOM.setLanguage(count,  start,  end,  letters,  numbers);  [CE]  cannot  find  symbol  [CONTEXT]  public  static  String  random(int  count,  int  start,  int  end,  boolean  letters,  boolean  numbers)  {  [BUGGY]    RANDOM.setLanguage(count,  start,  end,  letters,  numbers);  [BUGGY]  return  random(count,  start,  end,  letters,  numbers,  null,  RANDOM);  }  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  [VARIABLES]  Random  RANDOM  int  count  end  start  boolean  letters  numbers  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	163	163	1	replace	    RANDOM.setLanguage(count,  start,  end,  letters,  numbers);		non-compiled	[CE]  cannot  find  symbol	4	None	add
93	[BUG]  [BUGGY]    checkLenient();  [CE]  cannot  find  symbol  [CONTEXT]  public  static  String  random(int  count,  int  start,  int  end,  boolean  letters,  boolean  numbers)  {  [BUGGY]    checkLenient();  [BUGGY]  return  random(count,  start,  end,  letters,  numbers,  null,  RANDOM);  }  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  [VARIABLES]  Random  RANDOM  int  count  end  start  boolean  letters  numbers  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	163	163	1	replace	    checkLenient();		non-compiled	[CE]  cannot  find  symbol	4	None	add
94	[BUG]  [BUGGY]    checkLocalFileNames(count,  start,  end);  letters  =  0;  [CE]  cannot  find  symbol  [CONTEXT]  public  static  String  random(int  count,  int  start,  int  end,  boolean  letters,  boolean  numbers)  {  [BUGGY]    checkLocalFileNames(count,  start,  end);  letters  =  0;  [BUGGY]  return  random(count,  start,  end,  letters,  numbers,  null,  RANDOM);  }  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  [VARIABLES]  Random  RANDOM  int  count  end  start  boolean  letters  numbers  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	163	163	1	replace	    checkLocalFileNames(count,  start,  end);  letters  =  0;		non-compiled	[CE]  cannot  find  symbol	4	None	add
95	[BUG]  [BUGGY]    random(count,  start,  end,  letters,  numbers,  0);  [CE]  no  suitable  method  found  for  random(int,int,int,boolean,boolean,int)  [CONTEXT]  public  static  String  random(int  count,  int  start,  int  end,  boolean  letters,  boolean  numbers)  {  [BUGGY]    random(count,  start,  end,  letters,  numbers,  0);  [BUGGY]  return  random(count,  start,  end,  letters,  numbers,  null,  RANDOM);  }  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  [VARIABLES]  Random  RANDOM  int  count  end  start  boolean  letters  numbers  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	163	163	1	replace	    random(count,  start,  end,  letters,  numbers,  0);		non-compiled	[CE]  no  suitable  method  found  for  random(int,int,int,boolean,boolean,int)	4	None	add
122	[BUG]  [BUGGY]    if((  letters  &&  Character.isLetter(ch))  ||(numbers  &&  Character.isDigit(ch))  ||(!letters  &&!numbers))  {  count  =  0;  }  [CE]  cannot  find  symbol  ch  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  [BUGGY]    if((  letters  &&  Character.isLetter(ch))  ||(numbers  &&  Character.isDigit(ch))  ||(!letters  &&!numbers))  {  count  =  0;  }  [BUGGY]  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	    if((  letters  &&  Character.isLetter(ch))  ||(numbers  &&  Character.isDigit(ch))  ||(!letters  &&!numbers))  {  count  =  0;  }		non-compiled	[CE]  cannot  find  symbol  ch	18	None	add
124	[BUG]  [BUGGY]    if((  letters  &&  Character.isLetter(ch))  ||(numbers  &&  Character.isDigit(ch))  ||(!letters  &&!numbers))  {  count  =  chars[0];  }  [CE]  cannot  find  symbol  ch  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  [BUGGY]    if((  letters  &&  Character.isLetter(ch))  ||(numbers  &&  Character.isDigit(ch))  ||(!letters  &&!numbers))  {  count  =  chars[0];  }  [BUGGY]  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	    if((  letters  &&  Character.isLetter(ch))  ||(numbers  &&  Character.isDigit(ch))  ||(!letters  &&!numbers))  {  count  =  chars[0];  }		non-compiled	[CE]  cannot  find  symbol  ch	18	None	add
125	[BUG]  [BUGGY]    if((  letters  &&  Character.isLetter(ch))  ||(numbers  &&  Character.isDigit(ch))  ||(!letters  &&!numbers))  {  continue;  }  [CE]  cannot  find  symbol  ch  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  [BUGGY]    if((  letters  &&  Character.isLetter(ch))  ||(numbers  &&  Character.isDigit(ch))  ||(!letters  &&!numbers))  {  continue;  }  [BUGGY]  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	    if((  letters  &&  Character.isLetter(ch))  ||(numbers  &&  Character.isDigit(ch))  ||(!letters  &&!numbers))  {  continue;  }		non-compiled	[CE]  cannot  find  symbol  ch	18	None	add
184	[BUG]  [BUGGY]  }  else  if(count  <  0  ||  random.isLetterOrDigit(letters,  numbers))  {  [CE]  cannot  find  symbol  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  [BUGGY]  }  else  if(count  <  0  ||  random.isLetterOrDigit(letters,  numbers))  {  [BUGGY]  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException( "The  chars  array  must  not  be  empty ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	227	227	1	replace	}  else  if(count  <  0  ||  random.isLetterOrDigit(letters,  numbers))  {	}  else  if  (count  <  0)  {  	non-compiled	[CE]  cannot  find  symbol	17	None	replace
