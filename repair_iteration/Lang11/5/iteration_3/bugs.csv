bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Character  ch  =  random.nextChar(buffer,  end);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  random.nextChar(buffer,  end);  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	Character  ch  =  random.nextChar(buffer,  end);	  Character    ch    =    random.nextChar(gap);    	non-compiled	[CE]  	79	None	replace
2	[BUG]  [BUGGY]  Character  ch  =  buffer.nextChar(gap);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  buffer.nextChar(gap);  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	Character  ch  =  buffer.nextChar(gap);	  Character    ch    =    random.nextChar(gap);    	non-compiled	[CE]  	79	None	replace
3	[BUG]  [BUGGY]  Character  ch  =  buffer[random.nextChar(gap)];  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  buffer[random.nextChar(gap)];  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	Character  ch  =  buffer[random.nextChar(gap)];	  Character    ch    =    random.nextChar(gap);    	non-compiled	[CE]  	79	None	replace
4	[BUG]  [BUGGY]  Character  ch  =  random.nextChar(buffer);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  random.nextChar(buffer);  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	Character  ch  =  random.nextChar(buffer);	  Character    ch    =    random.nextChar(gap);    	non-compiled	[CE]  	79	None	replace
5	[BUG]  [BUGGY]  int  count  =  random.nextInt(buffer,  0,  end  +  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(buffer,  0,  end  +  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  random.nextInt(buffer,  0,  end  +  1);	  int    count    =    random.nextInt(buffer,    0,    end);    	non-compiled	[CE]  	29	None	replace
6	[BUG]  [BUGGY]  int  count  =  random.nextInt(buffer,  0,  end  -  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(buffer,  0,  end  -  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  random.nextInt(buffer,  0,  end  -  1);	  int    count    =    random.nextInt(buffer,    0,    end);    	non-compiled	[CE]  	29	None	replace
7	[BUG]  [BUGGY]  int  count  =  chars.length  -  1  +  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  chars.length  -  1  +  1;  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  chars.length  -  1  +  1;	  int    count    =    chars.length    -    1;    	non-compiled	[CE]  	41	None	replace
8	[BUG]  [BUGGY]  int  count  =  chars.length  -  2;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  chars.length  -  2;  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  chars.length  -  2;	  int    count    =    chars.length    -    1;    	non-compiled	[CE]  	41	None	replace
9	[BUG]  [BUGGY]  int  count  =  random.nextInt(buffer,  0,  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(buffer,  0,  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  random.nextInt(buffer,  0,  1);	  int    count    =    random.nextInt(buffer,    1);    	non-compiled	[CE]  	50	None	replace
10	[BUG]  [BUGGY]  int  count  =  random.nextInt(buffer,  2);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(buffer,  2);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  random.nextInt(buffer,  2);	  int    count    =    random.nextInt(buffer,    1);    	non-compiled	[CE]  	50	None	replace
11	[BUG]  [BUGGY]  Character  ch  =  buffer.nextInt(count);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  buffer.nextInt(count);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	Character  ch  =  buffer.nextInt(count);	  Character    ch    =    random.random.nextInt(buffer);    	non-compiled	[CE]  	46	None	replace
12	[BUG]  [BUGGY]  Character  ch  =  buffer.nextInt(random);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  buffer.nextInt(random);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	Character  ch  =  buffer.nextInt(random);	  Character    ch    =    random.random.nextInt(buffer);    	non-compiled	[CE]  	46	None	replace
13	[BUG]  [BUGGY]  Character  ch  =  buffer[random.nextInt(buffer);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  buffer[random.nextInt(buffer);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	Character  ch  =  buffer[random.nextInt(buffer);	  Character    ch    =    random.random.nextInt(buffer);    	non-compiled	[CE]  	46	None	replace
14	[BUG]  [BUGGY]  Character  ch  =  random.random.nextInt(buffer,  count);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  random.random.nextInt(buffer,  count);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	Character  ch  =  random.random.nextInt(buffer,  count);	  Character    ch    =    random.random.nextInt(buffer);    	non-compiled	[CE]  	46	None	replace
15	[BUG]  [BUGGY]  char[]  buffer  =  new  char[end  -  start  +  1];  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char[]  buffer  =  new  char[end  -  start  +  1];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	char[]  buffer  =  new  char[end  -  start  +  1];	  char[]    buffer    =    new    char[count    -    start    +    1];    	non-compiled	[CE]  	69	None	replace
16	[BUG]  [BUGGY]  char[]  buffer  =  new  char[numbers  -  start  +  1];  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char[]  buffer  =  new  char[numbers  -  start  +  1];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	char[]  buffer  =  new  char[numbers  -  start  +  1];	  char[]    buffer    =    new    char[count    -    start    +    1];    	non-compiled	[CE]  	69	None	replace
17	[BUG]  [BUGGY]  int  gap  =  0;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  0;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  0;	  int    gap    =    0    -    end;    	non-compiled	[CE]  	24	None	replace
18	[BUG]  [BUGGY]  int  gap  =  1  -  end;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  1  -  end;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  1  -  end;	  int    gap    =    0    -    end;    	non-compiled	[CE]  	24	None	replace
19	[BUG]  [BUGGY]  int  count  =  random.nextInt(start,  end);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(start,  end);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  random.nextInt(start,  end);	  int    count    =    random.nextInt(buffer,    end);    	non-compiled	[CE]  	48	None	replace
20	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer.length  +  2];  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char[]  buffer  =  new  char[buffer.length  +  2];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	char[]  buffer  =  new  char[buffer.length  +  2];	  char[]    buffer    =    new    char[buffer.length    +    1];    	non-compiled	[CE]  	84	None	replace
21	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer.length  +  3];  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char[]  buffer  =  new  char[buffer.length  +  3];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	char[]  buffer  =  new  char[buffer.length  +  3];	  char[]    buffer    =    new    char[buffer.length    +    1];    	non-compiled	[CE]  	84	None	replace
22	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  end  -  start);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  end  -  start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  end  -  start);	  System.arraycopy(buffer,    0,    buffer,    0,    count    -    start);    	non-compiled	[CE]  	71	None	replace
23	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  count  -  start  +  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  count  -  start  +  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  count  -  start  +  1);	  System.arraycopy(buffer,    0,    buffer,    0,    count    -    start);    	non-compiled	[CE]  	71	None	replace
24	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer.length  -  start];  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char[]  buffer  =  new  char[buffer.length  -  start];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	char[]  buffer  =  new  char[buffer.length  -  start];	  char[]    buffer    =    new    char[numbers    -    start];    	non-compiled	[CE]  	2	None	replace
25	[BUG]  [BUGGY]  char  count  =  buffer.length;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  count  =  buffer.length;  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	char  count  =  buffer.length;	  char    count    =    chars.length;    	non-compiled	[CE]  	42	None	replace
26	[BUG]  [BUGGY]  String  count  =  chars.length;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  String  count  =  chars.length;  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	String  count  =  chars.length;	  char    count    =    chars.length;    	non-compiled	[CE]  	42	None	replace
27	[BUG]  [BUGGY]  char  count  =(char)buffer.length;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  count  =(char)buffer.length;  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	char  count  =(char)buffer.length;	  char    count    =    chars.length;    	non-compiled	[CE]  	42	None	replace
28	[BUG]  [BUGGY]  char  count  =  buffer[count].length;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  count  =  buffer[count].length;  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	char  count  =  buffer[count].length;	  char    count    =    chars.length;    	non-compiled	[CE]  	42	None	replace
29	[BUG]  [BUGGY]  int  gap  =  end  <  <  2;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  end  <  <  2;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  end  <  <  2;	  int    gap    =    end    -    2;    	non-compiled	[CE]  	33	None	replace
30	[BUG]  [BUGGY]  int  gap  =  end  +  2;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  end  +  2;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  end  +  2;	  int    gap    =    end    -    2;    	non-compiled	[CE]  	33	None	replace
31	[BUG]  [BUGGY]  char  count  =  buffer.nextInt(gap);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  count  =  buffer.nextInt(gap);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	char  count  =  buffer.nextInt(gap);	  char    count    =    random.nextInt(gap);    	non-compiled	[CE]  	49	None	replace
32	[BUG]  [BUGGY]  char  count  =  buffer[random.nextInt(gap)];  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  count  =  buffer[random.nextInt(gap)];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	char  count  =  buffer[random.nextInt(gap)];	  char    count    =    random.nextInt(gap);    	non-compiled	[CE]  	49	None	replace
33	[BUG]  [BUGGY]  char  count  =  random.nextInt(buffer,  start);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  count  =  random.nextInt(buffer,  start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	char  count  =  random.nextInt(buffer,  start);	  char    count    =    random.nextInt(gap);    	non-compiled	[CE]  	49	None	replace
34	[BUG]  [BUGGY]  char  count  =  random.nextInt(buffer,  end);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  count  =  random.nextInt(buffer,  end);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	char  count  =  random.nextInt(buffer,  end);	  char    count    =    random.nextInt(gap);    	non-compiled	[CE]  	49	None	replace
35	[BUG]  [BUGGY]  int  count  =  random.nextInt(buffer,  0,  buffer.length  -  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(buffer,  0,  buffer.length  -  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  random.nextInt(buffer,  0,  buffer.length  -  1);	  int    count    =    random.nextInt(buffer,    0,    count    -    1);    	non-compiled	[CE]  	77	None	replace
36	[BUG]  [BUGGY]  int  count  =  random.nextInt(buffer,  0,  count  -  1,  buffer.length);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(buffer,  0,  count  -  1,  buffer.length);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  random.nextInt(buffer,  0,  count  -  1,  buffer.length);	  int    count    =    random.nextInt(buffer,    0,    count    -    1);    	non-compiled	[CE]  	77	None	replace
37	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  count  +  1,  end);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  count  +  1,  end);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  count  +  1,  end);	  System.arraycopy(buffer,    0,    buffer,    0,    count    +    1);    	non-compiled	[CE]  	35	None	replace
38	[BUG]  [BUGGY]  int  gap  =  buffer.length  -  2;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  buffer.length  -  2;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  buffer.length  -  2;	  int    gap    =    buffer.length    -    1;    	non-compiled	[CE]  	10	None	replace
39	[BUG]  [BUGGY]  int  gap  =  end.length  -  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  end.length  -  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  end.length  -  1;	  int    gap    =    buffer.length    -    1;    	non-compiled	[CE]  	10	None	replace
40	[BUG]  [BUGGY]  int  gap  =  start  /  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  start  /  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  start  /  1;	  int    gap    =    end    /    1;    	non-compiled	[CE]  	83	None	replace
41	[BUG]  [BUGGY]  char[]  buffer  =  new  char[length  -  1];  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char[]  buffer  =  new  char[length  -  1];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	char[]  buffer  =  new  char[length  -  1];	  char[]    buffer    =    new    char[numbers    -    1];    	non-compiled	[CE]  	13	None	replace
42	[BUG]  [BUGGY]  int  count  =(numbers  &&  Character.isLetter(ch))?  buffer[0]  :  chars.length;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =(numbers  &&  Character.isLetter(ch))?  buffer[0]  :  chars.length;  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =(numbers  &&  Character.isLetter(ch))?  buffer[0]  :  chars.length;	  int    count    =(numbers    &&    Character.isDigit(ch))?    buffer[0]    :    chars.length;    	non-compiled	[CE]  	81	None	replace
43	[BUG]  [BUGGY]  int  count  =(numbers  &&  Character.isDigit(ch))?  buffer[1]  :  chars.length;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =(numbers  &&  Character.isDigit(ch))?  buffer[1]  :  chars.length;  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =(numbers  &&  Character.isDigit(ch))?  buffer[1]  :  chars.length;	  int    count    =(numbers    &&    Character.isDigit(ch))?    buffer[0]    :    chars.length;    	non-compiled	[CE]  	81	None	replace
44	[BUG]  [BUGGY]  int  count  =(numbers  ||  Character.isDigit(ch))?  buffer[0]  :  chars.length;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =(numbers  ||  Character.isDigit(ch))?  buffer[0]  :  chars.length;  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =(numbers  ||  Character.isDigit(ch))?  buffer[0]  :  chars.length;	  int    count    =(numbers    &&    Character.isDigit(ch))?    buffer[0]    :    chars.length;    	non-compiled	[CE]  	81	None	replace
45	[BUG]  [BUGGY]  int  gap  =  buffer.length  -  start;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  buffer.length  -  start;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  buffer.length  -  start;	  int    gap    =    start    -    buffer.length;    	non-compiled	[CE]  	9	None	replace
46	[BUG]  [BUGGY]  char[]  buffer  =  new  char[length  +  1];  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char[]  buffer  =  new  char[length  +  1];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	char[]  buffer  =  new  char[length  +  1];	  char[]    buffer    =    new    char[length];    	non-compiled	[CE]  	26	None	replace
47	[BUG]  [BUGGY]  char[]  buffer  =  new  char[count  /  2];  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char[]  buffer  =  new  char[count  /  2];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	char[]  buffer  =  new  char[count  /  2];	  char[]    buffer    =    new    char[count    -    2];    	non-compiled	[CE]  	14	None	replace
48	[BUG]  [BUGGY]  int  count  =  buffer.nextInt(chars);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  buffer.nextInt(chars);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  buffer.nextInt(chars);	  int    count    =    chars.nextInt(buffer);    	non-compiled	[CE]  	60	None	replace
49	[BUG]  [BUGGY]  int  count  =  buffer.nextInt(Character.toLowerCase(buffer));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  buffer.nextInt(Character.toLowerCase(buffer));  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  buffer.nextInt(Character.toLowerCase(buffer));	  int    count    =    chars.nextInt(buffer);    	non-compiled	[CE]  	60	None	replace
50	[BUG]  [BUGGY]  int  count  =  buffer.length  -  2;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  buffer.length  -  2;  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  buffer.length  -  2;	  int    count    =    buffer.length    -    1;    	non-compiled	[CE]  	85	None	replace
51	[BUG]  [BUGGY]  int  count  =  buffer.length  -  1  +  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  buffer.length  -  1  +  1;  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  buffer.length  -  1  +  1;	  int    count    =    buffer.length    -    1;    	non-compiled	[CE]  	85	None	replace
52	[BUG]  [BUGGY]  int  count  =  buffer.length  -  start;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  buffer.length  -  start;  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  buffer.length  -  start;	  int    count    =    buffer.length    -    1;    	non-compiled	[CE]  	85	None	replace
53	[BUG]  [BUGGY]  int  gap  =  start  /  end  +  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  start  /  end  +  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  start  /  end  +  1;	  int    gap    =    start    /    end;    	non-compiled	[CE]  	64	None	replace
54	[BUG]  [BUGGY]  int  gap  =  start  *  end;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  start  *  end;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  start  *  end;	  int    gap    =    start    /    end;    	non-compiled	[CE]  	64	None	replace
55	[BUG]  [BUGGY]  int  gap  =  start  -  buffer.length  +  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  start  -  buffer.length  +  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  start  -  buffer.length  +  1;	  int    gap    =    end    -    buffer.length    +    1;    	non-compiled	[CE]  	19	None	replace
56	[BUG]  [BUGGY]  int  gap  =  end  -  buffer.length  *  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  end  -  buffer.length  *  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  end  -  buffer.length  *  1;	  int    gap    =    end    -    buffer.length    +    1;    	non-compiled	[CE]  	19	None	replace
57	[BUG]  [BUGGY]  char[]  buffer  =  new  char[count  *  2];  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char[]  buffer  =  new  char[count  *  2];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	char[]  buffer  =  new  char[count  *  2];	  char[]    buffer    =    new    char[count    +    2];    	non-compiled	[CE]  	6	None	replace
58	[BUG]  [BUGGY]  Character  ch  =  buffer.nextInt(buff);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  buffer.nextInt(buff);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	Character  ch  =  buffer.nextInt(buff);	  Character    ch    =    random.random.nextInt(buff);    	non-compiled	[CE]  	62	None	replace
59	[BUG]  [BUGGY]  Character  ch  =  buffer.random.nextInt(buff);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  buffer.random.nextInt(buff);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	Character  ch  =  buffer.random.nextInt(buff);	  Character    ch    =    random.random.nextInt(buff);    	non-compiled	[CE]  	62	None	replace
60	[BUG]  [BUGGY]  Character  ch  =  buffer[random.nextInt(buff)];  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  buffer[random.nextInt(buff)];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	Character  ch  =  buffer[random.nextInt(buff)];	  Character    ch    =    random.random.nextInt(buff);    	non-compiled	[CE]  	62	None	replace
61	[BUG]  [BUGGY]  Character  ch  =  buffer[random.nextInt(buff);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  buffer[random.nextInt(buff);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	Character  ch  =  buffer[random.nextInt(buff);	  Character    ch    =    random.random.nextInt(buff);    	non-compiled	[CE]  	62	None	replace
62	[BUG]  [BUGGY]  char  count  =  chars.nextInt(buffer);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  count  =  chars.nextInt(buffer);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	char  count  =  chars.nextInt(buffer);	  int    count    =    chars.nextInt(gap);    	non-compiled	[CE]  	54	None	replace
63	[BUG]  [BUGGY]  int  count  =  chars.length()  +  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  chars.length()  +  1;  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  chars.length()  +  1;	  int    count    =    chars.length();    	non-compiled	[CE]  	23	None	replace
64	[BUG]  [BUGGY]  char  count  =  chars.length();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  count  =  chars.length();  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	char  count  =  chars.length();	  int    count    =    chars.length();    	non-compiled	[CE]  	23	None	replace
65	[BUG]  [BUGGY]  char[]  buffer  =  new  char[0];  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char[]  buffer  =  new  char[0];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	char[]  buffer  =  new  char[0];	  char[]    buffer    =    new    char[1];    	non-compiled	[CE]  	25	None	replace
66	[BUG]  [BUGGY]  int  count  =  random.nextInt(gap,  0,  start);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(gap,  0,  start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  random.nextInt(gap,  0,  start);	  int    count    =    random.nextInt(buffer,    0,    start);    	non-compiled	[CE]  	31	None	replace
67	[BUG]  [BUGGY]  int  count  =  random.nextInt(buffer,  0,  start  +  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(buffer,  0,  start  +  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  random.nextInt(buffer,  0,  start  +  1);	  int    count    =    random.nextInt(buffer,    0,    start);    	non-compiled	[CE]  	31	None	replace
68	[BUG]  [BUGGY]  int  gap  =  start  -  buffer.length  -  1;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  start  -  buffer.length  -  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  start  -  buffer.length  -  1;	  int    gap    =    end    -    buffer.length    -    1;    	non-compiled	[CE]  	7	None	replace
69	[BUG]  [BUGGY]  int  gap  =  end  -  buffer.length  -  2;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  end  -  buffer.length  -  2;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  end  -  buffer.length  -  2;	  int    gap    =    end    -    buffer.length    -    1;    	non-compiled	[CE]  	7	None	replace
70	[BUG]  [BUGGY]  int  gap  =  buffer.length  -  end  -  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  buffer.length  -  end  -  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  buffer.length  -  end  -  1;	  int    gap    =    end    -    buffer.length    -    1;    	non-compiled	[CE]  	7	None	replace
71	[BUG]  [BUGGY]  int  gap  =  end  /  2  +  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  end  /  2  +  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  end  /  2  +  1;	  int    gap    =    end    /    2;    	non-compiled	[CE]  	38	None	replace
72	[BUG]  [BUGGY]  int  count  =  buffer.length()  -  start  +  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  buffer.length()  -  start  +  1;  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  buffer.length()  -  start  +  1;	  int    count    =    buffer.length()    -    start;    	non-compiled	[CE]  	65	None	replace
73	[BUG]  [BUGGY]  int  count  =  random.nextInt(buffer,  start,  end  +  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(buffer,  start,  end  +  1);  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  random.nextInt(buffer,  start,  end  +  1);	  int    count    =    random.nextInt(buffer,    start,    end);    	non-compiled	[CE]  	67	None	replace
74	[BUG]  [BUGGY]  int  count  =  random.nextInt(buffer,  start,  end,  letters);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(buffer,  start,  end,  letters);  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  random.nextInt(buffer,  start,  end,  letters);	  int    count    =    random.nextInt(buffer,    start,    end);    	non-compiled	[CE]  	67	None	replace
75	[BUG]  [BUGGY]  int  count  =  random.nextInt(buffer,  start,  end,  0);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(buffer,  start,  end,  0);  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  random.nextInt(buffer,  start,  end,  0);	  int    count    =    random.nextInt(buffer,    start,    end);    	non-compiled	[CE]  	67	None	replace
76	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  end  -  1);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  end  -  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  end  -  1);	  System.arraycopy(buffer,    0,    buffer,    0,    count    -    1);    	non-compiled	[CE]  	34	None	replace
77	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  count  -  1,  count);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  count  -  1,  count);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  count  -  1,  count);	  System.arraycopy(buffer,    0,    buffer,    0,    count    -    1);    	non-compiled	[CE]  	34	None	replace
78	[BUG]  [BUGGY]  char  count  =  chars.nextInt(buffer,  start);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  count  =  chars.nextInt(buffer,  start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	char  count  =  chars.nextInt(buffer,  start);	  int    count    =    chars.nextInt(start);    	non-compiled	[CE]  	75	None	replace
79	[BUG]  [BUGGY]  int  gap  =  end  -  random.nextInt(gap)+  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  end  -  random.nextInt(gap)+  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  end  -  random.nextInt(gap)+  1;	  int    gap    =    end    -    random.nextInt(gap)+    start    +    1;    	non-compiled	[CE]  	73	None	replace
80	[BUG]  [BUGGY]  int  gap  =  end  -  random.nextInt(gap)+  buffer.length  +  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  end  -  random.nextInt(gap)+  buffer.length  +  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  end  -  random.nextInt(gap)+  buffer.length  +  1;	  int    gap    =    end    -    random.nextInt(gap)+    start    +    1;    	non-compiled	[CE]  	73	None	replace
81	[BUG]  [BUGGY]  int  gap  =  end  -  random.nextInt(gap)+  start;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  end  -  random.nextInt(gap)+  start;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  end  -  random.nextInt(gap)+  start;	  int    gap    =    end    -    random.nextInt(gap)+    start    +    1;    	non-compiled	[CE]  	73	None	replace
82	[BUG]  [BUGGY]  int  count  =  buffer.nextInt(start);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  buffer.nextInt(start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  buffer.nextInt(start);	  int    count    =    buffer.nextInt(count);    	non-compiled	[CE]  	51	None	replace
83	[BUG]  [BUGGY]  int  count  =  buffer.nextInt(end);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  buffer.nextInt(end);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  buffer.nextInt(end);	  int    count    =    buffer.nextInt(count);    	non-compiled	[CE]  	51	None	replace
84	[BUG]  [BUGGY]  int  count  =  random.nextInt(count);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(count);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  random.nextInt(count);	  int    count    =    buffer.nextInt(count);    	non-compiled	[CE]  	51	None	replace
85	[BUG]  [BUGGY]  int  gap  =  end  /  4  +  1;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  end  /  4  +  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  end  /  4  +  1;	  int    gap    =    end    /    4;    	non-compiled	[CE]  	32	None	replace
86	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer  -  start  +  1];  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char[]  buffer  =  new  char[buffer  -  start  +  1];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	char[]  buffer  =  new  char[buffer  -  start  +  1];	  char[]    buffer    =    new    char[buffer    -    start];    	non-compiled	[CE]  	70	None	replace
87	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer  -  1];  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char[]  buffer  =  new  char[buffer  -  1];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	char[]  buffer  =  new  char[buffer  -  1];	  char[]    buffer    =    new    char[buffer    -    start];    	non-compiled	[CE]  	70	None	replace
88	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer  -  end];  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char[]  buffer  =  new  char[buffer  -  end];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	char[]  buffer  =  new  char[buffer  -  end];	  char[]    buffer    =    new    char[buffer    -    start];    	non-compiled	[CE]  	70	None	replace
89	[BUG]  [BUGGY]  int  count  =  random.nextInt(buffer,  0,  buffer.length  +  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(buffer,  0,  buffer.length  +  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  random.nextInt(buffer,  0,  buffer.length  +  1);	  int    count    =    random.nextInt(buffer,    0,    buffer.length);    	non-compiled	[CE]  	28	None	replace
90	[BUG]  [BUGGY]  int  count  =  random.nextInt(buffer,  0,  buffer.length  -  start);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(buffer,  0,  buffer.length  -  start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  random.nextInt(buffer,  0,  buffer.length  -  start);	  int    count    =    random.nextInt(buffer,    0,    buffer.length);    	non-compiled	[CE]  	28	None	replace
91	[BUG]  [BUGGY]  int  count  =  buffer.nextInt(RANDOM);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  buffer.nextInt(RANDOM);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  buffer.nextInt(RANDOM);	  int    count    =    RANDOM.nextInt(buffer);    	non-compiled	[CE]  	59	None	replace
92	[BUG]  [BUGGY]  int  count  =  buffer.nextInt(random.nextInt(buffer));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  buffer.nextInt(random.nextInt(buffer));  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  buffer.nextInt(random.nextInt(buffer));	  int    count    =    RANDOM.nextInt(buffer);    	non-compiled	[CE]  	59	None	replace
93	[BUG]  [BUGGY]  int  count  =  RANDOM.nextInt(buffer,  start);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  RANDOM.nextInt(buffer,  start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  RANDOM.nextInt(buffer,  start);	  int    count    =    RANDOM.nextInt(buffer);    	non-compiled	[CE]  	59	None	replace
94	[BUG]  [BUGGY]  Character  ch  =  random.random.nextInt(buffer,  start  +  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  random.random.nextInt(buffer,  start  +  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	Character  ch  =  random.random.nextInt(buffer,  start  +  1);	  Character    ch    =    random.random.nextInt(start    +    1);    	non-compiled	[CE]  	80	None	replace
95	[BUG]  [BUGGY]  Character  ch  =  random.random.nextInt(start,  end  +  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  random.random.nextInt(start,  end  +  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	Character  ch  =  random.random.nextInt(start,  end  +  1);	  Character    ch    =    random.random.nextInt(start    +    1);    	non-compiled	[CE]  	80	None	replace
96	[BUG]  [BUGGY]  Character  ch  =  random.random.nextInt(gap  +  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  random.random.nextInt(gap  +  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	Character  ch  =  random.random.nextInt(gap  +  1);	  Character    ch    =    random.random.nextInt(start    +    1);    	non-compiled	[CE]  	80	None	replace
97	[BUG]  [BUGGY]  Character  ch  =  random.random.nextInt(buffer,  0,  start);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  random.random.nextInt(buffer,  0,  start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	Character  ch  =  random.random.nextInt(buffer,  0,  start);	  Character    ch    =    random.random.nextInt(buffer,    start);    	non-compiled	[CE]  	44	None	replace
98	[BUG]  [BUGGY]  Character  ch  =  random.random.nextInt(buffer,  end);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  random.random.nextInt(buffer,  end);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	Character  ch  =  random.random.nextInt(buffer,  end);	  Character    ch    =    random.random.nextInt(buffer,    start);    	non-compiled	[CE]  	44	None	replace
99	[BUG]  [BUGGY]  Character  ch  =  random.random.nextInt(buffer,  0,  end);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  random.random.nextInt(buffer,  0,  end);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	Character  ch  =  random.random.nextInt(buffer,  0,  end);	  Character    ch    =    random.random.nextInt(buffer,    start);    	non-compiled	[CE]  	44	None	replace
100	[BUG]  [BUGGY]  char[]  buffer  =  new  char[length  -  start  +  1];  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char[]  buffer  =  new  char[length  -  start  +  1];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	char[]  buffer  =  new  char[length  -  start  +  1];	  char[]    buffer    =    new    char[length    -    start];    	non-compiled	[CE]  	3	None	replace
101	[BUG]  [BUGGY]  int  count  =  buffer.nextInt(peek);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  buffer.nextInt(peek);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  buffer.nextInt(peek);	  int    count    =    random.nextInt(peek);    	non-compiled	[CE]  	68	None	replace
102	[BUG]  [BUGGY]  int  count  =  chars.nextInt(peek);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  chars.nextInt(peek);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  chars.nextInt(peek);	  int    count    =    random.nextInt(peek);    	non-compiled	[CE]  	68	None	replace
103	[BUG]  [BUGGY]  int  gap  =  start  -  count  +  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  start  -  count  +  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  start  -  count  +  1;	  int    gap    =    end    -    count    +    1;    	non-compiled	[CE]  	20	None	replace
104	[BUG]  [BUGGY]  int  count  =  random.nextInt(buffer,  start  +  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(buffer,  start  +  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  random.nextInt(buffer,  start  +  1);	  int    count    =    random.nextInt(buffer,    start);    	non-compiled	[CE]  	16	None	replace
105	[BUG]  [BUGGY]  char[]  buffer  =  new  char[len  -  start];  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char[]  buffer  =  new  char[len  -  start];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	char[]  buffer  =  new  char[len  -  start];	  char[]    buffer    =    new    char[end    -    start];    	non-compiled	[CE]  	1	None	replace
106	[BUG]  [BUGGY]  int  count  =  buffer.length  +  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  buffer.length  +  1;  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  buffer.length  +  1;	  int    count    =    chars.length    +    1;    	non-compiled	[CE]  	56	None	replace
107	[BUG]  [BUGGY]  int  count  =  chars.length  /  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  chars.length  /  1;  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  chars.length  /  1;	  int    count    =    chars.length    +    1;    	non-compiled	[CE]  	56	None	replace
108	[BUG]  [BUGGY]  int  count  =(numbers  &&  Character.isDigit(ch)||(numbers  &&  Character.isDigit(ch)));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =(numbers  &&  Character.isDigit(ch)||(numbers  &&  Character.isDigit(ch)));  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =(numbers  &&  Character.isDigit(ch)||(numbers  &&  Character.isDigit(ch)));	  int    count    =    0;    	non-compiled	[CE]  	40	None	replace
109	[BUG]  [BUGGY]  int  count  =(numbers  &&  Character.isDigit(ch)||(numbers  &&  Character.isLetter(ch)));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =(numbers  &&  Character.isDigit(ch)||(numbers  &&  Character.isLetter(ch)));  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =(numbers  &&  Character.isDigit(ch)||(numbers  &&  Character.isLetter(ch)));	  int    count    =    0;    	non-compiled	[CE]  	40	None	replace
110	[BUG]  [BUGGY]  int  count  =(numbers  &&  RandomStringUtils.isEmpty(buffer,  0,  end))?  0  :  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =(numbers  &&  RandomStringUtils.isEmpty(buffer,  0,  end))?  0  :  1;  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =(numbers  &&  RandomStringUtils.isEmpty(buffer,  0,  end))?  0  :  1;	  int    count    =    0;    	non-compiled	[CE]  	40	None	replace
111	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer  +  2];  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char[]  buffer  =  new  char[buffer  +  2];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	char[]  buffer  =  new  char[buffer  +  2];	  char[]    buffer    =    new    char[buffer    +    1];    	non-compiled	[CE]  	52	None	replace
112	[BUG]  [BUGGY]  int  count  =  random.nextInt(gap,  end);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(gap,  end);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  random.nextInt(gap,  end);	  int    count    =    random.nextInt(gap,    start);    	non-compiled	[CE]  	17	None	replace
113	[BUG]  [BUGGY]  int  count  =  random.nextInt(gap,  start  +  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(gap,  start  +  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  random.nextInt(gap,  start  +  1);	  int    count    =    random.nextInt(gap,    start);    	non-compiled	[CE]  	17	None	replace
114	[BUG]  [BUGGY]  int  count  =  random.nextInt(buff,  start);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(buff,  start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  random.nextInt(buff,  start);	  int    count    =    random.nextInt(gap,    start);    	non-compiled	[CE]  	17	None	replace
115	[BUG]  [BUGGY]  int  count  =  random.nextInt(buffer,  1,  buffer.length);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(buffer,  1,  buffer.length);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  random.nextInt(buffer,  1,  buffer.length);	  int    count    =    random.nextInt(buffer,    1,    count);    	non-compiled	[CE]  	30	None	replace
116	[BUG]  [BUGGY]  int  count  =  random.nextInt(buffer,  1,  end);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(buffer,  1,  end);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  random.nextInt(buffer,  1,  end);	  int    count    =    random.nextInt(buffer,    1,    count);    	non-compiled	[CE]  	30	None	replace
117	[BUG]  [BUGGY]  int  count  =  random.nextInt(buffer,  2,  count);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(buffer,  2,  count);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  random.nextInt(buffer,  2,  count);	  int    count    =    random.nextInt(buffer,    1,    count);    	non-compiled	[CE]  	30	None	replace
118	[BUG]  [BUGGY]  int  gap  =  end  /  buffer.length  +  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  end  /  buffer.length  +  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  end  /  buffer.length  +  1;	  int    gap    =    end    /    buffer.length;    	non-compiled	[CE]  	37	None	replace
119	[BUG]  [BUGGY]  int  gap  =  end  /  buffer.length  -  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  end  /  buffer.length  -  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  end  /  buffer.length  -  1;	  int    gap    =    end    /    buffer.length;    	non-compiled	[CE]  	37	None	replace
120	[BUG]  [BUGGY]  int  gap  =  start  /  buffer.length;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  start  /  buffer.length;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  start  /  buffer.length;	  int    gap    =    end    /    buffer.length;    	non-compiled	[CE]  	37	None	replace
121	[BUG]  [BUGGY]  int  gap  =  end  *  buffer.length;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  end  *  buffer.length;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  end  *  buffer.length;	  int    gap    =    end    /    buffer.length;    	non-compiled	[CE]  	37	None	replace
122	[BUG]  [BUGGY]  int  count  =  buffer[0].length();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  buffer[0].length();  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  buffer[0].length();	  int    count    =    buffer.length()    +    1;    	non-compiled	[CE]  	22	None	replace
123	[BUG]  [BUGGY]  int  gap  =  buffer.length  -  end  +  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  buffer.length  -  end  +  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  buffer.length  -  end  +  1;	  int    gap    =    start    -    end    +    1;    	non-compiled	[CE]  	72	None	replace
124	[BUG]  [BUGGY]  int  count  =  RANDOM.nextInt(buffer,  end);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  RANDOM.nextInt(buffer,  end);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  RANDOM.nextInt(buffer,  end);	  int    count    =    RANDOM.nextInt(gap);    	non-compiled	[CE]  	55	None	replace
125	[BUG]  [BUGGY]  Character  ch  =  buffer.nextInt(gap);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  buffer.nextInt(gap);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	Character  ch  =  buffer.nextInt(gap);	  Character    ch    =    random.random.nextInt(gap);    	non-compiled	[CE]  	43	None	replace
126	[BUG]  [BUGGY]  Character  ch  =  buffer[random.nextInt(gap)];  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  buffer[random.nextInt(gap)];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	Character  ch  =  buffer[random.nextInt(gap)];	  Character    ch    =    random.random.nextInt(gap);    	non-compiled	[CE]  	43	None	replace
127	[BUG]  [BUGGY]  Character  ch  =  buffer.random.nextInt(gap);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  buffer.random.nextInt(gap);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	Character  ch  =  buffer.random.nextInt(gap);	  Character    ch    =    random.random.nextInt(gap);    	non-compiled	[CE]  	43	None	replace
128	[BUG]  [BUGGY]  char  ch  =  random.random.nextInt(gap);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  ch  =  random.random.nextInt(gap);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	char  ch  =  random.random.nextInt(gap);	  Character    ch    =    random.random.nextInt(gap);    	non-compiled	[CE]  	43	None	replace
129	[BUG]  [BUGGY]  int  gap  =  start  +  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  start  +  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  start  +  1;	  int    gap    =    end    +    1;    	non-compiled	[CE]  	11	None	replace
130	[BUG]  [BUGGY]  int  gap  =  end.length  -  buffer.length;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  end.length  -  buffer.length;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  end.length  -  buffer.length;	  int    gap    =    buffer.length    -    end;    	non-compiled	[CE]  	66	None	replace
131	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  end  +  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  end  +  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  end  +  1);	  System.arraycopy(buffer,    0,    buffer,    0,    end);    	non-compiled	[CE]  	36	None	replace
132	[BUG]  [BUGGY]  int  count  =  buffer[count.length()  ];  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  buffer[count.length()  ];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  buffer[count.length()  ];	  int    count    =    buffer.length()    -    1;    	non-compiled	[CE]  	21	None	replace
133	[BUG]  [BUGGY]  int  count  =  this.random.nextInt(gap);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  this.random.nextInt(gap);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  this.random.nextInt(gap);	  int    count    =    this.random.nextInt(start);    	non-compiled	[CE]  	76	None	replace
134	[BUG]  [BUGGY]  int  count  =  chars[random.nextInt(start)];  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  chars[random.nextInt(start)];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  chars[random.nextInt(start)];	  int    count    =    this.random.nextInt(start);    	non-compiled	[CE]  	76	None	replace
135	[BUG]  [BUGGY]  int  count  =  this.random.nextInt(gap,  start);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  this.random.nextInt(gap,  start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  this.random.nextInt(gap,  start);	  int    count    =    this.random.nextInt(start);    	non-compiled	[CE]  	76	None	replace
136	[BUG]  [BUGGY]  char  count  =  random.nextInt(buffer,  0,  0);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  count  =  random.nextInt(buffer,  0,  0);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	char  count  =  random.nextInt(buffer,  0,  0);	  int    count    =    random.nextInt(buffer,    0,    0);    	non-compiled	[CE]  	58	None	replace
137	[BUG]  [BUGGY]  int  gap  =  chars.length  -  1;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  chars.length  -  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  chars.length  -  1;	  int    gap    =    last.length    -    1;    	non-compiled	[CE]  	82	None	replace
138	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer.length  -  2];  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char[]  buffer  =  new  char[buffer.length  -  2];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	char[]  buffer  =  new  char[buffer.length  -  2];	  char[]    buffer    =    new    char[buffer.length    -    1];    	non-compiled	[CE]  	15	None	replace
139	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer.length  -  1  +  1];  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char[]  buffer  =  new  char[buffer.length  -  1  +  1];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	char[]  buffer  =  new  char[buffer.length  -  1  +  1];	  char[]    buffer    =    new    char[buffer.length    -    1];    	non-compiled	[CE]  	15	None	replace
140	[BUG]  [BUGGY]  int  gap  =  end  -  start.length  -  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  end  -  start.length  -  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  end  -  start.length  -  1;	  int    gap    =    end    -    start.length;    	non-compiled	[CE]  	8	None	replace
141	[BUG]  [BUGGY]  int  gap  =  end  -  start.length  +  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  end  -  start.length  +  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  end  -  start.length  +  1;	  int    gap    =    end    -    start.length;    	non-compiled	[CE]  	8	None	replace
142	[BUG]  [BUGGY]  Character  ch  =  buffer.nextInt(end);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  buffer.nextInt(end);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	Character  ch  =  buffer.nextInt(end);	  Character    ch    =    buffer.nextInt(start);    	non-compiled	[CE]  	45	None	replace
143	[BUG]  [BUGGY]  Character  ch  =  buffer.nextChar(start);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  buffer.nextChar(start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	Character  ch  =  buffer.nextChar(start);	  Character    ch    =    buffer.nextInt(start);    	non-compiled	[CE]  	45	None	replace
144	[BUG]  [BUGGY]  Character  ch  =  buffer.nextChar(end);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  buffer.nextChar(end);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	Character  ch  =  buffer.nextChar(end);	  Character    ch    =    buffer.nextInt(start);    	non-compiled	[CE]  	45	None	replace
145	[BUG]  [BUGGY]  Character  ch  =  buffer.nextInt(start  +  1);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  buffer.nextInt(start  +  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	Character  ch  =  buffer.nextInt(start  +  1);	  Character    ch    =    buffer.nextInt(start);    	non-compiled	[CE]  	45	None	replace
146	[BUG]  [BUGGY]  int  count  =  random.nextInt(buffer,  0,  count  -  1  +  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(buffer,  0,  count  -  1  +  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  random.nextInt(buffer,  0,  count  -  1  +  1);	  int    count    =    random.nextInt(buffer,    0,    count    -    1);    	non-compiled	[CE]  	77	None	replace
147	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer.length  -  start  +  1];  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char[]  buffer  =  new  char[buffer.length  -  start  +  1];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	char[]  buffer  =  new  char[buffer.length  -  start  +  1];	  char[]    buffer    =    new    char[count    -    start    +    1];    	non-compiled	[CE]  	69	None	replace
148	[BUG]  [BUGGY]  int  gap  =  numbers  -  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  numbers  -  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  numbers  -  1;	  int    gap    =    start    -    1;    	non-compiled	[CE]  	12	None	replace
149	[BUG]  [BUGGY]  int  count  =  this.chars.length();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  this.chars.length();  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  this.chars.length();	  int    count    =    chars.length();    	non-compiled	[CE]  	23	None	replace
150	[BUG]  [BUGGY]  int  count  =  buffer.length  -  1  +  start;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  buffer.length  -  1  +  start;  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  buffer.length  -  1  +  start;	  int    count    =    buffer.length    -    1;    	non-compiled	[CE]  	85	None	replace
151	[BUG]  [BUGGY]  Character  ch  =  random.random.nextInt(buffer,  0,  count);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  random.random.nextInt(buffer,  0,  count);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	Character  ch  =  random.random.nextInt(buffer,  0,  count);	  Character    ch    =    random.random.nextInt(buff);    	non-compiled	[CE]  	62	None	replace
152	[BUG]  [BUGGY]  int  gap  =  end  *  count  +  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  end  *  count  +  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  end  *  count  +  1;	  int    gap    =    end    -    count    +    1;    	non-compiled	[CE]  	20	None	replace
153	[BUG]  [BUGGY]  int  count  =  random.nextInt(buffer,  0,  end  -  start);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(buffer,  0,  end  -  start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  random.nextInt(buffer,  0,  end  -  start);	  int    count    =    random.nextInt(buffer,    0,    end);    	non-compiled	[CE]  	29	None	replace
154	[BUG]  [BUGGY]  char[]  buffer  =  new  char[start  +  2];  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char[]  buffer  =  new  char[start  +  2];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	char[]  buffer  =  new  char[start  +  2];	  char[]    buffer    =    new    char[count    +    2];    	non-compiled	[CE]  	6	None	replace
155	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  start);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  start);	  System.arraycopy(buffer,    0,    buffer,    0,    end);    	non-compiled	[CE]  	36	None	replace
156	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end);	  System.arraycopy(buffer,    0,    buffer,    0,    end);    	non-compiled	[CE]  	36	None	replace
157	[BUG]  [BUGGY]  int  count  =  chars.nextInt(count);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  chars.nextInt(count);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  chars.nextInt(count);	  int    count    =    buffer.nextInt(count);    	non-compiled	[CE]  	51	None	replace
158	[BUG]  [BUGGY]  int  count  =  random.nextInt(buffer,  1,  count  -  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(buffer,  1,  count  -  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  random.nextInt(buffer,  1,  count  -  1);	  int    count    =    random.nextInt(buffer,    1,    count);    	non-compiled	[CE]  	30	None	replace
159	[BUG]  [BUGGY]  int  count  =  random.nextInt(buffer,  1,  count  +  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(buffer,  1,  count  +  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  random.nextInt(buffer,  1,  count  +  1);	  int    count    =    random.nextInt(buffer,    1,    count);    	non-compiled	[CE]  	30	None	replace
160	[BUG]  [BUGGY]  Integer  count  =  buffer.length();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Integer  count  =  buffer.length();  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	Integer  count  =  buffer.length();	  int    count    =    buffer.length()    -    1;    	non-compiled	[CE]  	21	None	replace
161	[BUG]  [BUGGY]  char  count  =  buffer.length();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  count  =  buffer.length();  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	char  count  =  buffer.length();	  int    count    =    buffer.length()    -    1;    	non-compiled	[CE]  	21	None	replace
162	[BUG]  [BUGGY]  int  count  =  random.nextInt(buffer,  start,  end  -  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(buffer,  start,  end  -  1);  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  random.nextInt(buffer,  start,  end  -  1);	  int    count    =    random.nextInt(buffer,    start,    end);    	non-compiled	[CE]  	67	None	replace
163	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer  *  1];  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char[]  buffer  =  new  char[buffer  *  1];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	char[]  buffer  =  new  char[buffer  *  1];	  char[]    buffer    =    new    char[buffer    +    1];    	non-compiled	[CE]  	52	None	replace
164	[BUG]  [BUGGY]  int  gap  =  buffer.length  -  1  +  1;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  buffer.length  -  1  +  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  buffer.length  -  1  +  1;	  int    gap    =    buffer.length    -    1;    	non-compiled	[CE]  	10	None	replace
165	[BUG]  [BUGGY]  int  gap  =  buffer.length  /  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  buffer.length  /  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  buffer.length  /  1;	  int    gap    =    buffer.length    -    1;    	non-compiled	[CE]  	10	None	replace
166	[BUG]  [BUGGY]  int  gap  =  buffer.length  /  end;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  buffer.length  /  end;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  buffer.length  /  end;	  int    gap    =    start    /    end;    	non-compiled	[CE]  	64	None	replace
167	[BUG]  [BUGGY]  int  gap  =  0  /  end;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  0  /  end;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  0  /  end;	  int    gap    =    start    /    end;    	non-compiled	[CE]  	64	None	replace
168	[BUG]  [BUGGY]  char[]  buffer  =  new  char[start  -  1];  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char[]  buffer  =  new  char[start  -  1];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	char[]  buffer  =  new  char[start  -  1];	  char[]    buffer    =    new    char[end    -    1];    	non-compiled	[CE]  	57	None	replace
169	[BUG]  [BUGGY]  int  gap  =  start  /  2;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  start  /  2;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  start  /  2;	  int    gap    =    end    /    2;    	non-compiled	[CE]  	38	None	replace
170	[BUG]  [BUGGY]  int  count  =  RANDOM.nextInt(buffer,  0,  count);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  RANDOM.nextInt(buffer,  0,  count);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  RANDOM.nextInt(buffer,  0,  count);	  int    count    =    RANDOM.nextInt(buffer);    	non-compiled	[CE]  	59	None	replace
171	[BUG]  [BUGGY]  int  count  =  random.nextInt(buffer,  0);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(buffer,  0);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  random.nextInt(buffer,  0);	  int    count    =    random.nextInt(buffer,    1);    	non-compiled	[CE]  	50	None	replace
172	[BUG]  [BUGGY]  Character  ch  =  random.random.nextInt(buffer[start  +  1]);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  random.random.nextInt(buffer[start  +  1]);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	Character  ch  =  random.random.nextInt(buffer[start  +  1]);	  Character    ch    =    random.random.nextInt(start    +    1);    	non-compiled	[CE]  	80	None	replace
173	[BUG]  [BUGGY]  Character  ch  =  random.random.nextInt(buffer  +  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  random.random.nextInt(buffer  +  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	Character  ch  =  random.random.nextInt(buffer  +  1);	  Character    ch    =    random.random.nextInt(start    +    1);    	non-compiled	[CE]  	80	None	replace
174	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  count  -  start  -  1);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  count  -  start  -  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  count  -  start  -  1);	  System.arraycopy(buffer,    0,    buffer,    0,    count    -    start);    	non-compiled	[CE]  	71	None	replace
175	[BUG]  [BUGGY]  int  count  =  random.nextInt(peek  +  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(peek  +  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  random.nextInt(peek  +  1);	  int    count    =    random.nextInt(peek);    	non-compiled	[CE]  	68	None	replace
176	[BUG]  [BUGGY]  char  count  =(numbers  &&  RandomStringUtils.isEmpty(buffer))?  0  :  chars.length;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  count  =(numbers  &&  RandomStringUtils.isEmpty(buffer))?  0  :  chars.length;  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	char  count  =(numbers  &&  RandomStringUtils.isEmpty(buffer))?  0  :  chars.length;	  char    count    =    chars.length;    	non-compiled	[CE]  	42	None	replace
177	[BUG]  [BUGGY]  char  count  =(numbers  &&  random.nextInt(start)  ==  0)?  0  :  chars.length;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  count  =(numbers  &&  random.nextInt(start)  ==  0)?  0  :  chars.length;  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	char  count  =(numbers  &&  random.nextInt(start)  ==  0)?  0  :  chars.length;	  char    count    =    chars.length;    	non-compiled	[CE]  	42	None	replace
178	[BUG]  [BUGGY]  int  gap  =  0  -  buffer.length;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  0  -  buffer.length;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  0  -  buffer.length;	  int    gap    =    start    -    buffer.length;    	non-compiled	[CE]  	9	None	replace
179	[BUG]  [BUGGY]  int  gap  =  start  -  end.length;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  start  -  end.length;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  start  -  end.length;	  int    gap    =    end    -    start.length;    	non-compiled	[CE]  	8	None	replace
180	[BUG]  [BUGGY]  int  count  =  random.nextInt(buffer,  0,  start  -  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(buffer,  0,  start  -  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  random.nextInt(buffer,  0,  start  -  1);	  int    count    =    random.nextInt(buffer,    0,    start);    	non-compiled	[CE]  	31	None	replace
181	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  count  +  1,  start);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  count  +  1,  start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  count  +  1,  start);	  System.arraycopy(buffer,    0,    buffer,    0,    count    +    1);    	non-compiled	[CE]  	35	None	replace
182	[BUG]  [BUGGY]  char  count  =  random.nextInt(buffer);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  count  =  random.nextInt(buffer);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	char  count  =  random.nextInt(buffer);	  char    count    =    random.nextInt(gap);    	non-compiled	[CE]  	49	None	replace
183	[BUG]  [BUGGY]  char  count  =  random.nextInt(start);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  count  =  random.nextInt(start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	char  count  =  random.nextInt(start);	  char    count    =    random.nextInt(gap);    	non-compiled	[CE]  	49	None	replace
184	[BUG]  [BUGGY]  Character  ch  =  random.nextChar(buffer,  start);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  random.nextChar(buffer,  start);  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	Character  ch  =  random.nextChar(buffer,  start);	  Character    ch    =    random.nextChar(gap);    	non-compiled	[CE]  	79	None	replace
185	[BUG]  [BUGGY]  Character  ch  =  random.nextChar(buffer,  0,  count);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  random.nextChar(buffer,  0,  count);  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	Character  ch  =  random.nextChar(buffer,  0,  count);	  Character    ch    =    random.nextChar(gap);    	non-compiled	[CE]  	79	None	replace
186	[BUG]  [BUGGY]  int  gap  =  end  -  buffer.length  /  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  end  -  buffer.length  /  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  end  -  buffer.length  /  1;	  int    gap    =    end    -    buffer.length    +    1;    	non-compiled	[CE]  	19	None	replace
187	[BUG]  [BUGGY]  int  gap  =  end  -  buffer.length  -  1  +  1;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  end  -  buffer.length  -  1  +  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  end  -  buffer.length  -  1  +  1;	  int    gap    =    end    -    buffer.length    -    1;    	non-compiled	[CE]  	7	None	replace
188	[BUG]  [BUGGY]  int  count  =(numbers  &&  RandomStringUtils.isEmpty(buffer))?  0  :  buffer[count];  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =(numbers  &&  RandomStringUtils.isEmpty(buffer))?  0  :  buffer[count];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =(numbers  &&  RandomStringUtils.isEmpty(buffer))?  0  :  buffer[count];	  int    count    =    0;    	non-compiled	[CE]  	40	None	replace
189	[BUG]  [BUGGY]  int  count  =(numbers  &&  RandomStringUtils.isEmpty(buffer))?  1  :  0;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =(numbers  &&  RandomStringUtils.isEmpty(buffer))?  1  :  0;  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =(numbers  &&  RandomStringUtils.isEmpty(buffer))?  1  :  0;	  int    count    =    0;    	non-compiled	[CE]  	40	None	replace
190	[BUG]  [BUGGY]  int  count  =(numbers  &&  RandomStringUtils.isEmpty(buffer))?  0  :  0;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =(numbers  &&  RandomStringUtils.isEmpty(buffer))?  0  :  0;  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =(numbers  &&  RandomStringUtils.isEmpty(buffer))?  0  :  0;	  int    count    =    0;    	non-compiled	[CE]  	40	None	replace
191	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  count  -  1,  start);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  count  -  1,  start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  count  -  1,  start);	  System.arraycopy(buffer,    0,    buffer,    0,    count    -    1);    	non-compiled	[CE]  	34	None	replace
192	[BUG]  [BUGGY]  char[]  buffer  =  new  char[128];  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char[]  buffer  =  new  char[128];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	char[]  buffer  =  new  char[128];	  char[]    buffer    =    new    char[1];    	non-compiled	[CE]  	25	None	replace
193	[BUG]  [BUGGY]  char[]  buffer  =  new  char[2];  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char[]  buffer  =  new  char[2];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	char[]  buffer  =  new  char[2];	  char[]    buffer    =    new    char[1];    	non-compiled	[CE]  	25	None	replace
194	[BUG]  [BUGGY]  int  count  =  this.random.nextInt(buffer,  start);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  this.random.nextInt(buffer,  start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  this.random.nextInt(buffer,  start);	  int    count    =    this.random.nextInt(start);    	non-compiled	[CE]  	76	None	replace
195	[BUG]  [BUGGY]  Character  ch  =  random.random.nextInt(buffer,  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  random.random.nextInt(buffer,  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	Character  ch  =  random.random.nextInt(buffer,  1);	  Character    ch    =    random.random.nextInt(buffer);    	non-compiled	[CE]  	46	None	replace
196	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer.length  *  1];  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char[]  buffer  =  new  char[buffer.length  *  1];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	char[]  buffer  =  new  char[buffer.length  *  1];	  char[]    buffer    =    new    char[buffer.length    +    1];    	non-compiled	[CE]  	84	None	replace
197	[BUG]  [BUGGY]  int  count  =  chars.nextInt(buffer,  start);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  chars.nextInt(buffer,  start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  chars.nextInt(buffer,  start);	  int    count    =    chars.nextInt(buffer);    	non-compiled	[CE]  	60	None	replace
198	[BUG]  [BUGGY]  int  gap  =  start  -  2;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  start  -  2;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  start  -  2;	  int    gap    =    end    -    2;    	non-compiled	[CE]  	33	None	replace
199	[BUG]  [BUGGY]  int  count  =  chars.indexOf(buffer,  start);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  chars.indexOf(buffer,  start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  chars.indexOf(buffer,  start);	  int    count    =    chars.nextInt(start);    	non-compiled	[CE]  	75	None	replace
200	[BUG]  [BUGGY]  Character  ch  =  random.nextInt(buffer);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  random.nextInt(buffer);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	Character  ch  =  random.nextInt(buffer);	  Character    ch    =    buffer.nextInt(start);    	non-compiled	[CE]  	45	None	replace
201	[BUG]  [BUGGY]  Character  ch  =  random.nextInt(buffer,  start);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  random.nextInt(buffer,  start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	Character  ch  =  random.nextInt(buffer,  start);	  Character    ch    =    buffer.nextInt(start);    	non-compiled	[CE]  	45	None	replace
202	[BUG]  [BUGGY]  Character  ch  =  random.random.nextInt(start  +  1,  count);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  random.random.nextInt(start  +  1,  count);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	Character  ch  =  random.random.nextInt(start  +  1,  count);	  Character    ch    =    random.random.nextInt(start    +    1);    	non-compiled	[CE]  	80	None	replace
203	[BUG]  [BUGGY]  int  count  =  random.nextInt(buffer,  0,  count  -  1,  letters);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(buffer,  0,  count  -  1,  letters);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  random.nextInt(buffer,  0,  count  -  1,  letters);	  int    count    =    random.nextInt(buffer,    0,    count    -    1);    	non-compiled	[CE]  	77	None	replace
204	[BUG]  [BUGGY]  Character  ch  =  chars.nextInt(gap);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  chars.nextInt(gap);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	Character  ch  =  chars.nextInt(gap);	  Character    ch    =    random.random.nextInt(gap);    	non-compiled	[CE]  	43	None	replace
205	[BUG]  [BUGGY]  Character  ch  =  chars[random.nextInt(gap)+  start];  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  chars[random.nextInt(gap)+  start];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	Character  ch  =  chars[random.nextInt(gap)+  start];	  Character    ch    =    random.random.nextInt(gap);    	non-compiled	[CE]  	43	None	replace
206	[BUG]  [BUGGY]  int  count  =  chars.nextInt(buffer,  1,  count);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  chars.nextInt(buffer,  1,  count);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  chars.nextInt(buffer,  1,  count);	  int    count    =    random.nextInt(buffer,    1,    count);    	non-compiled	[CE]  	30	None	replace
207	[BUG]  [BUGGY]  char  count  =  random.nextInt(start,  end);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  count  =  random.nextInt(start,  end);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	char  count  =  random.nextInt(start,  end);	  char    count    =    random.nextInt(gap);    	non-compiled	[CE]  	49	None	replace
208	[BUG]  [BUGGY]  char  count  =  chars.length  -  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  count  =  chars.length  -  1;  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	char  count  =  chars.length  -  1;	  char    count    =    chars.length;    	non-compiled	[CE]  	42	None	replace
209	[BUG]  [BUGGY]  int  count  =(numbers  &&  Character.isDigit(ch))?  buffer[0]  :  chars.length();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =(numbers  &&  Character.isDigit(ch))?  buffer[0]  :  chars.length();  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =(numbers  &&  Character.isDigit(ch))?  buffer[0]  :  chars.length();	  int    count    =    chars.length();    	non-compiled	[CE]  	23	None	replace
210	[BUG]  [BUGGY]  int  count  =(numbers  &&  Character.isLetter(ch))?  buffer[0]  :  chars.length();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =(numbers  &&  Character.isLetter(ch))?  buffer[0]  :  chars.length();  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =(numbers  &&  Character.isLetter(ch))?  buffer[0]  :  chars.length();	  int    count    =    chars.length();    	non-compiled	[CE]  	23	None	replace
211	[BUG]  [BUGGY]  int  count  =(count  &&  Character.isDigit(ch))?  buffer[0]  :  chars.length;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =(count  &&  Character.isDigit(ch))?  buffer[0]  :  chars.length;  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =(count  &&  Character.isDigit(ch))?  buffer[0]  :  chars.length;	  int    count    =(numbers    &&    Character.isDigit(ch))?    buffer[0]    :    chars.length;    	non-compiled	[CE]  	81	None	replace
212	[BUG]  [BUGGY]  int  count  =(end  <  0)?  0  :  end;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =(end  <  0)?  0  :  end;  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =(end  <  0)?  0  :  end;	  int    count    =    0;    	non-compiled	[CE]  	40	None	replace
213	[BUG]  [BUGGY]  int  count  =(end  <  0)?  0  :  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =(end  <  0)?  0  :  1;  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =(end  <  0)?  0  :  1;	  int    count    =    0;    	non-compiled	[CE]  	40	None	replace
214	[BUG]  [BUGGY]  int  count  =(numbers  &&  Character.isLetter(ch))?  1  :  0;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =(numbers  &&  Character.isLetter(ch))?  1  :  0;  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =(numbers  &&  Character.isLetter(ch))?  1  :  0;	  int    count    =    0;    	non-compiled	[CE]  	40	None	replace
215	[BUG]  [BUGGY]  System.arraycopy(chars,  0,  buffer,  0,  count  +  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  System.arraycopy(chars,  0,  buffer,  0,  count  +  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	System.arraycopy(chars,  0,  buffer,  0,  count  +  1);	  System.arraycopy(buffer,    0,    buffer,    0,    count    +    1);    	non-compiled	[CE]  	35	None	replace
216	[BUG]  [BUGGY]  System.arraycopy(chars,  0,  buffer,  0,  count);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  System.arraycopy(chars,  0,  buffer,  0,  count);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	System.arraycopy(chars,  0,  buffer,  0,  count);	  System.arraycopy(buffer,    0,    buffer,    0,    end);    	non-compiled	[CE]  	36	None	replace
217	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  1,  end);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  1,  end);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	System.arraycopy(buffer,  0,  buffer,  1,  end);	  System.arraycopy(buffer,    0,    buffer,    0,    end);    	non-compiled	[CE]  	36	None	replace
218	[BUG]  [BUGGY]  int  gap  =  end  -  random.nextInt(gap)/  start  +  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  end  -  random.nextInt(gap)/  start  +  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  end  -  random.nextInt(gap)/  start  +  1;	  int    gap    =    end    -    random.nextInt(gap)+    start    +    1;    	non-compiled	[CE]  	73	None	replace
219	[BUG]  [BUGGY]  int  gap  =  random.nextInt(gap)+  start  +  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  random.nextInt(gap)+  start  +  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  random.nextInt(gap)+  start  +  1;	  int    gap    =    end    -    random.nextInt(gap)+    start    +    1;    	non-compiled	[CE]  	73	None	replace
220	[BUG]  [BUGGY]  int  count  =  chars.nextInt(buffer,  0,  0);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  chars.nextInt(buffer,  0,  0);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  chars.nextInt(buffer,  0,  0);	  int    count    =    random.nextInt(buffer,    0,    0);    	non-compiled	[CE]  	58	None	replace
221	[BUG]  [BUGGY]  int  gap  =  length  -  buffer.length;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  length  -  buffer.length;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  length  -  buffer.length;	  int    gap    =    start    -    buffer.length;    	non-compiled	[CE]  	9	None	replace
222	[BUG]  [BUGGY]  int  count  =(this.random!=  null)?  0  :  this.random.nextInt(start);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =(this.random!=  null)?  0  :  this.random.nextInt(start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =(this.random!=  null)?  0  :  this.random.nextInt(start);	  int    count    =    this.random.nextInt(start);    	non-compiled	[CE]  	76	None	replace
223	[BUG]  [BUGGY]  int  count  =  random.nextInt(buffer,  0,  count  +  1,  buffer.length);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(buffer,  0,  count  +  1,  buffer.length);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  random.nextInt(buffer,  0,  count  +  1,  buffer.length);	  int    count    =    random.nextInt(buffer,    0,    count    +    1);    	non-compiled	[CE]  	78	None	replace
224	[BUG]  [BUGGY]  int  gap  =  numbers  -  start  +  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  numbers  -  start  +  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  numbers  -  start  +  1;	  int    gap    =    start    -    end    +    1;    	non-compiled	[CE]  	72	None	replace
225	[BUG]  [BUGGY]  int  gap  =  last  -  start  +  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  last  -  start  +  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  last  -  start  +  1;	  int    gap    =    start    -    end    +    1;    	non-compiled	[CE]  	72	None	replace
226	[BUG]  [BUGGY]  int  count  =  buffer.length()  -  end;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  buffer.length()  -  end;  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  buffer.length()  -  end;	  int    count    =    buffer.length()    -    start;    	non-compiled	[CE]  	65	None	replace
227	[BUG]  [BUGGY]  Character  ch  =  random.nextInt(start);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  random.nextInt(start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	Character  ch  =  random.nextInt(start);	  Character    ch    =    buffer.nextInt(start);    	non-compiled	[CE]  	45	None	replace
228	[BUG]  [BUGGY]  System.arraycopy(chars,  0,  buffer,  0,  count  -  1);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  System.arraycopy(chars,  0,  buffer,  0,  count  -  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	System.arraycopy(chars,  0,  buffer,  0,  count  -  1);	  System.arraycopy(buffer,    0,    buffer,    0,    count    -    1);    	non-compiled	[CE]  	34	None	replace
229	[BUG]  [BUGGY]  int  count  =  RANDOM.nextInt(gap  +  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  RANDOM.nextInt(gap  +  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  RANDOM.nextInt(gap  +  1);	  int    count    =    RANDOM.nextInt(gap);    	non-compiled	[CE]  	55	None	replace
230	[BUG]  [BUGGY]  int  count  =  RANDOM.nextInt(start);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  RANDOM.nextInt(start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =  RANDOM.nextInt(start);	  int    count    =    RANDOM.nextInt(gap);    	non-compiled	[CE]  	55	None	replace
231	[BUG]  [BUGGY]  int  gap  =  end  -  random.nextInt(gap);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  end  -  random.nextInt(gap);  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  end  -  random.nextInt(gap);	  int    gap    =    end    -    start.length;    	non-compiled	[CE]  	8	None	replace
232	[BUG]  [BUGGY]  int  count  =(numbers  &&  Character.isLetter(ch))?  buffer[0]  :  chars.nextInt(buffer);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =(numbers  &&  Character.isLetter(ch))?  buffer[0]  :  chars.nextInt(buffer);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =(numbers  &&  Character.isLetter(ch))?  buffer[0]  :  chars.nextInt(buffer);	  int    count    =    chars.nextInt(buffer);    	non-compiled	[CE]  	60	None	replace
233	[BUG]  [BUGGY]  int  count  =(numbers  &&  Character.isDigit(ch))?  buffer[0]  :  chars.nextInt(buffer);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =(numbers  &&  Character.isDigit(ch))?  buffer[0]  :  chars.nextInt(buffer);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  count  =(numbers  &&  Character.isDigit(ch))?  buffer[0]  :  chars.nextInt(buffer);	  int    count    =    chars.nextInt(buffer);    	non-compiled	[CE]  	60	None	replace
234	[BUG]  [BUGGY]  Character  ch  =  random.nextChar(buffer,  0,  buffer.length);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  random.nextChar(buffer,  0,  buffer.length);  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	Character  ch  =  random.nextChar(buffer,  0,  buffer.length);	  Character    ch    =    random.nextChar(gap);    	non-compiled	[CE]  	79	None	replace
235	[BUG]  [BUGGY]  int  gap  =  count  /  end;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  count  /  end;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  count  /  end;	  int    gap    =    start    /    end;    	non-compiled	[CE]  	64	None	replace
236	[BUG]  [BUGGY]  int  gap  =  last  /  end;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  last  /  end;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	248	248	1	replace	int  gap  =  last  /  end;	  int    gap    =    start    /    end;    	non-compiled	[CE]  	64	None	replace
