bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  char  ch  =  buffer[random.nextInt(gap)/  1];  [CE]  [FE]            AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char  ch  =  buffer[random.nextInt(gap)/  1];  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	char  ch  =  buffer[random.nextInt(gap)/  1];	      char    ch    =    buffer[random.nextInt(gap)+1];    	non-compiled	[CE]  	13	None	replace
2	[BUG]  [BUGGY]  Char  ch  =  random.nextChar(start);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  Char  ch  =  random.nextChar(start);  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	Char  ch  =  random.nextChar(start);	      Char    char    ch    =    random.nextChar(gap);    	non-compiled	[CE]  	17	None	replace
3	[BUG]  [BUGGY]  char  ch  =  random.nextChar(start);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char  ch  =  random.nextChar(start);  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	char  ch  =  random.nextChar(start);	      Char    char    ch    =    random.nextChar(gap);    	non-compiled	[CE]  	17	None	replace
4	[BUG]  [BUGGY]  Char  ch  =  random.nextChar(gap,  count);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  Char  ch  =  random.nextChar(gap,  count);  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	Char  ch  =  random.nextChar(gap,  count);	      Char    char    ch    =    random.nextChar(gap);    	non-compiled	[CE]  	17	None	replace
5	[BUG]  [BUGGY]  char  ch  =  random.nextChar(buffer,  0,  gap);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char  ch  =  random.nextChar(buffer,  0,  gap);  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	char  ch  =  random.nextChar(buffer,  0,  gap);	      Char    char    ch    =    random.nextChar(gap);    	non-compiled	[CE]  	17	None	replace
6	[BUG]  [BUGGY]  char  ch  =  buffer[random.nextInt(gap)];  [CE]  [FE]        AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char  ch  =  buffer[random.nextInt(gap)];  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	char  ch  =  buffer[random.nextInt(gap)];	      char    ch    =    random.nextInt(gap);    	non-compiled	[CE]  	11	None	replace
7	[BUG]  [BUGGY]  char  ch  =  buffer.nextInt(gap);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char  ch  =  buffer.nextInt(gap);  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	char  ch  =  buffer.nextInt(gap);	      char    ch    =    random.nextInt(gap);    	non-compiled	[CE]  	11	None	replace
8	[BUG]  [BUGGY]  char  ch  =  random.nextInt(gap  +  1);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char  ch  =  random.nextInt(gap  +  1);  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	char  ch  =  random.nextInt(gap  +  1);	      char    ch    =    random.nextInt(gap);    	non-compiled	[CE]  	11	None	replace
9	[BUG]  [BUGGY]  char  ch  =  random.nextInt(gap)+  1;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char  ch  =  random.nextInt(gap)+  1;  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	char  ch  =  random.nextInt(gap)+  1;	      char    ch    =    random.nextInt(gap)+    start;    	non-compiled	[CE]  	14	None	replace
10	[BUG]  [BUGGY]  char  ch  =  random.nextInt(gap)+  start  +  1;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char  ch  =  random.nextInt(gap)+  start  +  1;  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	char  ch  =  random.nextInt(gap)+  start  +  1;	      char    ch    =    random.nextInt(gap)+    start;    	non-compiled	[CE]  	14	None	replace
11	[BUG]  [BUGGY]  char  ch  =  random.nextInt(gap)+  2;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char  ch  =  random.nextInt(gap)+  2;  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	char  ch  =  random.nextInt(gap)+  2;	      char    ch    =    random.nextInt(gap)+    start;    	non-compiled	[CE]  	14	None	replace
12	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  0)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  0)  {  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	if(buffer  ==  null  ||  buffer.length  ==  0)  {	  if(chars    ==    null    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  	3	None	replace
13	[BUG]  [BUGGY]  if(chars  ==  null  ||  buffer.length!=  0)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  if(chars  ==  null  ||  buffer.length!=  0)  {  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	if(chars  ==  null  ||  buffer.length!=  0)  {	  if(chars    ==    null    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  	3	None	replace
14	[BUG]  [BUGGY]  if(chars  ==  null  ||  buffer.length  <  =  0)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  if(chars  ==  null  ||  buffer.length  <  =  0)  {  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	if(chars  ==  null  ||  buffer.length  <  =  0)  {	  if(chars    ==    null    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  	3	None	replace
15	[BUG]  [BUGGY]  if(buffer  ==  null  ||!buffer.contains(ch))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  if(buffer  ==  null  ||!buffer.contains(ch))  {  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	if(buffer  ==  null  ||!buffer.contains(ch))  {	  if(chars    ==    null    ||!chars.contains(ch))    {    	non-compiled	[CE]  	16	None	replace
16	[BUG]  [BUGGY]  if(chars!=  null  ||!chars.contains(ch))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  if(chars!=  null  ||!chars.contains(ch))  {  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	if(chars!=  null  ||!chars.contains(ch))  {	  if(chars    ==    null    ||!chars.contains(ch))    {    	non-compiled	[CE]  	16	None	replace
17	[BUG]  [BUGGY]  if(chars  ==  null  ||!chars.contains(ch)&&!numbers)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  if(chars  ==  null  ||!chars.contains(ch)&&!numbers)  {  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	if(chars  ==  null  ||!chars.contains(ch)&&!numbers)  {	  if(chars    ==    null    ||!chars.contains(ch))    {    	non-compiled	[CE]  	16	None	replace
18	[BUG]  [BUGGY]  char[]  buffer  =  new  char[len  -  1];  [CE]  [FE]          AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char[]  buffer  =  new  char[len  -  1];  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	char[]  buffer  =  new  char[len  -  1];	      char[]    buffer    =    new    char[count    -    1];    	non-compiled	[CE]  	6	None	replace
19	[BUG]  [BUGGY]  char[]  buffer  =  new  char[count  -  2];  [CE]  [FE]            AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char[]  buffer  =  new  char[count  -  2];  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	char[]  buffer  =  new  char[count  -  2];	      char[]    buffer    =    new    char[count    -    1];    	non-compiled	[CE]  	6	None	replace
20	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer.length  -  1];  [CE]  [FE]              AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char[]  buffer  =  new  char[buffer.length  -  1];  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	char[]  buffer  =  new  char[buffer.length  -  1];	      char[]    buffer    =    new    char[count    -    1];    	non-compiled	[CE]  	6	None	replace
21	[BUG]  [BUGGY]  if(chars!=  null  ||  buffer.length  ==  0)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  if(chars!=  null  ||  buffer.length  ==  0)  {  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	if(chars!=  null  ||  buffer.length  ==  0)  {	  if(chars!=    null)    {    	non-compiled	[CE]  	1	None	replace
22	[BUG]  [BUGGY]  Character  ch  =  buffer[random.nextChar(gap)];  [CE]  [FE]        AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  Character  ch  =  buffer[random.nextChar(gap)];  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	Character  ch  =  buffer[random.nextChar(gap)];	      Character    ch    =    random.nextChar(gap);    	non-compiled	[CE]  	5	None	replace
23	[BUG]  [BUGGY]  Character  ch  =  buffer.nextChar(gap);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  Character  ch  =  buffer.nextChar(gap);  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	Character  ch  =  buffer.nextChar(gap);	      Character    ch    =    random.nextChar(gap);    	non-compiled	[CE]  	5	None	replace
24	[BUG]  [BUGGY]  Character  ch  =  random.nextChar(start);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  Character  ch  =  random.nextChar(start);  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	Character  ch  =  random.nextChar(start);	      Character    ch    =    random.nextChar(gap);    	non-compiled	[CE]  	5	None	replace
25	[BUG]  [BUGGY]  Character  ch  =  random.nextChar(buffer,  0,  gap);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  Character  ch  =  random.nextChar(buffer,  0,  gap);  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	Character  ch  =  random.nextChar(buffer,  0,  gap);	      Character    ch    =    random.nextChar(gap);    	non-compiled	[CE]  	5	None	replace
26	[BUG]  [BUGGY]  char  ch  =  buffer[random.nextInt(gap)+  2];  [CE]  [FE]          AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char  ch  =  buffer[random.nextInt(gap)+  2];  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	char  ch  =  buffer[random.nextInt(gap)+  2];	      char    ch    =    buffer[random.nextInt(gap)+    start];    	non-compiled	[CE]  	12	None	replace
27	[BUG]  [BUGGY]  Char  ch  =  random.nextChar(start,  gap);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  Char  ch  =  random.nextChar(start,  gap);  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	Char  ch  =  random.nextChar(start,  gap);	      Char    ch    =    random.nextChar(gap);    	non-compiled	[CE]  	7	None	replace
28	[BUG]  [BUGGY]  Char  ch  =  random.nextChar(buffer,  count);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  Char  ch  =  random.nextChar(buffer,  count);  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	Char  ch  =  random.nextChar(buffer,  count);	      Char    ch    =    random.nextChar(gap);    	non-compiled	[CE]  	7	None	replace
29	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length!=  0)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  if(chars  ==  null  ||  chars.length!=  0)  {  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	if(chars  ==  null  ||  chars.length!=  0)  {	  if(chars    ==    null    ||    chars.length    ==    0)    {    	non-compiled	[CE]  	15	None	replace
30	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  <  =  0)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  if(chars  ==  null  ||  chars.length  <  =  0)  {  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	if(chars  ==  null  ||  chars.length  <  =  0)  {	  if(chars    ==    null    ||    chars.length    ==    0)    {    	non-compiled	[CE]  	15	None	replace
31	[BUG]  [BUGGY]  if(chars!=  null  ||!numbers)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  if(chars!=  null  ||!numbers)  {  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	if(chars!=  null  ||!numbers)  {	  if(chars    ==    null    ||!numbers)    {    	non-compiled	[CE]  	2	None	replace
32	[BUG]  [BUGGY]  if(chars  ==  null  ||!letters)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  if(chars  ==  null  ||!letters)  {  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	if(chars  ==  null  ||!letters)  {	  if(chars    ==    null    ||!numbers)    {    	non-compiled	[CE]  	2	None	replace
33	[BUG]  [BUGGY]  char  ch  =(char)(random.nextInt(gap)+  start);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char  ch  =(char)(random.nextInt(gap)+  start);  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	char  ch  =(char)(random.nextInt(gap)+  start);	      	non-compiled	[CE]  	4	None	replace
34	[BUG]  [BUGGY]  char[]  buffer  =  new  char[len  -  start];  [CE]  [FE]              AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char[]  buffer  =  new  char[len  -  start];  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	char[]  buffer  =  new  char[len  -  start];	      char[]    buffer    =    new    char[count    -    start];    	non-compiled	[CE]  	8	None	replace
35	[BUG]  [BUGGY]  char[]  buffer  =  new  char[end  -  start];  [CE]  [FE]                AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char[]  buffer  =  new  char[end  -  start];  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	char[]  buffer  =  new  char[end  -  start];	      char[]    buffer    =    new    char[count    -    start];    	non-compiled	[CE]  	8	None	replace
36	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer.length  -  start];  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char[]  buffer  =  new  char[buffer.length  -  start];  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	char[]  buffer  =  new  char[buffer.length  -  start];	      char[]    buffer    =    new    char[count    -    start];    	non-compiled	[CE]  	8	None	replace
37	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer.length  +  2];  [CE]  [FE]                AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char[]  buffer  =  new  char[buffer.length  +  2];  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	char[]  buffer  =  new  char[buffer.length  +  2];	      char[]    buffer    =    new    char[buffer.length    +    1];    	non-compiled	[CE]  	9	None	replace
38	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer.length  *  1];  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char[]  buffer  =  new  char[buffer.length  *  1];  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	char[]  buffer  =  new  char[buffer.length  *  1];	      char[]    buffer    =    new    char[buffer.length    +    1];    	non-compiled	[CE]  	9	None	replace
39	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer.length  +  3];  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char[]  buffer  =  new  char[buffer.length  +  3];  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	char[]  buffer  =  new  char[buffer.length  +  3];	      char[]    buffer    =    new    char[buffer.length    +    1];    	non-compiled	[CE]  	9	None	replace
40	[BUG]  [BUGGY]  if(chars  ==  null  ||!chars.contains(ch)||  buffer.charAt(buffer.length  -  1)!=  '0')  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  if(chars  ==  null  ||!chars.contains(ch)||  buffer.charAt(buffer.length  -  1)!=  '0')  {  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	if(chars  ==  null  ||!chars.contains(ch)||  buffer.charAt(buffer.length  -  1)!=  '0')  {	  if(chars    ==    null    ||!chars.contains(ch))    {    	non-compiled	[CE]  	16	None	replace
41	[BUG]  [BUGGY]  Char  ch  =  random.nextChar(buffer);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  Char  ch  =  random.nextChar(buffer);  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	Char  ch  =  random.nextChar(buffer);	      Char    char    ch    =    random.nextChar(gap);    	non-compiled	[CE]  	17	None	replace
42	[BUG]  [BUGGY]  Char  ch  =  random.nextChar(buffer,  start);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  Char  ch  =  random.nextChar(buffer,  start);  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	Char  ch  =  random.nextChar(buffer,  start);	      Char    char    ch    =    random.nextChar(gap);    	non-compiled	[CE]  	17	None	replace
43	[BUG]  [BUGGY]  char  ch  =  random.nextChar(buffer);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char  ch  =  random.nextChar(buffer);  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	char  ch  =  random.nextChar(buffer);	      Char    char    ch    =    random.nextChar(gap);    	non-compiled	[CE]  	17	None	replace
44	[BUG]  [BUGGY]  Char  ch  =  random.nextChar(buffer,  0,  gap);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  Char  ch  =  random.nextChar(buffer,  0,  gap);  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	Char  ch  =  random.nextChar(buffer,  0,  gap);	      Char    ch    =    random.nextChar(gap);    	non-compiled	[CE]  	7	None	replace
45	[BUG]  [BUGGY]  char  ch  =  buffer[random.nextInt(gap)+1]  +  start;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char  ch  =  buffer[random.nextInt(gap)+1]  +  start;  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	char  ch  =  buffer[random.nextInt(gap)+1]  +  start;	      char    ch    =    buffer[random.nextInt(gap)+1];    	non-compiled	[CE]  	13	None	replace
46	[BUG]  [BUGGY]  if(chars!=  null  ||  chars.length  ==  0)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  if(chars!=  null  ||  chars.length  ==  0)  {  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	if(chars!=  null  ||  chars.length  ==  0)  {	  if(chars    ==    null    ||    chars.length    ==    0)    {    	non-compiled	[CE]  	15	None	replace
47	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer  -  start];  [CE]  [FE]              AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char[]  buffer  =  new  char[buffer  -  start];  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	char[]  buffer  =  new  char[buffer  -  start];	      char[]    buffer    =    new    char[count    -    start];    	non-compiled	[CE]  	8	None	replace
48	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer  -  1];  [CE]  [FE]          AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char[]  buffer  =  new  char[buffer  -  1];  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	char[]  buffer  =  new  char[buffer  -  1];	      char[]    buffer    =    new    char[count    -    1];    	non-compiled	[CE]  	6	None	replace
49	[BUG]  [BUGGY]  char[]  buffer  =  new  char[peek  -  1];  [CE]  [FE]            AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char[]  buffer  =  new  char[peek  -  1];  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	char[]  buffer  =  new  char[peek  -  1];	      char[]    buffer    =    new    char[count    -    1];    	non-compiled	[CE]  	6	None	replace
50	[BUG]  [BUGGY]  char  ch  =  buffer[random.nextInt(start)+  start];  [CE]  [FE]              AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char  ch  =  buffer[random.nextInt(start)+  start];  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	char  ch  =  buffer[random.nextInt(start)+  start];	      	non-compiled	[CE]  	4	None	replace
51	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  gap);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  gap);  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	Random  random  =  RandomStringUtils.getValue(buffer,  0,  gap);	      	non-compiled	[CE]  	4	None	replace
52	[BUG]  [BUGGY]  char  ch  =  random.nextInt(start);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char  ch  =  random.nextInt(start);  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	char  ch  =  random.nextInt(start);	      char    ch    =    random.nextInt(gap);    	non-compiled	[CE]  	11	None	replace
53	[BUG]  [BUGGY]  char  ch  =  random.nextInt(gap  +  start);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char  ch  =  random.nextInt(gap  +  start);  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	char  ch  =  random.nextInt(gap  +  start);	      char    ch    =    random.nextInt(gap);    	non-compiled	[CE]  	11	None	replace
54	[BUG]  [BUGGY]  char  ch  =  random.nextInt(buffer);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char  ch  =  random.nextInt(buffer);  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	char  ch  =  random.nextInt(buffer);	      char    ch    =    random.nextInt(gap);    	non-compiled	[CE]  	11	None	replace
55	[BUG]  [BUGGY]  if(chars  ==  null  ||!chars.length)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  if(chars  ==  null  ||!chars.length)  {  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	if(chars  ==  null  ||!chars.length)  {	  if(chars    ==    null    ||!numbers)    {    	non-compiled	[CE]  	2	None	replace
56	[BUG]  [BUGGY]  if(buffer!=  null)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  if(buffer!=  null)  {  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	if(buffer!=  null)  {	  if(chars!=    null)    {    	non-compiled	[CE]  	1	None	replace
57	[BUG]  [BUGGY]  Character  ch  =  random.nextChar(buffer);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  Character  ch  =  random.nextChar(buffer);  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	Character  ch  =  random.nextChar(buffer);	      Character    ch    =    random.nextChar(gap);    	non-compiled	[CE]  	5	None	replace
58	[BUG]  [BUGGY]  Character  ch  =  random.nextChar(buffer,  start);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  Character  ch  =  random.nextChar(buffer,  start);  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	Character  ch  =  random.nextChar(buffer,  start);	      Character    ch    =    random.nextChar(gap);    	non-compiled	[CE]  	5	None	replace
59	[BUG]  [BUGGY]  char  ch  =  buffer[random.nextInt(gap)+  start  +  1];  [CE]  [FE]          AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char  ch  =  buffer[random.nextInt(gap)+  start  +  1];  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	char  ch  =  buffer[random.nextInt(gap)+  start  +  1];	      char    ch    =    buffer[random.nextInt(gap)+    start];    	non-compiled	[CE]  	12	None	replace
60	[BUG]  [BUGGY]  char  ch  =  buffer[random.nextInt(gap)+  start]  +  1;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char  ch  =  buffer[random.nextInt(gap)+  start]  +  1;  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	char  ch  =  buffer[random.nextInt(gap)+  start]  +  1;	      char    ch    =    buffer[random.nextInt(gap)+    start];    	non-compiled	[CE]  	12	None	replace
61	[BUG]  [BUGGY]  if(ch  ==''  ||!chars.contains(ch))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  if(ch  ==''  ||!chars.contains(ch))  {  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	if(ch  ==''  ||!chars.contains(ch))  {	  if(chars    ==    null    ||!chars.contains(ch))    {    	non-compiled	[CE]  	16	None	replace
62	[BUG]  [BUGGY]  if(chars  ==  null  ||!chars.contains(ch)||!Character.isLetter(ch))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  if(chars  ==  null  ||!chars.contains(ch)||!Character.isLetter(ch))  {  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	if(chars  ==  null  ||!chars.contains(ch)||!Character.isLetter(ch))  {	  if(chars    ==    null    ||!chars.contains(ch))    {    	non-compiled	[CE]  	16	None	replace
63	[BUG]  [BUGGY]  char[]  buffer  =  new  char[end  -  1];  [CE]  [FE]          AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char[]  buffer  =  new  char[end  -  1];  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	char[]  buffer  =  new  char[end  -  1];	      char[]    buffer    =    new    char[count    -    1];    	non-compiled	[CE]  	6	None	replace
64	[BUG]  [BUGGY]  char  ch  =  chars[random.nextInt(gap)+1];  [CE]  [FE]            AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char  ch  =  chars[random.nextInt(gap)+1];  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	char  ch  =  chars[random.nextInt(gap)+1];	      char    ch    =    buffer[random.nextInt(gap)+1];    	non-compiled	[CE]  	13	None	replace
65	[BUG]  [BUGGY]  char  ch  =  random.nextInt(gap)/  start;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char  ch  =  random.nextInt(gap)/  start;  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	char  ch  =  random.nextInt(gap)/  start;	      char    ch    =    random.nextInt(gap)+    start;    	non-compiled	[CE]  	14	None	replace
66	[BUG]  [BUGGY]  char  ch  =  chars[random.nextInt(gap)+  start];  [CE]  [FE]              AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char  ch  =  chars[random.nextInt(gap)+  start];  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	char  ch  =  chars[random.nextInt(gap)+  start];	      	non-compiled	[CE]  	4	None	replace
67	[BUG]  [BUGGY]  Char  ch  =  chars[random.nextInt(gap)+  start];  [CE]  [FE]                AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  Char  ch  =  chars[random.nextInt(gap)+  start];  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	Char  ch  =  chars[random.nextInt(gap)+  start];	      	non-compiled	[CE]  	4	None	replace
68	[BUG]  [BUGGY]  char  ch  =  buffer[random.nextInt(gap)/  start];  [CE]  [FE]          AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char  ch  =  buffer[random.nextInt(gap)/  start];  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	char  ch  =  buffer[random.nextInt(gap)/  start];	      char    ch    =    buffer[random.nextInt(gap)+    start];    	non-compiled	[CE]  	12	None	replace
69	[BUG]  [BUGGY]  if(chars!=  null  &&!chars.length  >  0)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  if(chars!=  null  &&!chars.length  >  0)  {  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	if(chars!=  null  &&!chars.length  >  0)  {	  if(chars!=    null)    {    	non-compiled	[CE]  	1	None	replace
70	[BUG]  [BUGGY]  if(chars!=  null  &&  chars.length  >  0)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  if(chars!=  null  &&  chars.length  >  0)  {  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	252	252	1	replace	if(chars!=  null  &&  chars.length  >  0)  {	  if(chars!=    null)    {    	non-compiled	[CE]  	1	None	replace
