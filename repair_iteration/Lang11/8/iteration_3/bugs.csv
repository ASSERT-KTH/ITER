bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Random  random  =  chars.clone();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  chars.clone();  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  chars.clone();	  Random    random    =    random.clone();    	non-compiled	[CE]  	52	None	replace
2	[BUG]  [BUGGY]  Random  random  =  random!=  null?  null  :  random.clone();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random!=  null?  null  :  random.clone();  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random!=  null?  null  :  random.clone();	  Random    random    =    random.clone();    	non-compiled	[CE]  	52	None	replace
3	[BUG]  [BUGGY]  int  count  =(chars  ==  null)?  0  :  chars.length  +  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  int  count  =(chars  ==  null)?  0  :  chars.length  +  1;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	int  count  =(chars  ==  null)?  0  :  chars.length  +  1;	  int    count    =(chars    ==    null)?    0    :    chars.length;    	non-compiled	[CE]  	7	None	replace
4	[BUG]  [BUGGY]  int  count  =(characters  ==  null)?  0  :  chars.length;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  int  count  =(characters  ==  null)?  0  :  chars.length;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	int  count  =(characters  ==  null)?  0  :  chars.length;	  int    count    =(chars    ==    null)?    0    :    chars.length;    	non-compiled	[CE]  	7	None	replace
5	[BUG]  [BUGGY]  int  count  =(count  ==  null)?  0  :  chars.length;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  int  count  =(count  ==  null)?  0  :  chars.length;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	int  count  =(count  ==  null)?  0  :  chars.length;	  int    count    =(chars    ==    null)?    0    :    chars.length;    	non-compiled	[CE]  	7	None	replace
6	[BUG]  [BUGGY]  String  ch  =  random.getChars(chars);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  String  ch  =  random.getChars(chars);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	String  ch  =  random.getChars(chars);	  String    ch    =    random.getChars(ch);    	non-compiled	[CE]  	60	None	replace
7	[BUG]  [BUGGY]  String  ch  =  random.getChars(0,  0);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  String  ch  =  random.getChars(0,  0);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	String  ch  =  random.getChars(0,  0);	  String    ch    =    random.getChars(ch);    	non-compiled	[CE]  	60	None	replace
8	[BUG]  [BUGGY]  String  ch  =  random.getChars(chars,  0,  0);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  String  ch  =  random.getChars(chars,  0,  0);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	String  ch  =  random.getChars(chars,  0,  0);	  String    ch    =    random.getChars(ch);    	non-compiled	[CE]  	60	None	replace
9	[BUG]  [BUGGY]  if(count  ==  0  ||  random.numbers,  chars,  letters)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  random.numbers,  chars,  letters)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  random.numbers,  chars,  letters)  {	  if(count    ==    0    ||    random.numbers,    letters)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
10	[BUG]  [BUGGY]  if(count  ==  0  ||  random.numbers,  ch)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  random.numbers,  ch)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  random.numbers,  ch)  {	  if(count    ==    0    ||    random.numbers,    letters)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
11	[BUG]  [BUGGY]  if(count  ==  0  ||  random.numbers,  0,  letters)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  random.numbers,  0,  letters)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  random.numbers,  0,  letters)  {	  if(count    ==    0    ||    random.numbers,    letters)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
12	[BUG]  [BUGGY]  if(numbers  ==  0  ||  random.numbers,  count)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(numbers  ==  0  ||  random.numbers,  count)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(numbers  ==  0  ||  random.numbers,  count)  {	  if(count    ==    0    ||    random.numbers,    letters)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
13	[BUG]  [BUGGY]  if(count  ==  0  ||  random.numbers!=  letters)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  random.numbers!=  letters)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  random.numbers!=  letters)  {	  if(count    ==    0    &&    random.numbers)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
14	[BUG]  [BUGGY]  if(numbers  ==  0  &&  random.numbers)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(numbers  ==  0  &&  random.numbers)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(numbers  ==  0  &&  random.numbers)  {	  if(count    ==    0    &&    random.numbers)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
15	[BUG]  [BUGGY]  if(count  ==  0  ||  numbers  ||  random.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  numbers  ||  random.length  ==  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  numbers  ||  random.length  ==  0)  {	  if(count    ==    0    ||    numbers    &&    random.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
16	[BUG]  [BUGGY]  if(ch  ==  0  ||  numbers  &&  random.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(ch  ==  0  ||  numbers  &&  random.length  ==  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(ch  ==  0  ||  numbers  &&  random.length  ==  0)  {	  if(count    ==    0    ||    numbers    &&    random.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
17	[BUG]  [BUGGY]  char  ch  =  random.getChars(start,  end  +  1,  letters);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  random.getChars(start,  end  +  1,  letters);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(start,  end  +  1,  letters);	  char    ch    =    random.getChars(start,    end    +    1);    	non-compiled	[CE]  	16	None	replace
18	[BUG]  [BUGGY]  char  ch  =  random.getChars(start,  end  +  2);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  random.getChars(start,  end  +  2);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(start,  end  +  2);	  char    ch    =    random.getChars(start,    end    +    1);    	non-compiled	[CE]  	16	None	replace
19	[BUG]  [BUGGY]  int  count  =  random.length  -  2;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  int  count  =  random.length  -  2;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	int  count  =  random.length  -  2;	  int    count    =    random.length    -    1;    	non-compiled	[CE]  	5	None	replace
20	[BUG]  [BUGGY]  int  count  =  chars.length  -  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  int  count  =  chars.length  -  1;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	int  count  =  chars.length  -  1;	  int    count    =    random.length    -    1;    	non-compiled	[CE]  	5	None	replace
21	[BUG]  [BUGGY]  int  count  =  random.length  -  4;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  int  count  =  random.length  -  4;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	int  count  =  random.length  -  4;	  int    count    =    random.length    -    1;    	non-compiled	[CE]  	5	None	replace
22	[BUG]  [BUGGY]  if(count  ==  0  ||(offsets  ||  random.nextToken()  ==  0))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||(offsets  ||  random.nextToken()  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||(offsets  ||  random.nextToken()  ==  0))  {	  if(count    ==    0    ||(offsets    &&    random.nextToken()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
23	[BUG]  [BUGGY]  if(offsets  ==  0  ||(offsets  frumoase  &&  random.nextToken()  ==  0))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(offsets  ==  0  ||(offsets  frumoase  &&  random.nextToken()  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(offsets  ==  0  ||(offsets  frumoase  &&  random.nextToken()  ==  0))  {	  if(count    ==    0    ||(offsets    &&    random.nextToken()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
24	[BUG]  [BUGGY]  if(count  ||(numbers  &&  random.nextToken()  ==  0))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ||(numbers  &&  random.nextToken()  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ||(numbers  &&  random.nextToken()  ==  0))  {	  if(numbers    ||(numbers    &&    random.nextToken()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
25	[BUG]  [BUGGY]  if(numbers  ||(count  &&  random.nextToken()  ==  0))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(numbers  ||(count  &&  random.nextToken()  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(numbers  ||(count  &&  random.nextToken()  ==  0))  {	  if(numbers    ||(numbers    &&    random.nextToken()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
26	[BUG]  [BUGGY]  if(chars.length  ==  0  ||(numbers  &&  random.nextToken()  ==  0))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(chars.length  ==  0  ||(numbers  &&  random.nextToken()  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(chars.length  ==  0  ||(numbers  &&  random.nextToken()  ==  0))  {	  if(numbers    ||(numbers    &&    random.nextToken()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
27	[BUG]  [BUGGY]  if(random.nextToken()  ==  0  ||(numbers  &&  random.nextToken()  ==  0))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(random.nextToken()  ==  0  ||(numbers  &&  random.nextToken()  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(random.nextToken()  ==  0  ||(numbers  &&  random.nextToken()  ==  0))  {	  if(numbers    ||(numbers    &&    random.nextToken()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
28	[BUG]  [BUGGY]  if(count  ==  0  ||(letters  &&  random.getValue()!=  null))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||(letters  &&  random.getValue()!=  null))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||(letters  &&  random.getValue()!=  null))  {	  if(count    ==    0    ||(numbers    &&    random.getValue()!=    null))    {    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
29	[BUG]  [BUGGY]  if(count  ==  0  ||(numbers  &&  random.getValue()  ==  null))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||(numbers  &&  random.getValue()  ==  null))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||(numbers  &&  random.getValue()  ==  null))  {	  if(count    ==    0    ||(numbers    &&    random.getValue()!=    null))    {    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
30	[BUG]  [BUGGY]  if(count  ==  0  ||(buffered  &&  random.getValue()!=  null))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||(buffered  &&  random.getValue()!=  null))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||(buffered  &&  random.getValue()!=  null))  {	  if(count    ==    0    ||(numbers    &&    random.getValue()!=    null))    {    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
31	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  buffer.length  >  0)||(count  <  chars.length))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  buffer.length  >  0)||(count  <  chars.length))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(numbers  &&  buffer.length  >  0)||(count  <  chars.length))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    random.length    >    0)||(count    <    chars.length))    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
32	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  random.length  >  0)||(count  >=  chars.length))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  random.length  >  0)||(count  >=  chars.length))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(numbers  &&  random.length  >  0)||(count  >=  chars.length))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    random.length    >    0)||(count    <    chars.length))    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
33	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(count  &&  random.length  >  0)||(count  <  chars.length))  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(count  &&  random.length  >  0)||(count  <  chars.length))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(count  &&  random.length  >  0)||(count  <  chars.length))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    random.length    >    0)||(count    <    chars.length))    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
34	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  random.length  >  0)||(count  ==  chars.length))  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  random.length  >  0)||(count  ==  chars.length))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(numbers  &&  random.length  >  0)||(count  ==  chars.length))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    random.length    >    0)||(count    <    chars.length))    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
35	[BUG]  [BUGGY]  Character  ch  =  random.nextChar();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Character  ch  =  random.nextChar();  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Character  ch  =  random.nextChar();	  Character    ch    =    random.nextToken();    	non-compiled	[CE]  	65	None	replace
36	[BUG]  [BUGGY]  Character  ch  =  random.nextCharacter();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Character  ch  =  random.nextCharacter();  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Character  ch  =  random.nextCharacter();	  Character    ch    =    random.nextToken();    	non-compiled	[CE]  	65	None	replace
37	[BUG]  [BUGGY]  Character  ch  =  random.nextToken()  +  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Character  ch  =  random.nextToken()  +  1;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Character  ch  =  random.nextToken()  +  1;	  Character    ch    =    random.nextToken();    	non-compiled	[CE]  	65	None	replace
38	[BUG]  [BUGGY]  if(count  ==  0  ||(numbers  &&  random.getChars(ch,  0,  chars.length)!=  0))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||(numbers  &&  random.getChars(ch,  0,  chars.length)!=  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||(numbers  &&  random.getChars(ch,  0,  chars.length)!=  0))  {	  if(count    ==    0    ||(numbers    &&    random.getChars(ch,    chars.length)!=    0))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
39	[BUG]  [BUGGY]  if(count  ==  0  ||(letters  &&  random.getChars(ch,  chars.length)!=  0))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||(letters  &&  random.getChars(ch,  chars.length)!=  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||(letters  &&  random.getChars(ch,  chars.length)!=  0))  {	  if(count    ==    0    ||(numbers    &&    random.getChars(ch,    chars.length)!=    0))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
40	[BUG]  [BUGGY]  if(count  ==  0  ||(numbers  &&  random.getChars(ch,  start,  chars.length)!=  0))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||(numbers  &&  random.getChars(ch,  start,  chars.length)!=  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||(numbers  &&  random.getChars(ch,  start,  chars.length)!=  0))  {	  if(count    ==    0    ||(numbers    &&    random.getChars(ch,    chars.length)!=    0))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
41	[BUG]  [BUGGY]  if((  letters  &&  buffer!=  null)||(numbers  &&  random.length  ==  0))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  buffer!=  null)||(numbers  &&  random.length  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  buffer!=  null)||(numbers  &&  random.length  ==  0))  {	  if((    letters    &&    buffer!=    null)||(numbers    &&    chars.length    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
42	[BUG]  [BUGGY]  if((  numbers  &&  random!=  null)||(numbers  &&  chars.length  ==  0))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  numbers  &&  random!=  null)||(numbers  &&  chars.length  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  numbers  &&  random!=  null)||(numbers  &&  chars.length  ==  0))  {	  if((    letters    &&    buffer!=    null)||(numbers    &&    chars.length    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
43	[BUG]  [BUGGY]  if((  letters  &&  random  ==  null)||(numbers  &&  chars.length  ==  0))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random  ==  null)||(numbers  &&  chars.length  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random  ==  null)||(numbers  &&  chars.length  ==  0))  {	  if((    letters    &&    buffer!=    null)||(numbers    &&    chars.length    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
44	[BUG]  [BUGGY]  char  ch  =  random.getChars(ch,  0,  letters);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  random.getChars(ch,  0,  letters);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(ch,  0,  letters);	  char    ch    =    random.getChars(ch,    letters);    	non-compiled	[CE]  	62	None	replace
45	[BUG]  [BUGGY]  char  ch  =  random.getChars(0,  chars);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  random.getChars(0,  chars);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(0,  chars);	  char    ch    =    random.getChars(ch,    letters);    	non-compiled	[CE]  	62	None	replace
46	[BUG]  [BUGGY]  char  ch  =  random.getChars(ch,  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  random.getChars(ch,  1);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(ch,  1);	  char    ch    =    random.getChars(ch,    letters);    	non-compiled	[CE]  	62	None	replace
47	[BUG]  [BUGGY]  char  ch  =  random.getChars(ch,  1,  letters);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  random.getChars(ch,  1,  letters);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(ch,  1,  letters);	  char    ch    =    random.getChars(ch,    letters);    	non-compiled	[CE]  	62	None	replace
48	[BUG]  [BUGGY]  if(count  ==  0  ||  numbers  &&  random.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  numbers  &&  random.length  >  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  numbers  &&  random.length  >  0)  {	  if(count    ==    0    ||    letters    &&    random.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
49	[BUG]  [BUGGY]  if(count  ==  0  ||  letters  &&  random.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  letters  &&  random.length  <  =  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  letters  &&  random.length  <  =  0)  {	  if(count    ==    0    ||    letters    &&    random.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
50	[BUG]  [BUGGY]  chars  =  random.length();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  chars  =  random.length();  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	chars  =  random.length();	  int    count    =    chars.length();    	non-compiled	[CE]  <identifier>  expected	45	None	replace
51	[BUG]  [BUGGY]  if(random.length  ||  chars.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(random.length  ||  chars.length  ==  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(random.length  ||  chars.length  ==  0)  {	  if(chars.length    ||    random.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
52	[BUG]  [BUGGY]  if(chars.length  ==  0  ||  random.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(chars.length  ==  0  ||  random.length  ==  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(chars.length  ==  0  ||  random.length  ==  0)  {	  if(chars.length    ||    random.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
53	[BUG]  [BUGGY]  if(random  ==  null  ||  chars.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(random  ==  null  ||  chars.length  ==  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(random  ==  null  ||  chars.length  ==  0)  {	  if(chars.length    ||    random.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
54	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(count  &&  random.length  >  0)||(buffered  &&  random.length  >  0))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(count  &&  random.length  >  0)||(buffered  &&  random.length  >  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(count  &&  random.length  >  0)||(buffered  &&  random.length  >  0))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    random.length    >    0)||(buffered    &&    random.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
55	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  buffer.length  >  0)||(buffered  &&  random.length  >  0))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  buffer.length  >  0)||(buffered  &&  random.length  >  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(numbers  &&  buffer.length  >  0)||(buffered  &&  random.length  >  0))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    random.length    >    0)||(buffered    &&    random.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
56	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  random.length  >  0)||(count  ||(buffered  &&  random.length  >  0))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  random.length  >  0)||(count  ||(buffered  &&  random.length  >  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(numbers  &&  random.length  >  0)||(count  ||(buffered  &&  random.length  >  0))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    random.length    >    0)||(buffered    &&    random.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
57	[BUG]  [BUGGY]  if(numbers  ==  0  ||(count  &&  random.getValue()  ==  0))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(numbers  ==  0  ||(count  &&  random.getValue()  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(numbers  ==  0  ||(count  &&  random.getValue()  ==  0))  {	  if(chars    ==    0    ||(numbers    &&    random.getValue()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
58	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(count  &&  buffer[0]  ==  chars))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(count  &&  buffer[0]  ==  chars))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(count  &&  buffer[0]  ==  chars))  {	  if((    letters    &&    random.length    >    0)||(count    &&    chars[0]    ==    chars))    {    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
59	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(digits  &&  chars[0]  ==  ch))  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(digits  &&  chars[0]  ==  ch))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(digits  &&  chars[0]  ==  ch))  {	  if((    letters    &&    random.length    >    0)||(count    &&    chars[0]    ==    chars))    {    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
60	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(buffer,  count  &&  chars[0]  ==  ch))  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(buffer,  count  &&  chars[0]  ==  ch))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(buffer,  count  &&  chars[0]  ==  ch))  {	  if((    letters    &&    random.length    >    0)||(count    &&    chars[0]    ==    chars))    {    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
61	[BUG]  [BUGGY]  if(count  ==  0  ||(numbers  &&  random.nextChars()  >  0))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||(numbers  &&  random.nextChars()  >  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||(numbers  &&  random.nextChars()  >  0))  {	  if(count    ==    0    ||(numbers    &&    random.nextChars()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
62	[BUG]  [BUGGY]  if(count  ==  0  ||(numbers  &&  random.nextChars()!=  0))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||(numbers  &&  random.nextChars()!=  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||(numbers  &&  random.nextChars()!=  0))  {	  if(count    ==    0    ||(numbers    &&    random.nextChars()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
63	[BUG]  [BUGGY]  if(ch  ==  0  ||(numbers  &&  random.nextChars()  ==  0))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(ch  ==  0  ||(numbers  &&  random.nextChars()  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(ch  ==  0  ||(numbers  &&  random.nextChars()  ==  0))  {	  if(count    ==    0    ||(numbers    &&    random.nextChars()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
64	[BUG]  [BUGGY]  if(count  ==  0  ||(numbers  &&  random.nextChars())  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||(numbers  &&  random.nextChars())  ==  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||(numbers  &&  random.nextChars())  ==  0)  {	  if(count    ==    0    ||(numbers    &&    random.nextChars()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
65	[BUG]  [BUGGY]  if((  letters  &&  random!=  null)||(numbers  &&  random.length  >  0))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random!=  null)||(numbers  &&  random.length  >  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random!=  null)||(numbers  &&  random.length  >  0))  {	  if((    letters    &&    random!=    null)||(numbers    &&    random.length    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
66	[BUG]  [BUGGY]  if((  letters  &&  random!=  null)||(count  &&  random.length  ==  0))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random!=  null)||(count  &&  random.length  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random!=  null)||(count  &&  random.length  ==  0))  {	  if((    letters    &&    random!=    null)||(numbers    &&    random.length    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
67	[BUG]  [BUGGY]  if((  letters  &&  random!=  null)||(numbers  &&  random.length()  ==  0))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random!=  null)||(numbers  &&  random.length()  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random!=  null)||(numbers  &&  random.length()  ==  0))  {	  if((    letters    &&    random!=    null)||(numbers    &&    random.length    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
68	[BUG]  [BUGGY]  if((  random  &&  letters!=  null)||(numbers  &&  random.length  ==  0))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  random  &&  letters!=  null)||(numbers  &&  random.length  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  random  &&  letters!=  null)||(numbers  &&  random.length  ==  0))  {	  if((    letters    &&    random!=    null)||(numbers    &&    random.length    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
69	[BUG]  [BUGGY]  Random  random  =  random.nextInt(0,  0,  start,  end);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextInt(0,  0,  start,  end);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextInt(0,  0,  start,  end);	  Random    random    =    random.nextInt(0,    start,    end);    	non-compiled	[CE]  	23	None	replace
70	[BUG]  [BUGGY]  Random  random  =  random.nextInt(0,  start,  end,  letters);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextInt(0,  start,  end,  letters);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextInt(0,  start,  end,  letters);	  Random    random    =    random.nextInt(0,    start,    end);    	non-compiled	[CE]  	23	None	replace
71	[BUG]  [BUGGY]  Random  random  =  random.nextInt(0,  0,  start,  end  -  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextInt(0,  0,  start,  end  -  1);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextInt(0,  0,  start,  end  -  1);	  Random    random    =    random.nextInt(0,    start,    end);    	non-compiled	[CE]  	23	None	replace
72	[BUG]  [BUGGY]  Random  random  =  random.nextInt(0,  0,  start,  end  +  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextInt(0,  0,  start,  end  +  1);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextInt(0,  0,  start,  end  +  1);	  Random    random    =    random.nextInt(0,    start,    end);    	non-compiled	[CE]  	23	None	replace
73	[BUG]  [BUGGY]  if(count  ==  0  ||(digits  &&  random.getValue()  ==  0))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||(digits  &&  random.getValue()  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||(digits  &&  random.getValue()  ==  0))  {	  if(count    ==    0    ||(letters    &&    random.getValue()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
74	[BUG]  [BUGGY]  if(count  ==  0  ||(buffered  &&  random.getValue()  ==  0))  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||(buffered  &&  random.getValue()  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||(buffered  &&  random.getValue()  ==  0))  {	  if(count    ==    0    ||(letters    &&    random.getValue()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
75	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(digits  &&  random.length  >  0))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(digits  &&  random.length  >  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(digits  &&  random.length  >  0))  {	  if((    letters    &&    random.length    >    0)||(count    &&    random.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
76	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(count  &&  chars.length  >  0))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(count  &&  chars.length  >  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(count  &&  chars.length  >  0))  {	  if((    letters    &&    random.length    >    0)||(count    &&    random.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
77	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(count  &&  random.length  >  0)||(numbers  &&  random.length  >  0))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(count  &&  random.length  >  0)||(numbers  &&  random.length  >  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(count  &&  random.length  >  0)||(numbers  &&  random.length  >  0))  {	  if((    letters    &&    random.length    >    0)||(count    &&    random.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
78	[BUG]  [BUGGY]  if((  letters  &&  random  ==  null)||(numbers  &&  random.length  >  0))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random  ==  null)||(numbers  &&  random.length  >  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random  ==  null)||(numbers  &&  random.length  >  0))  {	  if((    letters    &&    chars!=    null)||(numbers    &&    random.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
79	[BUG]  [BUGGY]  if((  numbers  &&  random!=  null)||(numbers  &&  random.length  >  0))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  numbers  &&  random!=  null)||(numbers  &&  random.length  >  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  numbers  &&  random!=  null)||(numbers  &&  random.length  >  0))  {	  if((    letters    &&    chars!=    null)||(numbers    &&    random.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
80	[BUG]  [BUGGY]  if((  letters  &&  random!=  null)||(count  &&  random.length  >  0))  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random!=  null)||(count  &&  random.length  >  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random!=  null)||(count  &&  random.length  >  0))  {	  if((    letters    &&    chars!=    null)||(numbers    &&    random.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
81	[BUG]  [BUGGY]  if(numbers  ||  count  ==  0  &&  random.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(numbers  ||  count  ==  0  &&  random.length  ==  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(numbers  ||  count  ==  0  &&  random.length  ==  0)  {	  if(count    ==    0    &&    random.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
82	[BUG]  [BUGGY]  if(ch  ==  0  &&  random.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(ch  ==  0  &&  random.length  ==  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(ch  ==  0  &&  random.length  ==  0)  {	  if(count    ==    0    &&    random.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
83	[BUG]  [BUGGY]  Random  random  =  random.nextInt(start,  end  -  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextInt(start,  end  -  1);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextInt(start,  end  -  1);	  Random    random    =    random.nextInt(start,    end    -    start);    	non-compiled	[CE]  	91	None	replace
84	[BUG]  [BUGGY]  Random  random  =  random.nextInt(ch,  start  -  start);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextInt(ch,  start  -  start);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextInt(ch,  start  -  start);	  Random    random    =    random.nextInt(start,    end    -    start);    	non-compiled	[CE]  	91	None	replace
85	[BUG]  [BUGGY]  Random  random  =  random.nextInt(0,  end  -  start);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextInt(0,  end  -  start);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextInt(0,  end  -  start);	  Random    random    =    random.nextInt(start,    end    -    start);    	non-compiled	[CE]  	91	None	replace
86	[BUG]  [BUGGY]  Random  random  =  random.nextInt(1,  end  -  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextInt(1,  end  -  1);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextInt(1,  end  -  1);	  Random    random    =    random.nextInt(start,    end    -    start);    	non-compiled	[CE]  	91	None	replace
87	[BUG]  [BUGGY]  char  ch  =  random.getChars(0,  0);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  random.getChars(0,  0);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(0,  0);	  char    ch    =    random.getChars(ch,    RANDOM);    	non-compiled	[CE]  	79	None	replace
88	[BUG]  [BUGGY]  String  ch  =  random.getChars(ch,  RANDOM);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  String  ch  =  random.getChars(ch,  RANDOM);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	String  ch  =  random.getChars(ch,  RANDOM);	  char    ch    =    random.getChars(ch,    RANDOM);    	non-compiled	[CE]  	79	None	replace
89	[BUG]  [BUGGY]  String  ch  =  random.nextToken()  +  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  String  ch  =  random.nextToken()  +  1;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	String  ch  =  random.nextToken()  +  1;	  char    ch    =    random.nextToken()    +    1;    	non-compiled	[CE]  	100	None	replace
90	[BUG]  [BUGGY]  if((  letters  &&  random!=  null)||(numbers  &&  ch.length  ==  0))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random!=  null)||(numbers  &&  ch.length  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random!=  null)||(numbers  &&  ch.length  ==  0))  {	  if((    letters    &&    ch!=    null)||(numbers    &&    chars.length    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
91	[BUG]  [BUGGY]  if((  letters  &&  ch!=  null)||(numbers  &&  chars.length  >  0))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  ch!=  null)||(numbers  &&  chars.length  >  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  ch!=  null)||(numbers  &&  chars.length  >  0))  {	  if((    letters    &&    ch!=    null)||(numbers    &&    chars.length    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
92	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(count  &&  chars[0]  ==  ch))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(count  &&  chars[0]  ==  ch))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(count  &&  chars[0]  ==  ch))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    chars[0]    ==    chars))    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
93	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(buffer,  number  &&  chars[0]  ==  chars))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(buffer,  number  &&  chars[0]  ==  chars))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(buffer,  number  &&  chars[0]  ==  chars))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    chars[0]    ==    chars))    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
94	[BUG]  [BUGGY]  char  ch  =  random.nextString();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  random.nextString();  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.nextString();	  char    ch    =    random.nextDouble()    +    4;    	non-compiled	[CE]  	99	None	replace
95	[BUG]  [BUGGY]  if(count  ==  0  ||(digits  &&  random.getChars(ch)!=  0))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||(digits  &&  random.getChars(ch)!=  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||(digits  &&  random.getChars(ch)!=  0))  {	  if(count    ==    0    ||(letters    &&    random.getChars(ch)!=    0))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
96	[BUG]  [BUGGY]  Char  ch  =  random.nextChar();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Char  ch  =  random.nextChar();  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Char  ch  =  random.nextChar();	  Char    ch    =    random.nextToken();    	non-compiled	[CE]  	64	None	replace
97	[BUG]  [BUGGY]  char  ch  =  random.nextChar();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  random.nextChar();  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.nextChar();	  Char    ch    =    random.nextToken();    	non-compiled	[CE]  	64	None	replace
98	[BUG]  [BUGGY]  Char  ch  =  random.nextToken()  +  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Char  ch  =  random.nextToken()  +  1;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Char  ch  =  random.nextToken()  +  1;	  Char    ch    =    random.nextToken();    	non-compiled	[CE]  	64	None	replace
99	[BUG]  [BUGGY]  Random  random  =  new  Random(random.nullValue()  +  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  new  Random(random.nullValue()  +  1);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  new  Random(random.nullValue()  +  1);	  Random    random    =    new    Random(random.nullValue());    	non-compiled	[CE]  	120	None	replace
100	[BUG]  [BUGGY]  Random  random  =  new  Random(random.nullValue(),  ch);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  new  Random(random.nullValue(),  ch);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  new  Random(random.nullValue(),  ch);	  Random    random    =    new    Random(random.nullValue());    	non-compiled	[CE]  	120	None	replace
101	[BUG]  [BUGGY]  Random  random  =  new  Random(random.nullValue(),  chars);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  new  Random(random.nullValue(),  chars);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  new  Random(random.nullValue(),  chars);	  Random    random    =    new    Random(random.nullValue());    	non-compiled	[CE]  	120	None	replace
102	[BUG]  [BUGGY]  Random  random  =  new  Random(random.nullValue(),  letters);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  new  Random(random.nullValue(),  letters);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  new  Random(random.nullValue(),  letters);	  Random    random    =    new    Random(random.nullValue());    	non-compiled	[CE]  	120	None	replace
103	[BUG]  [BUGGY]  if((  letters  &&  buffer.length  >  0)||(numbers  &&  random.length  >  0))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  buffer.length  >  0)||(numbers  &&  random.length  >  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  buffer.length  >  0)||(numbers  &&  random.length  >  0))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    buffer.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
104	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(count  &&  buffer.length  >  0))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(count  &&  buffer.length  >  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(count  &&  buffer.length  >  0))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    buffer.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
105	[BUG]  [BUGGY]  if((  letters  &&  random!=  null)||(count  &&  chars.length  ==  0))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random!=  null)||(count  &&  chars.length  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random!=  null)||(count  &&  chars.length  ==  0))  {	  if((    letters    &&    chars!=    null)||(count    &&    chars.length    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
106	[BUG]  [BUGGY]  if((  letters  &&  chars!=  null)||(count  &&  random.length  ==  0))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  chars!=  null)||(count  &&  random.length  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  chars!=  null)||(count  &&  random.length  ==  0))  {	  if((    letters    &&    chars!=    null)||(count    &&    chars.length    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
107	[BUG]  [BUGGY]  if((  letters  &&  ch!=  null)||(count  &&  chars.length  ==  0))  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  ch!=  null)||(count  &&  chars.length  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  ch!=  null)||(count  &&  chars.length  ==  0))  {	  if((    letters    &&    chars!=    null)||(count    &&    chars.length    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
108	[BUG]  [BUGGY]  if(numbers  ==  0  ||  random.numbers  ==  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(numbers  ==  0  ||  random.numbers  ==  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(numbers  ==  0  ||  random.numbers  ==  0)  {	  if(count    ==    0    ||    random.numbers    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
109	[BUG]  [BUGGY]  if(count  ==  0  ||  random.numbers!=  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  random.numbers!=  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  random.numbers!=  0)  {	  if(count    ==    0    ||    random.numbers    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
110	[BUG]  [BUGGY]  if(count  ==  0  ||  buffer.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  buffer.length  ==  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  buffer.length  ==  0)  {	  if(count    ==    0    ||    chars.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
111	[BUG]  [BUGGY]  if(count  ==  0  ||  random.chars.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  random.chars.length  ==  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  random.chars.length  ==  0)  {	  if(count    ==    0    ||    chars.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
112	[BUG]  [BUGGY]  if((  letters  &&  random!=  null)||(count  &&  chars.length  >  0))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random!=  null)||(count  &&  chars.length  >  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random!=  null)||(count  &&  chars.length  >  0))  {	  if((    letters    &&    random!=    null)||(numbers    &&    chars.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
113	[BUG]  [BUGGY]  if((  letters  &&  random!=  null)||(numbers  &&  buffer.length  >  0))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random!=  null)||(numbers  &&  buffer.length  >  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random!=  null)||(numbers  &&  buffer.length  >  0))  {	  if((    letters    &&    random!=    null)||(numbers    &&    chars.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
114	[BUG]  [BUGGY]  if(count  ||  buffer.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ||  buffer.length  ==  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ||  buffer.length  ==  0)  {	  if(numbers    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
115	[BUG]  [BUGGY]  if(buffer  ==  null  ||  numbers  ||  buffer.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(buffer  ==  null  ||  numbers  ||  buffer.length  ==  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(buffer  ==  null  ||  numbers  ||  buffer.length  ==  0)  {	  if(numbers    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
116	[BUG]  [BUGGY]  if(buffer.length  ||  number(1)  ==  0)  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(buffer.length  ||  number(1)  ==  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(buffer.length  ||  number(1)  ==  0)  {	  if(numbers    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
117	[BUG]  [BUGGY]  if(buffer.length  ||  numbers  ||  number  ==  0)  {  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(buffer.length  ||  numbers  ||  number  ==  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(buffer.length  ||  numbers  ||  number  ==  0)  {	  if(numbers    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
118	[BUG]  [BUGGY]  char[]  buffer,  Random  random,  boolean  numbers)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char[]  buffer,  Random  random,  boolean  numbers)  {  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char[]  buffer,  Random  random,  boolean  numbers)  {	  char[]    buffer,    Random    random,    boolean    letters)    {    	non-compiled	[CE]  	94	None	replace
119	[BUG]  [BUGGY]  char[]  buffer,  Random  random,  boolean  letters,  boolean  numbers)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char[]  buffer,  Random  random,  boolean  letters,  boolean  numbers)  {  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char[]  buffer,  Random  random,  boolean  letters,  boolean  numbers)  {	  char[]    buffer,    Random    random,    boolean    letters)    {    	non-compiled	[CE]  	94	None	replace
120	[BUG]  [BUGGY]  Random  random  =  random!=  null?  random.next()  :  chars;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random!=  null?  random.next()  :  chars;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random!=  null?  random.next()  :  chars;	  Random    random    =    random!=    null?    random.next()    :    ch;    	non-compiled	[CE]  	50	None	replace
121	[BUG]  [BUGGY]  Random  random  =  random  ==  null?  random.next()  :  chars;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random  ==  null?  random.next()  :  chars;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random  ==  null?  random.next()  :  chars;	  Random    random    =    random!=    null?    random.next()    :    ch;    	non-compiled	[CE]  	50	None	replace
122	[BUG]  [BUGGY]  Random  random  =  random!=  null?  random.next()  :  CHARS;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random!=  null?  random.next()  :  CHARS;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random!=  null?  random.next()  :  CHARS;	  Random    random    =    random!=    null?    random.next()    :    ch;    	non-compiled	[CE]  	50	None	replace
123	[BUG]  [BUGGY]  char[]  buffer,  Random  random,  int  end)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char[]  buffer,  Random  random,  int  end)  {  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char[]  buffer,  Random  random,  int  end)  {	  char[]    buffer,    Random    random,    int    start)    {    	non-compiled	[CE]  	33	None	replace
124	[BUG]  [BUGGY]  char[]  buffer,  Random  random,  int  start,  boolean  letters)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char[]  buffer,  Random  random,  int  start,  boolean  letters)  {  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char[]  buffer,  Random  random,  int  start,  boolean  letters)  {	  char[]    buffer,    Random    random,    int    start)    {    	non-compiled	[CE]  	33	None	replace
125	[BUG]  [BUGGY]  char[]  buffer,  Random  random,  short  start)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char[]  buffer,  Random  random,  short  start)  {  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char[]  buffer,  Random  random,  short  start)  {	  char[]    buffer,    Random    random,    int    start)    {    	non-compiled	[CE]  	33	None	replace
126	[BUG]  [BUGGY]  Random  random  =  random.nullValue(ch);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nullValue(ch);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nullValue(ch);	  Random    random    =    random.nullValue(0);    	non-compiled	[CE]  	78	None	replace
127	[BUG]  [BUGGY]  Random  random  =  random.nullValue(1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nullValue(1);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nullValue(1);	  Random    random    =    random.nullValue(0);    	non-compiled	[CE]  	78	None	replace
128	[BUG]  [BUGGY]  if(count  ||  chars.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ||  chars.length  ==  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ||  chars.length  ==  0)  {	  if(numbers    ||    chars.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
129	[BUG]  [BUGGY]  if(count  ||  numbers.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ||  numbers.length  ==  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ||  numbers.length  ==  0)  {	  if(numbers    ||    chars.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
130	[BUG]  [BUGGY]  Random  random  =  random.nextDouble(ch,  start,  end);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextDouble(ch,  start,  end);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextDouble(ch,  start,  end);	  Random    random    =    random.nextDouble(start,    end);    	non-compiled	[CE]  	107	None	replace
131	[BUG]  [BUGGY]  Random  random  =  random.nextDouble(start,  end  +  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextDouble(start,  end  +  1);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextDouble(start,  end  +  1);	  Random    random    =    random.nextDouble(start,    end);    	non-compiled	[CE]  	107	None	replace
132	[BUG]  [BUGGY]  Random  random  =  random.nextDouble(0,  start,  end);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextDouble(0,  start,  end);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextDouble(0,  start,  end);	  Random    random    =    random.nextDouble(start,    end);    	non-compiled	[CE]  	107	None	replace
133	[BUG]  [BUGGY]  Random  random  =  random.nextDouble(0,  0);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextDouble(0,  0);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextDouble(0,  0);	  Random    random    =    random.nextDouble(start,    end);    	non-compiled	[CE]  	107	None	replace
134	[BUG]  [BUGGY]  char  ch  =  random.getChars(0,  chars.length);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  random.getChars(0,  chars.length);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(0,  chars.length);	  char    ch    =    random.getChars(0,    ch);    	non-compiled	[CE]  	80	None	replace
135	[BUG]  [BUGGY]  char  ch  =  random.getChars(0,  count);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  random.getChars(0,  count);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(0,  count);	  char    ch    =    random.getChars(0,    ch);    	non-compiled	[CE]  	80	None	replace
136	[BUG]  [BUGGY]  char  ch  =  random.getChars(0,  4);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  random.getChars(0,  4);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(0,  4);	  char    ch    =    random.getChars(0,    ch);    	non-compiled	[CE]  	80	None	replace
137	[BUG]  [BUGGY]  char  ch  =  random.getChars(0,  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  random.getChars(0,  1);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(0,  1);	  char    ch    =    random.getChars(0,    ch);    	non-compiled	[CE]  	80	None	replace
138	[BUG]  [BUGGY]  Random  random  =  random.nullValue()  /  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nullValue()  /  1;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nullValue()  /  1;	  Random    random    =    random.nullValue()    +    1;    	non-compiled	[CE]  	28	None	replace
139	[BUG]  [BUGGY]  Random  random  =  random  ==  null?  null  :  random.getValue();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random  ==  null?  null  :  random.getValue();  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random  ==  null?  null  :  random.getValue();	  Random    random    =    random!=    null?    null    :    random.getValue();    	non-compiled	[CE]  	95	None	replace
140	[BUG]  [BUGGY]  if(count  ==  0  ||(offsets  ||  random.getValue()  ==  0))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||(offsets  ||  random.getValue()  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||(offsets  ||  random.getValue()  ==  0))  {	  if(count    ==    0    ||(offsets    &&    random.getValue()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
141	[BUG]  [BUGGY]  if(count  ==  0  ||(offsets  frumoase  &&  random.getValue()  ==  0))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||(offsets  frumoase  &&  random.getValue()  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||(offsets  frumoase  &&  random.getValue()  ==  0))  {	  if(count    ==    0    ||(offsets    &&    random.getValue()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
142	[BUG]  [BUGGY]  if(offsets  ==  0  ||(offsets  frumoase  &&  random.getValue()  ==  0))  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(offsets  ==  0  ||(offsets  frumoase  &&  random.getValue()  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(offsets  ==  0  ||(offsets  frumoase  &&  random.getValue()  ==  0))  {	  if(count    ==    0    ||(offsets    &&    random.getValue()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
143	[BUG]  [BUGGY]  Random  random  =  random.getValue()  +  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.getValue()  +  1;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.getValue()  +  1;	  Random    random    =    random.next()    +    1;    	non-compiled	[CE]  	83	None	replace
144	[BUG]  [BUGGY]  if((  random.length  &&  letters  >  0)||(count  &&  random.length  >  0))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  random.length  &&  letters  >  0)||(count  &&  random.length  >  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  random.length  &&  letters  >  0)||(count  &&  random.length  >  0))  {	  if((    random.length    &&    letters    >    0)||(numbers    &&    random.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
145	[BUG]  [BUGGY]  if((  random.length  &&  count  >  0)||(numbers  &&  random.length  >  0))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  random.length  &&  count  >  0)||(numbers  &&  random.length  >  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  random.length  &&  count  >  0)||(numbers  &&  random.length  >  0))  {	  if((    random.length    &&    letters    >    0)||(numbers    &&    random.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
146	[BUG]  [BUGGY]  if((  random.length  &&  ch  >  0)||(numbers  &&  random.length  >  0))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  random.length  &&  ch  >  0)||(numbers  &&  random.length  >  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  random.length  &&  ch  >  0)||(numbers  &&  random.length  >  0))  {	  if((    random.length    &&    letters    >    0)||(numbers    &&    random.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
147	[BUG]  [BUGGY]  if(count  ==  0  ||  random.length!=  0  ||  numbers)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  random.length!=  0  ||  numbers)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  random.length!=  0  ||  numbers)  {	  if(count    ==    0    ||    random.length!=    0    ||    letters)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
148	[BUG]  [BUGGY]  if(count  ==  0  ||(numbers  &&  random.getChars(ch,  chars.length)  ==  0))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||(numbers  &&  random.getChars(ch,  chars.length)  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||(numbers  &&  random.getChars(ch,  chars.length)  ==  0))  {	  if(count    ==    0    ||(numbers    &&    random.getChars(ch)    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
149	[BUG]  [BUGGY]  if(ch  ==  0  ||(numbers  &&  random.getChars(ch)  ==  0))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(ch  ==  0  ||(numbers  &&  random.getChars(ch)  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(ch  ==  0  ||(numbers  &&  random.getChars(ch)  ==  0))  {	  if(count    ==    0    ||(numbers    &&    random.getChars(ch)    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
150	[BUG]  [BUGGY]  if(count  ==  0  &&  letters  ||  random.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  &&  letters  ||  random.length  ==  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  &&  letters  ||  random.length  ==  0)  {	  if(count    ==    0    &&    letters    &&    random.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
151	[BUG]  [BUGGY]  if(count  ==  0  &&  random.length!=  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  &&  random.length!=  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  &&  random.length!=  0)  {	  if(count    ==    0    &&    letters    &&    random.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
152	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(count  &&  chars[0]  ==  CHARS))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(count  &&  chars[0]  ==  CHARS))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(count  &&  chars[0]  ==  CHARS))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    chars[0]    ==    CHARS))    {    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
153	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  buffer[0]  ==  CHARS))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  buffer[0]  ==  CHARS))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(numbers  &&  buffer[0]  ==  CHARS))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    chars[0]    ==    CHARS))    {    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
154	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(buffer,  number  &&  chars[0]  ==  CHARS))  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(buffer,  number  &&  chars[0]  ==  CHARS))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(buffer,  number  &&  chars[0]  ==  CHARS))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    chars[0]    ==    CHARS))    {    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
155	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  ||  chars[0]  ==  CHARS))  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  ||  chars[0]  ==  CHARS))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(numbers  ||  chars[0]  ==  CHARS))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    chars[0]    ==    CHARS))    {    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
156	[BUG]  [BUGGY]  String  ch  =  random.getChars(start,  end  +  1);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  String  ch  =  random.getChars(start,  end  +  1);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	String  ch  =  random.getChars(start,  end  +  1);	  String    ch    =    random.getChars(start,    end);    	non-compiled	[CE]  	14	None	replace
157	[BUG]  [BUGGY]  String  ch  =  random.getChars(buffer,  start,  end);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  String  ch  =  random.getChars(buffer,  start,  end);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	String  ch  =  random.getChars(buffer,  start,  end);	  String    ch    =    random.getChars(start,    end);    	non-compiled	[CE]  	14	None	replace
158	[BUG]  [BUGGY]  String  ch  =  random.getChars(start,  end,  letters);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  String  ch  =  random.getChars(start,  end,  letters);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	String  ch  =  random.getChars(start,  end,  letters);	  String    ch    =    random.getChars(start,    end);    	non-compiled	[CE]  	14	None	replace
159	[BUG]  [BUGGY]  if(count  ==  0  ||  numbers  &&  random.length!=  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  numbers  &&  random.length!=  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  numbers  &&  random.length!=  0)  {	  if(count    ==    0    ||    letters    &&    random.length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
160	[BUG]  [BUGGY]  if(count  ==  0  ||  letters  &&  random.length  >=  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  letters  &&  random.length  >=  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  letters  &&  random.length  >=  0)  {	  if(count    ==    0    ||    letters    &&    random.length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
161	[BUG]  [BUGGY]  Random  random  =  random.nextInt(Character.toLowerCase(ch),  start,  end);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextInt(Character.toLowerCase(ch),  start,  end);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextInt(Character.toLowerCase(ch),  start,  end);	  Random    random    =    random.nextInt(ch,    start,    end);    	non-compiled	[CE]  	21	None	replace
162	[BUG]  [BUGGY]  Random  random  =  random.nextInt(ch,  start,  end,  letters);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextInt(ch,  start,  end,  letters);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextInt(ch,  start,  end,  letters);	  Random    random    =    random.nextInt(ch,    start,    end);    	non-compiled	[CE]  	21	None	replace
163	[BUG]  [BUGGY]  Random  random  =  random.nextInt(Character.toLowerCase(start,  end));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextInt(Character.toLowerCase(start,  end));  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextInt(Character.toLowerCase(start,  end));	  Random    random    =    random.nextInt(ch,    start,    end);    	non-compiled	[CE]  	21	None	replace
164	[BUG]  [BUGGY]  if(count  ==  0  ||  random.length  ==  0  ||  letters  ||  random.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  random.length  ==  0  ||  letters  ||  random.length  ==  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  random.length  ==  0  ||  letters  ||  random.length  ==  0)  {	  if(count    ==    0    ||    random.length    ==    0    ||    chars.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
165	[BUG]  [BUGGY]  if(count  ==  0  ||  random.length  ==  0  ||  ch.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  random.length  ==  0  ||  ch.length  ==  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  random.length  ==  0  ||  ch.length  ==  0)  {	  if(count    ==    0    ||    random.length    ==    0    ||    chars.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
166	[BUG]  [BUGGY]  if(count  ==  0  ||  random.length  ==  0  ||  chars.length!=  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  random.length  ==  0  ||  chars.length!=  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  random.length  ==  0  ||  chars.length!=  0)  {	  if(count    ==    0    ||    random.length    ==    0    ||    chars.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
167	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  random.length  >  0)||(count  &&  random.length  >  0))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  random.length  >  0)||(count  &&  random.length  >  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(numbers  &&  random.length  >  0)||(count  &&  random.length  >  0))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    random.length    >    0)||(numbers    &&    random.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
168	[BUG]  [BUGGY]  if((  random.length  &&  letters  >  0)||(count  &&  random.length  >  0)||(numbers  &&  random.length  >  0))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  random.length  &&  letters  >  0)||(count  &&  random.length  >  0)||(numbers  &&  random.length  >  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  random.length  &&  letters  >  0)||(count  &&  random.length  >  0)||(numbers  &&  random.length  >  0))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    random.length    >    0)||(numbers    &&    random.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
169	[BUG]  [BUGGY]  if((  numbers  &&  random.length  >  0)||(count  &&  random.length  >  0)||(numbers  &&  random.length  >  0))  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  numbers  &&  random.length  >  0)||(count  &&  random.length  >  0)||(numbers  &&  random.length  >  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  numbers  &&  random.length  >  0)||(count  &&  random.length  >  0)||(numbers  &&  random.length  >  0))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    random.length    >    0)||(numbers    &&    random.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
170	[BUG]  [BUGGY]  Random  random  =  random.nextToken()  +  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextToken()  +  1;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextToken()  +  1;	  Random    random    =    random.nextToken();    	non-compiled	[CE]  	48	None	replace
171	[BUG]  [BUGGY]  Random  random  =  random.nextToken().trim();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextToken().trim();  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextToken().trim();	  Random    random    =    random.nextToken();    	non-compiled	[CE]  	48	None	replace
172	[BUG]  [BUGGY]  Random  random  =  random.nextToken().chars();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextToken().chars();  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextToken().chars();	  Random    random    =    random.nextToken();    	non-compiled	[CE]  	48	None	replace
173	[BUG]  [BUGGY]  String  count  =  random.length;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  String  count  =  random.length;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	String  count  =  random.length;	  char    count    =    random.length;    	non-compiled	[CE]  	6	None	replace
174	[BUG]  [BUGGY]  char  count  =  chars.length;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  count  =  chars.length;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  count  =  chars.length;	  char    count    =    random.length;    	non-compiled	[CE]  	6	None	replace
175	[BUG]  [BUGGY]  char  count  =  random.length  -  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  count  =  random.length  -  1;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  count  =  random.length  -  1;	  char    count    =    random.length;    	non-compiled	[CE]  	6	None	replace
176	[BUG]  [BUGGY]  char  count  =  random.chars.length;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  count  =  random.chars.length;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  count  =  random.chars.length;	  char    count    =    random.length;    	non-compiled	[CE]  	6	None	replace
177	[BUG]  [BUGGY]  if(numbers  ==  0  ||  random.numbers.length)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(numbers  ==  0  ||  random.numbers.length)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(numbers  ==  0  ||  random.numbers.length)  {	  if(numbers    ==    0    ||    random.numbers)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
178	[BUG]  [BUGGY]  if(numbers  ==  0  ||  random.numbers.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(numbers  ==  0  ||  random.numbers.length  >  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(numbers  ==  0  ||  random.numbers.length  >  0)  {	  if(numbers    ==    0    ||    random.numbers)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
179	[BUG]  [BUGGY]  if(chars  ==  0  ||  random.numbers)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(chars  ==  0  ||  random.numbers)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(chars  ==  0  ||  random.numbers)  {	  if(numbers    ==    0    ||    random.numbers)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
180	[BUG]  [BUGGY]  if(chars  ==  0  ||(numbers  &&  random.getChars(ch)!=  0))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(chars  ==  0  ||(numbers  &&  random.getChars(ch)!=  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(chars  ==  0  ||(numbers  &&  random.getChars(ch)!=  0))  {	  if(ch    ==    0    ||(numbers    &&    random.getChars(ch)!=    0))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
181	[BUG]  [BUGGY]  if(ch  ==  0  ||(count  &&  random.getChars(ch)!=  0))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(ch  ==  0  ||(count  &&  random.getChars(ch)!=  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(ch  ==  0  ||(count  &&  random.getChars(ch)!=  0))  {	  if(ch    ==    0    ||(numbers    &&    random.getChars(ch)!=    0))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
182	[BUG]  [BUGGY]  if(count  ==  0  ||  random.numbers  ||  numbers)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  random.numbers  ||  numbers)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  random.numbers  ||  numbers)  {	  if(count    ==    0    ||    random.numbers    ||    letters)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
183	[BUG]  [BUGGY]  if(count  ==  0  ||  random.numbers  ||  letters  ||  numbers)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  random.numbers  ||  letters  ||  numbers)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  random.numbers  ||  letters  ||  numbers)  {	  if(count    ==    0    ||    random.numbers    ||    letters)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
184	[BUG]  [BUGGY]  if(count  ==  0  ||  random.numbers  ||  letters  ||  number)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  random.numbers  ||  letters  ||  number)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  random.numbers  ||  letters  ||  number)  {	  if(count    ==    0    ||    random.numbers    ||    letters)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
185	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(count  &&  chars[0]!=  chars))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(count  &&  chars[0]!=  chars))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(count  &&  chars[0]!=  chars))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    chars[0]!=    chars))    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
186	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  buffer[0]!=  chars))  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  buffer[0]!=  chars))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(numbers  &&  buffer[0]!=  chars))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    chars[0]!=    chars))    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
187	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(count  &&  chars[0]!=  ch))  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(count  &&  chars[0]!=  ch))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(count  &&  chars[0]!=  ch))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    chars[0]!=    chars))    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
188	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(buffer,  number  &&  chars[0]!=  chars))  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(buffer,  number  &&  chars[0]!=  chars))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(buffer,  number  &&  chars[0]!=  chars))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    chars[0]!=    chars))    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
189	[BUG]  [BUGGY]  String  count  =  random.length();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  String  count  =  random.length();  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	String  count  =  random.length();	  char    count    =    random.length();    	non-compiled	[CE]  	47	None	replace
190	[BUG]  [BUGGY]  char  count  =  random.length()  +  1;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  count  =  random.length()  +  1;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  count  =  random.length()  +  1;	  char    count    =    random.length();    	non-compiled	[CE]  	47	None	replace
191	[BUG]  [BUGGY]  char  count  =  random.length()  +  4;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  count  =  random.length()  +  4;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  count  =  random.length()  +  4;	  char    count    =    random.length();    	non-compiled	[CE]  	47	None	replace
192	[BUG]  [BUGGY]  Random  random  =  random!=  null?  null  :  random.getRandom();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random!=  null?  null  :  random.getRandom();  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random!=  null?  null  :  random.getRandom();	  Random    random    =    random.getRandom();    	non-compiled	[CE]  	51	None	replace
193	[BUG]  [BUGGY]  Random  random  =  random  ==  null?  null  :  random.getRandom();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random  ==  null?  null  :  random.getRandom();  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random  ==  null?  null  :  random.getRandom();	  Random    random    =    random.getRandom();    	non-compiled	[CE]  	51	None	replace
194	[BUG]  [BUGGY]  int  count  =  chars.length  +  1;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  int  count  =  chars.length  +  1;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	int  count  =  chars.length  +  1;	  int    count    =    chars.length;    	non-compiled	[CE]  	4	None	replace
195	[BUG]  [BUGGY]  if(ch  ||  random.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(ch  ||  random.length  ==  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(ch  ||  random.length  ==  0)  {	  if(chars    ||    random.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
196	[BUG]  [BUGGY]  if(count  ||  random.length!=  0)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ||  random.length!=  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ||  random.length!=  0)  {	  if(chars    ||    random.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
197	[BUG]  [BUGGY]  Random  random  =  random.nextInt(0,  0);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextInt(0,  0);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextInt(0,  0);	  Random    random    =    random.nextInt(0,    1);    	non-compiled	[CE]  	24	None	replace
198	[BUG]  [BUGGY]  Random  random  =  random.nextInt(1,  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextInt(1,  1);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextInt(1,  1);	  Random    random    =    random.nextInt(0,    1);    	non-compiled	[CE]  	24	None	replace
199	[BUG]  [BUGGY]  Random  random  =  random.nextInt(0,  2);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextInt(0,  2);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextInt(0,  2);	  Random    random    =    random.nextInt(0,    1);    	non-compiled	[CE]  	24	None	replace
200	[BUG]  [BUGGY]  char[]  buffer,  Random  random,  short  start,  int  letters)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char[]  buffer,  Random  random,  short  start,  int  letters)  {  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char[]  buffer,  Random  random,  short  start,  int  letters)  {	  char[]    buffer,    Random    random,    int    letters)    {    	non-compiled	[CE]  	31	None	replace
201	[BUG]  [BUGGY]  char[]  buffer,  Random  random,  int  numbers)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char[]  buffer,  Random  random,  int  numbers)  {  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char[]  buffer,  Random  random,  int  numbers)  {	  char[]    buffer,    Random    random,    int    letters)    {    	non-compiled	[CE]  	31	None	replace
202	[BUG]  [BUGGY]  Random  random  =  random.nextByte();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextByte();  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextByte();	  Random    random    =    random.nextChar();    	non-compiled	[CE]  	49	None	replace
203	[BUG]  [BUGGY]  Random  random  =  random.nextChar()  +  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextChar()  +  1;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextChar()  +  1;	  Random    random    =    random.nextChar();    	non-compiled	[CE]  	49	None	replace
204	[BUG]  [BUGGY]  char  ch  =  random.getChars(buffer,  start,  end,  letters);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  random.getChars(buffer,  start,  end,  letters);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(buffer,  start,  end,  letters);	  char    ch    =    random.getChars(buffer,    start,    end);    	non-compiled	[CE]  	17	None	replace
205	[BUG]  [BUGGY]  char  ch  =  random.getChars(buffer,  0,  start,  end);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  random.getChars(buffer,  0,  start,  end);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(buffer,  0,  start,  end);	  char    ch    =    random.getChars(buffer,    start,    end);    	non-compiled	[CE]  	17	None	replace
206	[BUG]  [BUGGY]  char  ch  =  random.getChars(0,  start,  end);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  random.getChars(0,  start,  end);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(0,  start,  end);	  char    ch    =    random.getChars(buffer,    start,    end);    	non-compiled	[CE]  	17	None	replace
207	[BUG]  [BUGGY]  char  ch  =  random.getChars(buffer,  start,  end  +  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  random.getChars(buffer,  start,  end  +  1);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(buffer,  start,  end  +  1);	  char    ch    =    random.getChars(buffer,    start,    end);    	non-compiled	[CE]  	17	None	replace
208	[BUG]  [BUGGY]  if((  letters  &&  buffer!=  null)||(numbers  &&  random.length  >  0))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  buffer!=  null)||(numbers  &&  random.length  >  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  buffer!=  null)||(numbers  &&  random.length  >  0))  {	  if((    letters    &&    buffer!=    null)||(numbers    &&    chars.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
209	[BUG]  [BUGGY]  if((  letters  &&  random  ==  null)||(numbers  &&  chars.length  >  0))  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random  ==  null)||(numbers  &&  chars.length  >  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random  ==  null)||(numbers  &&  chars.length  >  0))  {	  if((    letters    &&    buffer!=    null)||(numbers    &&    chars.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
210	[BUG]  [BUGGY]  if((  numbers  &&  random!=  null)||(numbers  &&  chars.length  >  0))  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  numbers  &&  random!=  null)||(numbers  &&  chars.length  >  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  numbers  &&  random!=  null)||(numbers  &&  chars.length  >  0))  {	  if((    letters    &&    buffer!=    null)||(numbers    &&    chars.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
211	[BUG]  [BUGGY]  if(ch  ==  0  ||(numbers  &&  random.nextToken()!=  0))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(ch  ==  0  ||(numbers  &&  random.nextToken()!=  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(ch  ==  0  ||(numbers  &&  random.nextToken()!=  0))  {	  if(count    ==    0    ||(numbers    &&    random.nextToken()!=    0))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
212	[BUG]  [BUGGY]  Random  random  =  RANDOM.nullValue();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  RANDOM.nullValue();  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  RANDOM.nullValue();	  Random    random    =    chars.nullValue();    	non-compiled	[CE]  	29	None	replace
213	[BUG]  [BUGGY]  Random  random  =  chars.nullValue()  +  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  chars.nullValue()  +  1;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  chars.nullValue()  +  1;	  Random    random    =    chars.nullValue();    	non-compiled	[CE]  	29	None	replace
214	[BUG]  [BUGGY]  if(count  ||  random.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ||  random.length  <  =  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ||  random.length  <  =  0)  {	  if(numbers    ||    random.length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
215	[BUG]  [BUGGY]  if(numbers  ||  random.length  <  0)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(numbers  ||  random.length  <  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(numbers  ||  random.length  <  0)  {	  if(numbers    ||    random.length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
216	[BUG]  [BUGGY]  if(numbers  ||  random.length!=  0)  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(numbers  ||  random.length!=  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(numbers  ||  random.length!=  0)  {	  if(numbers    ||    random.length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
217	[BUG]  [BUGGY]  if(count  ==  0  ||  random.numbers.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  random.numbers.length  >  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  random.numbers.length  >  0)  {	  if(count    ==    0    ||    random.numbers.length)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
218	[BUG]  [BUGGY]  if(count  ==  0  ||  random.numbers.length  <  =  letters)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  random.numbers.length  <  =  letters)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  random.numbers.length  <  =  letters)  {	  if(count    ==    0    ||    random.numbers.length)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
219	[BUG]  [BUGGY]  if(count  ==  0  ||  random.numbers.length!=  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  random.numbers.length!=  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  random.numbers.length!=  0)  {	  if(count    ==    0    ||    random.numbers.length)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
220	[BUG]  [BUGGY]  if(count  ==  0  ||  random.numbers.length  >=  0)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  random.numbers.length  >=  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  random.numbers.length  >=  0)  {	  if(count    ==    0    ||    random.numbers.length)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
221	[BUG]  [BUGGY]  if((  letters  &&  random!=  null)||(numbers  &&  random.length  ||  count  ==  0))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random!=  null)||(numbers  &&  random.length  ||  count  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random!=  null)||(numbers  &&  random.length  ||  count  ==  0))  {	  if((    letters    &&    chars!=    null)||(numbers    &&    random.length    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
222	[BUG]  [BUGGY]  Random  random  =  random.nullValue()  *  chars.length;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nullValue()  *  chars.length;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nullValue()  *  chars.length;	  Random    random    =    random.nullValue()    +    chars.length;    	non-compiled	[CE]  	30	None	replace
223	[BUG]  [BUGGY]  Random  random  =  random.nullValue()  +  chars.length  +  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nullValue()  +  chars.length  +  1;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nullValue()  +  chars.length  +  1;	  Random    random    =    random.nullValue()    +    chars.length;    	non-compiled	[CE]  	30	None	replace
224	[BUG]  [BUGGY]  Random  random  =  random.nullValue()  /  chars.length;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nullValue()  /  chars.length;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nullValue()  /  chars.length;	  Random    random    =    random.nullValue()    +    chars.length;    	non-compiled	[CE]  	30	None	replace
225	[BUG]  [BUGGY]  int  count  =(count  ==  null)?  random.length  :  chars.length;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  int  count  =(count  ==  null)?  random.length  :  chars.length;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	int  count  =(count  ==  null)?  random.length  :  chars.length;	  int    count    =(chars    ==    null)?    random.length    :    chars.length;    	non-compiled	[CE]  	106	None	replace
226	[BUG]  [BUGGY]  int  count  =(characters  ==  null)?  random.length  :  chars.length;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  int  count  =(characters  ==  null)?  random.length  :  chars.length;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	int  count  =(characters  ==  null)?  random.length  :  chars.length;	  int    count    =(chars    ==    null)?    random.length    :    chars.length;    	non-compiled	[CE]  	106	None	replace
227	[BUG]  [BUGGY]  Random  random  =  random.nextDouble()  +  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextDouble()  +  1;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextDouble()  +  1;	  Random    random    =    random.nextDouble();    	non-compiled	[CE]  	108	None	replace
228	[BUG]  [BUGGY]  Random  random  =  random.nextDouble()  -  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextDouble()  -  1;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextDouble()  -  1;	  Random    random    =    random.nextDouble();    	non-compiled	[CE]  	108	None	replace
229	[BUG]  [BUGGY]  char  ch  =  random.getChars(start,  start);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  random.getChars(start,  start);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(start,  start);	  char    ch    =    random.getChars(ch,    start);    	non-compiled	[CE]  	81	None	replace
230	[BUG]  [BUGGY]  char  ch  =  random.getChars(start,  0);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  random.getChars(start,  0);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(start,  0);	  char    ch    =    random.getChars(ch,    start);    	non-compiled	[CE]  	81	None	replace
231	[BUG]  [BUGGY]  char  ch  =  random.getChars(0,  start);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  random.getChars(0,  start);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(0,  start);	  char    ch    =    random.getChars(ch,    start);    	non-compiled	[CE]  	81	None	replace
232	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  buffer.length  >  0)||(count  %  chars.length  >  0))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  buffer.length  >  0)||(count  %  chars.length  >  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(numbers  &&  buffer.length  >  0)||(count  %  chars.length  >  0))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    random.length    >    0)||(count    %    chars.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
233	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(count  &&  random.length  >  0)||(count  %  chars.length  >  0))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(count  &&  random.length  >  0)||(count  %  chars.length  >  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(count  &&  random.length  >  0)||(count  %  chars.length  >  0))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    random.length    >    0)||(count    %    chars.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
234	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(count  &&  random.length  >  0)||(numbers  &&  random.length  >  0)||(count  %  chars.length  >  0))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(count  &&  random.length  >  0)||(numbers  &&  random.length  >  0)||(count  %  chars.length  >  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(count  &&  random.length  >  0)||(numbers  &&  random.length  >  0)||(count  %  chars.length  >  0))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    random.length    >    0)||(count    %    chars.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
235	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(count  &&  random.length  >  0)||(buffer,  count  %  chars.length  >  0))  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(count  &&  random.length  >  0)||(buffer,  count  %  chars.length  >  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(count  &&  random.length  >  0)||(buffer,  count  %  chars.length  >  0))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    random.length    >    0)||(count    %    chars.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
236	[BUG]  [BUGGY]  if((  numbers  &&  random.length  >  0)||(numbers  &&  buffer[0]  ==  chars))  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  numbers  &&  random.length  >  0)||(numbers  &&  buffer[0]  ==  chars))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  numbers  &&  random.length  >  0)||(numbers  &&  buffer[0]  ==  chars))  {	  if((    numbers    &&    random.length    >    0)||(numbers    &&    chars[0]    ==    chars))    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
237	[BUG]  [BUGGY]  if((  numbers  &&  random.length  >  0)||(count  &&  chars[0]  ==  chars))  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  numbers  &&  random.length  >  0)||(count  &&  chars[0]  ==  chars))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  numbers  &&  random.length  >  0)||(count  &&  chars[0]  ==  chars))  {	  if((    numbers    &&    random.length    >    0)||(numbers    &&    chars[0]    ==    chars))    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
238	[BUG]  [BUGGY]  if((  numbers  &&  random.length  >  0)||(count  &&  chars[0]  ==  ch))  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  numbers  &&  random.length  >  0)||(count  &&  chars[0]  ==  ch))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  numbers  &&  random.length  >  0)||(count  &&  chars[0]  ==  ch))  {	  if((    numbers    &&    random.length    >    0)||(numbers    &&    chars[0]    ==    chars))    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
239	[BUG]  [BUGGY]  char  ch  =  random.getChars(start,  end,  chars);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  random.getChars(start,  end,  chars);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(start,  end,  chars);	  char    ch    =    random.getChars(start,    end,    letters);    	non-compiled	[CE]  	15	None	replace
240	[BUG]  [BUGGY]  char  ch  =  random.getChars(start,  end,  letters,  numbers);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  random.getChars(start,  end,  letters,  numbers);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(start,  end,  letters,  numbers);	  char    ch    =    random.getChars(start,    end,    letters);    	non-compiled	[CE]  	15	None	replace
241	[BUG]  [BUGGY]  char  ch  =  random.getChars(start,  end,  chars,  letters);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  random.getChars(start,  end,  chars,  letters);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(start,  end,  chars,  letters);	  char    ch    =    random.getChars(start,    end,    letters);    	non-compiled	[CE]  	15	None	replace
242	[BUG]  [BUGGY]  char  ch  =  random.getChars(start,  end,  0);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  random.getChars(start,  end,  0);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(start,  end,  0);	  char    ch    =    random.getChars(start,    end,    letters);    	non-compiled	[CE]  	15	None	replace
243	[BUG]  [BUGGY]  char  ch  =  random.getChars(buffer,  0,  chars.length);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  random.getChars(buffer,  0,  chars.length);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(buffer,  0,  chars.length);	  char    ch    =    random.getChars(ch,    chars);    	non-compiled	[CE]  	112	None	replace
244	[BUG]  [BUGGY]  String  ch  =  random.getChars(ch,  chars);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  String  ch  =  random.getChars(ch,  chars);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	String  ch  =  random.getChars(ch,  chars);	  char    ch    =    random.getChars(ch,    chars);    	non-compiled	[CE]  	112	None	replace
245	[BUG]  [BUGGY]  char  ch  =  random.getChars(buffer,  start,  chars);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  random.getChars(buffer,  start,  chars);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(buffer,  start,  chars);	  char    ch    =    random.getChars(ch,    chars);    	non-compiled	[CE]  	112	None	replace
246	[BUG]  [BUGGY]  Random  random  =  random.nextInt(ch,  start  +  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextInt(ch,  start  +  1);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextInt(ch,  start  +  1);	  Random    random    =    random.nextInt(start,    end    +    1);    	non-compiled	[CE]  	90	None	replace
247	[BUG]  [BUGGY]  Random  random  =  random.nextInt(start,  end  +  1,  letters);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextInt(start,  end  +  1,  letters);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextInt(start,  end  +  1,  letters);	  Random    random    =    random.nextInt(start,    end    +    1);    	non-compiled	[CE]  	90	None	replace
248	[BUG]  [BUGGY]  if(ch  ==  0  ||(numbers  &&  random.getValue()!=  0))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(ch  ==  0  ||(numbers  &&  random.getValue()!=  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(ch  ==  0  ||(numbers  &&  random.getValue()!=  0))  {	  if(count    ==    0    ||(numbers    &&    random.getValue()!=    0))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
249	[BUG]  [BUGGY]  if(count  ==  0  ||(buffered  &&  random.getValue()!=  0))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||(buffered  &&  random.getValue()!=  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||(buffered  &&  random.getValue()!=  0))  {	  if(count    ==    0    ||(numbers    &&    random.getValue()!=    0))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
250	[BUG]  [BUGGY]  String  ch  =  random.nextChar();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  String  ch  =  random.nextChar();  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	String  ch  =  random.nextChar();	  String    ch    =    random.nextToken();    	non-compiled	[CE]  	63	None	replace
251	[BUG]  [BUGGY]  String  ch  =  random.nextChars();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  String  ch  =  random.nextChars();  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	String  ch  =  random.nextChars();	  String    ch    =    random.nextToken();    	non-compiled	[CE]  	63	None	replace
252	[BUG]  [BUGGY]  char[]  buffer,  Random  random,  int  offset)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char[]  buffer,  Random  random,  int  offset)  {  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char[]  buffer,  Random  random,  int  offset)  {	  char[]    buffer,    Random    random,    int    count)    {    	non-compiled	[CE]  	32	None	replace
253	[BUG]  [BUGGY]  if(count  ==  0  ||  random.length  <  chars.length)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  random.length  <  chars.length)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  random.length  <  chars.length)  {	  if(count    ==    0    ||    random.length)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
254	[BUG]  [BUGGY]  if(count  ==  0  ||  random.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  random.length  >  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  random.length  >  0)  {	  if(count    ==    0    ||    random.length)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
255	[BUG]  [BUGGY]  if(count  ==  0  ||  random.length  <  =  letters)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  random.length  <  =  letters)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  random.length  <  =  letters)  {	  if(count    ==    0    ||    random.length)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
256	[BUG]  [BUGGY]  if(count  ==  0  ||  random.length  ||  letters)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  random.length  ||  letters)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  random.length  ||  letters)  {	  if(count    ==    0    ||    random.length)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
257	[BUG]  [BUGGY]  if(count  ==  0  ||(digits  &&  random.nextToken()  ==  0))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||(digits  &&  random.nextToken()  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||(digits  &&  random.nextToken()  ==  0))  {	  if(count    ==    0    ||(letters    &&    random.nextToken()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
258	[BUG]  [BUGGY]  if(count  ==  0  ||(buffered  &&  random.nextToken()  ==  0))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||(buffered  &&  random.nextToken()  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||(buffered  &&  random.nextToken()  ==  0))  {	  if(count    ==    0    ||(letters    &&    random.nextToken()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
259	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(count  ||(buffered  &&  random.length  >  0))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(count  ||(buffered  &&  random.length  >  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(count  ||(buffered  &&  random.length  >  0))  {	  if((    letters    &&    random.length    >    0)||(buffered    &&    random.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
260	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(buffered  &&  random.length  >  0)||(numbers  &&  random.length  >  0))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(buffered  &&  random.length  >  0)||(numbers  &&  random.length  >  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(buffered  &&  random.length  >  0)||(numbers  &&  random.length  >  0))  {	  if((    letters    &&    random.length    >    0)||(buffered    &&    random.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
261	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(count  *(buffered  &&  random.length  >  0)))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(count  *(buffered  &&  random.length  >  0)))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(count  *(buffered  &&  random.length  >  0)))  {	  if((    letters    &&    random.length    >    0)||(buffered    &&    random.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
262	[BUG]  [BUGGY]  if((  letters  &&  chars!=  null)||(count  &&  random.length  >  0))  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  chars!=  null)||(count  &&  random.length  >  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  chars!=  null)||(count  &&  random.length  >  0))  {	  if((    letters    &&    chars!=    null)||(count    &&    chars.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
263	[BUG]  [BUGGY]  if((  letters  &&  buffer!=  null)||(count  &&  buffer.length  >  0))  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  buffer!=  null)||(count  &&  buffer.length  >  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  buffer!=  null)||(count  &&  buffer.length  >  0))  {	  if((    letters    &&    chars!=    null)||(count    &&    chars.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
264	[BUG]  [BUGGY]  String  ch  =  random.getChars(ch,  0);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  String  ch  =  random.getChars(ch,  0);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	String  ch  =  random.getChars(ch,  0);	  char    ch    =    random.getChars(ch,    0);    	non-compiled	[CE]  	61	None	replace
265	[BUG]  [BUGGY]  if((  letters  &&  random!=  null)||(numbers  &&  buffer.length  ==  0))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random!=  null)||(numbers  &&  buffer.length  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random!=  null)||(numbers  &&  buffer.length  ==  0))  {	  if((    letters    &&    random!=    null)||(numbers    &&    chars.length    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
266	[BUG]  [BUGGY]  char  ch  =  random.getChars(0,  0,  start,  end);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  random.getChars(0,  0,  start,  end);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(0,  0,  start,  end);	  char    ch    =    random.getChars(start,    start,    end);    	non-compiled	[CE]  	77	None	replace
267	[BUG]  [BUGGY]  char  ch  =  random.getChars(start,  end,  start);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  random.getChars(start,  end,  start);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(start,  end,  start);	  char    ch    =    random.getChars(start,    start,    end);    	non-compiled	[CE]  	77	None	replace
268	[BUG]  [BUGGY]  char  ch  =  random.getChars(0,  0,  0,  0);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  random.getChars(0,  0,  0,  0);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(0,  0,  0,  0);	  char    ch    =    random.getChars(start,    start,    end);    	non-compiled	[CE]  	77	None	replace
269	[BUG]  [BUGGY]  if(numbers  ==  0  ||  random.length  ==  0  ||  count)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(numbers  ==  0  ||  random.length  ==  0  ||  count)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(numbers  ==  0  ||  random.length  ==  0  ||  count)  {	  if(count    ==    0    ||    random.length    ==    0    ||    numbers)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
270	[BUG]  [BUGGY]  if(count  ==  0  ||  random.length  >=  0  ||  letters)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  random.length  >=  0  ||  letters)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  random.length  >=  0  ||  letters)  {	  if(count    ==    0    ||    random.length    ==    0    ||    numbers)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
271	[BUG]  [BUGGY]  Random  random  =  random.nextBoolean()?  true  :  false;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextBoolean()?  true  :  false;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextBoolean()?  true  :  false;	  Random    random    =    random.nextInt();    	non-compiled	[CE]  	82	None	replace
272	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  buffer[0]  ==  ch))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  buffer[0]  ==  ch))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(numbers  &&  buffer[0]  ==  ch))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    buffer[0]    ==    chars))    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
273	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  buffer[0]  ==  chars,  ch))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  buffer[0]  ==  chars,  ch))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(numbers  &&  buffer[0]  ==  chars,  ch))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    buffer[0]    ==    chars))    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
274	[BUG]  [BUGGY]  if((  letters  &&  buffer.length  >  0)||(numbers  &&  random[0]  ==  chars))  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  buffer.length  >  0)||(numbers  &&  random[0]  ==  chars))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  buffer.length  >  0)||(numbers  &&  random[0]  ==  chars))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    buffer[0]    ==    chars))    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
275	[BUG]  [BUGGY]  if(count  ==  0  ||  random.numbers  ==  chars.length)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  random.numbers  ==  chars.length)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  random.numbers  ==  chars.length)  {	  if(count    ==    0    ||    random.numbers!=    chars.length)    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
276	[BUG]  [BUGGY]  if(count  ==  0  ||  buffer.numbers!=  chars.length)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  buffer.numbers!=  chars.length)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  buffer.numbers!=  chars.length)  {	  if(count    ==    0    ||    random.numbers!=    chars.length)    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
277	[BUG]  [BUGGY]  if(count  ==  0  ||  random.length!=  chars.length)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  random.length!=  chars.length)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  random.length!=  chars.length)  {	  if(count    ==    0    ||    random.numbers!=    chars.length)    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
278	[BUG]  [BUGGY]  if(count  ==  0  ||  random.length  ==  0  ||  letters  ||  numbers)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  random.length  ==  0  ||  letters  ||  numbers)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  random.length  ==  0  ||  letters  ||  numbers)  {	  if(count    ==    0    ||    random.length    ==    0    ||    letters)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
279	[BUG]  [BUGGY]  if(count  ==  0  ||  random.length  ==  0  ||  letters  ||  number)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  random.length  ==  0  ||  letters  ||  number)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  random.length  ==  0  ||  letters  ||  number)  {	  if(count    ==    0    ||    random.length    ==    0    ||    letters)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
280	[BUG]  [BUGGY]  String  ch  =  random.nextDouble()  +  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  String  ch  =  random.nextDouble()  +  1;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	String  ch  =  random.nextDouble()  +  1;	  String    ch    =    random.nextDouble();    	non-compiled	[CE]  	57	None	replace
281	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(buffer,  number  &&  chars[0]  ==  ch))  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(buffer,  number  &&  chars[0]  ==  ch))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(buffer,  number  &&  chars[0]  ==  ch))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    chars[0]    ==    ch))    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
282	[BUG]  [BUGGY]  if(count  ==  0  ||  buffer.length  <  chars.length)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  buffer.length  <  chars.length)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  buffer.length  <  chars.length)  {	  if(count    ==    0    ||    chars.length    <    random.length)    {    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
283	[BUG]  [BUGGY]  if(count  ==  0  ||  buffer.length  <  random.length)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  buffer.length  <  random.length)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  buffer.length  <  random.length)  {	  if(count    ==    0    ||    chars.length    <    random.length)    {    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
284	[BUG]  [BUGGY]  if(count  ||  random.length  ==  0  ||  letters)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ||  random.length  ==  0  ||  letters)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ||  random.length  ==  0  ||  letters)  {	  if(count    ||    random.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
285	[BUG]  [BUGGY]  Char  ch  =  random.nextDouble()  +  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Char  ch  =  random.nextDouble()  +  1;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Char  ch  =  random.nextDouble()  +  1;	  Char    ch    =    random.nextDouble();    	non-compiled	[CE]  	59	None	replace
286	[BUG]  [BUGGY]  int  count  =  random.length()  /  chars.length;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  int  count  =  random.length()  /  chars.length;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	int  count  =  random.length()  /  chars.length;	  int    count    =    random.length()    *    chars.length;    	non-compiled	[CE]  	104	None	replace
287	[BUG]  [BUGGY]  int  count  =  random.length()  -  chars.length;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  int  count  =  random.length()  -  chars.length;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	int  count  =  random.length()  -  chars.length;	  int    count    =    random.length()    *    chars.length;    	non-compiled	[CE]  	104	None	replace
288	[BUG]  [BUGGY]  int  count  =  random.length()  *  chars.length  +  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  int  count  =  random.length()  *  chars.length  +  1;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	int  count  =  random.length()  *  chars.length  +  1;	  int    count    =    random.length()    *    chars.length;    	non-compiled	[CE]  	104	None	replace
289	[BUG]  [BUGGY]  int  count  =  random.length()  +  chars.length;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  int  count  =  random.length()  +  chars.length;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	int  count  =  random.length()  +  chars.length;	  int    count    =    random.length()    *    chars.length;    	non-compiled	[CE]  	104	None	replace
290	[BUG]  [BUGGY]  if(numbers  ==  0  ||(count  &&  random.nextToken()  ==  0))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(numbers  ==  0  ||(count  &&  random.nextToken()  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(numbers  ==  0  ||(count  &&  random.nextToken()  ==  0))  {	  if(ch    ==    0    ||(numbers    &&    random.nextToken()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
291	[BUG]  [BUGGY]  if(chars  ==  0  ||(numbers  &&  random.nextToken()  ==  0))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(chars  ==  0  ||(numbers  &&  random.nextToken()  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(chars  ==  0  ||(numbers  &&  random.nextToken()  ==  0))  {	  if(ch    ==    0    ||(numbers    &&    random.nextToken()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
292	[BUG]  [BUGGY]  Random  random  =  random.nextInt(chars,  0,  0);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextInt(chars,  0,  0);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextInt(chars,  0,  0);	  Random    random    =    random.nextInt(chars,    start,    end);    	non-compiled	[CE]  	22	None	replace
293	[BUG]  [BUGGY]  Random  random  =  random.nextInt(buffer,  start,  end);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextInt(buffer,  start,  end);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextInt(buffer,  start,  end);	  Random    random    =    random.nextInt(chars,    start,    end);    	non-compiled	[CE]  	22	None	replace
294	[BUG]  [BUGGY]  Random  random  =  random.nextInt(chars,  0,  start,  end);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextInt(chars,  0,  start,  end);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextInt(chars,  0,  start,  end);	  Random    random    =    random.nextInt(chars,    start,    end);    	non-compiled	[CE]  	22	None	replace
295	[BUG]  [BUGGY]  int  count  =(numbers  ==  null?  random.length  :  chars.length);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  int  count  =(numbers  ==  null?  random.length  :  chars.length);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	int  count  =(numbers  ==  null?  random.length  :  chars.length);	  int    count    =(chars    ==    null?    random.length    :    chars.length);    	non-compiled	[CE]  	105	None	replace
296	[BUG]  [BUGGY]  int  count  =(random  ==  null?  0  :  random.length);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  int  count  =(random  ==  null?  0  :  random.length);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	int  count  =(random  ==  null?  0  :  random.length);	  int    count    =(chars    ==    null?    random.length    :    chars.length);    	non-compiled	[CE]  	105	None	replace
297	[BUG]  [BUGGY]  if(count  ==  0  &&  random.length  >  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  &&  random.length  >  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  &&  random.length  >  0)  {	  if(count    ==    0    &&    random.numbers)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
298	[BUG]  [BUGGY]  if(numbers  ||  random.numbers)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(numbers  ||  random.numbers)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(numbers  ||  random.numbers)  {	  if(count    ==    0    &&    random.numbers)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
299	[BUG]  [BUGGY]  if(count  ==  0  &&  random.chars.length)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  &&  random.chars.length)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  &&  random.chars.length)  {	  if(count    ==    0    &&    random.numbers)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
300	[BUG]  [BUGGY]  Random  random  =  random.nextInt()  +  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextInt()  +  1;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextInt()  +  1;	  Random    random    =    random.nextInt();    	non-compiled	[CE]  	82	None	replace
301	[BUG]  [BUGGY]  if((  letters  &&  random!=  null)||(numbers  &&  random.length  >=  0))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random!=  null)||(numbers  &&  random.length  >=  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random!=  null)||(numbers  &&  random.length  >=  0))  {	  if((    letters    &&    chars!=    null)||(numbers    &&    random.length    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
302	[BUG]  [BUGGY]  if((  letters  &&  random  ==  null)||(numbers  &&  random.length  ==  0))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random  ==  null)||(numbers  &&  random.length  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random  ==  null)||(numbers  &&  random.length  ==  0))  {	  if((    letters    &&    chars!=    null)||(numbers    &&    random.length    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
303	[BUG]  [BUGGY]  Random  random  =  random.nextInt(ch,  start,  end  -  start);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextInt(ch,  start,  end  -  start);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextInt(ch,  start,  end  -  start);	  Random    random    =    random.nextInt(ch,    start,    end);    	non-compiled	[CE]  	21	None	replace
304	[BUG]  [BUGGY]  Random  random  =  random.nextInt(ch,  0,  start,  end);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextInt(ch,  0,  start,  end);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextInt(ch,  0,  start,  end);	  Random    random    =    random.nextInt(ch,    start,    end);    	non-compiled	[CE]  	21	None	replace
305	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(buffer,  0,  chars.length  -  1))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(buffer,  0,  chars.length  -  1))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(buffer,  0,  chars.length  -  1))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    chars[0]!=    chars))    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
306	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(buffered  &&  chars[0]!=  chars))  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(buffered  &&  chars[0]!=  chars))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(buffered  &&  chars[0]!=  chars))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    chars[0]!=    chars))    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
307	[BUG]  [BUGGY]  int  count  =(random  ==  null)?  0  :  random.length;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  int  count  =(random  ==  null)?  0  :  random.length;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	int  count  =(random  ==  null)?  0  :  random.length;	  int    count    =(chars    ==    null)?    0    :    chars.length;    	non-compiled	[CE]  	7	None	replace
308	[BUG]  [BUGGY]  int  count  =(numbers  ==  null)?  0  :  chars.length;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  int  count  =(numbers  ==  null)?  0  :  chars.length;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	int  count  =(numbers  ==  null)?  0  :  chars.length;	  int    count    =(chars    ==    null)?    0    :    chars.length;    	non-compiled	[CE]  	7	None	replace
309	[BUG]  [BUGGY]  if(count  ==  0  ||(letters  &&  random.getValue()!=  0))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||(letters  &&  random.getValue()!=  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||(letters  &&  random.getValue()!=  0))  {	  if(count    ==    0    ||(numbers    &&    random.getValue()!=    0))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
310	[BUG]  [BUGGY]  if(count  ==  0  ||(chars  &&  random.getValue()!=  0))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||(chars  &&  random.getValue()!=  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||(chars  &&  random.getValue()!=  0))  {	  if(count    ==    0    ||(numbers    &&    random.getValue()!=    0))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
311	[BUG]  [BUGGY]  if(count  ==  0  ||  letters.length  ==  0  ||  random.length  >  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  letters.length  ==  0  ||  random.length  >  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  letters.length  ==  0  ||  random.length  >  0)  {	  if(count    ==    0    ||    random.length    ==    0    ||    letters)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
312	[BUG]  [BUGGY]  char  ch  =  random.getChars(start,  RANDOM);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  random.getChars(start,  RANDOM);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(start,  RANDOM);	  char    ch    =    random.getChars(ch,    RANDOM);    	non-compiled	[CE]  	79	None	replace
313	[BUG]  [BUGGY]  if(count  ==  0  &&  random.numbers,  letters)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  &&  random.numbers,  letters)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  &&  random.numbers,  letters)  {	  if(count    ==    0    ||    random.numbers,    letters)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
314	[BUG]  [BUGGY]  if(count  ==  0  ||  random.numbers,  chars.length)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  random.numbers,  chars.length)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  random.numbers,  chars.length)  {	  if(count    ==    0    ||    random.numbers,    letters)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
315	[BUG]  [BUGGY]  if(numbers  ==  0  ||  random.numbers,  chars)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(numbers  ==  0  ||  random.numbers,  chars)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(numbers  ==  0  ||  random.numbers,  chars)  {	  if(count    ==    0    ||    random.numbers,    letters)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
316	[BUG]  [BUGGY]  if((  letters  ||  buffer!=  null)||(numbers  &&  chars.length  ==  0))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  ||  buffer!=  null)||(numbers  &&  chars.length  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  ||  buffer!=  null)||(numbers  &&  chars.length  ==  0))  {	  if((    letters    &&    buffer!=    null)||(numbers    &&    chars.length    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
317	[BUG]  [BUGGY]  Random  random  =  random.nextToken()  -  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextToken()  -  1;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextToken()  -  1;	  Random    random    =    random.nextToken();    	non-compiled	[CE]  	48	None	replace
318	[BUG]  [BUGGY]  Random  random  =  random.nextToken()  &  0xFFFF;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextToken()  &  0xFFFF;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextToken()  &  0xFFFF;	  Random    random    =    random.nextToken();    	non-compiled	[CE]  	48	None	replace
319	[BUG]  [BUGGY]  if(count  ==  0  ||(letters  &&  random.nextToken()!=  0))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||(letters  &&  random.nextToken()!=  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||(letters  &&  random.nextToken()!=  0))  {	  if(count    ==    0    ||(numbers    &&    random.nextToken()!=    0))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
320	[BUG]  [BUGGY]  if(count  ==  0  &&(numbers  &&  random.nextToken()!=  0))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  &&(numbers  &&  random.nextToken()!=  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  &&(numbers  &&  random.nextToken()!=  0))  {	  if(count    ==    0    ||(numbers    &&    random.nextToken()!=    0))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
321	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(buffered  &&  random[0]  ==  chars))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(buffered  &&  random[0]  ==  chars))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(buffered  &&  random[0]  ==  chars))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    buffer[0]    ==    chars))    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
322	[BUG]  [BUGGY]  if(numbers  ||(buffer.length  ==  0  &&  random.getValue()  ==  0))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(numbers  ||(buffer.length  ==  0  &&  random.getValue()  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(numbers  ||(buffer.length  ==  0  &&  random.getValue()  ==  0))  {	  if(ch    ==    0    ||(numbers    &&    random.getValue()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
323	[BUG]  [BUGGY]  if(numbers  ||(count  &&  random.getValue()  ==  0))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(numbers  ||(count  &&  random.getValue()  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(numbers  ||(count  &&  random.getValue()  ==  0))  {	  if(ch    ==    0    ||(numbers    &&    random.getValue()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
324	[BUG]  [BUGGY]  if(count  ==  0  &&  random.length  <  chars.length)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  &&  random.length  <  chars.length)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  &&  random.length  <  chars.length)  {	  if(count    ==    0    ||    chars.length    <    random.length)    {    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
325	[BUG]  [BUGGY]  if(count  ==  0  ||  chars.length  ==  random.length)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  chars.length  ==  random.length)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  chars.length  ==  random.length)  {	  if(count    ==    0    ||    chars.length    <    random.length)    {    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
326	[BUG]  [BUGGY]  if(count  ==  0  &&  chars.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  &&  chars.length  ==  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  &&  chars.length  ==  0)  {	  if(count    ==    0    &&    letters    &&    random.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
327	[BUG]  [BUGGY]  if((  letters  ||  random.length  >  0)||(numbers  &&  random.length  >  0))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  ||  random.length  >  0)||(numbers  &&  random.length  >  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  ||  random.length  >  0)||(numbers  &&  random.length  >  0))  {	  if((    letters    &&    random.length    >    0)||(count    &&    random.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
328	[BUG]  [BUGGY]  Random  random  =  random.nextInt(chars,  start,  end,  letters);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextInt(chars,  start,  end,  letters);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextInt(chars,  start,  end,  letters);	  Random    random    =    random.nextInt(chars,    start,    end);    	non-compiled	[CE]  	22	None	replace
329	[BUG]  [BUGGY]  Random  random  =  random.nextInt(chars,  0,  end);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextInt(chars,  0,  end);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextInt(chars,  0,  end);	  Random    random    =    random.nextInt(chars,    start,    end);    	non-compiled	[CE]  	22	None	replace
330	[BUG]  [BUGGY]  if((  letters  &&  random!=  null)||(numbers  &&  random.length  <  =  0))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random!=  null)||(numbers  &&  random.length  <  =  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random!=  null)||(numbers  &&  random.length  <  =  0))  {	  if((    letters    &&    random!=    null)||(numbers    &&    random.length    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
331	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  RANDOM.length  >  0)||(buffered  &&  random.length  >  0))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  RANDOM.length  >  0)||(buffered  &&  random.length  >  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(numbers  &&  RANDOM.length  >  0)||(buffered  &&  random.length  >  0))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    random.length    >    0)||(buffered    &&    random.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
332	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  chars.length  >  0)||(buffered  &&  random.length  >  0))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  chars.length  >  0)||(buffered  &&  random.length  >  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(numbers  &&  chars.length  >  0)||(buffered  &&  random.length  >  0))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    random.length    >    0)||(buffered    &&    random.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
333	[BUG]  [BUGGY]  if(count  ==  0  &&  random.numbers  ==  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  &&  random.numbers  ==  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  &&  random.numbers  ==  0)  {	  if(count    ==    0    ||    random.numbers    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
334	[BUG]  [BUGGY]  if(numbers  ||  random.numbers  ==  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(numbers  ||  random.numbers  ==  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(numbers  ||  random.numbers  ==  0)  {	  if(count    ==    0    ||    random.numbers    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
335	[BUG]  [BUGGY]  char[]  buffer,  Random  random,  int  starts)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char[]  buffer,  Random  random,  int  starts)  {  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char[]  buffer,  Random  random,  int  starts)  {	  char[]    buffer,    Random    random,    int    count)    {    	non-compiled	[CE]  	32	None	replace
336	[BUG]  [BUGGY]  Random  random  =  random.nullValue()  -  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nullValue()  -  1;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nullValue()  -  1;	  Random    random    =    random.nullValue()    +    1;    	non-compiled	[CE]  	28	None	replace
337	[BUG]  [BUGGY]  if((  letters  &&  random.nextToken()  ==  0)||(numbers  &&  random.nextToken()  ==  0))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.nextToken()  ==  0)||(numbers  &&  random.nextToken()  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.nextToken()  ==  0)||(numbers  &&  random.nextToken()  ==  0))  {	  if(numbers    ||(numbers    &&    random.nextToken()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
338	[BUG]  [BUGGY]  if((  letters  &&  random.nextToken()  ==  0)||(numbers  &&  random.nextToken()!=  0))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.nextToken()  ==  0)||(numbers  &&  random.nextToken()!=  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.nextToken()  ==  0)||(numbers  &&  random.nextToken()!=  0))  {	  if(numbers    ||(numbers    &&    random.nextToken()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
339	[BUG]  [BUGGY]  if(numbers  ||(letters  &&  random.nextToken()  ==  0))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(numbers  ||(letters  &&  random.nextToken()  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(numbers  ||(letters  &&  random.nextToken()  ==  0))  {	  if(numbers    ||(numbers    &&    random.nextToken()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
340	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(buffer,  0,  numbers.length))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(buffer,  0,  numbers.length))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(buffer,  0,  numbers.length))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    buffer.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
341	[BUG]  [BUGGY]  if(count  ==  0  &&  random.numbers.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  &&  random.numbers.length  ==  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  &&  random.numbers.length  ==  0)  {	  if(count    ==    0    ||    random.numbers.length)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
342	[BUG]  [BUGGY]  if(count  ==  0  ||  random.numbers!=  null)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  random.numbers!=  null)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  random.numbers!=  null)  {	  if(count    ==    0    ||    random.numbers.length)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
343	[BUG]  [BUGGY]  if(count  ==  0  ||  random.numbers  ==  null)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  random.numbers  ==  null)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  random.numbers  ==  null)  {	  if(count    ==    0    ||    random.numbers.length)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
344	[BUG]  [BUGGY]  if(count  ==  0  ||  random.numbers  ==  null  ||  chars.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  random.numbers  ==  null  ||  chars.length  <  =  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  random.numbers  ==  null  ||  chars.length  <  =  0)  {	  if(count    ==    0    ||    random.numbers.length)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
345	[BUG]  [BUGGY]  if(offsets  ||(offsets  &&  random.nextToken()  ==  0))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(offsets  ||(offsets  &&  random.nextToken()  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(offsets  ||(offsets  &&  random.nextToken()  ==  0))  {	  if(count    ==    0    ||(offsets    &&    random.nextToken()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
346	[BUG]  [BUGGY]  if(count  ==  0  ||(offsets  &&  random.nextToken()!=  0))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||(offsets  &&  random.nextToken()!=  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||(offsets  &&  random.nextToken()!=  0))  {	  if(count    ==    0    ||(offsets    &&    random.nextToken()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
347	[BUG]  [BUGGY]  if(count  ==  0  &&(offsets  &&  random.nextToken()  ==  0))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  &&(offsets  &&  random.nextToken()  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  &&(offsets  &&  random.nextToken()  ==  0))  {	  if(count    ==    0    ||(offsets    &&    random.nextToken()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
348	[BUG]  [BUGGY]  if(count  ==  0  &&  random.length)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  &&  random.length)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  &&  random.length)  {	  if(count    ==    0    ||    random.length)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
349	[BUG]  [BUGGY]  if(count  ==  0  ||  random.length!=  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  random.length!=  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  random.length!=  0)  {	  if(count    ==    0    ||    random.length)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
350	[BUG]  [BUGGY]  if(count  ==  0  &&  letters  &&  random.length!=  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  &&  letters  &&  random.length!=  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  &&  letters  &&  random.length!=  0)  {	  if(count    ==    0    ||    letters    &&    random.length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
351	[BUG]  [BUGGY]  if(count  ==  0  &&  letters  &&  random.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  &&  letters  &&  random.length  >  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  &&  letters  &&  random.length  >  0)  {	  if(count    ==    0    ||    letters    &&    random.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
352	[BUG]  [BUGGY]  char  ch  =  random.getChars(start,  start,  end,  letters);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  random.getChars(start,  start,  end,  letters);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(start,  start,  end,  letters);	  char    ch    =    random.getChars(start,    start,    end);    	non-compiled	[CE]  	77	None	replace
353	[BUG]  [BUGGY]  if((  random.length  -  start)||(numbers  &&  random.length  >  0))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  random.length  -  start)||(numbers  &&  random.length  >  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  random.length  -  start)||(numbers  &&  random.length  >  0))  {	  if((    random.length    &&    letters    >    0)||(numbers    &&    random.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
354	[BUG]  [BUGGY]  if((  random.length  -  letters)>  0)||(numbers  &&  random.length  >  0))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  random.length  -  letters)>  0)||(numbers  &&  random.length  >  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  random.length  -  letters)>  0)||(numbers  &&  random.length  >  0))  {	  if((    random.length    &&    letters    >    0)||(numbers    &&    random.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
355	[BUG]  [BUGGY]  int  count  =(random  ==  null?  random.length  :  chars.length);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  int  count  =(random  ==  null?  random.length  :  chars.length);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	int  count  =(random  ==  null?  random.length  :  chars.length);	  int    count    =(chars    ==    null?    random.length    :    chars.length);    	non-compiled	[CE]  	105	None	replace
356	[BUG]  [BUGGY]  int  count  =(count  ==  null?  random.length  :  chars.length);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  int  count  =(count  ==  null?  random.length  :  chars.length);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	int  count  =(count  ==  null?  random.length  :  chars.length);	  int    count    =(chars    ==    null?    random.length    :    chars.length);    	non-compiled	[CE]  	105	None	replace
357	[BUG]  [BUGGY]  int  count  =(random!=  null?  random.length  :  chars.length);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  int  count  =(random!=  null?  random.length  :  chars.length);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	int  count  =(random!=  null?  random.length  :  chars.length);	  int    count    =(chars    ==    null?    random.length    :    chars.length);    	non-compiled	[CE]  	105	None	replace
358	[BUG]  [BUGGY]  Integer  count  =  random.length();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Integer  count  =  random.length();  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Integer  count  =  random.length();	  int    count    =    random.length()    +    1;    	non-compiled	[CE]  	44	None	replace
359	[BUG]  [BUGGY]  String  ch  =  random.getChars(start,  start,  end);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  String  ch  =  random.getChars(start,  start,  end);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	String  ch  =  random.getChars(start,  start,  end);	  String    ch    =    random.getChars(start,    end);    	non-compiled	[CE]  	14	None	replace
360	[BUG]  [BUGGY]  char  count  =  random.length  +  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  count  =  random.length  +  1;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  count  =  random.length  +  1;	  char    count    =    random.length;    	non-compiled	[CE]  	6	None	replace
361	[BUG]  [BUGGY]  char  count  =  random.length  *  2;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  count  =  random.length  *  2;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  count  =  random.length  *  2;	  char    count    =    random.length;    	non-compiled	[CE]  	6	None	replace
362	[BUG]  [BUGGY]  Char  ch  =  random.nextDouble()  +  4;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Char  ch  =  random.nextDouble()  +  4;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Char  ch  =  random.nextDouble()  +  4;	  Char    ch    =    random.nextDouble();    	non-compiled	[CE]  	59	None	replace
363	[BUG]  [BUGGY]  int  count  =  RandomUtils.length  -  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  int  count  =  RandomUtils.length  -  1;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	int  count  =  RandomUtils.length  -  1;	  int    count    =    random.length()    -    1;    	non-compiled	[CE]  	46	None	replace
364	[BUG]  [BUGGY]  Random  random  =  random.nextDouble()  -  start;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextDouble()  -  start;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextDouble()  -  start;	  Random    random    =    random.nextDouble();    	non-compiled	[CE]  	108	None	replace
365	[BUG]  [BUGGY]  if(count  ==  0  &&  numbers  &&  random.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  &&  numbers  &&  random.length  ==  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  &&  numbers  &&  random.length  ==  0)  {	  if(count    ==    0    ||    numbers    &&    random.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
366	[BUG]  [BUGGY]  int  count  =(chars  ==  null)?  0  :  chars.length();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  int  count  =(chars  ==  null)?  0  :  chars.length();  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	int  count  =(chars  ==  null)?  0  :  chars.length();	  int    count    =    chars.length();    	non-compiled	[CE]  	45	None	replace
367	[BUG]  [BUGGY]  Random  random  =  random.getNext();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.getNext();  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.getNext();	  Random    random    =    random.next()    +    1;    	non-compiled	[CE]  	83	None	replace
368	[BUG]  [BUGGY]  if((  numbers  &&  random.length  >  0)||(letters  &&  chars[0]  ==  ch))  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  numbers  &&  random.length  >  0)||(letters  &&  chars[0]  ==  ch))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  numbers  &&  random.length  >  0)||(letters  &&  chars[0]  ==  ch))  {	  if((    numbers    &&    random.length    >    0)||(numbers    &&    chars[0]    ==    chars))    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
369	[BUG]  [BUGGY]  int  count  =(random  ==  null)?  random.length  :  chars.length;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  int  count  =(random  ==  null)?  random.length  :  chars.length;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	int  count  =(random  ==  null)?  random.length  :  chars.length;	  int    count    =(chars    ==    null)?    random.length    :    chars.length;    	non-compiled	[CE]  	106	None	replace
370	[BUG]  [BUGGY]  int  count  =(numbers  ==  null)?  random.length  :  chars.length;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  int  count  =(numbers  ==  null)?  random.length  :  chars.length;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	int  count  =(numbers  ==  null)?  random.length  :  chars.length;	  int    count    =(chars    ==    null)?    random.length    :    chars.length;    	non-compiled	[CE]  	106	None	replace
371	[BUG]  [BUGGY]  Random  random  =  random!=  null?  random.next()  :  RANDOM;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random!=  null?  random.next()  :  RANDOM;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random!=  null?  random.next()  :  RANDOM;	  Random    random    =    random!=    null?    random.next()    :    ch;    	non-compiled	[CE]  	50	None	replace
372	[BUG]  [BUGGY]  Random  random  =  random!=  null?  random.next()  :  0;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random!=  null?  random.next()  :  0;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random!=  null?  random.next()  :  0;	  Random    random    =    random!=    null?    random.next()    :    ch;    	non-compiled	[CE]  	50	None	replace
373	[BUG]  [BUGGY]  if(random  ==  0  ||  chars.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(random  ==  0  ||  chars.length  ==  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(random  ==  0  ||  chars.length  ==  0)  {	  if(chars.length    ||    random.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
374	[BUG]  [BUGGY]  if(chars  ==  null  ||  random.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(chars  ==  null  ||  random.length  ==  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(chars  ==  null  ||  random.length  ==  0)  {	  if(chars.length    ||    random.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
375	[BUG]  [BUGGY]  Random  random  =  random.nextInt(1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextInt(1);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextInt(1);	  Random    random    =    random.nextInt(0,    1);    	non-compiled	[CE]  	24	None	replace
376	[BUG]  [BUGGY]  if(count  ==  0  ||(letters  &&  random.nextChars()  ==  0))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||(letters  &&  random.nextChars()  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||(letters  &&  random.nextChars()  ==  0))  {	  if(count    ==    0    ||(numbers    &&    random.nextChars()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
377	[BUG]  [BUGGY]  if(chars  ==  0  ||(numbers  &&  random.nextChars()  ==  0))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(chars  ==  0  ||(numbers  &&  random.nextChars()  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(chars  ==  0  ||(numbers  &&  random.nextChars()  ==  0))  {	  if(count    ==    0    ||(numbers    &&    random.nextChars()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
378	[BUG]  [BUGGY]  if(count  ==  0  ||(letters  &&  random.getChars(ch)  ==  0))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||(letters  &&  random.getChars(ch)  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||(letters  &&  random.getChars(ch)  ==  0))  {	  if(count    ==    0    ||(numbers    &&    random.getChars(ch)    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
379	[BUG]  [BUGGY]  Random  random  =  random.nextChar(0);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextChar(0);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextChar(0);	  Random    random    =    random.nextChar();    	non-compiled	[CE]  	49	None	replace
380	[BUG]  [BUGGY]  char[]  buffer,  Random  random,  chars,  int  letters)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char[]  buffer,  Random  random,  chars,  int  letters)  {  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char[]  buffer,  Random  random,  chars,  int  letters)  {	  char[]    buffer,    Random    random,    int    letters)    {    	non-compiled	[CE]  	31	None	replace
381	[BUG]  [BUGGY]  char[]  buffer,  Random  random,  chars,  letters)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char[]  buffer,  Random  random,  chars,  letters)  {  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char[]  buffer,  Random  random,  chars,  letters)  {	  char[]    buffer,    Random    random,    int    letters)    {    	non-compiled	[CE]  	31	None	replace
382	[BUG]  [BUGGY]  char[]  buffer,  Random  random,  short,  int  letters)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char[]  buffer,  Random  random,  short,  int  letters)  {  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char[]  buffer,  Random  random,  short,  int  letters)  {	  char[]    buffer,    Random    random,    int    letters)    {    	non-compiled	[CE]  	31	None	replace
383	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(buffer,  0,  numbers  &&  chars[0]  ==  ch))  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(buffer,  0,  numbers  &&  chars[0]  ==  ch))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(buffer,  0,  numbers  &&  chars[0]  ==  ch))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    chars[0]    ==    ch))    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
384	[BUG]  [BUGGY]  if(count  ==  0  &&  random.numbers!=  chars.length)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  &&  random.numbers!=  chars.length)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  &&  random.numbers!=  chars.length)  {	  if(count    ==    0    ||    random.numbers!=    chars.length)    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
385	[BUG]  [BUGGY]  if(buffer  ==  0  ||  numbers  ||  random.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(buffer  ==  0  ||  numbers  ||  random.length  ==  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(buffer  ==  0  ||  numbers  ||  random.length  ==  0)  {	  if(numbers    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
386	[BUG]  [BUGGY]  if(buffer  ==  null  ||  numbers.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(buffer  ==  null  ||  numbers.length  ==  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(buffer  ==  null  ||  numbers.length  ==  0)  {	  if(numbers    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
387	[BUG]  [BUGGY]  if(buffer!=  null  ||  numbers.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(buffer!=  null  ||  numbers.length  ==  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(buffer!=  null  ||  numbers.length  ==  0)  {	  if(numbers    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
388	[BUG]  [BUGGY]  if((  letters  &&  chars  ==  null)||(numbers  &&  chars.length  >  0))  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  chars  ==  null)||(numbers  &&  chars.length  >  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  chars  ==  null)||(numbers  &&  chars.length  >  0))  {	  if((    letters    &&    chars!=    null)||(count    &&    chars.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
389	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(buffered  &&  random.length  >  0)||(count  <  chars.length))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(buffered  &&  random.length  >  0)||(count  <  chars.length))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(buffered  &&  random.length  >  0)||(count  <  chars.length))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    random.length    >    0)||(count    <    chars.length))    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
390	[BUG]  [BUGGY]  char  ch  =  random.getChars(start,  chars.length);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  random.getChars(start,  chars.length);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(start,  chars.length);	  char    ch    =    random.getChars(ch,    start);    	non-compiled	[CE]  	81	None	replace
391	[BUG]  [BUGGY]  if((  letters  ||  buffer!=  null)||(numbers  &&  chars.length  >  0))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  ||  buffer!=  null)||(numbers  &&  chars.length  >  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  ||  buffer!=  null)||(numbers  &&  chars.length  >  0))  {	  if((    letters    &&    buffer!=    null)||(numbers    &&    chars.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
392	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  buffer[0]  >  0)||(count  %  chars.length  >  0))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  buffer[0]  >  0)||(count  %  chars.length  >  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(numbers  &&  buffer[0]  >  0)||(count  %  chars.length  >  0))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    random.length    >    0)||(count    %    chars.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
393	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(buffered  &&  random.length  >  0)||(count  %  chars.length  >  0))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(buffered  &&  random.length  >  0)||(count  %  chars.length  >  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(buffered  &&  random.length  >  0)||(count  %  chars.length  >  0))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    random.length    >    0)||(count    %    chars.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
394	[BUG]  [BUGGY]  char  ch  =  random.getChars(start,  chars);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  random.getChars(start,  chars);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(start,  chars);	  char    ch    =    random.getChars(ch,    chars);    	non-compiled	[CE]  	112	None	replace
395	[BUG]  [BUGGY]  char  ch  =  random.getChars(count,  chars);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  random.getChars(count,  chars);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(count,  chars);	  char    ch    =    random.getChars(ch,    chars);    	non-compiled	[CE]  	112	None	replace
396	[BUG]  [BUGGY]  if(count  ==  0  &&(offsets  &&  random.getValue()  ==  0))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  &&(offsets  &&  random.getValue()  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  &&(offsets  &&  random.getValue()  ==  0))  {	  if(count    ==    0    ||(offsets    &&    random.getValue()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
397	[BUG]  [BUGGY]  if(count  ==  0  ||(offsets  &  random.getValue()  ==  0))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||(offsets  &  random.getValue()  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||(offsets  &  random.getValue()  ==  0))  {	  if(count    ==    0    ||(offsets    &&    random.getValue()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
398	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(buffered  &&  chars[0]  ==  chars))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(buffered  &&  chars[0]  ==  chars))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(buffered  &&  chars[0]  ==  chars))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    chars[0]    ==    chars))    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
399	[BUG]  [BUGGY]  char  ch  =  random.getChars(start,  end  -  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  random.getChars(start,  end  -  1);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(start,  end  -  1);	  char    ch    =    random.getChars(start,    end    +    1);    	non-compiled	[CE]  	16	None	replace
400	[BUG]  [BUGGY]  char  ch  =  random.getChars(start  +  1,  end  +  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  random.getChars(start  +  1,  end  +  1);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(start  +  1,  end  +  1);	  char    ch    =    random.getChars(start,    end    +    1);    	non-compiled	[CE]  	16	None	replace
401	[BUG]  [BUGGY]  if(count  ==  0  ||  letters  ||  random.length  ==  0  ||  numbers)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  letters  ||  random.length  ==  0  ||  numbers)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  letters  ||  random.length  ==  0  ||  numbers)  {	  if(count    ==    0    ||    random.length    ==    0    ||    numbers)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
402	[BUG]  [BUGGY]  if(count  ==  0  ||  buffer.length  ==  0  ||  chars.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  buffer.length  ==  0  ||  chars.length  ==  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  buffer.length  ==  0  ||  chars.length  ==  0)  {	  if(count    ==    0    ||    random.length    ==    0    ||    chars.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
403	[BUG]  [BUGGY]  if(count  ==  0  ||  chars.length  ==  0  ||  random.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  chars.length  ==  0  ||  random.length  ==  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  chars.length  ==  0  ||  random.length  ==  0)  {	  if(count    ==    0    ||    random.length    ==    0    ||    chars.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
404	[BUG]  [BUGGY]  if(ch  ==  0  ||(letters  &&  random.getChars(ch)!=  0))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(ch  ==  0  ||(letters  &&  random.getChars(ch)!=  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(ch  ==  0  ||(letters  &&  random.getChars(ch)!=  0))  {	  if(ch    ==    0    ||(numbers    &&    random.getChars(ch)!=    0))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
405	[BUG]  [BUGGY]  if(count  ==  0  &&(letters  &&  random.nextToken()  ==  0))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  &&(letters  &&  random.nextToken()  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  &&(letters  &&  random.nextToken()  ==  0))  {	  if(count    ==    0    ||(letters    &&    random.nextToken()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
406	[BUG]  [BUGGY]  char  ch  =  random.getChars(start,  end,  chars.length);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  random.getChars(start,  end,  chars.length);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(start,  end,  chars.length);	  char    ch    =    random.getChars(start,    end,    letters);    	non-compiled	[CE]  	15	None	replace
407	[BUG]  [BUGGY]  Random  random  =  random.nextInt(start,  end  -  start  +  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextInt(start,  end  -  start  +  1);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextInt(start,  end  -  start  +  1);	  Random    random    =    random.nextInt(start,    end    -    start);    	non-compiled	[CE]  	91	None	replace
408	[BUG]  [BUGGY]  Random  random  =  random.nextInt(start,  start  -  end);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextInt(start,  start  -  end);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextInt(start,  start  -  end);	  Random    random    =    random.nextInt(start,    end    -    start);    	non-compiled	[CE]  	91	None	replace
409	[BUG]  [BUGGY]  if(count  &&  random.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  &&  random.length  ==  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  &&  random.length  ==  0)  {	  if(count    ||    random.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
410	[BUG]  [BUGGY]  if((  letters  &&  random!=  null)||(numbers  &&  ch!=  0))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random!=  null)||(numbers  &&  ch!=  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random!=  null)||(numbers  &&  ch!=  0))  {	  if((    letters    &&    ch!=    null)||(numbers    &&    chars.length    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
411	[BUG]  [BUGGY]  if((  letters  &&  random!=  null)||(numbers  &&  ch  ==  0))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random!=  null)||(numbers  &&  ch  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random!=  null)||(numbers  &&  ch  ==  0))  {	  if((    letters    &&    ch!=    null)||(numbers    &&    chars.length    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
412	[BUG]  [BUGGY]  if(numbers  ==  0  ||  random.numbers!=  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(numbers  ==  0  ||  random.numbers!=  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(numbers  ==  0  ||  random.numbers!=  0)  {	  if(numbers    ==    0    ||    random.numbers)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
413	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  buffer.length  >  0)||(numbers  &&  random.length  >  0))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  buffer.length  >  0)||(numbers  &&  random.length  >  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(numbers  &&  buffer.length  >  0)||(numbers  &&  random.length  >  0))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    random.length    >    0)||(numbers    &&    random.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
414	[BUG]  [BUGGY]  Random  random  =  random.nextDouble(start,  end  -  start);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextDouble(start,  end  -  start);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextDouble(start,  end  -  start);	  Random    random    =    random.nextDouble(start,    end);    	non-compiled	[CE]  	107	None	replace
415	[BUG]  [BUGGY]  Random  random  =  random.nextDouble(start,  end  -  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextDouble(start,  end  -  1);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextDouble(start,  end  -  1);	  Random    random    =    random.nextDouble(start,    end);    	non-compiled	[CE]  	107	None	replace
416	[BUG]  [BUGGY]  Random  random  =  random.nextDouble(start,  end  +  1,  chars.length);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextDouble(start,  end  +  1,  chars.length);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextDouble(start,  end  +  1,  chars.length);	  Random    random    =    random.nextDouble(start,    end);    	non-compiled	[CE]  	107	None	replace
417	[BUG]  [BUGGY]  Random  random  =  random.nullValue(0,  chars);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nullValue(0,  chars);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nullValue(0,  chars);	  Random    random    =    random.nullValue(0);    	non-compiled	[CE]  	78	None	replace
418	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(chars  ==  null  ||  chars.length  ==  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(chars  ==  null  ||  chars.length  ==  0)  {	  if(numbers    ||    chars.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
419	[BUG]  [BUGGY]  if(chars.length  ||  numbers.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(chars.length  ||  numbers.length  ==  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(chars.length  ||  numbers.length  ==  0)  {	  if(numbers    ||    chars.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
420	[BUG]  [BUGGY]  if(chars  ==  random.length  ||  random.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(chars  ==  random.length  ||  random.length  ==  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(chars  ==  random.length  ||  random.length  ==  0)  {	  if(chars    ||    random.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
421	[BUG]  [BUGGY]  if(count  ==  0  &&(letters  &&  random.getValue()  ==  0))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  &&(letters  &&  random.getValue()  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  &&(letters  &&  random.getValue()  ==  0))  {	  if(count    ==    0    ||(letters    &&    random.getValue()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
422	[BUG]  [BUGGY]  if((  letters  ||  random!=  null)||(numbers  &&  random.length  >  0))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  ||  random!=  null)||(numbers  &&  random.length  >  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  ||  random!=  null)||(numbers  &&  random.length  >  0))  {	  if((    letters    &&    chars!=    null)||(numbers    &&    random.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
423	[BUG]  [BUGGY]  if((  letters  &&  random!=  null)||(letters  &&  random.length  >  0))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random!=  null)||(letters  &&  random.length  >  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random!=  null)||(letters  &&  random.length  >  0))  {	  if((    letters    &&    chars!=    null)||(numbers    &&    random.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
424	[BUG]  [BUGGY]  if((  letters  &&  chars  ==  null)||(numbers  &&  chars.length  ==  0))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  chars  ==  null)||(numbers  &&  chars.length  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  chars  ==  null)||(numbers  &&  chars.length  ==  0))  {	  if((    letters    &&    chars!=    null)||(count    &&    chars.length    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
425	[BUG]  [BUGGY]  if((  letters  &&  buffer!=  null)||(count  &&  buffer.length  ==  0))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  buffer!=  null)||(count  &&  buffer.length  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  buffer!=  null)||(count  &&  buffer.length  ==  0))  {	  if((    letters    &&    chars!=    null)||(count    &&    chars.length    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
426	[BUG]  [BUGGY]  if(count  ==  0  &&(numbers  &&  random.getChars(ch,  chars.length)!=  0))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  &&(numbers  &&  random.getChars(ch,  chars.length)!=  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  &&(numbers  &&  random.getChars(ch,  chars.length)!=  0))  {	  if(count    ==    0    ||(numbers    &&    random.getChars(ch,    chars.length)!=    0))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
427	[BUG]  [BUGGY]  char  ch  =  random.getChars(start,  end,  buffer.length);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  random.getChars(start,  end,  buffer.length);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(start,  end,  buffer.length);	  char    ch    =    random.getChars(buffer,    start,    end);    	non-compiled	[CE]  	17	None	replace
428	[BUG]  [BUGGY]  char  ch  =  random.getChars(start,  end,  buffer);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  random.getChars(start,  end,  buffer);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(start,  end,  buffer);	  char    ch    =    random.getChars(buffer,    start,    end);    	non-compiled	[CE]  	17	None	replace
429	[BUG]  [BUGGY]  char  ch  =  random.getChars(0,  letters);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  random.getChars(0,  letters);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(0,  letters);	  char    ch    =    random.getChars(ch,    letters);    	non-compiled	[CE]  	62	None	replace
430	[BUG]  [BUGGY]  char  ch  =  random.getChars(ch,  start,  letters);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  random.getChars(ch,  start,  letters);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(ch,  start,  letters);	  char    ch    =    random.getChars(ch,    letters);    	non-compiled	[CE]  	62	None	replace
431	[BUG]  [BUGGY]  Random  random  =  random.nextInt(0,  start,  end,  chars.length);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextInt(0,  start,  end,  chars.length);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextInt(0,  start,  end,  chars.length);	  Random    random    =    random.nextInt(0,    start,    end);    	non-compiled	[CE]  	23	None	replace
432	[BUG]  [BUGGY]  Random  random  =  random.nextInt(0,  start,  end  +  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextInt(0,  start,  end  +  1);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextInt(0,  start,  end  +  1);	  Random    random    =    random.nextInt(0,    start,    end);    	non-compiled	[CE]  	23	None	replace
433	[BUG]  [BUGGY]  Random  random  =  random.nextInt(1,  start,  end);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextInt(1,  start,  end);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextInt(1,  start,  end);	  Random    random    =    random.nextInt(0,    start,    end);    	non-compiled	[CE]  	23	None	replace
434	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  chars[0]  ==  ')')  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  chars[0]  ==  ')')  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(numbers  &&  chars[0]  ==  ')')  {	  if((    letters    &&    random.length    >    0)||(count    &&    chars[0]    ==    chars))    {    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
435	[BUG]  [BUGGY]  char  ch  =  Random.nextDouble();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  Random.nextDouble();  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  Random.nextDouble();	  char    ch    =    random.nextDouble()    +    4;    	non-compiled	[CE]  	99	None	replace
436	[BUG]  [BUGGY]  char  ch  =  random.getChars(-1,  -1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  random.getChars(-1,  -1);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(-1,  -1);	  char    ch    =    random.getChars(0,    ch);    	non-compiled	[CE]  	80	None	replace
437	[BUG]  [BUGGY]  int  count  =  chars.length()  *  random.length;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  int  count  =  chars.length()  *  random.length;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	int  count  =  chars.length()  *  random.length;	  int    count    =    random.length()    *    chars.length;    	non-compiled	[CE]  	104	None	replace
438	[BUG]  [BUGGY]  int  count  =  random.length()  *  4;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  int  count  =  random.length()  *  4;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	int  count  =  random.length()  *  4;	  int    count    =    random.length()    *    chars.length;    	non-compiled	[CE]  	104	None	replace
439	[BUG]  [BUGGY]  char[]  buffer,  Random  random,  chars,  boolean  letters)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char[]  buffer,  Random  random,  chars,  boolean  letters)  {  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char[]  buffer,  Random  random,  chars,  boolean  letters)  {	  char[]    buffer,    Random    random,    boolean    letters)    {    	non-compiled	[CE]  	94	None	replace
440	[BUG]  [BUGGY]  if((  letters  &&  random!=  null)||(buffer,  0,  chars.length  >  0))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random!=  null)||(buffer,  0,  chars.length  >  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random!=  null)||(buffer,  0,  chars.length  >  0))  {	  if((    letters    &&    random!=    null)||(numbers    &&    chars.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
441	[BUG]  [BUGGY]  int  count  =  random.length  -  1  +  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  int  count  =  random.length  -  1  +  1;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	int  count  =  random.length  -  1  +  1;	  int    count    =    random.length    -    1;    	non-compiled	[CE]  	5	None	replace
442	[BUG]  [BUGGY]  int  count  =  random.length  -  1L;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  int  count  =  random.length  -  1L;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	int  count  =  random.length  -  1L;	  int    count    =    random.length    -    1;    	non-compiled	[CE]  	5	None	replace
443	[BUG]  [BUGGY]  Random  random  =  new  Random(random.nullValue()  +  1,  random.length);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  new  Random(random.nullValue()  +  1,  random.length);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  new  Random(random.nullValue()  +  1,  random.length);	  Random    random    =    new    Random(random.nullValue());    	non-compiled	[CE]  	120	None	replace
444	[BUG]  [BUGGY]  Random  random  =  random.nextInt(start  +  1,  end  +  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextInt(start  +  1,  end  +  1);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextInt(start  +  1,  end  +  1);	  Random    random    =    random.nextInt(start,    end    +    1);    	non-compiled	[CE]  	90	None	replace
445	[BUG]  [BUGGY]  String  ch  =  random.getChars(ch,  letters);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  String  ch  =  random.getChars(ch,  letters);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	String  ch  =  random.getChars(ch,  letters);	  String    ch    =    random.getChars(ch);    	non-compiled	[CE]  	60	None	replace
446	[BUG]  [BUGGY]  if(numbers  ||(numbers  &&  random.getChars(ch)!=  0))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(numbers  ||(numbers  &&  random.getChars(ch)!=  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(numbers  ||(numbers  &&  random.getChars(ch)!=  0))  {	  if(ch    ==    0    ||(numbers    &&    random.getChars(ch)!=    0))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
447	[BUG]  [BUGGY]  int  count  =  chars.length  *  random.length;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  int  count  =  chars.length  *  random.length;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	int  count  =  chars.length  *  random.length;	  int    count    =    random.length()    *    chars.length;    	non-compiled	[CE]  	104	None	replace
448	[BUG]  [BUGGY]  int  count  =  random.length()  *  chars.length  -  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  int  count  =  random.length()  *  chars.length  -  1;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	int  count  =  random.length()  *  chars.length  -  1;	  int    count    =    random.length()    *    chars.length;    	non-compiled	[CE]  	104	None	replace
449	[BUG]  [BUGGY]  int  count  =(ch  ==  null)?  0  :  chars.length;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  int  count  =(ch  ==  null)?  0  :  chars.length;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	int  count  =(ch  ==  null)?  0  :  chars.length;	  int    count    =(chars    ==    null)?    0    :    chars.length;    	non-compiled	[CE]  	7	None	replace
450	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  chars[1]  ==  ch))  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  chars[1]  ==  ch))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(numbers  &&  chars[1]  ==  ch))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    chars[0]    ==    ch))    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
451	[BUG]  [BUGGY]  if(count  ==  0  ||  chars.length  ==  0  ||  letters)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  chars.length  ==  0  ||  letters)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  chars.length  ==  0  ||  letters)  {	  if(count    ==    0    ||    random.length    ==    0    ||    numbers)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
452	[BUG]  [BUGGY]  if(count  ==  0  ||  chars.length  ==  0  ||  random.length!=  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  chars.length  ==  0  ||  random.length!=  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  chars.length  ==  0  ||  random.length!=  0)  {	  if(count    ==    0    ||    random.length    ==    0    ||    numbers)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
453	[BUG]  [BUGGY]  Random  random  =  random.nextInt()  -  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextInt()  -  1;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextInt()  -  1;	  Random    random    =    random.nextInt();    	non-compiled	[CE]  	82	None	replace
454	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(buffered  &&  random.length  >  0)||(count  >  chars.length))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(buffered  &&  random.length  >  0)||(count  >  chars.length))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(buffered  &&  random.length  >  0)||(count  >  chars.length))  {	  if((    letters    &&    random.length    >    0)||(buffered    &&    random.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
455	[BUG]  [BUGGY]  if(numbers  ||  chars.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(numbers  ||  chars.length  <  =  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(numbers  ||  chars.length  <  =  0)  {	  if(numbers    ||    random.length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
456	[BUG]  [BUGGY]  if(numbers  &&  random.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(numbers  &&  random.length  <  =  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(numbers  &&  random.length  <  =  0)  {	  if(numbers    ||    random.length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
457	[BUG]  [BUGGY]  if((  letters  &&  chars  ==  null)||(count  &&  chars.length  ==  0))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  chars  ==  null)||(count  &&  chars.length  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  chars  ==  null)||(count  &&  chars.length  ==  0))  {	  if((    letters    &&    chars!=    null)||(count    &&    chars.length    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
458	[BUG]  [BUGGY]  Random  random  =  random.nextInt(ch,  end  -  start);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextInt(ch,  end  -  start);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextInt(ch,  end  -  start);	  Random    random    =    random.nextInt(start,    end    -    start);    	non-compiled	[CE]  	91	None	replace
459	[BUG]  [BUGGY]  char  ch  =  random.getChars(ch,  0,  chars);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  random.getChars(ch,  0,  chars);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(ch,  0,  chars);	  char    ch    =    random.getChars(ch,    chars);    	non-compiled	[CE]  	112	None	replace
460	[BUG]  [BUGGY]  char  ch  =  random.getChars(ch,  0,  chars.length);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  random.getChars(ch,  0,  chars.length);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(ch,  0,  chars.length);	  char    ch    =    random.getChars(ch,    chars);    	non-compiled	[CE]  	112	None	replace
461	[BUG]  [BUGGY]  if(count  ==  0  ||(letters  &&  random.getChars(ch,  chars)!=  0))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||(letters  &&  random.getChars(ch,  chars)!=  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||(letters  &&  random.getChars(ch,  chars)!=  0))  {	  if(count    ==    0    ||(letters    &&    random.getChars(ch)!=    0))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
462	[BUG]  [BUGGY]  int  count  =(pattern  ==  null)?  random.length  :  chars.length;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  int  count  =(pattern  ==  null)?  random.length  :  chars.length;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	int  count  =(pattern  ==  null)?  random.length  :  chars.length;	  int    count    =(chars    ==    null)?    random.length    :    chars.length;    	non-compiled	[CE]  	106	None	replace
463	[BUG]  [BUGGY]  if(buffer!=  null  ||  numbers  ||  random.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(buffer!=  null  ||  numbers  ||  random.length  ==  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(buffer!=  null  ||  numbers  ||  random.length  ==  0)  {	  if(numbers    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
464	[BUG]  [BUGGY]  if(buffer  ==  0  ||  number  ||  buffer.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(buffer  ==  0  ||  number  ||  buffer.length  ==  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(buffer  ==  0  ||  number  ||  buffer.length  ==  0)  {	  if(numbers    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
465	[BUG]  [BUGGY]  char[]  buffer,  random,  int  letters)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char[]  buffer,  random,  int  letters)  {  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char[]  buffer,  random,  int  letters)  {	  char[]    buffer,    Random    random,    int    count)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
466	[BUG]  [BUGGY]  char[]  buffer,  Random  random,  int  letter)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char[]  buffer,  Random  random,  int  letter)  {  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char[]  buffer,  Random  random,  int  letter)  {	  char[]    buffer,    Random    random,    int    count)    {    	non-compiled	[CE]  	32	None	replace
467	[BUG]  [BUGGY]  char  ch  =  random.getChars(start,  end,  chars,  numbers);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  random.getChars(start,  end,  chars,  numbers);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(start,  end,  chars,  numbers);	  char    ch    =    random.getChars(start,    end,    letters);    	non-compiled	[CE]  	15	None	replace
468	[BUG]  [BUGGY]  if(count  ==  0  ||(offsets  &&  random.getValue()!=  0))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||(offsets  &&  random.getValue()!=  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||(offsets  &&  random.getValue()!=  0))  {	  if(count    ==    0    ||(numbers    &&    random.getValue()!=    0))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
469	[BUG]  [BUGGY]  if(count  ==  0  ||  random.numbers,  chars,  numbers)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  random.numbers,  chars,  numbers)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  random.numbers,  chars,  numbers)  {	  if(count    ==    0    ||    random.numbers,    letters)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
470	[BUG]  [BUGGY]  if(count  ==  0  ||  random.numbers,  chars,  null)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  random.numbers,  chars,  null)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  random.numbers,  chars,  null)  {	  if(count    ==    0    ||    random.numbers,    letters)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
471	[BUG]  [BUGGY]  char  ch  =  random.getChars(0,  0,  end);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  random.getChars(0,  0,  end);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(0,  0,  end);	  char    ch    =    random.getChars(start,    start,    end);    	non-compiled	[CE]  	77	None	replace
472	[BUG]  [BUGGY]  char[]  buffer,  Random  random,  int  start,  letters)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char[]  buffer,  Random  random,  int  start,  letters)  {  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char[]  buffer,  Random  random,  int  start,  letters)  {	  char[]    buffer,    Random    random,    int    start)    {    	non-compiled	[CE]  	33	None	replace
473	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  chars[1]  ==  CHARS))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  chars[1]  ==  CHARS))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(numbers  &&  chars[1]  ==  CHARS))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    chars[0]    ==    CHARS))    {    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
474	[BUG]  [BUGGY]  Random  random  =  random.nextToken(),  ch;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextToken(),  ch;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextToken(),  ch;	  Random    random    =    random.nextToken();    	non-compiled	[CE]  	48	None	replace
475	[BUG]  [BUGGY]  char  ch  =  random.getChars(start,  end  +  1,  chars.length);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  random.getChars(start,  end  +  1,  chars.length);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(start,  end  +  1,  chars.length);	  char    ch    =    random.getChars(start,    end    +    1);    	non-compiled	[CE]  	16	None	replace
476	[BUG]  [BUGGY]  if((  letters  &&  random!=  null)||(numbers  &&  RandomStringUtils.isEmpty(random)))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random!=  null)||(numbers  &&  RandomStringUtils.isEmpty(random)))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random!=  null)||(numbers  &&  RandomStringUtils.isEmpty(random)))  {	  if((    letters    &&    chars!=    null)||(numbers    &&    random.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
477	[BUG]  [BUGGY]  Character  ch  =  random.nextDouble();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Character  ch  =  random.nextDouble();  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Character  ch  =  random.nextDouble();	  char    ch    =    random.nextDouble()    +    4;    	non-compiled	[CE]  	99	None	replace
478	[BUG]  [BUGGY]  if(ch  ==  ' "'  ||  ch  ==  ' "')  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(ch  ==  ' "'  ||  ch  ==  ' "')  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(ch  ==  ' "'  ||  ch  ==  ' "')  {	  if(chars.length    ||    random.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
479	[BUG]  [BUGGY]  Random  random  =  random.remove();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.remove();  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.remove();	  Random    random    =    random.next()    +    1;    	non-compiled	[CE]  	83	None	replace
480	[BUG]  [BUGGY]  random  =  random.next();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  random  =  random.next();  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	random  =  random.next();	  Random    random    =    random.next()    +    1;    	non-compiled	[CE]  <identifier>  expected	83	None	replace
481	[BUG]  [BUGGY]  if((  letters  &&  RandomStringUtils.isEmpty(random))  ||(numbers  &&  random.nextToken()  ==  0))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  RandomStringUtils.isEmpty(random))  ||(numbers  &&  random.nextToken()  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  RandomStringUtils.isEmpty(random))  ||(numbers  &&  random.nextToken()  ==  0))  {	  if(numbers    ||(numbers    &&    random.nextToken()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
482	[BUG]  [BUGGY]  Random  random  =  random.nextDouble(chars,  start,  end);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextDouble(chars,  start,  end);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextDouble(chars,  start,  end);	  Random    random    =    random.nextInt(chars,    start,    end);    	non-compiled	[CE]  	22	None	replace
483	[BUG]  [BUGGY]  Random  random  =  random.nextBoolean(ch,  start,  end);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextBoolean(ch,  start,  end);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextBoolean(ch,  start,  end);	  Random    random    =    random.nextInt(chars,    start,    end);    	non-compiled	[CE]  	22	None	replace
484	[BUG]  [BUGGY]  if((  letters  &&  random.getValue()  ==  0)||(numbers  &&  random.getValue()  ==  0))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.getValue()  ==  0)||(numbers  &&  random.getValue()  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.getValue()  ==  0)||(numbers  &&  random.getValue()  ==  0))  {	  if(chars    ==    0    ||(numbers    &&    random.getValue()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
485	[BUG]  [BUGGY]  if(count  ==  0  ||  letters  ||  random.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  letters  ||  random.length  ==  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  letters  ||  random.length  ==  0)  {	  if(count    ==    0    ||    random.length    ==    0    ||    letters)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
486	[BUG]  [BUGGY]  if(count  ==  0  ||(numbers  &  random.getChars(ch)!=  0))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||(numbers  &  random.getChars(ch)!=  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||(numbers  &  random.getChars(ch)!=  0))  {	  if(count    ==    0    ||(numbers    &&    random.getChars(ch)    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
487	[BUG]  [BUGGY]  Character  ch  =  random.nextToken()  +  2;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Character  ch  =  random.nextToken()  +  2;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Character  ch  =  random.nextToken()  +  2;	  Character    ch    =    random.nextToken();    	non-compiled	[CE]  	65	None	replace
488	[BUG]  [BUGGY]  if(count  ==  0  ||  chars!=  null  ||  chars.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  chars!=  null  ||  chars.length  ==  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  chars!=  null  ||  chars.length  ==  0)  {	  if(count    ==    0    ||    chars.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
489	[BUG]  [BUGGY]  if(count  ==  0  ||  chars  ==  null  ||  chars.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  chars  ==  null  ||  chars.length  ==  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  chars  ==  null  ||  chars.length  ==  0)  {	  if(count    ==    0    ||    chars.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
490	[BUG]  [BUGGY]  if(count  ==  0  ||  chars.length!=  random.length)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  chars.length!=  random.length)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  chars.length!=  random.length)  {	  if(count    ==    0    ||    random.numbers!=    chars.length)    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
491	[BUG]  [BUGGY]  Random  random  =  new  Random(random.nextInt());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  new  Random(random.nextInt());  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  new  Random(random.nextInt());	  Random    random    =    chars.nullValue();    	non-compiled	[CE]  	29	None	replace
492	[BUG]  [BUGGY]  if(count  ==  0  ||(numbers  &&  random.next()!=  null))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||(numbers  &&  random.next()!=  null))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||(numbers  &&  random.next()!=  null))  {	  if(count    ==    0    ||(numbers    &&    random.getValue()!=    null))    {    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
493	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  chars.length  >  0)||(count  %  chars.length  >  0))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  chars.length  >  0)||(count  %  chars.length  >  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(numbers  &&  chars.length  >  0)||(count  %  chars.length  >  0))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    random.length    >    0)||(count    %    chars.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
494	[BUG]  [BUGGY]  char  count  =  random.length()  *  2;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  count  =  random.length()  *  2;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  count  =  random.length()  *  2;	  char    count    =    random.length();    	non-compiled	[CE]  	47	None	replace
495	[BUG]  [BUGGY]  Random  random  =  random.nextInt(0,  3);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextInt(0,  3);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextInt(0,  3);	  Random    random    =    random.nextInt(0,    1);    	non-compiled	[CE]  	24	None	replace
496	[BUG]  [BUGGY]  Random  random  =  random.nextInt(0,  start,  end  -  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextInt(0,  start,  end  -  1);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextInt(0,  start,  end  -  1);	  Random    random    =    random.nextInt(0,    start,    end);    	non-compiled	[CE]  	23	None	replace
497	[BUG]  [BUGGY]  if(count  ==  0  ||  letters  &&  random.length!=  4)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  letters  &&  random.length!=  4)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  letters  &&  random.length!=  4)  {	  if(count    ==    0    ||    letters    &&    random.length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
498	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  chars[0]  ==  '/'))  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  chars[0]  ==  '/'))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(numbers  &&  chars[0]  ==  '/'))  {	  if((    numbers    &&    random.length    >    0)||(numbers    &&    chars[0]    ==    chars))    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
499	[BUG]  [BUGGY]  char[]  buffer,  Random  random,  int  letters,  boolean  numbers)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char[]  buffer,  Random  random,  int  letters,  boolean  numbers)  {  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char[]  buffer,  Random  random,  int  letters,  boolean  numbers)  {	  char[]    buffer,    Random    random,    int    letters)    {    	non-compiled	[CE]  	31	None	replace
500	[BUG]  [BUGGY]  char[]  buffer,  Random  random,  int  letters,  chars.length)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char[]  buffer,  Random  random,  int  letters,  chars.length)  {  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char[]  buffer,  Random  random,  int  letters,  chars.length)  {	  char[]    buffer,    Random    random,    int    letters)    {    	non-compiled	[CE]  	31	None	replace
501	[BUG]  [BUGGY]  if(count  ==  0  ||  chars.length!=  0  ||  letters)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  chars.length!=  0  ||  letters)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  chars.length!=  0  ||  letters)  {	  if(count    ==    0    ||    random.length!=    0    ||    letters)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
502	[BUG]  [BUGGY]  if((  letters  &&  chars  ==  null)||(count  &&  chars.length  >  0))  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  chars  ==  null)||(count  &&  chars.length  >  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  chars  ==  null)||(count  &&  chars.length  >  0))  {	  if((    letters    &&    chars!=    null)||(count    &&    chars.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
503	[BUG]  [BUGGY]  Random  random  =  random  ==  null?  random.next()  :  ch;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random  ==  null?  random.next()  :  ch;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random  ==  null?  random.next()  :  ch;	  Random    random    =    random!=    null?    random.next()    :    ch;    	non-compiled	[CE]  	50	None	replace
504	[BUG]  [BUGGY]  if(numbers  ||(numbers  &&  random.getValue()  ==  0))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(numbers  ||(numbers  &&  random.getValue()  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(numbers  ||(numbers  &&  random.getValue()  ==  0))  {	  if(ch    ==    0    ||(numbers    &&    random.getValue()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
505	[BUG]  [BUGGY]  if(count  ==  0  &&  random.length  ==  0  ||  letters)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  &&  random.length  ==  0  ||  letters)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  &&  random.length  ==  0  ||  letters)  {	  if(count    ==    0    &&    random.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
506	[BUG]  [BUGGY]  Random  random  =  random.nextInt(0,  end  +  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextInt(0,  end  +  1);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextInt(0,  end  +  1);	  Random    random    =    random.nextInt(start,    end    +    1);    	non-compiled	[CE]  	90	None	replace
507	[BUG]  [BUGGY]  int  count  =(chars  ==  null?  0  :  chars.length);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  int  count  =(chars  ==  null?  0  :  chars.length);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	int  count  =(chars  ==  null?  0  :  chars.length);	  int    count    =    chars.length;    	non-compiled	[CE]  	4	None	replace
508	[BUG]  [BUGGY]  if(count  ==  0  ||(offsets  &&  random.getValue()!=  null))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||(offsets  &&  random.getValue()!=  null))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||(offsets  &&  random.getValue()!=  null))  {	  if(count    ==    0    ||(offsets    &&    random.getValue()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
509	[BUG]  [BUGGY]  if(count  ==  0  ||  random.length!=  letters)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  random.length!=  letters)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  random.length!=  letters)  {	  if(count    ==    0    ||    random.length)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
510	[BUG]  [BUGGY]  Char  ch  =  random.getChars(0,  chars.length);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Char  ch  =  random.getChars(0,  chars.length);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Char  ch  =  random.getChars(0,  chars.length);	  char    ch    =    random.getChars(0,    ch);    	non-compiled	[CE]  	80	None	replace
511	[BUG]  [BUGGY]  if(count  ==  0  ||(offsets  &&  random.nextToken()!=  JsonString.FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||(offsets  &&  random.nextToken()!=  JsonString.FIELD_NAME))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||(offsets  &&  random.nextToken()!=  JsonString.FIELD_NAME))  {	  if(count    ==    0    ||(offsets    &&    random.nextToken()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
512	[BUG]  [BUGGY]  if(numbers  ==  0  ||  chars.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(numbers  ==  0  ||  chars.length  ==  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(numbers  ==  0  ||  chars.length  ==  0)  {	  if(numbers    ==    0    ||    random.numbers)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
513	[BUG]  [BUGGY]  if(numbers  ==  0  ||  chars.length  <  random.length)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(numbers  ==  0  ||  chars.length  <  random.length)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(numbers  ==  0  ||  chars.length  <  random.length)  {	  if(numbers    ==    0    ||    random.numbers)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
514	[BUG]  [BUGGY]  if(count  ==  0  ||(numbers  &&  random.nextBytes()  ==  0))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||(numbers  &&  random.nextBytes()  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||(numbers  &&  random.nextBytes()  ==  0))  {	  if(count    ==    0    ||(numbers    &&    random.nextChars()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
515	[BUG]  [BUGGY]  char  ch  =  random.getChars(ch,  0L);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char  ch  =  random.getChars(ch,  0L);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(ch,  0L);	  char    ch    =    random.getChars(ch,    RANDOM);    	non-compiled	[CE]  	79	None	replace
516	[BUG]  [BUGGY]  if(count  ==  0  ||(letters  &&  random.getChars(ch,  0,  chars.length)!=  0))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||(letters  &&  random.getChars(ch,  0,  chars.length)!=  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||(letters  &&  random.getChars(ch,  0,  chars.length)!=  0))  {	  if(count    ==    0    ||(numbers    &&    random.getChars(ch,    chars.length)!=    0))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
517	[BUG]  [BUGGY]  if(chars.length  ==  0  ||  numbers  ||  random.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(chars.length  ==  0  ||  numbers  ||  random.length  ==  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(chars.length  ==  0  ||  numbers  ||  random.length  ==  0)  {	  if(numbers    ||    chars.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
518	[BUG]  [BUGGY]  if(count  ==  0  &&  random.numbers  >  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  &&  random.numbers  >  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  &&  random.numbers  >  0)  {	  if(count    ==    0    &&    random.numbers)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
519	[BUG]  [BUGGY]  if(count  ==  0  &&  random.getChars(ch))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  &&  random.getChars(ch))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  &&  random.getChars(ch))  {	  if(count    ==    0    &&    random.numbers)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
520	[BUG]  [BUGGY]  if(count  ==  0  &&  random.numbers  ||  letters)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  &&  random.numbers  ||  letters)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  &&  random.numbers  ||  letters)  {	  if(count    ==    0    &&    random.numbers)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
521	[BUG]  [BUGGY]  if(count  ==  0  ||  letters  ||  random.numbers)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  letters  ||  random.numbers)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  letters  ||  random.numbers)  {	  if(count    ==    0    ||    random.numbers    ||    letters)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
522	[BUG]  [BUGGY]  if(count  ==  0  ||  chars.length  ||  letters)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(count  ==  0  ||  chars.length  ||  letters)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  chars.length  ||  letters)  {	  if(count    ==    0    ||    random.numbers    ||    letters)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
523	[BUG]  [BUGGY]  char[]  buffer,  Random  random,  boolean  letters,  chars.length)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  char[]  buffer,  Random  random,  boolean  letters,  chars.length)  {  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char[]  buffer,  Random  random,  boolean  letters,  chars.length)  {	  char[]    buffer,    Random    random,    boolean    letters)    {    	non-compiled	[CE]  	94	None	replace
524	[BUG]  [BUGGY]  int  count  =  this.chars.length;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  int  count  =  this.chars.length;  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	int  count  =  this.chars.length;	  int    count    =    chars.length();    	non-compiled	[CE]  	45	None	replace
525	[BUG]  [BUGGY]  if((  letters  &&  random.length  ==  0)||(numbers  &&  random.length  ==  0))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if((  letters  &&  random.length  ==  0)||(numbers  &&  random.length  ==  0))  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  ==  0)||(numbers  &&  random.length  ==  0))  {	  if(chars    ||    random.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
526	[BUG]  [BUGGY]  if(chars  ==  random.length  ||  ch  ==  0)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  if(chars  ==  random.length  ||  ch  ==  0)  {  [BUGGY]      return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(chars  ==  random.length  ||  ch  ==  0)  {	  if(chars    ||    random.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
527	[BUG]  [BUGGY]  Random  random  =  random.nextInt(ch,  start,  end  +  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {      [BUGGY]  Random  random  =  random.nextInt(ch,  start,  end  +  1);  [BUGGY]      if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextInt(ch,  start,  end  +  1);	  Random    random    =    random.nextInt(ch,    start,    end);    	non-compiled	[CE]  	21	None	replace
