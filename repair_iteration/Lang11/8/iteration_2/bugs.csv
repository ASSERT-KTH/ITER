bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(count  ==  0  ||  random.numbers  ||  letters)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if(count  ==  0  ||  random.numbers  ||  letters)  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  random.numbers  ||  letters)  {	  if(count    ==    0    ||    random.numbers)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
2	[BUG]  [BUGGY]  if(count  ==  0  ||  random.numbers.length)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if(count  ==  0  ||  random.numbers.length)  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  random.numbers.length)  {	  if(count    ==    0    ||    random.numbers)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
3	[BUG]  [BUGGY]  if(count  ==  0  ||  random.numbers,  letters)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if(count  ==  0  ||  random.numbers,  letters)  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  random.numbers,  letters)  {	  if(count    ==    0    ||    random.numbers)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
4	[BUG]  [BUGGY]  int  count  =  chars.length;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  int  count  =  chars.length;  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	int  count  =  chars.length;	      int    count    =    random.length;    	non-compiled	[CE]  	14	None	replace
5	[BUG]  [BUGGY]  int  count  =  random.length  -  1;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  int  count  =  random.length  -  1;  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	int  count  =  random.length  -  1;	      int    count    =    random.length;    	non-compiled	[CE]  	14	None	replace
6	[BUG]  [BUGGY]  char  count  =  random.length;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  char  count  =  random.length;  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  count  =  random.length;	      int    count    =    random.length;    	non-compiled	[CE]  	14	None	replace
7	[BUG]  [BUGGY]  int  count  =(chars  ==  null)?  0  :  chars.length;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  int  count  =(chars  ==  null)?  0  :  chars.length;  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	int  count  =(chars  ==  null)?  0  :  chars.length;	      int    count    =    random.length;    	non-compiled	[CE]  	14	None	replace
8	[BUG]  [BUGGY]  if(count  ==  0  ||(numbers  &&  random.nextChars()  ==  0))  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if(count  ==  0  ||(numbers  &&  random.nextChars()  ==  0))  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||(numbers  &&  random.nextChars()  ==  0))  {	  if(count    ==    0    ||(numbers    &&    random.nextToken()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
9	[BUG]  [BUGGY]  if(ch  ==  0  ||(numbers  &&  random.nextToken()  ==  0))  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if(ch  ==  0  ||(numbers  &&  random.nextToken()  ==  0))  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(ch  ==  0  ||(numbers  &&  random.nextToken()  ==  0))  {	  if(count    ==    0    ||(numbers    &&    random.nextToken()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
10	[BUG]  [BUGGY]  if(count  ==  0  ||(numbers  &&  random.nextToken()!=  0))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if(count  ==  0  ||(numbers  &&  random.nextToken()!=  0))  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||(numbers  &&  random.nextToken()!=  0))  {	  if(count    ==    0    ||(numbers    &&    random.nextToken()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
11	[BUG]  [BUGGY]  if(count  ==  0  ||(numbers  &&  random.getChars(ch,  chars.length)!=  0))  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if(count  ==  0  ||(numbers  &&  random.getChars(ch,  chars.length)!=  0))  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||(numbers  &&  random.getChars(ch,  chars.length)!=  0))  {	  if(count    ==    0    ||(numbers    &&    random.getChars(ch)!=    0))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
12	[BUG]  [BUGGY]  if(ch  ==  0  ||(numbers  &&  random.getChars(ch)!=  0))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if(ch  ==  0  ||(numbers  &&  random.getChars(ch)!=  0))  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(ch  ==  0  ||(numbers  &&  random.getChars(ch)!=  0))  {	  if(count    ==    0    ||(numbers    &&    random.getChars(ch)!=    0))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
13	[BUG]  [BUGGY]  if(count  ==  0  ||(letters  &&  random.getChars(ch)!=  0))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if(count  ==  0  ||(letters  &&  random.getChars(ch)!=  0))  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||(letters  &&  random.getChars(ch)!=  0))  {	  if(count    ==    0    ||(numbers    &&    random.getChars(ch)!=    0))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
14	[BUG]  [BUGGY]  String  ch  =  random.getChars(start,  end);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  String  ch  =  random.getChars(start,  end);  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	String  ch  =  random.getChars(start,  end);	      char    ch    =    random.getChars(start,    end);    	non-compiled	[CE]  	20	None	replace
15	[BUG]  [BUGGY]  char  ch  =  random.getChars(start,  end,  letters);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  char  ch  =  random.getChars(start,  end,  letters);  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(start,  end,  letters);	      char    ch    =    random.getChars(start,    end);    	non-compiled	[CE]  	20	None	replace
16	[BUG]  [BUGGY]  char  ch  =  random.getChars(start,  end  +  1);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  char  ch  =  random.getChars(start,  end  +  1);  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(start,  end  +  1);	      char    ch    =    random.getChars(start,    end);    	non-compiled	[CE]  	20	None	replace
17	[BUG]  [BUGGY]  char  ch  =  random.getChars(buffer,  start,  end);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  char  ch  =  random.getChars(buffer,  start,  end);  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(buffer,  start,  end);	      char    ch    =    random.getChars(start,    end);    	non-compiled	[CE]  	20	None	replace
18	[BUG]  [BUGGY]  if(ch  ==  0  ||(numbers  &&  random.getValue()  ==  0))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if(ch  ==  0  ||(numbers  &&  random.getValue()  ==  0))  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(ch  ==  0  ||(numbers  &&  random.getValue()  ==  0))  {	  if(count    ==    0    ||(numbers    &&    random.getValue()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
19	[BUG]  [BUGGY]  if(count  ==  0  ||(numbers  &&  random.getValue()!=  0))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if(count  ==  0  ||(numbers  &&  random.getValue()!=  0))  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||(numbers  &&  random.getValue()!=  0))  {	  if(count    ==    0    ||(numbers    &&    random.getValue()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
20	[BUG]  [BUGGY]  if(count  ==  0  ||(letters  &&  random.getValue()  ==  0))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if(count  ==  0  ||(letters  &&  random.getValue()  ==  0))  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||(letters  &&  random.getValue()  ==  0))  {	  if(count    ==    0    ||(numbers    &&    random.getValue()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
21	[BUG]  [BUGGY]  Random  random  =  random.nextInt(ch,  start,  end);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  Random  random  =  random.nextInt(ch,  start,  end);  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextInt(ch,  start,  end);	      Random    random    =    random.nextInt(start,    end);    	non-compiled	[CE]  	15	None	replace
22	[BUG]  [BUGGY]  Random  random  =  random.nextInt(chars,  start,  end);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  Random  random  =  random.nextInt(chars,  start,  end);  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextInt(chars,  start,  end);	      Random    random    =    random.nextInt(start,    end);    	non-compiled	[CE]  	15	None	replace
23	[BUG]  [BUGGY]  Random  random  =  random.nextInt(0,  start,  end);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  Random  random  =  random.nextInt(0,  start,  end);  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextInt(0,  start,  end);	      Random    random    =    random.nextInt(start,    end);    	non-compiled	[CE]  	15	None	replace
24	[BUG]  [BUGGY]  Random  random  =  random.nextInt(0,  1);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  Random  random  =  random.nextInt(0,  1);  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextInt(0,  1);	      Random    random    =    random.nextInt(start,    end);    	non-compiled	[CE]  	15	None	replace
25	[BUG]  [BUGGY]  if(count  ||  random.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if(count  ||  random.length  ==  0)  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ||  random.length  ==  0)  {	  if(numbers    ||    random.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
26	[BUG]  [BUGGY]  if(chars.length  ||  random.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if(chars.length  ||  random.length  ==  0)  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(chars.length  ||  random.length  ==  0)  {	  if(numbers    ||    random.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
27	[BUG]  [BUGGY]  if(numbers  ||  random.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if(numbers  ||  random.length  <  =  0)  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(numbers  ||  random.length  <  =  0)  {	  if(numbers    ||    random.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
28	[BUG]  [BUGGY]  Random  random  =  random.nullValue()  +  1;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  Random  random  =  random.nullValue()  +  1;  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nullValue()  +  1;	      Random    random    =    random.nullValue();    	non-compiled	[CE]  	6	None	replace
29	[BUG]  [BUGGY]  Random  random  =  chars.nullValue();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  Random  random  =  chars.nullValue();  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  chars.nullValue();	      Random    random    =    random.nullValue();    	non-compiled	[CE]  	6	None	replace
30	[BUG]  [BUGGY]  Random  random  =  random.nullValue()  +  chars.length;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  Random  random  =  random.nullValue()  +  chars.length;  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nullValue()  +  chars.length;	      Random    random    =    random.nullValue();    	non-compiled	[CE]  	6	None	replace
31	[BUG]  [BUGGY]  char[]  buffer,  Random  random,  int  letters)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  char[]  buffer,  Random  random,  int  letters)  {  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char[]  buffer,  Random  random,  int  letters)  {	      char[]    buffer,    Random    random)    {    	non-compiled	[CE]  	5	None	replace
32	[BUG]  [BUGGY]  char[]  buffer,  Random  random,  int  count)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  char[]  buffer,  Random  random,  int  count)  {  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char[]  buffer,  Random  random,  int  count)  {	      char[]    buffer,    Random    random)    {    	non-compiled	[CE]  	5	None	replace
33	[BUG]  [BUGGY]  char[]  buffer,  Random  random,  int  start)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  char[]  buffer,  Random  random,  int  start)  {  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char[]  buffer,  Random  random,  int  start)  {	      char[]    buffer,    Random    random)    {    	non-compiled	[CE]  	5	None	replace
34	[BUG]  [BUGGY]  if((  letters  &&  random!=  null)||(numbers  &&  chars.length  ==  0))  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if((  letters  &&  random!=  null)||(numbers  &&  chars.length  ==  0))  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random!=  null)||(numbers  &&  chars.length  ==  0))  {	  if((    letters    &&    chars!=    null)||(numbers    &&    chars.length    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
35	[BUG]  [BUGGY]  if((  letters  &&  chars!=  null)||(numbers  &&  random.length  ==  0))  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if((  letters  &&  chars!=  null)||(numbers  &&  random.length  ==  0))  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  chars!=  null)||(numbers  &&  random.length  ==  0))  {	  if((    letters    &&    chars!=    null)||(numbers    &&    chars.length    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
36	[BUG]  [BUGGY]  if((  letters  &&  ch!=  null)||(numbers  &&  chars.length  ==  0))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if((  letters  &&  ch!=  null)||(numbers  &&  chars.length  ==  0))  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  ch!=  null)||(numbers  &&  chars.length  ==  0))  {	  if((    letters    &&    chars!=    null)||(numbers    &&    chars.length    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
37	[BUG]  [BUGGY]  if((  letters  &&  chars!=  null)||(count  &&  chars.length  ==  0))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if((  letters  &&  chars!=  null)||(count  &&  chars.length  ==  0))  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  chars!=  null)||(count  &&  chars.length  ==  0))  {	  if((    letters    &&    chars!=    null)||(numbers    &&    chars.length    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
38	[BUG]  [BUGGY]  if(count  ==  0  ||  random.length  ==  0  ||  letters)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if(count  ==  0  ||  random.length  ==  0  ||  letters)  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  random.length  ==  0  ||  letters)  {	  if(count    ==    0    ||    random.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
39	[BUG]  [BUGGY]  if(count  ==  0  ||  random.length!=  0  ||  letters)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if(count  ==  0  ||  random.length!=  0  ||  letters)  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  random.length!=  0  ||  letters)  {	  if(count    ==    0    ||    random.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
40	[BUG]  [BUGGY]  if(count  ==  0  ||  random.length  ==  0  ||  numbers)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if(count  ==  0  ||  random.length  ==  0  ||  numbers)  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  random.length  ==  0  ||  numbers)  {	  if(count    ==    0    ||    random.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
41	[BUG]  [BUGGY]  if(count  ==  0  ||  numbers  &&  random.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if(count  ==  0  ||  numbers  &&  random.length  ==  0)  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  numbers  &&  random.length  ==  0)  {	  if(count    ==    0    ||    letters    &&    random.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
42	[BUG]  [BUGGY]  if(count  ==  0  ||  letters  &&  random.length!=  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if(count  ==  0  ||  letters  &&  random.length!=  0)  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  letters  &&  random.length!=  0)  {	  if(count    ==    0    ||    letters    &&    random.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
43	[BUG]  [BUGGY]  if(count  ==  0  ||  letters  &&  random.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if(count  ==  0  ||  letters  &&  random.length  >  0)  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  letters  &&  random.length  >  0)  {	  if(count    ==    0    ||    letters    &&    random.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
44	[BUG]  [BUGGY]  int  count  =  random.length()  +  1;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  int  count  =  random.length()  +  1;  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	int  count  =  random.length()  +  1;	      int    count    =    random.length();    	non-compiled	[CE]  	8	None	replace
45	[BUG]  [BUGGY]  int  count  =  chars.length();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  int  count  =  chars.length();  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	int  count  =  chars.length();	      int    count    =    random.length();    	non-compiled	[CE]  	8	None	replace
46	[BUG]  [BUGGY]  int  count  =  random.length()  -  1;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  int  count  =  random.length()  -  1;  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	int  count  =  random.length()  -  1;	      int    count    =    random.length();    	non-compiled	[CE]  	8	None	replace
47	[BUG]  [BUGGY]  char  count  =  random.length();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  char  count  =  random.length();  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  count  =  random.length();	      int    count    =    random.length();    	non-compiled	[CE]  	8	None	replace
48	[BUG]  [BUGGY]  Random  random  =  random.nextToken();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  Random  random  =  random.nextToken();  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextToken();	      Random    random    =    random.next();    	non-compiled	[CE]  	9	None	replace
49	[BUG]  [BUGGY]  Random  random  =  random.nextChar();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  Random  random  =  random.nextChar();  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextChar();	      Random    random    =    random.next();    	non-compiled	[CE]  	9	None	replace
50	[BUG]  [BUGGY]  Random  random  =  random!=  null?  random.next()  :  ch;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  Random  random  =  random!=  null?  random.next()  :  ch;  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random!=  null?  random.next()  :  ch;	      Random    random    =    random.next();    	non-compiled	[CE]  	9	None	replace
51	[BUG]  [BUGGY]  Random  random  =  random.getRandom();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  Random  random  =  random.getRandom();  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.getRandom();	      Random    random    =    random.getValue();    	non-compiled	[CE]  	7	None	replace
52	[BUG]  [BUGGY]  Random  random  =  random.clone();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  Random  random  =  random.clone();  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.clone();	      Random    random    =    random.getValue();    	non-compiled	[CE]  	7	None	replace
53	[BUG]  [BUGGY]  if((  letters  &&  random!=  null)||(numbers  &&  chars.length  >  0))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if((  letters  &&  random!=  null)||(numbers  &&  chars.length  >  0))  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random!=  null)||(numbers  &&  chars.length  >  0))  {	  if((    letters    &&    chars!=    null)||(numbers    &&    chars.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
54	[BUG]  [BUGGY]  if((  letters  &&  chars!=  null)||(numbers  &&  random.length  >  0))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if((  letters  &&  chars!=  null)||(numbers  &&  random.length  >  0))  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  chars!=  null)||(numbers  &&  random.length  >  0))  {	  if((    letters    &&    chars!=    null)||(numbers    &&    chars.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
55	[BUG]  [BUGGY]  if((  letters  &&  buffer!=  null)||(numbers  &&  chars.length  >  0))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if((  letters  &&  buffer!=  null)||(numbers  &&  chars.length  >  0))  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  buffer!=  null)||(numbers  &&  chars.length  >  0))  {	  if((    letters    &&    chars!=    null)||(numbers    &&    chars.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
56	[BUG]  [BUGGY]  if((  letters  &&  chars!=  null)||(count  &&  chars.length  >  0))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if((  letters  &&  chars!=  null)||(count  &&  chars.length  >  0))  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  chars!=  null)||(count  &&  chars.length  >  0))  {	  if((    letters    &&    chars!=    null)||(numbers    &&    chars.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
57	[BUG]  [BUGGY]  String  ch  =  random.nextDouble();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  String  ch  =  random.nextDouble();  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	String  ch  =  random.nextDouble();	      char    ch    =    random.nextDouble();    	non-compiled	[CE]  	23	None	replace
58	[BUG]  [BUGGY]  char  ch  =  random.nextDouble()  +  1;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  char  ch  =  random.nextDouble()  +  1;  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.nextDouble()  +  1;	      char    ch    =    random.nextDouble();    	non-compiled	[CE]  	23	None	replace
59	[BUG]  [BUGGY]  Char  ch  =  random.nextDouble();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  Char  ch  =  random.nextDouble();  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Char  ch  =  random.nextDouble();	      char    ch    =    random.nextDouble();    	non-compiled	[CE]  	23	None	replace
60	[BUG]  [BUGGY]  String  ch  =  random.getChars(ch);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  String  ch  =  random.getChars(ch);  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	String  ch  =  random.getChars(ch);	      char    ch    =    random.getChars(ch);    	non-compiled	[CE]  	21	None	replace
61	[BUG]  [BUGGY]  char  ch  =  random.getChars(ch,  0);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  char  ch  =  random.getChars(ch,  0);  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(ch,  0);	      char    ch    =    random.getChars(ch);    	non-compiled	[CE]  	21	None	replace
62	[BUG]  [BUGGY]  char  ch  =  random.getChars(ch,  letters);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  char  ch  =  random.getChars(ch,  letters);  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(ch,  letters);	      char    ch    =    random.getChars(ch);    	non-compiled	[CE]  	21	None	replace
63	[BUG]  [BUGGY]  String  ch  =  random.nextToken();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  String  ch  =  random.nextToken();  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	String  ch  =  random.nextToken();	      char    ch    =    random.nextToken();    	non-compiled	[CE]  	22	None	replace
64	[BUG]  [BUGGY]  Char  ch  =  random.nextToken();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  Char  ch  =  random.nextToken();  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Char  ch  =  random.nextToken();	      char    ch    =    random.nextToken();    	non-compiled	[CE]  	22	None	replace
65	[BUG]  [BUGGY]  Character  ch  =  random.nextToken();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  Character  ch  =  random.nextToken();  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Character  ch  =  random.nextToken();	      char    ch    =    random.nextToken();    	non-compiled	[CE]  	22	None	replace
66	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(count  &&  random.length  >  0))  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if((  letters  &&  random.length  >  0)||(count  &&  random.length  >  0))  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(count  &&  random.length  >  0))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    random.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
67	[BUG]  [BUGGY]  if((  random.length  &&  letters  >  0)||(numbers  &&  random.length  >  0))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if((  random.length  &&  letters  >  0)||(numbers  &&  random.length  >  0))  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  random.length  &&  letters  >  0)||(numbers  &&  random.length  >  0))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    random.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
68	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  random.length  >  0)||(count  <  chars.length))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  random.length  >  0)||(count  <  chars.length))  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(numbers  &&  random.length  >  0)||(count  <  chars.length))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    random.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
69	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  chars[0]  ==  chars))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  chars[0]  ==  chars))  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(numbers  &&  chars[0]  ==  chars))  {	  if((    letters    &&    chars.length    >    0)||(numbers    &&    chars[0]    ==    random))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
70	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  chars[0]!=  chars))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  chars[0]!=  chars))  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(numbers  &&  chars[0]!=  chars))  {	  if((    letters    &&    chars.length    >    0)||(numbers    &&    chars[0]    ==    random))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
71	[BUG]  [BUGGY]  if((  numbers  &&  random.length  >  0)||(numbers  &&  chars[0]  ==  chars))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if((  numbers  &&  random.length  >  0)||(numbers  &&  chars[0]  ==  chars))  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  numbers  &&  random.length  >  0)||(numbers  &&  chars[0]  ==  chars))  {	  if((    letters    &&    chars.length    >    0)||(numbers    &&    chars[0]    ==    random))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
72	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  chars[0]  ==  ch))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  chars[0]  ==  ch))  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(numbers  &&  chars[0]  ==  ch))  {	  if((    letters    &&    chars.length    >    0)||(numbers    &&    chars[0]    ==    random))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
73	[BUG]  [BUGGY]  if(count  ==  0  &&  random.numbers)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if(count  ==  0  &&  random.numbers)  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  &&  random.numbers)  {	  if(count    ==    0    ||    random.numbers)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
74	[BUG]  [BUGGY]  if(numbers  ==  0  ||  random.numbers)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if(numbers  ==  0  ||  random.numbers)  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(numbers  ==  0  ||  random.numbers)  {	  if(count    ==    0    ||    random.numbers)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
75	[BUG]  [BUGGY]  if(count  ==  0  ||  random.length)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if(count  ==  0  ||  random.length)  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  random.length)  {	  if(count    ==    0    ||    random.numbers)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
76	[BUG]  [BUGGY]  if(count  ==  0  &&  letters  &&  random.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if(count  ==  0  &&  letters  &&  random.length  ==  0)  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  &&  letters  &&  random.length  ==  0)  {	  if(count    ==    0    ||    letters    &&    random.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
77	[BUG]  [BUGGY]  char  ch  =  random.getChars(start,  start,  end);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  char  ch  =  random.getChars(start,  start,  end);  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(start,  start,  end);	      char    ch    =    random.getChars(start,    end);    	non-compiled	[CE]  	20	None	replace
78	[BUG]  [BUGGY]  Random  random  =  random.nullValue(0);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  Random  random  =  random.nullValue(0);  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nullValue(0);	      Random    random    =    random.nullValue();    	non-compiled	[CE]  	6	None	replace
79	[BUG]  [BUGGY]  char  ch  =  random.getChars(ch,  RANDOM);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  char  ch  =  random.getChars(ch,  RANDOM);  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(ch,  RANDOM);	      char    ch    =    random.getChars(ch);    	non-compiled	[CE]  	21	None	replace
80	[BUG]  [BUGGY]  char  ch  =  random.getChars(0,  ch);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  char  ch  =  random.getChars(0,  ch);  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(0,  ch);	      char    ch    =    random.getChars(ch);    	non-compiled	[CE]  	21	None	replace
81	[BUG]  [BUGGY]  char  ch  =  random.getChars(ch,  start);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  char  ch  =  random.getChars(ch,  start);  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(ch,  start);	      char    ch    =    random.getChars(ch);    	non-compiled	[CE]  	21	None	replace
82	[BUG]  [BUGGY]  Random  random  =  random.nextInt();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  Random  random  =  random.nextInt();  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextInt();	      Random    random    =    random.next();    	non-compiled	[CE]  	9	None	replace
83	[BUG]  [BUGGY]  Random  random  =  random.next()  +  1;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  Random  random  =  random.next()  +  1;  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.next()  +  1;	      Random    random    =    random.next();    	non-compiled	[CE]  	9	None	replace
84	[BUG]  [BUGGY]  if(chars  ==  0  ||(numbers  &&  random.getValue()  ==  0))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if(chars  ==  0  ||(numbers  &&  random.getValue()  ==  0))  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(chars  ==  0  ||(numbers  &&  random.getValue()  ==  0))  {	  if(count    ==    0    ||(numbers    &&    random.getValue()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
85	[BUG]  [BUGGY]  if(count  ==  0  ||(numbers  &&  random.getChars(ch)  ==  0))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if(count  ==  0  ||(numbers  &&  random.getChars(ch)  ==  0))  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||(numbers  &&  random.getChars(ch)  ==  0))  {	  if(count    ==    0    ||(numbers    &&    random.getValue()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
86	[BUG]  [BUGGY]  if((  letters  &&  buffer!=  null)||(numbers  &&  chars.length  ==  0))  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if((  letters  &&  buffer!=  null)||(numbers  &&  chars.length  ==  0))  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  buffer!=  null)||(numbers  &&  chars.length  ==  0))  {	  if((    letters    &&    chars!=    null)||(numbers    &&    chars.length    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
87	[BUG]  [BUGGY]  if((  letters  &&  random!=  null)||(numbers  &&  random.length  ==  0))  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if((  letters  &&  random!=  null)||(numbers  &&  random.length  ==  0))  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random!=  null)||(numbers  &&  random.length  ==  0))  {	  if((    letters    &&    chars!=    null)||(numbers    &&    chars.length    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
88	[BUG]  [BUGGY]  if(count  ==  0  ||(letters  &&  random.nextToken()  ==  0))  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if(count  ==  0  ||(letters  &&  random.nextToken()  ==  0))  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||(letters  &&  random.nextToken()  ==  0))  {	  if(count    ==    0    ||(numbers    &&    random.nextToken()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
89	[BUG]  [BUGGY]  if(numbers  ||(numbers  &&  random.nextToken()  ==  0))  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if(numbers  ||(numbers  &&  random.nextToken()  ==  0))  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(numbers  ||(numbers  &&  random.nextToken()  ==  0))  {	  if(count    ==    0    ||(numbers    &&    random.nextToken()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
90	[BUG]  [BUGGY]  Random  random  =  random.nextInt(start,  end  +  1);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  Random  random  =  random.nextInt(start,  end  +  1);  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextInt(start,  end  +  1);	      Random    random    =    random.nextInt(start,    end);    	non-compiled	[CE]  	15	None	replace
91	[BUG]  [BUGGY]  Random  random  =  random.nextInt(start,  end  -  start);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  Random  random  =  random.nextInt(start,  end  -  start);  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextInt(start,  end  -  start);	      Random    random    =    random.nextInt(start,    end);    	non-compiled	[CE]  	15	None	replace
92	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(buffered  &&  random.length  >  0))  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if((  letters  &&  random.length  >  0)||(buffered  &&  random.length  >  0))  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(buffered  &&  random.length  >  0))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    random.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
93	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  buffer.length  >  0))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  buffer.length  >  0))  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(numbers  &&  buffer.length  >  0))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    random.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
94	[BUG]  [BUGGY]  char[]  buffer,  Random  random,  boolean  letters)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  char[]  buffer,  Random  random,  boolean  letters)  {  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char[]  buffer,  Random  random,  boolean  letters)  {	      char[]    buffer,    Random    random)    {    	non-compiled	[CE]  	5	None	replace
95	[BUG]  [BUGGY]  Random  random  =  random!=  null?  null  :  random.getValue();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  Random  random  =  random!=  null?  null  :  random.getValue();  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random!=  null?  null  :  random.getValue();	      Random    random    =    random.getValue();    	non-compiled	[CE]  	7	None	replace
96	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  buffer[0]  ==  chars))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  buffer[0]  ==  chars))  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(numbers  &&  buffer[0]  ==  chars))  {	  if((    letters    &&    chars.length    >    0)||(numbers    &&    chars[0]    ==    random))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
97	[BUG]  [BUGGY]  if(count  ==  0  &&  random.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if(count  ==  0  &&  random.length  ==  0)  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  &&  random.length  ==  0)  {	  if(count    ==    0    ||    random.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
98	[BUG]  [BUGGY]  if(count  ==  0  ||  chars.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if(count  ==  0  ||  chars.length  ==  0)  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  chars.length  ==  0)  {	  if(count    ==    0    ||    random.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
99	[BUG]  [BUGGY]  char  ch  =  random.nextDouble()  +  4;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  char  ch  =  random.nextDouble()  +  4;  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.nextDouble()  +  4;	      char    ch    =    random.nextDouble();    	non-compiled	[CE]  	23	None	replace
100	[BUG]  [BUGGY]  char  ch  =  random.nextToken()  +  1;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  char  ch  =  random.nextToken()  +  1;  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.nextToken()  +  1;	      char    ch    =    random.nextToken();    	non-compiled	[CE]  	22	None	replace
101	[BUG]  [BUGGY]  if(numbers  ||  chars.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if(numbers  ||  chars.length  ==  0)  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(numbers  ||  chars.length  ==  0)  {	  if(numbers    ||    random.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
102	[BUG]  [BUGGY]  if(chars  ||  random.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if(chars  ||  random.length  ==  0)  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(chars  ||  random.length  ==  0)  {	  if(numbers    ||    random.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
103	[BUG]  [BUGGY]  if(numbers  ||  buffer.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if(numbers  ||  buffer.length  ==  0)  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(numbers  ||  buffer.length  ==  0)  {	  if(numbers    ||    random.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
104	[BUG]  [BUGGY]  int  count  =  random.length()  *  chars.length;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  int  count  =  random.length()  *  chars.length;  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	int  count  =  random.length()  *  chars.length;	      int    count    =    random.length();    	non-compiled	[CE]  	8	None	replace
105	[BUG]  [BUGGY]  int  count  =(chars  ==  null?  random.length  :  chars.length);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  int  count  =(chars  ==  null?  random.length  :  chars.length);  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	int  count  =(chars  ==  null?  random.length  :  chars.length);	      int    count    =    random.length;    	non-compiled	[CE]  	14	None	replace
106	[BUG]  [BUGGY]  int  count  =(chars  ==  null)?  random.length  :  chars.length;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  int  count  =(chars  ==  null)?  random.length  :  chars.length;  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	int  count  =(chars  ==  null)?  random.length  :  chars.length;	      int    count    =    random.length;    	non-compiled	[CE]  	14	None	replace
107	[BUG]  [BUGGY]  Random  random  =  random.nextDouble(start,  end);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  Random  random  =  random.nextDouble(start,  end);  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextDouble(start,  end);	      Random    random    =    random.nextInt(start,    end);    	non-compiled	[CE]  	15	None	replace
108	[BUG]  [BUGGY]  Random  random  =  random.nextDouble();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  Random  random  =  random.nextDouble();  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  random.nextDouble();	      Random    random    =    random.next();    	non-compiled	[CE]  	9	None	replace
109	[BUG]  [BUGGY]  if(count  ==  0  ||  random.numbers  ==  0)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if(count  ==  0  ||  random.numbers  ==  0)  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  random.numbers  ==  0)  {	  if(count    ==    0    ||    random.numbers)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
110	[BUG]  [BUGGY]  if(count  ==  0  ||  random.numbers!=  chars.length)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if(count  ==  0  ||  random.numbers!=  chars.length)  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  random.numbers!=  chars.length)  {	  if(count    ==    0    ||    random.numbers)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
111	[BUG]  [BUGGY]  if(count  ==  0  ||  chars.length  <  random.length)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if(count  ==  0  ||  chars.length  <  random.length)  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  chars.length  <  random.length)  {	  if(count    ==    0    ||    random.numbers)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
112	[BUG]  [BUGGY]  char  ch  =  random.getChars(ch,  chars);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  char  ch  =  random.getChars(ch,  chars);  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	char  ch  =  random.getChars(ch,  chars);	      char    ch    =    random.getChars(ch);    	non-compiled	[CE]  	21	None	replace
113	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  chars[0]  ==  CHARS))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  chars[0]  ==  CHARS))  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(numbers  &&  chars[0]  ==  CHARS))  {	  if((    letters    &&    chars.length    >    0)||(numbers    &&    chars[0]    ==    random))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
114	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(count  &&  chars[0]  ==  chars))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if((  letters  &&  random.length  >  0)||(count  &&  chars[0]  ==  chars))  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(count  &&  chars[0]  ==  chars))  {	  if((    letters    &&    chars.length    >    0)||(numbers    &&    chars[0]    ==    random))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
115	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  random.length  >  0)||(numbers  &&  random.length  >  0))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  random.length  >  0)||(numbers  &&  random.length  >  0))  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(numbers  &&  random.length  >  0)||(numbers  &&  random.length  >  0))  {	  if(numbers    ||    random.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
116	[BUG]  [BUGGY]  if(count  ==  0  ||(offsets  &&  random.nextToken()  ==  0))  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if(count  ==  0  ||(offsets  &&  random.nextToken()  ==  0))  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||(offsets  &&  random.nextToken()  ==  0))  {	  if(count    ==    0    ||(numbers    &&    random.nextToken()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
117	[BUG]  [BUGGY]  if(count  ==  0  ||  random.length  ==  0  ||  chars.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if(count  ==  0  ||  random.length  ==  0  ||  chars.length  ==  0)  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||  random.length  ==  0  ||  chars.length  ==  0)  {	  if(count    ==    0    ||    random.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
118	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  random.length  >  0)||(buffered  &&  random.length  >  0))  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  random.length  >  0)||(buffered  &&  random.length  >  0))  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(numbers  &&  random.length  >  0)||(buffered  &&  random.length  >  0))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    random.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
119	[BUG]  [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  random.length  >  0)||(count  %  chars.length  >  0))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if((  letters  &&  random.length  >  0)||(numbers  &&  random.length  >  0)||(count  %  chars.length  >  0))  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if((  letters  &&  random.length  >  0)||(numbers  &&  random.length  >  0)||(count  %  chars.length  >  0))  {	  if((    letters    &&    random.length    >    0)||(numbers    &&    random.length    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
120	[BUG]  [BUGGY]  Random  random  =  new  Random(random.nullValue());  [CE]  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  Random  random  =  new  Random(random.nullValue());  [BUGGY]    if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	Random  random  =  new  Random(random.nullValue());	      Random    random    =    random.nullValue();    	non-compiled	[CE]  	6	None	replace
121	[BUG]  [BUGGY]  if(count  ==  0  ||(numbers  &&  random.getValue()!=  null))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if(count  ==  0  ||(numbers  &&  random.getValue()!=  null))  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||(numbers  &&  random.getValue()!=  null))  {	  if(count    ==    0    ||(numbers    &&    random.getValue()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
122	[BUG]  [BUGGY]  if(count  ==  0  ||(offsets  &&  random.getValue()  ==  0))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {    [BUGGY]  if(count  ==  0  ||(offsets  &&  random.getValue()  ==  0))  {  [BUGGY]    return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }  if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	225	225	1	replace	if(count  ==  0  ||(offsets  &&  random.getValue()  ==  0))  {	  if(count    ==    0    ||(numbers    &&    random.getValue()    ==    0))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
