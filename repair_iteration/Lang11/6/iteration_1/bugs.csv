bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    int  count  =  chars[random.nextInt(gap)];  [CE]  [FE]    AssertionFailedError  [CONTEXT]  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  [BUGGY]    int  count  =  chars[random.nextInt(gap)];  [BUGGY]  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	250	250	1	replace	    int  count  =  chars[random.nextInt(gap)];		non-compiled	[CE]  	12	None	add
2	[BUG]  [BUGGY]    int  count  =  chars[random.nextInt(gap)+  start];  [CE]  [FE]      AssertionFailedError  [CONTEXT]  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  [BUGGY]    int  count  =  chars[random.nextInt(gap)+  start];  [BUGGY]  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	250	250	1	replace	    int  count  =  chars[random.nextInt(gap)+  start];		non-compiled	[CE]  	12	None	add
3	[BUG]  [BUGGY]    int  count  =  chars.length;  [CE]  [FE]        AssertionFailedError  [CONTEXT]  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  [BUGGY]    int  count  =  chars.length;  [BUGGY]  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	250	250	1	replace	    int  count  =  chars.length;		non-compiled	[CE]  	12	None	add
4	[BUG]  [BUGGY]    int  count  =  chars[random.nextInt(gap)+1];  [CE]  [FE]          AssertionFailedError  [CONTEXT]  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  [BUGGY]    int  count  =  chars[random.nextInt(gap)+1];  [BUGGY]  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	250	250	1	replace	    int  count  =  chars[random.nextInt(gap)+1];		non-compiled	[CE]  	12	None	add
5	[BUG]  [BUGGY]    int  count  =  chars[random.nextInt(gap)-  start];  [CE]  [FE]            AssertionFailedError  [CONTEXT]  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  [BUGGY]    int  count  =  chars[random.nextInt(gap)-  start];  [BUGGY]  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	250	250	1	replace	    int  count  =  chars[random.nextInt(gap)-  start];		non-compiled	[CE]  	12	None	add
6	[BUG]  [BUGGY]  while  (count--  >=  0)  {  [CE]  [FE]    AssertionFailedError  [CONTEXT]  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  [BUGGY]  while  (count--  >=  0)  {  [BUGGY]  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	250	250	1	replace	while  (count--  >=  0)  {	while  (count--  !=  0)  {  	non-compiled	[CE]  	11	None	replace
7	[BUG]  [BUGGY]  while  (count--  ==  0)  {  [CE]  [FE]      AssertionFailedError  [CONTEXT]  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  [BUGGY]  while  (count--  ==  0)  {  [BUGGY]  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	250	250	1	replace	while  (count--  ==  0)  {	while  (count--  !=  0)  {  	non-compiled	[CE]  	11	None	replace
8	[BUG]  [BUGGY]    int  count  =  random.nextInt(gap);  [CE]  [FE]    AssertionFailedError  [CONTEXT]  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  [BUGGY]    int  count  =  random.nextInt(gap);  [BUGGY]  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	250	250	1	replace	    int  count  =  random.nextInt(gap);		non-compiled	[CE]  	12	None	add
9	[BUG]  [BUGGY]    char  ch  =  buffer[random.nextInt(gap)+  start];  [CE]  [FE]    AssertionFailedError  [CONTEXT]  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  [BUGGY]    char  ch  =  buffer[random.nextInt(gap)+  start];  [BUGGY]  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	250	250	1	replace	    char  ch  =  buffer[random.nextInt(gap)+  start];		non-compiled	[CE]  	12	None	add
10	[BUG]  [BUGGY]    char  ch  =  random.nextInt(gap);  [CE]  [FE]      AssertionFailedError  [CONTEXT]  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  [BUGGY]    char  ch  =  random.nextInt(gap);  [BUGGY]  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	250	250	1	replace	    char  ch  =  random.nextInt(gap);		non-compiled	[CE]  	12	None	add
11	[BUG]  [BUGGY]    char  ch  =  buffer[random.nextInt(gap)+  1];  [CE]  [FE]        AssertionFailedError  [CONTEXT]  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  [BUGGY]    char  ch  =  buffer[random.nextInt(gap)+  1];  [BUGGY]  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.5	250	250	1	replace	    char  ch  =  buffer[random.nextInt(gap)+  1];		non-compiled	[CE]  	12	None	add
