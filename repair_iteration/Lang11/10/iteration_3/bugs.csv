bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(0,  0,  start);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(0,  0,  start);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(0,  0,  start);	  char[]    buffer    =    random.getChars(0,    0,    end);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
2	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(start,  0,  end);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(start,  0,  end);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(start,  0,  end);	  char[]    buffer    =    random.getChars(0,    0,    end);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
3	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  start  +  count,  start);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(ch,  start  +  count,  start);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  start  +  count,  start);	  char[]    buffer    =    random.getChars(start,    start    +    count,    ch);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
4	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(start,  end  +  count,  ch);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(start,  end  +  count,  ch);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(start,  end  +  count,  ch);	  char[]    buffer    =    random.getChars(start,    start    +    count,    ch);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
5	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(count,  start  +  start,  ch);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(count,  start  +  start,  ch);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(count,  start  +  start,  ch);	  char[]    buffer    =    random.getChars(start,    start    +    count,    ch);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
6	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(0,  start  +  count,  ch);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(0,  start  +  count,  ch);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(0,  start  +  count,  ch);	  char[]    buffer    =    random.getChars(start,    start    +    count,    ch);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
7	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  end,  count);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  end,  count);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  0,  end,  count);	  char[]    buffer    =    random.getChars(ch,    0,    start,    count);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
8	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  buffer,  count);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  buffer,  count);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  0,  buffer,  count);	  char[]    buffer    =    random.getChars(ch,    0,    start,    count);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
9	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  start,  end,  count);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  start,  end,  count);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  0,  start,  end,  count);	  char[]    buffer    =    random.getChars(ch,    0,    start,    count);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
10	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  count,  start);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  count,  start);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  0,  count,  start);	  char[]    buffer    =    random.getChars(ch,    0,    start,    count);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
11	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  count  *  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  count  *  1);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  0,  count  *  1);	  char[]    buffer    =    random.getChars(ch,    0,    count    +    1);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
12	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  count  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  count  -  1);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  0,  count  -  1);	  char[]    buffer    =    random.getChars(ch,    0,    count    +    1);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
13	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  count  -  1,  count  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  count  -  1,  count  +  1);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  0,  count  -  1,  count  +  1);	  char[]    buffer    =    random.getChars(ch,    0,    count    +    1);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
14	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(0,  0,  count,  start,  end);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(0,  0,  count,  start,  end);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(0,  0,  count,  start,  end);	  char[]    buffer    =    random.getChars(0,    0,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
15	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(0,  0,  count,  end);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(0,  0,  count,  end);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(0,  0,  count,  end);	  char[]    buffer    =    random.getChars(0,    0,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
16	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(0,  0,  start,  end,  count);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(0,  0,  start,  end,  count);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(0,  0,  start,  end,  count);	  char[]    buffer    =    random.getChars(0,    0,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
17	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(0,  0,  end,  start);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(0,  0,  end,  start);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(0,  0,  end,  start);	  char[]    buffer    =    random.getChars(0,    0,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
18	[BUG]  [BUGGY]  chars  =  random.getChars(count,  start,  end,  ch);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  chars  =  random.getChars(count,  start,  end,  ch);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(count,  start,  end,  ch);	  chars    =    random.getChars(start,    start,    end,    ch);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
19	[BUG]  [BUGGY]  chars  =  random.getChars(ch,  start,  end,  chars);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  chars  =  random.getChars(ch,  start,  end,  chars);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(ch,  start,  end,  chars);	  chars    =    random.getChars(start,    start,    end,    ch);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
20	[BUG]  [BUGGY]  chars  =  random.getChars(buffer,  start,  end,  ch);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  chars  =  random.getChars(buffer,  start,  end,  ch);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(buffer,  start,  end,  ch);	  chars    =    random.getChars(start,    start,    end,    ch);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
21	[BUG]  [BUGGY]  chars  =  random.getChars(ch,  start,  end,  count);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  chars  =  random.getChars(ch,  start,  end,  count);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(ch,  start,  end,  count);	  chars    =    random.getChars(start,    start,    end,    ch);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
22	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(start,  ch);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(start,  ch);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(start,  ch);	  char[]    buffer    =    random.getChars(ch);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
23	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  start);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(ch,  start);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  start);	  char[]    buffer    =    random.getChars(ch);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
24	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  start,  end,  letters);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  start,  end,  letters);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  0,  start,  end,  letters);	  char[]    buffer    =    random.getChars(ch,    0,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
25	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  start,  end,  numbers);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  start,  end,  numbers);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  0,  start,  end,  numbers);	  char[]    buffer    =    random.getChars(ch,    0,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
26	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  count,  end);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  count,  end);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  0,  count,  end);	  char[]    buffer    =    random.getChars(ch,    0,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
27	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(count,  start,  end,  ch);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(count,  start,  end,  ch);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(count,  start,  end,  ch);	  char[]    buffer    =    random.getChars(start,    end,    ch);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
28	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(0,  0,  ch);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(0,  0,  ch);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(0,  0,  ch);	  char[]    buffer    =    random.getChars(start,    end,    ch);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
29	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(0,  start,  end,  count);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(0,  start,  end,  count);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(0,  start,  end,  count);	  char[]    buffer    =    random.getChars(0,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
30	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(0,  start,  end,  letters);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(0,  start,  end,  letters);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(0,  start,  end,  letters);	  char[]    buffer    =    random.getChars(0,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
31	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(0,  count,  start,  end);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(0,  count,  start,  end);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(0,  count,  start,  end);	  char[]    buffer    =    random.getChars(0,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
32	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(count,  start,  end,  letters);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(count,  start,  end,  letters);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(count,  start,  end,  letters);	  char[]    buffer    =    random.getChars(count,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
33	[BUG]  [BUGGY]  if(chars  ==  null  ||  ch!=  'n'  ||  ch  ==  'r')  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  if(chars  ==  null  ||  ch!=  'n'  ||  ch  ==  'r')  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	if(chars  ==  null  ||  ch!=  'n'  ||  ch  ==  'r')  {	  if(chars    ==    null    ||    ch    ==    'n'    ||    ch    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
34	[BUG]  [BUGGY]  if(chars  ==  null  ||  count  ==  'n'  ||  ch  ==  'r')  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  if(chars  ==  null  ||  count  ==  'n'  ||  ch  ==  'r')  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	if(chars  ==  null  ||  count  ==  'n'  ||  ch  ==  'r')  {	  if(chars    ==    null    ||    ch    ==    'n'    ||    ch    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
35	[BUG]  [BUGGY]  if(chars!=  null  ||  ch  ==  'n'  ||  ch  ==  'r')  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  if(chars!=  null  ||  ch  ==  'n'  ||  ch  ==  'r')  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	if(chars!=  null  ||  ch  ==  'n'  ||  ch  ==  'r')  {	  if(chars    ==    null    ||    ch    ==    'n'    ||    ch    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
36	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  start);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  start);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  start,  start);	  char[]    buffer    =    random.getChars(count,    start,    start);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
37	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(0,  0,  count  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(0,  0,  count  +  1);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(0,  0,  count  +  1);	  char[]    buffer    =    random.getChars(0,    0,    count);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
38	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(0,  0,  start,  count);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(0,  0,  start,  count);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(0,  0,  start,  count);	  char[]    buffer    =    random.getChars(0,    0,    count);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
39	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(0,  0,  count  -  1);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(0,  0,  count  -  1);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(0,  0,  count  -  1);	  char[]    buffer    =    random.getChars(0,    0,    count);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
40	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(0);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(0);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(0);	  char[]    buffer    =    random.getChars(0,    0,    count);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
41	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  start,  end,  0);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  start,  end,  0);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  0,  start,  end,  0);	  char[]    buffer    =    random.getChars(ch,    start,    end,    0);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
42	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  end,  0,  count);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  end,  0,  count);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  start,  end,  0,  count);	  char[]    buffer    =    random.getChars(ch,    start,    end,    0);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
43	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  end,  0);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  end,  0);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  0,  end,  0);	  char[]    buffer    =    random.getChars(ch,    start,    end,    0);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
44	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  end,  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  end,  1);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  start,  end,  1);	  char[]    buffer    =    random.getChars(ch,    start,    end,    0);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
45	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(0,  0,  start,  random.length);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(0,  0,  start,  random.length);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(0,  0,  start,  random.length);	  char[]    buffer    =    random.getChars(0,    0,    random.length);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
46	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(0,  1,  random.length);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(0,  1,  random.length);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(0,  1,  random.length);	  char[]    buffer    =    random.getChars(0,    0,    random.length);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
47	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(0,  0,  chars.length);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(0,  0,  chars.length);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(0,  0,  chars.length);	  char[]    buffer    =    random.getChars(0,    0,    random.length);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
48	[BUG]  [BUGGY]  chars  =  random.getChars(ch,  start,  end,  buffer,  letters);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  chars  =  random.getChars(ch,  start,  end,  buffer,  letters);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(ch,  start,  end,  buffer,  letters);	  chars    =    random.getChars(ch,    start,    end,    letters);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
49	[BUG]  [BUGGY]  chars  =  random.getChars(ch,  start,  end,  letters,  numbers);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  chars  =  random.getChars(ch,  start,  end,  letters,  numbers);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(ch,  start,  end,  letters,  numbers);	  chars    =    random.getChars(ch,    start,    end,    letters);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
50	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  buffer.length,  count);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  buffer.length,  count);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  0,  buffer.length,  count);	  char[]    buffer    =    random.getChars(count,    0,    buffer.length,    count);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
51	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(start,  0,  buffer.length,  count);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(start,  0,  buffer.length,  count);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(start,  0,  buffer.length,  count);	  char[]    buffer    =    random.getChars(count,    0,    buffer.length,    count);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
52	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(count,  0,  buffer.length,  start);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(count,  0,  buffer.length,  start);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(count,  0,  buffer.length,  start);	  char[]    buffer    =    random.getChars(count,    0,    buffer.length,    count);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
53	[BUG]  [BUGGY]  Random  random  =  random.nullValue(count);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  Random  random  =  random.nullValue(count);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	Random  random  =  random.nullValue(count);	  Random    random    =    random.nullValue(ch);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
54	[BUG]  [BUGGY]  Random  random  =  random.nullValue(ch,  count);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  Random  random  =  random.nullValue(ch,  count);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	Random  random  =  random.nullValue(ch,  count);	  Random    random    =    random.nullValue(ch);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
55	[BUG]  [BUGGY]  Random  random  =  random.nullValue(buffer,  count);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  Random  random  =  random.nullValue(buffer,  count);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	Random  random  =  random.nullValue(buffer,  count);	  Random    random    =    random.nullValue(ch);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
56	[BUG]  [BUGGY]  Random  random  =  random.nullValue(buffer,  0,  buffer.length);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  Random  random  =  random.nullValue(buffer,  0,  buffer.length);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	Random  random  =  random.nullValue(buffer,  0,  buffer.length);	  Random    random    =    random.nullValue(ch);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
57	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  start,  end,  chars.length);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  start,  end,  chars.length);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  0,  start,  end,  chars.length);	  char[]    buffer    =    random.getChars(ch,    start,    end,    chars.length);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
58	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  end,  chars.length);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  end,  chars.length);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  0,  end,  chars.length);	  char[]    buffer    =    random.getChars(ch,    start,    end,    chars.length);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
59	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  end,  0,  chars.length);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  end,  0,  chars.length);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  start,  end,  0,  chars.length);	  char[]    buffer    =    random.getChars(ch,    start,    end,    chars.length);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
60	[BUG]  [BUGGY]  Random  random  =  new  Random(random.nullValue(),  count);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  Random  random  =  new  Random(random.nullValue(),  count);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	Random  random  =  new  Random(random.nullValue(),  count);	  Random    random    =    new    Random(random.nullValue());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
61	[BUG]  [BUGGY]  Random  random  =  new  Random(random.nullValue()  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  Random  random  =  new  Random(random.nullValue()  +  1);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	Random  random  =  new  Random(random.nullValue()  +  1);	  Random    random    =    new    Random(random.nullValue());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
62	[BUG]  [BUGGY]  Random  random  =  new  Random(random.nullValue()  +  count);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  Random  random  =  new  Random(random.nullValue()  +  count);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	Random  random  =  new  Random(random.nullValue()  +  count);	  Random    random    =    new    Random(random.nullValue());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
63	[BUG]  [BUGGY]  chars  =  random.getChars(start,  end,  buffer,  ch);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  chars  =  random.getChars(start,  end,  buffer,  ch);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(start,  end,  buffer,  ch);	  chars    =    random.getChars(start,    end,    ch);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
64	[BUG]  [BUGGY]  chars  =  random.getChars(count,  start,  end,  letters);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  chars  =  random.getChars(count,  start,  end,  letters);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(count,  start,  end,  letters);	  chars    =    random.getChars(count,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
65	[BUG]  [BUGGY]  chars  =  random.getChars(0,  start,  end);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  chars  =  random.getChars(0,  start,  end);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(0,  start,  end);	  chars    =    random.getChars(count,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
66	[BUG]  [BUGGY]  chars  =  random.getChars(start,  end,  count);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  chars  =  random.getChars(start,  end,  count);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(start,  end,  count);	  chars    =    random.getChars(count,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
67	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  start  +  1,  count);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(ch,  start  +  1,  count);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  start  +  1,  count);	  char[]    buffer    =    random.getChars(ch,    start    +    count);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
68	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  start  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(ch,  start  +  1);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  start  +  1);	  char[]    buffer    =    random.getChars(ch,    start    +    count);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
69	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  start  +  count,  letters);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(ch,  start  +  count,  letters);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  start  +  count,  letters);	  char[]    buffer    =    random.getChars(ch,    start    +    count);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
70	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  end  +  count);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(ch,  end  +  count);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  end  +  count);	  char[]    buffer    =    random.getChars(ch,    start    +    count);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
71	[BUG]  [BUGGY]  chars  =  random.getChars(ch,  start,  end,  buffer,  numbers);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  chars  =  random.getChars(ch,  start,  end,  buffer,  numbers);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(ch,  start,  end,  buffer,  numbers);	  chars    =    random.getChars(ch,    start,    end,    numbers);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
72	[BUG]  [BUGGY]  chars  =  random.getChars(ch,  start,  end,  buffer,  number);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  chars  =  random.getChars(ch,  start,  end,  buffer,  number);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(ch,  start,  end,  buffer,  number);	  chars    =    random.getChars(ch,    start,    end,    numbers);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
73	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  end,  count,  letters);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  end,  count,  letters);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  start,  end,  count,  letters);	  char[]    buffer    =    random.getChars(ch,    start,    end,    letters);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
74	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  end,  letters,  numbers);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  end,  letters,  numbers);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  start,  end,  letters,  numbers);	  char[]    buffer    =    random.getChars(ch,    start,    end,    letters);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
75	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  0,  count);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  0,  count);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  start,  0,  count);	  char[]    buffer    =    random.getChars(start,    0,    count);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
76	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(count,  end,  start);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(count,  end,  start);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(count,  end,  start);	  char[]    buffer    =    random.getChars(start,    end,    count);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
77	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  end  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  end  +  1);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  0,  end  +  1);	  char[]    buffer    =    random.getChars(ch,    0,    start    +    1);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
78	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(count,  0,  start  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(count,  0,  start  +  1);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(count,  0,  start  +  1);	  char[]    buffer    =    random.getChars(ch,    0,    start    +    1);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
79	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  end,  count  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  end,  count  +  1);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  start,  end,  count  +  1);	  char[]    buffer    =    random.getChars(ch,    start,    end,    count);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
80	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  end,  offset,  count);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  end,  offset,  count);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  start,  end,  offset,  count);	  char[]    buffer    =    random.getChars(ch,    start,    end,    count);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
81	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(count,  0,  ch);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(count,  0,  ch);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(count,  0,  ch);	  char[]    buffer    =    random.getChars(start,    0,    ch);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
82	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(buffer,  0,  ch);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(buffer,  0,  ch);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(buffer,  0,  ch);	  char[]    buffer    =    random.getChars(start,    0,    ch);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
83	[BUG]  [BUGGY]  chars  =  random.getChars(ch,  0,  start,  end,  letters);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  chars  =  random.getChars(ch,  0,  start,  end,  letters);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(ch,  0,  start,  end,  letters);	  chars    =    random.getChars(ch,    0,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
84	[BUG]  [BUGGY]  chars  =  random.getChars(count,  0,  start,  end);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  chars  =  random.getChars(count,  0,  start,  end);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(count,  0,  start,  end);	  chars    =    random.getChars(ch,    0,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
85	[BUG]  [BUGGY]  chars  =  random.getChars(ch,  0,  count,  end);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  chars  =  random.getChars(ch,  0,  count,  end);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(ch,  0,  count,  end);	  chars    =    random.getChars(ch,    0,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
86	[BUG]  [BUGGY]  chars  =  random.getChars(ch,  0,  buffer,  start,  end);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  chars  =  random.getChars(ch,  0,  buffer,  start,  end);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(ch,  0,  buffer,  start,  end);	  chars    =    random.getChars(ch,    0,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
87	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(start,  end  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(start,  end  +  1);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(start,  end  +  1);	  char[]    buffer    =    random.getChars(start,    end    +    count);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
88	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(count,  start  +  end);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(count,  start  +  end);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(count,  start  +  end);	  char[]    buffer    =    random.getChars(start,    end    +    count);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
89	[BUG]  [BUGGY]  chars  =  random.getChars(0,  0,  count);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  chars  =  random.getChars(0,  0,  count);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(0,  0,  count);	  chars    =    random.getChars(0,    0,    end);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
90	[BUG]  [BUGGY]  chars  =  random.getChars(0);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  chars  =  random.getChars(0);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(0);	  chars    =    random.getChars(0,    0,    end);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
91	[BUG]  [BUGGY]  chars  =  random.getChars(0,  0,  buffer.length);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  chars  =  random.getChars(0,  0,  buffer.length);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(0,  0,  buffer.length);	  chars    =    random.getChars(0,    0,    end);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
92	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  end,  offset,  numbers);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  end,  offset,  numbers);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  start,  end,  offset,  numbers);	  char[]    buffer    =    random.getChars(ch,    start,    end,    numbers);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
93	[BUG]  [BUGGY]  chars  =  random.getChars(0,  0,  count,  end);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  chars  =  random.getChars(0,  0,  count,  end);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(0,  0,  count,  end);	  chars    =    random.getChars(0,    0,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
94	[BUG]  [BUGGY]  chars  =  random.getChars(0,  0,  buffer,  start,  end);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  chars  =  random.getChars(0,  0,  buffer,  start,  end);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(0,  0,  buffer,  start,  end);	  chars    =    random.getChars(0,    0,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
95	[BUG]  [BUGGY]  chars  =  random.getChars(0,  0,  count,  start,  end);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  chars  =  random.getChars(0,  0,  count,  start,  end);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(0,  0,  count,  start,  end);	  chars    =    random.getChars(0,    0,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
96	[BUG]  [BUGGY]  chars  =  random.getChars(0,  0,  start,  end,  letters);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  chars  =  random.getChars(0,  0,  start,  end,  letters);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(0,  0,  start,  end,  letters);	  chars    =    random.getChars(0,    0,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
97	[BUG]  [BUGGY]  Random  random  =  random.nullValue(),  count  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  Random  random  =  random.nullValue(),  count  +  1;  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	Random  random  =  random.nullValue(),  count  +  1;	  Random    random    =    random.nullValue(),    count;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
98	[BUG]  [BUGGY]  Random  random  =  random.nullValue(),  0,  count;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  Random  random  =  random.nullValue(),  0,  count;  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	Random  random  =  random.nullValue(),  0,  count;	  Random    random    =    random.nullValue(),    count;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
99	[BUG]  [BUGGY]  Random  random  =  random.nullValue(),  buffer,  count;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  Random  random  =  random.nullValue(),  buffer,  count;  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	Random  random  =  random.nullValue(),  buffer,  count;	  Random    random    =    random.nullValue(),    count;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
100	[BUG]  [BUGGY]  Random  random  =  random.nullValue(),  start,  count;  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  Random  random  =  random.nullValue(),  start,  count;  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	Random  random  =  random.nullValue(),  start,  count;	  Random    random    =    random.nullValue(),    count;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
101	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(0,  count  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(0,  count  +  1);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(0,  count  +  1);	  char[]    buffer    =    random.getChars(0,    count);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
102	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(0,  count  -  1);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(0,  count  -  1);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(0,  count  -  1);	  char[]    buffer    =    random.getChars(0,    count);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
103	[BUG]  [BUGGY]  Random  random  =  random.nullValue()  /  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  Random  random  =  random.nullValue()  /  1;  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	Random  random  =  random.nullValue()  /  1;	  Random    random    =    random.nullValue()    +    1;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
104	[BUG]  [BUGGY]  chars  =  random.getChars(ch,  start,  end,  buffer,  count);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  chars  =  random.getChars(ch,  start,  end,  buffer,  count);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(ch,  start,  end,  buffer,  count);	  chars    =    random.getChars(ch,    start,    end,    buffer);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
105	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  <  =  1)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  if(chars  ==  null  ||  chars.length  <  =  1)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	if(chars  ==  null  ||  chars.length  <  =  1)  {	  if(chars    ==    null    ||    chars.length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
106	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  start  +  start);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(ch,  start  +  start);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  start  +  start);	  char[]    buffer    =    random.getChars(count,    start    +    start);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
107	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(count,  start  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(count,  start  +  1);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(count,  start  +  1);	  char[]    buffer    =    random.getChars(count,    start    +    start);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
108	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(count,  start  +  1,  end);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(count,  start  +  1,  end);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(count,  start  +  1,  end);	  char[]    buffer    =    random.getChars(count,    start    +    start);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
109	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(start,  end  +  1,  count);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(start,  end  +  1,  count);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(start,  end  +  1,  count);	  char[]    buffer    =    random.getChars(start,    start    +    1,    count);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
110	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(count,  start  +  1,  start);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(count,  start  +  1,  start);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(count,  start  +  1,  start);	  char[]    buffer    =    random.getChars(start,    start    +    1,    count);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
111	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(0,  start  +  1,  count);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(0,  start  +  1,  count);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(0,  start  +  1,  count);	  char[]    buffer    =    random.getChars(start,    start    +    1,    count);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
112	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(0,  start  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(0,  start  +  1);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(0,  start  +  1);	  char[]    buffer    =    random.getChars(start,    start    +    1);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
113	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(0,  start);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(0,  start);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(0,  start);	  char[]    buffer    =    random.getChars(count,    start);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
114	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  0,  buffer.length);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  0,  buffer.length);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  start,  0,  buffer.length);	  char[]    buffer    =    random.getChars(start,    0,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
115	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  start.length);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  start.length);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  0,  start.length);	  char[]    buffer    =    random.getChars(start,    0,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
116	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(0,  start  +  count,  end);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(0,  start  +  count,  end);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(0,  start  +  count,  end);	  char[]    buffer    =    random.getChars(0,    start    +    count);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
117	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  end,  ch);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  end,  ch);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  start,  end,  ch);	  char[]    buffer    =    random.getChars(start,    start,    end,    ch);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
118	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  end,  chars);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  end,  chars);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  start,  end,  chars);	  char[]    buffer    =    random.getChars(start,    start,    end,    ch);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
119	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(0,  end,  count);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(0,  end,  count);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(0,  end,  count);	  char[]    buffer    =    random.getChars(0,    start,    count);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
120	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(0,  start,  0,  count);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(0,  start,  0,  count);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(0,  start,  0,  count);	  char[]    buffer    =    random.getChars(0,    start,    count);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
121	[BUG]  [BUGGY]  chars  =  random.getChars(start,  end,  buffer,  start);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  chars  =  random.getChars(start,  end,  buffer,  start);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(start,  end,  buffer,  start);	  chars    =    random.getChars(start,    end,    start);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
122	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(0,  ch);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(0,  ch);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(0,  ch);	  char[]    buffer    =    random.getChars(count,    ch);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
123	[BUG]  [BUGGY]  Random  random  =  random.nullValue(buffer,  0,  count);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  Random  random  =  random.nullValue(buffer,  0,  count);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	Random  random  =  random.nullValue(buffer,  0,  count);	  Random    random    =    random.nullValue(ch);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
124	[BUG]  [BUGGY]  Random  random  =  random.nullValue(ch,  start);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  Random  random  =  random.nullValue(ch,  start);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	Random  random  =  random.nullValue(ch,  start);	  Random    random    =    random.nullValue(ch);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
125	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(count,  start,  ch);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(count,  start,  ch);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(count,  start,  ch);	  char[]    buffer    =    random.getChars(count,    ch);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
126	[BUG]  [BUGGY]  Random  random  =  random.nullValue(),  start;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  Random  random  =  random.nullValue(),  start;  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	Random  random  =  random.nullValue(),  start;	  Random    random    =    random.nullValue(),    count;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
127	[BUG]  [BUGGY]  chars  =  random.getChars(count,  start,  end,  buffer);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  chars  =  random.getChars(count,  start,  end,  buffer);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(count,  start,  end,  buffer);	  chars    =    random.getChars(count,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
128	[BUG]  [BUGGY]  chars  =  random.getChars(start,  end,  chars);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  chars  =  random.getChars(start,  end,  chars);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(start,  end,  chars);	  chars    =    random.getChars(count,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
129	[BUG]  [BUGGY]  chars  =  random.getChars(start,  start,  end,  buffer,  ch);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  chars  =  random.getChars(start,  start,  end,  buffer,  ch);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(start,  start,  end,  buffer,  ch);	  chars    =    random.getChars(start,    start,    end,    ch);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
130	[BUG]  [BUGGY]  chars  =  random.getChars(0,  0,  start,  end,  count);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  chars  =  random.getChars(0,  0,  start,  end,  count);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(0,  0,  start,  end,  count);	  chars    =    random.getChars(0,    0,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
131	[BUG]  [BUGGY]  chars  =  random.getChars(0,  0,  start,  end,  buffer.length);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  chars  =  random.getChars(0,  0,  start,  end,  buffer.length);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(0,  0,  start,  end,  buffer.length);	  chars    =    random.getChars(0,    0,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
132	[BUG]  [BUGGY]  chars  =  random.getChars(0,  0,  start,  end,  buffer);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  chars  =  random.getChars(0,  0,  start,  end,  buffer);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(0,  0,  start,  end,  buffer);	  chars    =    random.getChars(0,    0,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
133	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(start,  end,  chars.length);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(start,  end,  chars.length);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(start,  end,  chars.length);	  char[]    buffer    =    random.getChars(start,    end,    start);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
134	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  end,  chars,  letters);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  end,  chars,  letters);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  start,  end,  chars,  letters);	  char[]    buffer    =    random.getChars(ch,    start,    end,    letters);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
135	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  end,  0,  letters);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  end,  0,  letters);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  start,  end,  0,  letters);	  char[]    buffer    =    random.getChars(ch,    start,    end,    letters);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
136	[BUG]  [BUGGY]  chars  =  random.getChars(ch,  0,  start,  end,  buffer.length);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  chars  =  random.getChars(ch,  0,  start,  end,  buffer.length);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(ch,  0,  start,  end,  buffer.length);	  chars    =    random.getChars(ch,    0,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
137	[BUG]  [BUGGY]  chars  =  random.getChars(ch,  0,  start,  end,  buffer);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  chars  =  random.getChars(ch,  0,  start,  end,  buffer);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(ch,  0,  start,  end,  buffer);	  chars    =    random.getChars(ch,    0,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
138	[BUG]  [BUGGY]  chars  =  random.getChars(ch,  0,  start,  end,  count);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  chars  =  random.getChars(ch,  0,  start,  end,  count);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(ch,  0,  start,  end,  count);	  chars    =    random.getChars(ch,    0,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
139	[BUG]  [BUGGY]  Random  random  =  random.nullValue()  -  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  Random  random  =  random.nullValue()  -  1;  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	Random  random  =  random.nullValue()  -  1;	  Random    random    =    random.nullValue()    +    1;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
140	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(start,  start  +  1,  end);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(start,  start  +  1,  end);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(start,  start  +  1,  end);	  char[]    buffer    =    random.getChars(start,    start    +    1,    count);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
141	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(start,  end,  0);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(start,  end,  0);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(start,  end,  0);	  char[]    buffer    =    random.getChars(start,    end,    count);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
142	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(start,  end,  0,  count);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(start,  end,  0,  count);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(start,  end,  0,  count);	  char[]    buffer    =    random.getChars(start,    end,    count);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
143	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  start  +  1,  count);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  start  +  1,  count);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  0,  start  +  1,  count);	  char[]    buffer    =    random.getChars(ch,    0,    start    +    1);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
144	[BUG]  [BUGGY]  chars  =  random.getChars(ch,  start,  end,  buffer,  bits);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  chars  =  random.getChars(ch,  start,  end,  buffer,  bits);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(ch,  start,  end,  buffer,  bits);	  chars    =    random.getChars(ch,    start,    end,    letters);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
145	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(0,  0,  start,  end,  ch);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(0,  0,  start,  end,  ch);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(0,  0,  start,  end,  ch);	  char[]    buffer    =    random.getChars(0,    0,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
146	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(0,  0,  start,  end  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(0,  0,  start,  end  +  1);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(0,  0,  start,  end  +  1);	  char[]    buffer    =    random.getChars(0,    0,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
147	[BUG]  [BUGGY]  if(chars  ==  null  ||  ch  ==  'n'  ||  ch  >=  'r')  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  if(chars  ==  null  ||  ch  ==  'n'  ||  ch  >=  'r')  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	if(chars  ==  null  ||  ch  ==  'n'  ||  ch  >=  'r')  {	  if(chars    ==    null    ||    ch    ==    'n'    ||    ch    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
148	[BUG]  [BUGGY]  chars  =  random.getChars(start,  end,  chars.length);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  chars  =  random.getChars(start,  end,  chars.length);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(start,  end,  chars.length);	  chars    =    random.getChars(start,    end,    start);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
149	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(start,  start  +  1,  ch);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(start,  start  +  1,  ch);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(start,  start  +  1,  ch);	  char[]    buffer    =    random.getChars(start,    start    +    count,    ch);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
150	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(start,  start  +  count,  ch,  0);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(start,  start  +  count,  ch,  0);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(start,  start  +  count,  ch,  0);	  char[]    buffer    =    random.getChars(start,    start    +    count,    ch);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
151	[BUG]  [BUGGY]  Random  random  =  randomUtils.nullValue();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  Random  random  =  randomUtils.nullValue();  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	Random  random  =  randomUtils.nullValue();	  Random    random    =    RANDOM.nullValue();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
152	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(start,  end,  ch,  0);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(start,  end,  ch,  0);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(start,  end,  ch,  0);	  char[]    buffer    =    random.getChars(start,    end,    ch);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
153	[BUG]  [BUGGY]  chars  =  random.getChars(ch,  start,  end,  buffer,  0,  count);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  chars  =  random.getChars(ch,  start,  end,  buffer,  0,  count);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(ch,  start,  end,  buffer,  0,  count);	  chars    =    random.getChars(ch,    start,    end,    buffer);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
154	[BUG]  [BUGGY]  chars  =  random.getChars(start,  end,  buffer,  count);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  chars  =  random.getChars(start,  end,  buffer,  count);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(start,  end,  buffer,  count);	  chars    =    random.getChars(ch,    start,    end,    buffer);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
155	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(0,  start,  random.length);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(0,  start,  random.length);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(0,  start,  random.length);	  char[]    buffer    =    random.getChars(0,    0,    random.length);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
156	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(start,  0,  random.length);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(start,  0,  random.length);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(start,  0,  random.length);	  char[]    buffer    =    random.getChars(0,    0,    random.length);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
157	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(0,  start,  end,  ch);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(0,  start,  end,  ch);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(0,  start,  end,  ch);	  char[]    buffer    =    random.getChars(0,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
158	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(0,  start,  end  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(0,  start,  end  +  1);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(0,  start,  end  +  1);	  char[]    buffer    =    random.getChars(0,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
159	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(start,  end,  start,  ch);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(start,  end,  start,  ch);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(start,  end,  start,  ch);	  char[]    buffer    =    random.getChars(start,    start,    end,    ch);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
160	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(start,  end,  buffer.length  +  count);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(start,  end,  buffer.length  +  count);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(start,  end,  buffer.length  +  count);	  char[]    buffer    =    random.getChars(start,    end    +    count);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
161	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(start,  ch,  count);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(start,  ch,  count);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(start,  ch,  count);	  char[]    buffer    =    random.getChars(ch,    start,    count);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
162	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(0,  0,  random.length,  count);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(0,  0,  random.length,  count);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(0,  0,  random.length,  count);	  char[]    buffer    =    random.getChars(count,    0,    buffer.length,    count);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
163	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  count  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  count  +  1);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  start,  count  +  1);	  char[]    buffer    =    random.getChars(ch,    0,    count    +    1);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
164	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(start,  0,  count  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(start,  0,  count  +  1);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(start,  0,  count  +  1);	  char[]    buffer    =    random.getChars(ch,    0,    count    +    1);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
165	[BUG]  [BUGGY]  chars  =  random.getChars(0,  0,  start);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  chars  =  random.getChars(0,  0,  start);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(0,  0,  start);	  chars    =    random.getChars(0,    0,    end);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
166	[BUG]  [BUGGY]  chars  =  random.getChars(start,  0,  end);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  chars  =  random.getChars(start,  0,  end);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(start,  0,  end);	  chars    =    random.getChars(0,    0,    end);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
167	[BUG]  [BUGGY]  if(chars  >=  null)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  if(chars  >=  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	if(chars  >=  null)  {	  if(chars!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
168	[BUG]  [BUGGY]  if(chars!=  random)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  if(chars!=  random)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	if(chars!=  random)  {	  if(chars!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
169	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars0(start,  end,  count);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars0(start,  end,  count);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars0(start,  end,  count);	  char[]    buffer    =    random.getChars(0,    start,    count);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
170	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(0,  start,  count,  ch);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(0,  start,  count,  ch);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(0,  start,  count,  ch);	  char[]    buffer    =    random.getChars(0,    start,    count);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
171	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  buffer.length);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  buffer.length);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  start,  buffer.length);	  char[]    buffer    =    random.getChars(ch,    0,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
172	[BUG]  [BUGGY]  Random  random  =  random.nullValue(),  ch;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  Random  random  =  random.nullValue(),  ch;  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	Random  random  =  random.nullValue(),  ch;	  Random    random    =    random.nullValue(),    count;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
173	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  start  +  1,  end);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(ch,  start  +  1,  end);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  start  +  1,  end);	  char[]    buffer    =    random.getChars(ch,    start    +    count);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
174	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(count,  0,  buffer.length,  ch);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(count,  0,  buffer.length,  ch);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(count,  0,  buffer.length,  ch);	  char[]    buffer    =    random.getChars(count,    0,    buffer.length,    count);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
175	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  <  2)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  if(chars  ==  null  ||  chars.length  <  2)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	if(chars  ==  null  ||  chars.length  <  2)  {	  if(chars    ==    null    ||    chars.length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
176	[BUG]  [BUGGY]  if(chars!=  null  ||  chars.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  if(chars!=  null  ||  chars.length  <  =  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	if(chars!=  null  ||  chars.length  <  =  0)  {	  if(chars    ==    null    ||    chars.length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
177	[BUG]  [BUGGY]  chars  =  random.getChars(0,  0,  ch);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  chars  =  random.getChars(0,  0,  ch);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(0,  0,  ch);	  chars    =    random.getChars(start,    end,    ch);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
178	[BUG]  [BUGGY]  Char[]  buffer  =  random.getChars(0,  start,  end);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  Char[]  buffer  =  random.getChars(0,  start,  end);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	Char[]  buffer  =  random.getChars(0,  start,  end);	  char[]    buffer    =    random.getChars(0,    start,    count);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
179	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(count,  start,  count);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(count,  start,  count);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(count,  start,  count);	  char[]    buffer    =    random.getChars(ch,    start,    count);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
180	[BUG]  [BUGGY]  chars  =  random.getChars(ch,  start,  end,  buffer,  offset);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  chars  =  random.getChars(ch,  start,  end,  buffer,  offset);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(ch,  start,  end,  buffer,  offset);	  chars    =    random.getChars(ch,    start,    end,    buffer);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
181	[BUG]  [BUGGY]  chars  =  random.getChars(ch,  start,  end,  buffer,  0);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  chars  =  random.getChars(ch,  start,  end,  buffer,  0);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(ch,  start,  end,  buffer,  0);	  chars    =    random.getChars(ch,    start,    end,    buffer);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
182	[BUG]  [BUGGY]  chars  =  random.getChars(ch,  start,  end,  buffer,  null);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  chars  =  random.getChars(ch,  start,  end,  buffer,  null);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(ch,  start,  end,  buffer,  null);	  chars    =    random.getChars(ch,    start,    end,    numbers);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
183	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(0,  0,  start,  end,  letters);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(0,  0,  start,  end,  letters);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(0,  0,  start,  end,  letters);	  char[]    buffer    =    random.getChars(0,    0,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
184	[BUG]  [BUGGY]  Random  random  =  random.nullValue(ch,  RANDOM);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  Random  random  =  random.nullValue(ch,  RANDOM);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	Random  random  =  random.nullValue(ch,  RANDOM);	  Random    random    =    random.nullValue(ch);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
185	[BUG]  [BUGGY]  Random  random  =  random.nullValue(ch,  0,  count);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  Random  random  =  random.nullValue(ch,  0,  count);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	Random  random  =  random.nullValue(ch,  0,  count);	  Random    random    =    random.nullValue(ch);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
186	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(count,  start  +  count,  ch);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(count,  start  +  count,  ch);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(count,  start  +  count,  ch);	  char[]    buffer    =    random.getChars(start,    start    +    count,    ch);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
187	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(count,  start  +  count);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(count,  start  +  count);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(count,  start  +  count);	  char[]    buffer    =    random.getChars(start,    end    +    count);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
188	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  end,  chars,  chars.length);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  end,  chars,  chars.length);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  start,  end,  chars,  chars.length);	  char[]    buffer    =    random.getChars(ch,    start,    end,    chars.length);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
189	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  end  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  end  +  1);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  start,  end  +  1);	  char[]    buffer    =    random.getChars(ch,    0,    start    +    1);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
190	[BUG]  [BUGGY]  chars  =  random.getChars(ch,  start,  end,  ch);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  chars  =  random.getChars(ch,  start,  end,  ch);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(ch,  start,  end,  ch);	  chars    =    random.getChars(start,    start,    end,    ch);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
191	[BUG]  [BUGGY]  chars  =  random.getChars(ch,  start,  end,  0);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  chars  =  random.getChars(ch,  start,  end,  0);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(ch,  start,  end,  0);	  chars    =    random.getChars(start,    start,    end,    ch);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
192	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  chars  ==  'r')  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  if(ch  ==  'n'  ||  chars  ==  'r')  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	if(ch  ==  'n'  ||  chars  ==  'r')  {	  if(chars    ==    null    ||    ch    ==    'n'    ||    ch    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
193	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	if(ch  ==  'n'  ||  ch  ==  'r')  {	  if(chars    ==    null    ||    ch    ==    'n'    ||    ch    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
194	[BUG]  [BUGGY]  chars  =  random.getChars(0,  0,  start,  end,  ch);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  chars  =  random.getChars(0,  0,  start,  end,  ch);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(0,  0,  start,  end,  ch);	  chars    =    random.getChars(0,    0,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
195	[BUG]  [BUGGY]  chars  =  random.getChars(0,  0,  buffer.length,  end);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  chars  =  random.getChars(0,  0,  buffer.length,  end);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(0,  0,  buffer.length,  end);	  chars    =    random.getChars(0,    0,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
196	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  chars.length);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  chars.length);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  0,  chars.length);	  char[]    buffer    =    random.getChars(ch,    0,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
197	[BUG]  [BUGGY]  if  (chars!=  null  ||  chars.length!=  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  if  (chars!=  null  ||  chars.length!=  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	if  (chars!=  null  ||  chars.length!=  0)  {	  if    (chars    ==    null    ||    chars.length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
198	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(count,  0,  start,  end);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return       "     ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(     "Requested  random  string  length       "  +  count  +       "  is  less  than  0.     ");  }      [BUGGY]  char[]  buffer  =  random.getChars(count,  0,  start,  end);  [BUGGY]      if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(     "The  chars  array  must  not  be  empty     ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(count,  0,  start,  end);	  char[]    buffer    =    random.getChars(ch,    0,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
