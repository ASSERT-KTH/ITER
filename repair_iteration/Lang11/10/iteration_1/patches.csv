bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Random  random  =  random.nullValue()  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  Random  random  =  random.nullValue()  +  1;  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	Random  random  =  random.nullValue()  +  1;	      Random    random    =    random.nullValue();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
2	[BUG]  [BUGGY]  Random  random  =  random.nullValue(),  count;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  Random  random  =  random.nullValue(),  count;  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	Random  random  =  random.nullValue(),  count;	      Random    random    =    random.nullValue();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
3	[BUG]  [BUGGY]  Random  random  =  RANDOM.nullValue();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  Random  random  =  RANDOM.nullValue();  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	Random  random  =  RANDOM.nullValue();	      Random    random    =    random.nullValue();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
4	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  end,  letters);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  end,  letters);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  start,  end,  letters);	      char[]    buffer    =    random.getChars(ch,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
5	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  start,  end);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  start,  end);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  0,  start,  end);	      char[]    buffer    =    random.getChars(ch,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
6	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  end);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  end);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  0,  end);	      char[]    buffer    =    random.getChars(ch,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
7	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  end,  numbers);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  end,  numbers);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  start,  end,  numbers);	      char[]    buffer    =    random.getChars(ch,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
8	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(start,  0,  ch);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  char[]  buffer  =  random.getChars(start,  0,  ch);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(start,  0,  ch);	      char[]    buffer    =    random.getChars(ch,    0,    start);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
9	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(count,  0,  start);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  char[]  buffer  =  random.getChars(count,  0,  start);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(count,  0,  start);	      char[]    buffer    =    random.getChars(ch,    0,    start);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
10	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  count);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  count);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  start,  count);	      char[]    buffer    =    random.getChars(start,    start,    count);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
11	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(count,  start,  start);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  char[]  buffer  =  random.getChars(count,  start,  start);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(count,  start,  start);	      char[]    buffer    =    random.getChars(start,    start,    count);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
12	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(start,  end,  count);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  char[]  buffer  =  random.getChars(start,  end,  count);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(start,  end,  count);	      char[]    buffer    =    random.getChars(start,    start,    count);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
13	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(0,  start,  count);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  char[]  buffer  =  random.getChars(0,  start,  count);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(0,  start,  count);	      char[]    buffer    =    random.getChars(start,    start,    count);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
14	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(count,  start,  end);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  char[]  buffer  =  random.getChars(count,  start,  end);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(count,  start,  end);	      char[]    buffer    =    random.getChars(start,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
15	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(0,  0,  start,  end);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  char[]  buffer  =  random.getChars(0,  0,  start,  end);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(0,  0,  start,  end);	      char[]    buffer    =    random.getChars(start,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
16	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(0,  0,  end);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  char[]  buffer  =  random.getChars(0,  0,  end);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(0,  0,  end);	      char[]    buffer    =    random.getChars(start,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
17	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  char[]  buffer  =  random.getChars(ch);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch);	      char[]    buffer    =    random.getChars(count);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
18	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  count);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  char[]  buffer  =  random.getChars(ch,  count);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  count);	      char[]    buffer    =    random.getChars(count);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
19	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(0,  count);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  char[]  buffer  =  random.getChars(0,  count);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(0,  count);	      char[]    buffer    =    random.getChars(count);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
20	[BUG]  [BUGGY]  if  (chars  ==  null  ||  chars.length!=  0)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  if  (chars  ==  null  ||  chars.length!=  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	if  (chars  ==  null  ||  chars.length!=  0)  {	  if    (chars!=    null    ||    chars.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
21	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(start,  0,  buffer.length);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  char[]  buffer  =  random.getChars(start,  0,  buffer.length);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(start,  0,  buffer.length);	      char[]    buffer    =    random.getChars(count,    0,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
22	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  buffer.length);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  buffer.length);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  0,  buffer.length);	      char[]    buffer    =    random.getChars(count,    0,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
23	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(0,  0,  count);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  char[]  buffer  =  random.getChars(0,  0,  count);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(0,  0,  count);	      char[]    buffer    =    random.getChars(count,    0,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
24	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(count,  start);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  char[]  buffer  =  random.getChars(count,  start);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(count,  start);	      char[]    buffer    =    random.getChars(start,    count);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
25	[BUG]  [BUGGY]  chars  =  random.getChars(ch,  start,  end,  letters);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  chars  =  random.getChars(ch,  start,  end,  letters);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(ch,  start,  end,  letters);	      chars    =    random.getChars(ch,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
26	[BUG]  [BUGGY]  chars  =  random.getChars(count,  start,  end);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  chars  =  random.getChars(count,  start,  end);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(count,  start,  end);	      chars    =    random.getChars(ch,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
27	[BUG]  [BUGGY]  chars  =  random.getChars(ch,  0,  start,  end);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  chars  =  random.getChars(ch,  0,  start,  end);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(ch,  0,  start,  end);	      chars    =    random.getChars(ch,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
28	[BUG]  [BUGGY]  chars  =  random.getChars(ch,  start,  end,  numbers);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  chars  =  random.getChars(ch,  start,  end,  numbers);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(ch,  start,  end,  numbers);	      chars    =    random.getChars(ch,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
29	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  count  +  1);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  count  +  1);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  0,  count  +  1);	      char[]    buffer    =    random.getChars(ch,    0,    count);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
30	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  start,  count);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  start,  count);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  0,  start,  count);	      char[]    buffer    =    random.getChars(ch,    0,    count);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
31	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(start,  0,  count);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  char[]  buffer  =  random.getChars(start,  0,  count);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(start,  0,  count);	      char[]    buffer    =    random.getChars(ch,    0,    count);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
32	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(start,  end  +  count);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  char[]  buffer  =  random.getChars(start,  end  +  count);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(start,  end  +  count);	      char[]    buffer    =    random.getChars(start,    start    +    count);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
33	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  start  +  count);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  char[]  buffer  =  random.getChars(ch,  start  +  count);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  start  +  count);	      char[]    buffer    =    random.getChars(start,    start    +    count);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
34	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(count,  start  +  start);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  char[]  buffer  =  random.getChars(count,  start  +  start);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(count,  start  +  start);	      char[]    buffer    =    random.getChars(start,    start    +    count);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
35	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(0,  start  +  count);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  char[]  buffer  =  random.getChars(0,  start  +  count);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(0,  start  +  count);	      char[]    buffer    =    random.getChars(start,    start    +    count);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
36	[BUG]  [BUGGY]  chars  =  random.getChars(0,  0,  end);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  chars  =  random.getChars(0,  0,  end);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(0,  0,  end);	      chars    =    random.getChars(start,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
37	[BUG]  [BUGGY]  chars  =  random.getChars(0,  0,  start,  end);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  chars  =  random.getChars(0,  0,  start,  end);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(0,  0,  start,  end);	      chars    =    random.getChars(start,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
38	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(0,  start,  end);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  char[]  buffer  =  random.getChars(0,  start,  end);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(0,  start,  end);	      char[]    buffer    =    random.getChars(start,    end);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
39	[BUG]  [BUGGY]  if(chars!=  null)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  if(chars!=  null)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	if(chars!=  null)  {	  if(chars    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
40	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(0,  0,  random.length);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  char[]  buffer  =  random.getChars(0,  0,  random.length);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(0,  0,  random.length);	      char[]    buffer    =    random.getChars(count,    0,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
41	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(count,  0,  buffer.length,  count);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  char[]  buffer  =  random.getChars(count,  0,  buffer.length,  count);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(count,  0,  buffer.length,  count);	      char[]    buffer    =    random.getChars(count,    0,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
42	[BUG]  [BUGGY]  chars  =  random.getChars(start,  end,  ch);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  chars  =  random.getChars(start,  end,  ch);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(start,  end,  ch);	      chars    =    random.getChars(ch,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
43	[BUG]  [BUGGY]  chars  =  random.getChars(ch,  start,  end,  buffer);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  chars  =  random.getChars(ch,  start,  end,  buffer);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(ch,  start,  end,  buffer);	      chars    =    random.getChars(ch,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
44	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(start,  end,  start);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  char[]  buffer  =  random.getChars(start,  end,  start);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(start,  end,  start);	      char[]    buffer    =    random.getChars(start,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
45	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(start,  start,  end,  ch);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  char[]  buffer  =  random.getChars(start,  start,  end,  ch);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(start,  start,  end,  ch);	      char[]    buffer    =    random.getChars(start,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
46	[BUG]  [BUGGY]  chars  =  random.getChars(start,  end,  start);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  chars  =  random.getChars(start,  end,  start);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(start,  end,  start);	      chars    =    random.getChars(start,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
47	[BUG]  [BUGGY]  chars  =  random.getChars(start,  start,  end,  ch);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  chars  =  random.getChars(start,  start,  end,  ch);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	chars  =  random.getChars(start,  start,  end,  ch);	      chars    =    random.getChars(start,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
48	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(start,  end,  ch);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  char[]  buffer  =  random.getChars(start,  end,  ch);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(start,  end,  ch);	      char[]    buffer    =    random.getChars(start,    end);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
49	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(start);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  char[]  buffer  =  random.getChars(start);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(start);	      char[]    buffer    =    random.getChars(count);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
50	[BUG]  [BUGGY]  Random  random  =  random.nullValue(ch);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  Random  random  =  random.nullValue(ch);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	Random  random  =  random.nullValue(ch);	      Random    random    =    random.nullValue();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
51	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  start  +  1);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  char[]  buffer  =  random.getChars(ch,  0,  start  +  1);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  0,  start  +  1);	      char[]    buffer    =    random.getChars(ch,    0,    start);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
52	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  end,  0);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  end,  0);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  start,  end,  0);	      char[]    buffer    =    random.getChars(ch,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
53	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  end,  count);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  end,  count);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  start,  end,  count);	      char[]    buffer    =    random.getChars(ch,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
54	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(start,  start  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  char[]  buffer  =  random.getChars(start,  start  +  1);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(start,  start  +  1);	      char[]    buffer    =    random.getChars(start,    start    +    count);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
55	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(start,  start  +  1,  count);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  char[]  buffer  =  random.getChars(start,  start  +  1,  count);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(start,  start  +  1,  count);	      char[]    buffer    =    random.getChars(start,    start    +    count);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
56	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(start,  start  +  count,  ch);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  char[]  buffer  =  random.getChars(start,  start  +  count,  ch);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(start,  start  +  count,  ch);	      char[]    buffer    =    random.getChars(start,    start    +    count);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
57	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  if(chars  ==  null  ||  chars.length  <  =  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	if(chars  ==  null  ||  chars.length  <  =  0)  {	  if(chars    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
58	[BUG]  [BUGGY]  if(chars  ==  null  ||  ch  ==  'n'  ||  ch  ==  'r')  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  if(chars  ==  null  ||  ch  ==  'n'  ||  ch  ==  'r')  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	if(chars  ==  null  ||  ch  ==  'n'  ||  ch  ==  'r')  {	  if(chars    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
59	[BUG]  [BUGGY]  Random  random  =  new  Random(random.nullValue());  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  Random  random  =  new  Random(random.nullValue());  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	Random  random  =  new  Random(random.nullValue());	      Random    random    =    random.nullValue();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
60	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  end,  chars.length);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  char[]  buffer  =  random.getChars(ch,  start,  end,  chars.length);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(ch,  start,  end,  chars.length);	      char[]    buffer    =    random.getChars(ch,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
61	[BUG]  [BUGGY]  char[]  buffer  =  random.getChars(count,  ch);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return     "   ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException(   "Requested  random  string  length     "  +  count  +     "  is  less  than  0.   ");  }    [BUGGY]  char[]  buffer  =  random.getChars(count,  ch);  [BUGGY]    if  (chars  !=  null  &&  chars.length  ==  0)  {  throw  new  IllegalArgumentException(   "The  chars  array  must  not  be  empty   ");  }  if  (start  ==  0  &&  end  ==  0)  {  if  (chars  !=  null)  {  end  =  chars.length;  }  else  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang11/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.4472135954999579	230	230	1	replace	char[]  buffer  =  random.getChars(count,  ch);	      char[]    buffer    =    random.getChars(count);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
